!(function (a, b) {
  "object" == typeof module && "object" == typeof module.exports
    ? (module.exports = a.document
        ? b(a, !0)
        : function (a) {
            if (!a.document)
              throw new Error("jQuery requires a window with a document");
            return b(a);
          })
    : b(a);
})("undefined" != typeof window ? window : this, function (a, b) {
  var c = [],
    d = a.document,
    e = c.slice,
    f = c.concat,
    g = c.push,
    h = c.indexOf,
    i = {},
    j = i.toString,
    k = i.hasOwnProperty,
    l = {},
    m = "1.12.4",
    n = function (a, b) {
      return new n.fn.init(a, b);
    },
    o = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
    p = /^-ms-/,
    q = /-([\da-z])/gi,
    r = function (a, b) {
      return b.toUpperCase();
    };
  (n.fn = n.prototype =
    {
      jquery: m,
      constructor: n,
      selector: "",
      length: 0,
      toArray: function () {
        return e.call(this);
      },
      get: function (a) {
        return null != a
          ? 0 > a
            ? this[a + this.length]
            : this[a]
          : e.call(this);
      },
      pushStack: function (a) {
        var b = n.merge(this.constructor(), a);
        return (b.prevObject = this), (b.context = this.context), b;
      },
      each: function (a) {
        return n.each(this, a);
      },
      map: function (a) {
        return this.pushStack(
          n.map(this, function (b, c) {
            return a.call(b, c, b);
          })
        );
      },
      slice: function () {
        return this.pushStack(e.apply(this, arguments));
      },
      first: function () {
        return this.eq(0);
      },
      last: function () {
        return this.eq(-1);
      },
      eq: function (a) {
        var b = this.length,
          c = +a + (0 > a ? b : 0);
        return this.pushStack(c >= 0 && b > c ? [this[c]] : []);
      },
      end: function () {
        return this.prevObject || this.constructor();
      },
      push: g,
      sort: c.sort,
      splice: c.splice,
    }),
    (n.extend = n.fn.extend =
      function () {
        var a,
          b,
          c,
          d,
          e,
          f,
          g = arguments[0] || {},
          h = 1,
          i = arguments.length,
          j = !1;
        for (
          "boolean" == typeof g && ((j = g), (g = arguments[h] || {}), h++),
            "object" == typeof g || n.isFunction(g) || (g = {}),
            h === i && ((g = this), h--);
          i > h;
          h++
        )
          if (null != (e = arguments[h]))
            for (d in e)
              (a = g[d]),
                (c = e[d]),
                g !== c &&
                  (j && c && (n.isPlainObject(c) || (b = n.isArray(c)))
                    ? (b
                        ? ((b = !1), (f = a && n.isArray(a) ? a : []))
                        : (f = a && n.isPlainObject(a) ? a : {}),
                      (g[d] = n.extend(j, f, c)))
                    : void 0 !== c && (g[d] = c));
        return g;
      }),
    n.extend({
      expando: "jQuery" + (m + Math.random()).replace(/\D/g, ""),
      isReady: !0,
      error: function (a) {
        throw new Error(a);
      },
      noop: function () {},
      isFunction: function (a) {
        return "function" === n.type(a);
      },
      isArray:
        Array.isArray ||
        function (a) {
          return "array" === n.type(a);
        },
      isWindow: function (a) {
        return null != a && a == a.window;
      },
      isNumeric: function (a) {
        var b = a && a.toString();
        return !n.isArray(a) && b - parseFloat(b) + 1 >= 0;
      },
      isEmptyObject: function (a) {
        var b;
        for (b in a) return !1;
        return !0;
      },
      isPlainObject: function (a) {
        var b;
        if (!a || "object" !== n.type(a) || a.nodeType || n.isWindow(a))
          return !1;
        try {
          if (
            a.constructor &&
            !k.call(a, "constructor") &&
            !k.call(a.constructor.prototype, "isPrototypeOf")
          )
            return !1;
        } catch (c) {
          return !1;
        }
        if (!l.ownFirst) for (b in a) return k.call(a, b);
        for (b in a);
        return void 0 === b || k.call(a, b);
      },
      type: function (a) {
        return null == a
          ? a + ""
          : "object" == typeof a || "function" == typeof a
          ? i[j.call(a)] || "object"
          : typeof a;
      },
      globalEval: function (b) {
        b &&
          n.trim(b) &&
          (
            a.execScript ||
            function (b) {
              a.eval.call(a, b);
            }
          )(b);
      },
      camelCase: function (a) {
        return a.replace(p, "ms-").replace(q, r);
      },
      nodeName: function (a, b) {
        return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
      },
      each: function (a, b) {
        var c,
          d = 0;
        if (s(a)) {
          for (c = a.length; c > d; d++)
            if (b.call(a[d], d, a[d]) === !1) break;
        } else for (d in a) if (b.call(a[d], d, a[d]) === !1) break;
        return a;
      },
      trim: function (a) {
        return null == a ? "" : (a + "").replace(o, "");
      },
      makeArray: function (a, b) {
        var c = b || [];
        return (
          null != a &&
            (s(Object(a))
              ? n.merge(c, "string" == typeof a ? [a] : a)
              : g.call(c, a)),
          c
        );
      },
      inArray: function (a, b, c) {
        var d;
        if (b) {
          if (h) return h.call(b, a, c);
          for (
            d = b.length, c = c ? (0 > c ? Math.max(0, d + c) : c) : 0;
            d > c;
            c++
          )
            if (c in b && b[c] === a) return c;
        }
        return -1;
      },
      merge: function (a, b) {
        var c = +b.length,
          d = 0,
          e = a.length;
        while (c > d) a[e++] = b[d++];
        if (c !== c) while (void 0 !== b[d]) a[e++] = b[d++];
        return (a.length = e), a;
      },
      grep: function (a, b, c) {
        for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++)
          (d = !b(a[f], f)), d !== h && e.push(a[f]);
        return e;
      },
      map: function (a, b, c) {
        var d,
          e,
          g = 0,
          h = [];
        if (s(a))
          for (d = a.length; d > g; g++)
            (e = b(a[g], g, c)), null != e && h.push(e);
        else for (g in a) (e = b(a[g], g, c)), null != e && h.push(e);
        return f.apply([], h);
      },
      guid: 1,
      proxy: function (a, b) {
        var c, d, f;
        return (
          "string" == typeof b && ((f = a[b]), (b = a), (a = f)),
          n.isFunction(a)
            ? ((c = e.call(arguments, 2)),
              (d = function () {
                return a.apply(b || this, c.concat(e.call(arguments)));
              }),
              (d.guid = a.guid = a.guid || n.guid++),
              d)
            : void 0
        );
      },
      now: function () {
        return +new Date();
      },
      support: l,
    }),
    "function" == typeof Symbol && (n.fn[Symbol.iterator] = c[Symbol.iterator]),
    n.each(
      "Boolean Number String Function Array Date RegExp Object Error Symbol".split(
        " "
      ),
      function (a, b) {
        i["[object " + b + "]"] = b.toLowerCase();
      }
    );
  function s(a) {
    var b = !!a && "length" in a && a.length,
      c = n.type(a);
    return "function" === c || n.isWindow(a)
      ? !1
      : "array" === c ||
          0 === b ||
          ("number" == typeof b && b > 0 && b - 1 in a);
  }
  var t = (function (a) {
    var b,
      c,
      d,
      e,
      f,
      g,
      h,
      i,
      j,
      k,
      l,
      m,
      n,
      o,
      p,
      q,
      r,
      s,
      t,
      u = "sizzle" + 1 * new Date(),
      v = a.document,
      w = 0,
      x = 0,
      y = ga(),
      z = ga(),
      A = ga(),
      B = function (a, b) {
        return a === b && (l = !0), 0;
      },
      C = 1 << 31,
      D = {}.hasOwnProperty,
      E = [],
      F = E.pop,
      G = E.push,
      H = E.push,
      I = E.slice,
      J = function (a, b) {
        for (var c = 0, d = a.length; d > c; c++) if (a[c] === b) return c;
        return -1;
      },
      K =
        "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
      L = "[\\x20\\t\\r\\n\\f]",
      M = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
      N =
        "\\[" +
        L +
        "*(" +
        M +
        ")(?:" +
        L +
        "*([*^$|!~]?=)" +
        L +
        "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" +
        M +
        "))|)" +
        L +
        "*\\]",
      O =
        ":(" +
        M +
        ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" +
        N +
        ")*)|.*)\\)|)",
      P = new RegExp(L + "+", "g"),
      Q = new RegExp("^" + L + "+|((?:^|[^\\\\])(?:\\\\.)*)" + L + "+$", "g"),
      R = new RegExp("^" + L + "*," + L + "*"),
      S = new RegExp("^" + L + "*([>+~]|" + L + ")" + L + "*"),
      T = new RegExp("=" + L + "*([^\\]'\"]*?)" + L + "*\\]", "g"),
      U = new RegExp(O),
      V = new RegExp("^" + M + "$"),
      W = {
        ID: new RegExp("^#(" + M + ")"),
        CLASS: new RegExp("^\\.(" + M + ")"),
        TAG: new RegExp("^(" + M + "|[*])"),
        ATTR: new RegExp("^" + N),
        PSEUDO: new RegExp("^" + O),
        CHILD: new RegExp(
          "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
            L +
            "*(even|odd|(([+-]|)(\\d*)n|)" +
            L +
            "*(?:([+-]|)" +
            L +
            "*(\\d+)|))" +
            L +
            "*\\)|)",
          "i"
        ),
        bool: new RegExp("^(?:" + K + ")$", "i"),
        needsContext: new RegExp(
          "^" +
            L +
            "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
            L +
            "*((?:-\\d)?\\d*)" +
            L +
            "*\\)|)(?=[^-]|$)",
          "i"
        ),
      },
      X = /^(?:input|select|textarea|button)$/i,
      Y = /^h\d$/i,
      Z = /^[^{]+\{\s*\[native \w/,
      $ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
      _ = /[+~]/,
      aa = /'|\\/g,
      ba = new RegExp("\\\\([\\da-f]{1,6}" + L + "?|(" + L + ")|.)", "ig"),
      ca = function (a, b, c) {
        var d = "0x" + b - 65536;
        return d !== d || c
          ? b
          : 0 > d
          ? String.fromCharCode(d + 65536)
          : String.fromCharCode((d >> 10) | 55296, (1023 & d) | 56320);
      },
      da = function () {
        m();
      };
    try {
      H.apply((E = I.call(v.childNodes)), v.childNodes),
        E[v.childNodes.length].nodeType;
    } catch (ea) {
      H = {
        apply: E.length
          ? function (a, b) {
              G.apply(a, I.call(b));
            }
          : function (a, b) {
              var c = a.length,
                d = 0;
              while ((a[c++] = b[d++]));
              a.length = c - 1;
            },
      };
    }
    function fa(a, b, d, e) {
      var f,
        h,
        j,
        k,
        l,
        o,
        r,
        s,
        w = b && b.ownerDocument,
        x = b ? b.nodeType : 9;
      if (
        ((d = d || []),
        "string" != typeof a || !a || (1 !== x && 9 !== x && 11 !== x))
      )
        return d;
      if (
        !e &&
        ((b ? b.ownerDocument || b : v) !== n && m(b), (b = b || n), p)
      ) {
        if (11 !== x && (o = $.exec(a)))
          if ((f = o[1])) {
            if (9 === x) {
              if (!(j = b.getElementById(f))) return d;
              if (j.id === f) return d.push(j), d;
            } else if (w && (j = w.getElementById(f)) && t(b, j) && j.id === f)
              return d.push(j), d;
          } else {
            if (o[2]) return H.apply(d, b.getElementsByTagName(a)), d;
            if (
              (f = o[3]) &&
              c.getElementsByClassName &&
              b.getElementsByClassName
            )
              return H.apply(d, b.getElementsByClassName(f)), d;
          }
        if (c.qsa && !A[a + " "] && (!q || !q.test(a))) {
          if (1 !== x) (w = b), (s = a);
          else if ("object" !== b.nodeName.toLowerCase()) {
            (k = b.getAttribute("id"))
              ? (k = k.replace(aa, "\\$&"))
              : b.setAttribute("id", (k = u)),
              (r = g(a)),
              (h = r.length),
              (l = V.test(k) ? "#" + k : "[id='" + k + "']");
            while (h--) r[h] = l + " " + qa(r[h]);
            (s = r.join(",")), (w = (_.test(a) && oa(b.parentNode)) || b);
          }
          if (s)
            try {
              return H.apply(d, w.querySelectorAll(s)), d;
            } catch (y) {
            } finally {
              k === u && b.removeAttribute("id");
            }
        }
      }
      return i(a.replace(Q, "$1"), b, d, e);
    }
    function ga() {
      var a = [];
      function b(c, e) {
        return (
          a.push(c + " ") > d.cacheLength && delete b[a.shift()],
          (b[c + " "] = e)
        );
      }
      return b;
    }
    function ha(a) {
      return (a[u] = !0), a;
    }
    function ia(a) {
      var b = n.createElement("div");
      try {
        return !!a(b);
      } catch (c) {
        return !1;
      } finally {
        b.parentNode && b.parentNode.removeChild(b), (b = null);
      }
    }
    function ja(a, b) {
      var c = a.split("|"),
        e = c.length;
      while (e--) d.attrHandle[c[e]] = b;
    }
    function ka(a, b) {
      var c = b && a,
        d =
          c &&
          1 === a.nodeType &&
          1 === b.nodeType &&
          (~b.sourceIndex || C) - (~a.sourceIndex || C);
      if (d) return d;
      if (c) while ((c = c.nextSibling)) if (c === b) return -1;
      return a ? 1 : -1;
    }
    function la(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();
        return "input" === c && b.type === a;
      };
    }
    function ma(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();
        return ("input" === c || "button" === c) && b.type === a;
      };
    }
    function na(a) {
      return ha(function (b) {
        return (
          (b = +b),
          ha(function (c, d) {
            var e,
              f = a([], c.length, b),
              g = f.length;
            while (g--) c[(e = f[g])] && (c[e] = !(d[e] = c[e]));
          })
        );
      });
    }
    function oa(a) {
      return a && "undefined" != typeof a.getElementsByTagName && a;
    }
    (c = fa.support = {}),
      (f = fa.isXML =
        function (a) {
          var b = a && (a.ownerDocument || a).documentElement;
          return b ? "HTML" !== b.nodeName : !1;
        }),
      (m = fa.setDocument =
        function (a) {
          var b,
            e,
            g = a ? a.ownerDocument || a : v;
          return g !== n && 9 === g.nodeType && g.documentElement
            ? ((n = g),
              (o = n.documentElement),
              (p = !f(n)),
              (e = n.defaultView) &&
                e.top !== e &&
                (e.addEventListener
                  ? e.addEventListener("unload", da, !1)
                  : e.attachEvent && e.attachEvent("onunload", da)),
              (c.attributes = ia(function (a) {
                return (a.className = "i"), !a.getAttribute("className");
              })),
              (c.getElementsByTagName = ia(function (a) {
                return (
                  a.appendChild(n.createComment("")),
                  !a.getElementsByTagName("*").length
                );
              })),
              (c.getElementsByClassName = Z.test(n.getElementsByClassName)),
              (c.getById = ia(function (a) {
                return (
                  (o.appendChild(a).id = u),
                  !n.getElementsByName || !n.getElementsByName(u).length
                );
              })),
              c.getById
                ? ((d.find.ID = function (a, b) {
                    if ("undefined" != typeof b.getElementById && p) {
                      var c = b.getElementById(a);
                      return c ? [c] : [];
                    }
                  }),
                  (d.filter.ID = function (a) {
                    var b = a.replace(ba, ca);
                    return function (a) {
                      return a.getAttribute("id") === b;
                    };
                  }))
                : (delete d.find.ID,
                  (d.filter.ID = function (a) {
                    var b = a.replace(ba, ca);
                    return function (a) {
                      var c =
                        "undefined" != typeof a.getAttributeNode &&
                        a.getAttributeNode("id");
                      return c && c.value === b;
                    };
                  })),
              (d.find.TAG = c.getElementsByTagName
                ? function (a, b) {
                    return "undefined" != typeof b.getElementsByTagName
                      ? b.getElementsByTagName(a)
                      : c.qsa
                      ? b.querySelectorAll(a)
                      : void 0;
                  }
                : function (a, b) {
                    var c,
                      d = [],
                      e = 0,
                      f = b.getElementsByTagName(a);
                    if ("*" === a) {
                      while ((c = f[e++])) 1 === c.nodeType && d.push(c);
                      return d;
                    }
                    return f;
                  }),
              (d.find.CLASS =
                c.getElementsByClassName &&
                function (a, b) {
                  return "undefined" != typeof b.getElementsByClassName && p
                    ? b.getElementsByClassName(a)
                    : void 0;
                }),
              (r = []),
              (q = []),
              (c.qsa = Z.test(n.querySelectorAll)) &&
                (ia(function (a) {
                  (o.appendChild(a).innerHTML =
                    "<a id='" +
                    u +
                    "'></a><select id='" +
                    u +
                    "-\r\\' msallowcapture=''><option selected=''></option></select>"),
                    a.querySelectorAll("[msallowcapture^='']").length &&
                      q.push("[*^$]=" + L + "*(?:''|\"\")"),
                    a.querySelectorAll("[selected]").length ||
                      q.push("\\[" + L + "*(?:value|" + K + ")"),
                    a.querySelectorAll("[id~=" + u + "-]").length ||
                      q.push("~="),
                    a.querySelectorAll(":checked").length || q.push(":checked"),
                    a.querySelectorAll("a#" + u + "+*").length ||
                      q.push(".#.+[+~]");
                }),
                ia(function (a) {
                  var b = n.createElement("input");
                  b.setAttribute("type", "hidden"),
                    a.appendChild(b).setAttribute("name", "D"),
                    a.querySelectorAll("[name=d]").length &&
                      q.push("name" + L + "*[*^$|!~]?="),
                    a.querySelectorAll(":enabled").length ||
                      q.push(":enabled", ":disabled"),
                    a.querySelectorAll("*,:x"),
                    q.push(",.*:");
                })),
              (c.matchesSelector = Z.test(
                (s =
                  o.matches ||
                  o.webkitMatchesSelector ||
                  o.mozMatchesSelector ||
                  o.oMatchesSelector ||
                  o.msMatchesSelector)
              )) &&
                ia(function (a) {
                  (c.disconnectedMatch = s.call(a, "div")),
                    s.call(a, "[s!='']:x"),
                    r.push("!=", O);
                }),
              (q = q.length && new RegExp(q.join("|"))),
              (r = r.length && new RegExp(r.join("|"))),
              (b = Z.test(o.compareDocumentPosition)),
              (t =
                b || Z.test(o.contains)
                  ? function (a, b) {
                      var c = 9 === a.nodeType ? a.documentElement : a,
                        d = b && b.parentNode;
                      return (
                        a === d ||
                        !(
                          !d ||
                          1 !== d.nodeType ||
                          !(c.contains
                            ? c.contains(d)
                            : a.compareDocumentPosition &&
                              16 & a.compareDocumentPosition(d))
                        )
                      );
                    }
                  : function (a, b) {
                      if (b) while ((b = b.parentNode)) if (b === a) return !0;
                      return !1;
                    }),
              (B = b
                ? function (a, b) {
                    if (a === b) return (l = !0), 0;
                    var d =
                      !a.compareDocumentPosition - !b.compareDocumentPosition;
                    return d
                      ? d
                      : ((d =
                          (a.ownerDocument || a) === (b.ownerDocument || b)
                            ? a.compareDocumentPosition(b)
                            : 1),
                        1 & d ||
                        (!c.sortDetached && b.compareDocumentPosition(a) === d)
                          ? a === n || (a.ownerDocument === v && t(v, a))
                            ? -1
                            : b === n || (b.ownerDocument === v && t(v, b))
                            ? 1
                            : k
                            ? J(k, a) - J(k, b)
                            : 0
                          : 4 & d
                          ? -1
                          : 1);
                  }
                : function (a, b) {
                    if (a === b) return (l = !0), 0;
                    var c,
                      d = 0,
                      e = a.parentNode,
                      f = b.parentNode,
                      g = [a],
                      h = [b];
                    if (!e || !f)
                      return a === n
                        ? -1
                        : b === n
                        ? 1
                        : e
                        ? -1
                        : f
                        ? 1
                        : k
                        ? J(k, a) - J(k, b)
                        : 0;
                    if (e === f) return ka(a, b);
                    c = a;
                    while ((c = c.parentNode)) g.unshift(c);
                    c = b;
                    while ((c = c.parentNode)) h.unshift(c);
                    while (g[d] === h[d]) d++;
                    return d
                      ? ka(g[d], h[d])
                      : g[d] === v
                      ? -1
                      : h[d] === v
                      ? 1
                      : 0;
                  }),
              n)
            : n;
        }),
      (fa.matches = function (a, b) {
        return fa(a, null, null, b);
      }),
      (fa.matchesSelector = function (a, b) {
        if (
          ((a.ownerDocument || a) !== n && m(a),
          (b = b.replace(T, "='$1']")),
          c.matchesSelector &&
            p &&
            !A[b + " "] &&
            (!r || !r.test(b)) &&
            (!q || !q.test(b)))
        )
          try {
            var d = s.call(a, b);
            if (
              d ||
              c.disconnectedMatch ||
              (a.document && 11 !== a.document.nodeType)
            )
              return d;
          } catch (e) {}
        return fa(b, n, null, [a]).length > 0;
      }),
      (fa.contains = function (a, b) {
        return (a.ownerDocument || a) !== n && m(a), t(a, b);
      }),
      (fa.attr = function (a, b) {
        (a.ownerDocument || a) !== n && m(a);
        var e = d.attrHandle[b.toLowerCase()],
          f = e && D.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;
        return void 0 !== f
          ? f
          : c.attributes || !p
          ? a.getAttribute(b)
          : (f = a.getAttributeNode(b)) && f.specified
          ? f.value
          : null;
      }),
      (fa.error = function (a) {
        throw new Error("Syntax error, unrecognized expression: " + a);
      }),
      (fa.uniqueSort = function (a) {
        var b,
          d = [],
          e = 0,
          f = 0;
        if (
          ((l = !c.detectDuplicates),
          (k = !c.sortStable && a.slice(0)),
          a.sort(B),
          l)
        ) {
          while ((b = a[f++])) b === a[f] && (e = d.push(f));
          while (e--) a.splice(d[e], 1);
        }
        return (k = null), a;
      }),
      (e = fa.getText =
        function (a) {
          var b,
            c = "",
            d = 0,
            f = a.nodeType;
          if (f) {
            if (1 === f || 9 === f || 11 === f) {
              if ("string" == typeof a.textContent) return a.textContent;
              for (a = a.firstChild; a; a = a.nextSibling) c += e(a);
            } else if (3 === f || 4 === f) return a.nodeValue;
          } else while ((b = a[d++])) c += e(b);
          return c;
        }),
      (d = fa.selectors =
        {
          cacheLength: 50,
          createPseudo: ha,
          match: W,
          attrHandle: {},
          find: {},
          relative: {
            ">": { dir: "parentNode", first: !0 },
            " ": { dir: "parentNode" },
            "+": { dir: "previousSibling", first: !0 },
            "~": { dir: "previousSibling" },
          },
          preFilter: {
            ATTR: function (a) {
              return (
                (a[1] = a[1].replace(ba, ca)),
                (a[3] = (a[3] || a[4] || a[5] || "").replace(ba, ca)),
                "~=" === a[2] && (a[3] = " " + a[3] + " "),
                a.slice(0, 4)
              );
            },
            CHILD: function (a) {
              return (
                (a[1] = a[1].toLowerCase()),
                "nth" === a[1].slice(0, 3)
                  ? (a[3] || fa.error(a[0]),
                    (a[4] = +(a[4]
                      ? a[5] + (a[6] || 1)
                      : 2 * ("even" === a[3] || "odd" === a[3]))),
                    (a[5] = +(a[7] + a[8] || "odd" === a[3])))
                  : a[3] && fa.error(a[0]),
                a
              );
            },
            PSEUDO: function (a) {
              var b,
                c = !a[6] && a[2];
              return W.CHILD.test(a[0])
                ? null
                : (a[3]
                    ? (a[2] = a[4] || a[5] || "")
                    : c &&
                      U.test(c) &&
                      (b = g(c, !0)) &&
                      (b = c.indexOf(")", c.length - b) - c.length) &&
                      ((a[0] = a[0].slice(0, b)), (a[2] = c.slice(0, b))),
                  a.slice(0, 3));
            },
          },
          filter: {
            TAG: function (a) {
              var b = a.replace(ba, ca).toLowerCase();
              return "*" === a
                ? function () {
                    return !0;
                  }
                : function (a) {
                    return a.nodeName && a.nodeName.toLowerCase() === b;
                  };
            },
            CLASS: function (a) {
              var b = y[a + " "];
              return (
                b ||
                ((b = new RegExp("(^|" + L + ")" + a + "(" + L + "|$)")) &&
                  y(a, function (a) {
                    return b.test(
                      ("string" == typeof a.className && a.className) ||
                        ("undefined" != typeof a.getAttribute &&
                          a.getAttribute("class")) ||
                        ""
                    );
                  }))
              );
            },
            ATTR: function (a, b, c) {
              return function (d) {
                var e = fa.attr(d, a);
                return null == e
                  ? "!=" === b
                  : b
                  ? ((e += ""),
                    "=" === b
                      ? e === c
                      : "!=" === b
                      ? e !== c
                      : "^=" === b
                      ? c && 0 === e.indexOf(c)
                      : "*=" === b
                      ? c && e.indexOf(c) > -1
                      : "$=" === b
                      ? c && e.slice(-c.length) === c
                      : "~=" === b
                      ? (" " + e.replace(P, " ") + " ").indexOf(c) > -1
                      : "|=" === b
                      ? e === c || e.slice(0, c.length + 1) === c + "-"
                      : !1)
                  : !0;
              };
            },
            CHILD: function (a, b, c, d, e) {
              var f = "nth" !== a.slice(0, 3),
                g = "last" !== a.slice(-4),
                h = "of-type" === b;
              return 1 === d && 0 === e
                ? function (a) {
                    return !!a.parentNode;
                  }
                : function (b, c, i) {
                    var j,
                      k,
                      l,
                      m,
                      n,
                      o,
                      p = f !== g ? "nextSibling" : "previousSibling",
                      q = b.parentNode,
                      r = h && b.nodeName.toLowerCase(),
                      s = !i && !h,
                      t = !1;
                    if (q) {
                      if (f) {
                        while (p) {
                          m = b;
                          while ((m = m[p]))
                            if (
                              h
                                ? m.nodeName.toLowerCase() === r
                                : 1 === m.nodeType
                            )
                              return !1;
                          o = p = "only" === a && !o && "nextSibling";
                        }
                        return !0;
                      }
                      if (((o = [g ? q.firstChild : q.lastChild]), g && s)) {
                        (m = q),
                          (l = m[u] || (m[u] = {})),
                          (k = l[m.uniqueID] || (l[m.uniqueID] = {})),
                          (j = k[a] || []),
                          (n = j[0] === w && j[1]),
                          (t = n && j[2]),
                          (m = n && q.childNodes[n]);
                        while (
                          (m = (++n && m && m[p]) || (t = n = 0) || o.pop())
                        )
                          if (1 === m.nodeType && ++t && m === b) {
                            k[a] = [w, n, t];
                            break;
                          }
                      } else if (
                        (s &&
                          ((m = b),
                          (l = m[u] || (m[u] = {})),
                          (k = l[m.uniqueID] || (l[m.uniqueID] = {})),
                          (j = k[a] || []),
                          (n = j[0] === w && j[1]),
                          (t = n)),
                        t === !1)
                      )
                        while (
                          (m = (++n && m && m[p]) || (t = n = 0) || o.pop())
                        )
                          if (
                            (h
                              ? m.nodeName.toLowerCase() === r
                              : 1 === m.nodeType) &&
                            ++t &&
                            (s &&
                              ((l = m[u] || (m[u] = {})),
                              (k = l[m.uniqueID] || (l[m.uniqueID] = {})),
                              (k[a] = [w, t])),
                            m === b)
                          )
                            break;
                      return (t -= e), t === d || (t % d === 0 && t / d >= 0);
                    }
                  };
            },
            PSEUDO: function (a, b) {
              var c,
                e =
                  d.pseudos[a] ||
                  d.setFilters[a.toLowerCase()] ||
                  fa.error("unsupported pseudo: " + a);
              return e[u]
                ? e(b)
                : e.length > 1
                ? ((c = [a, a, "", b]),
                  d.setFilters.hasOwnProperty(a.toLowerCase())
                    ? ha(function (a, c) {
                        var d,
                          f = e(a, b),
                          g = f.length;
                        while (g--) (d = J(a, f[g])), (a[d] = !(c[d] = f[g]));
                      })
                    : function (a) {
                        return e(a, 0, c);
                      })
                : e;
            },
          },
          pseudos: {
            not: ha(function (a) {
              var b = [],
                c = [],
                d = h(a.replace(Q, "$1"));
              return d[u]
                ? ha(function (a, b, c, e) {
                    var f,
                      g = d(a, null, e, []),
                      h = a.length;
                    while (h--) (f = g[h]) && (a[h] = !(b[h] = f));
                  })
                : function (a, e, f) {
                    return (
                      (b[0] = a), d(b, null, f, c), (b[0] = null), !c.pop()
                    );
                  };
            }),
            has: ha(function (a) {
              return function (b) {
                return fa(a, b).length > 0;
              };
            }),
            contains: ha(function (a) {
              return (
                (a = a.replace(ba, ca)),
                function (b) {
                  return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
                }
              );
            }),
            lang: ha(function (a) {
              return (
                V.test(a || "") || fa.error("unsupported lang: " + a),
                (a = a.replace(ba, ca).toLowerCase()),
                function (b) {
                  var c;
                  do
                    if (
                      (c = p
                        ? b.lang
                        : b.getAttribute("xml:lang") || b.getAttribute("lang"))
                    )
                      return (
                        (c = c.toLowerCase()),
                        c === a || 0 === c.indexOf(a + "-")
                      );
                  while ((b = b.parentNode) && 1 === b.nodeType);
                  return !1;
                }
              );
            }),
            target: function (b) {
              var c = a.location && a.location.hash;
              return c && c.slice(1) === b.id;
            },
            root: function (a) {
              return a === o;
            },
            focus: function (a) {
              return (
                a === n.activeElement &&
                (!n.hasFocus || n.hasFocus()) &&
                !!(a.type || a.href || ~a.tabIndex)
              );
            },
            enabled: function (a) {
              return a.disabled === !1;
            },
            disabled: function (a) {
              return a.disabled === !0;
            },
            checked: function (a) {
              var b = a.nodeName.toLowerCase();
              return (
                ("input" === b && !!a.checked) ||
                ("option" === b && !!a.selected)
              );
            },
            selected: function (a) {
              return (
                a.parentNode && a.parentNode.selectedIndex, a.selected === !0
              );
            },
            empty: function (a) {
              for (a = a.firstChild; a; a = a.nextSibling)
                if (a.nodeType < 6) return !1;
              return !0;
            },
            parent: function (a) {
              return !d.pseudos.empty(a);
            },
            header: function (a) {
              return Y.test(a.nodeName);
            },
            input: function (a) {
              return X.test(a.nodeName);
            },
            button: function (a) {
              var b = a.nodeName.toLowerCase();
              return ("input" === b && "button" === a.type) || "button" === b;
            },
            text: function (a) {
              var b;
              return (
                "input" === a.nodeName.toLowerCase() &&
                "text" === a.type &&
                (null == (b = a.getAttribute("type")) ||
                  "text" === b.toLowerCase())
              );
            },
            first: na(function () {
              return [0];
            }),
            last: na(function (a, b) {
              return [b - 1];
            }),
            eq: na(function (a, b, c) {
              return [0 > c ? c + b : c];
            }),
            even: na(function (a, b) {
              for (var c = 0; b > c; c += 2) a.push(c);
              return a;
            }),
            odd: na(function (a, b) {
              for (var c = 1; b > c; c += 2) a.push(c);
              return a;
            }),
            lt: na(function (a, b, c) {
              for (var d = 0 > c ? c + b : c; --d >= 0; ) a.push(d);
              return a;
            }),
            gt: na(function (a, b, c) {
              for (var d = 0 > c ? c + b : c; ++d < b; ) a.push(d);
              return a;
            }),
          },
        }),
      (d.pseudos.nth = d.pseudos.eq);
    for (b in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 })
      d.pseudos[b] = la(b);
    for (b in { submit: !0, reset: !0 }) d.pseudos[b] = ma(b);
    function pa() {}
    (pa.prototype = d.filters = d.pseudos),
      (d.setFilters = new pa()),
      (g = fa.tokenize =
        function (a, b) {
          var c,
            e,
            f,
            g,
            h,
            i,
            j,
            k = z[a + " "];
          if (k) return b ? 0 : k.slice(0);
          (h = a), (i = []), (j = d.preFilter);
          while (h) {
            (c && !(e = R.exec(h))) ||
              (e && (h = h.slice(e[0].length) || h), i.push((f = []))),
              (c = !1),
              (e = S.exec(h)) &&
                ((c = e.shift()),
                f.push({ value: c, type: e[0].replace(Q, " ") }),
                (h = h.slice(c.length)));
            for (g in d.filter)
              !(e = W[g].exec(h)) ||
                (j[g] && !(e = j[g](e))) ||
                ((c = e.shift()),
                f.push({ value: c, type: g, matches: e }),
                (h = h.slice(c.length)));
            if (!c) break;
          }
          return b ? h.length : h ? fa.error(a) : z(a, i).slice(0);
        });
    function qa(a) {
      for (var b = 0, c = a.length, d = ""; c > b; b++) d += a[b].value;
      return d;
    }
    function ra(a, b, c) {
      var d = b.dir,
        e = c && "parentNode" === d,
        f = x++;
      return b.first
        ? function (b, c, f) {
            while ((b = b[d])) if (1 === b.nodeType || e) return a(b, c, f);
          }
        : function (b, c, g) {
            var h,
              i,
              j,
              k = [w, f];
            if (g) {
              while ((b = b[d]))
                if ((1 === b.nodeType || e) && a(b, c, g)) return !0;
            } else
              while ((b = b[d]))
                if (1 === b.nodeType || e) {
                  if (
                    ((j = b[u] || (b[u] = {})),
                    (i = j[b.uniqueID] || (j[b.uniqueID] = {})),
                    (h = i[d]) && h[0] === w && h[1] === f)
                  )
                    return (k[2] = h[2]);
                  if (((i[d] = k), (k[2] = a(b, c, g)))) return !0;
                }
          };
    }
    function sa(a) {
      return a.length > 1
        ? function (b, c, d) {
            var e = a.length;
            while (e--) if (!a[e](b, c, d)) return !1;
            return !0;
          }
        : a[0];
    }
    function ta(a, b, c) {
      for (var d = 0, e = b.length; e > d; d++) fa(a, b[d], c);
      return c;
    }
    function ua(a, b, c, d, e) {
      for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++)
        (f = a[h]) && ((c && !c(f, d, e)) || (g.push(f), j && b.push(h)));
      return g;
    }
    function va(a, b, c, d, e, f) {
      return (
        d && !d[u] && (d = va(d)),
        e && !e[u] && (e = va(e, f)),
        ha(function (f, g, h, i) {
          var j,
            k,
            l,
            m = [],
            n = [],
            o = g.length,
            p = f || ta(b || "*", h.nodeType ? [h] : h, []),
            q = !a || (!f && b) ? p : ua(p, m, a, h, i),
            r = c ? (e || (f ? a : o || d) ? [] : g) : q;
          if ((c && c(q, r, h, i), d)) {
            (j = ua(r, n)), d(j, [], h, i), (k = j.length);
            while (k--) (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
          }
          if (f) {
            if (e || a) {
              if (e) {
                (j = []), (k = r.length);
                while (k--) (l = r[k]) && j.push((q[k] = l));
                e(null, (r = []), j, i);
              }
              k = r.length;
              while (k--)
                (l = r[k]) &&
                  (j = e ? J(f, l) : m[k]) > -1 &&
                  (f[j] = !(g[j] = l));
            }
          } else (r = ua(r === g ? r.splice(o, r.length) : r)), e ? e(null, g, r, i) : H.apply(g, r);
        })
      );
    }
    function wa(a) {
      for (
        var b,
          c,
          e,
          f = a.length,
          g = d.relative[a[0].type],
          h = g || d.relative[" "],
          i = g ? 1 : 0,
          k = ra(
            function (a) {
              return a === b;
            },
            h,
            !0
          ),
          l = ra(
            function (a) {
              return J(b, a) > -1;
            },
            h,
            !0
          ),
          m = [
            function (a, c, d) {
              var e =
                (!g && (d || c !== j)) ||
                ((b = c).nodeType ? k(a, c, d) : l(a, c, d));
              return (b = null), e;
            },
          ];
        f > i;
        i++
      )
        if ((c = d.relative[a[i].type])) m = [ra(sa(m), c)];
        else {
          if (((c = d.filter[a[i].type].apply(null, a[i].matches)), c[u])) {
            for (e = ++i; f > e; e++) if (d.relative[a[e].type]) break;
            return va(
              i > 1 && sa(m),
              i > 1 &&
                qa(
                  a
                    .slice(0, i - 1)
                    .concat({ value: " " === a[i - 2].type ? "*" : "" })
                ).replace(Q, "$1"),
              c,
              e > i && wa(a.slice(i, e)),
              f > e && wa((a = a.slice(e))),
              f > e && qa(a)
            );
          }
          m.push(c);
        }
      return sa(m);
    }
    function xa(a, b) {
      var c = b.length > 0,
        e = a.length > 0,
        f = function (f, g, h, i, k) {
          var l,
            o,
            q,
            r = 0,
            s = "0",
            t = f && [],
            u = [],
            v = j,
            x = f || (e && d.find.TAG("*", k)),
            y = (w += null == v ? 1 : Math.random() || 0.1),
            z = x.length;
          for (
            k && (j = g === n || g || k);
            s !== z && null != (l = x[s]);
            s++
          ) {
            if (e && l) {
              (o = 0), g || l.ownerDocument === n || (m(l), (h = !p));
              while ((q = a[o++]))
                if (q(l, g || n, h)) {
                  i.push(l);
                  break;
                }
              k && (w = y);
            }
            c && ((l = !q && l) && r--, f && t.push(l));
          }
          if (((r += s), c && s !== r)) {
            o = 0;
            while ((q = b[o++])) q(t, u, g, h);
            if (f) {
              if (r > 0) while (s--) t[s] || u[s] || (u[s] = F.call(i));
              u = ua(u);
            }
            H.apply(i, u),
              k && !f && u.length > 0 && r + b.length > 1 && fa.uniqueSort(i);
          }
          return k && ((w = y), (j = v)), t;
        };
      return c ? ha(f) : f;
    }
    return (
      (h = fa.compile =
        function (a, b) {
          var c,
            d = [],
            e = [],
            f = A[a + " "];
          if (!f) {
            b || (b = g(a)), (c = b.length);
            while (c--) (f = wa(b[c])), f[u] ? d.push(f) : e.push(f);
            (f = A(a, xa(e, d))), (f.selector = a);
          }
          return f;
        }),
      (i = fa.select =
        function (a, b, e, f) {
          var i,
            j,
            k,
            l,
            m,
            n = "function" == typeof a && a,
            o = !f && g((a = n.selector || a));
          if (((e = e || []), 1 === o.length)) {
            if (
              ((j = o[0] = o[0].slice(0)),
              j.length > 2 &&
                "ID" === (k = j[0]).type &&
                c.getById &&
                9 === b.nodeType &&
                p &&
                d.relative[j[1].type])
            ) {
              if (
                ((b = (d.find.ID(k.matches[0].replace(ba, ca), b) || [])[0]),
                !b)
              )
                return e;
              n && (b = b.parentNode), (a = a.slice(j.shift().value.length));
            }
            i = W.needsContext.test(a) ? 0 : j.length;
            while (i--) {
              if (((k = j[i]), d.relative[(l = k.type)])) break;
              if (
                (m = d.find[l]) &&
                (f = m(
                  k.matches[0].replace(ba, ca),
                  (_.test(j[0].type) && oa(b.parentNode)) || b
                ))
              ) {
                if ((j.splice(i, 1), (a = f.length && qa(j)), !a))
                  return H.apply(e, f), e;
                break;
              }
            }
          }
          return (
            (n || h(a, o))(
              f,
              b,
              !p,
              e,
              !b || (_.test(a) && oa(b.parentNode)) || b
            ),
            e
          );
        }),
      (c.sortStable = u.split("").sort(B).join("") === u),
      (c.detectDuplicates = !!l),
      m(),
      (c.sortDetached = ia(function (a) {
        return 1 & a.compareDocumentPosition(n.createElement("div"));
      })),
      ia(function (a) {
        return (
          (a.innerHTML = "<a href='#'></a>"),
          "#" === a.firstChild.getAttribute("href")
        );
      }) ||
        ja("type|href|height|width", function (a, b, c) {
          return c
            ? void 0
            : a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);
        }),
      (c.attributes &&
        ia(function (a) {
          return (
            (a.innerHTML = "<input/>"),
            a.firstChild.setAttribute("value", ""),
            "" === a.firstChild.getAttribute("value")
          );
        })) ||
        ja("value", function (a, b, c) {
          return c || "input" !== a.nodeName.toLowerCase()
            ? void 0
            : a.defaultValue;
        }),
      ia(function (a) {
        return null == a.getAttribute("disabled");
      }) ||
        ja(K, function (a, b, c) {
          var d;
          return c
            ? void 0
            : a[b] === !0
            ? b.toLowerCase()
            : (d = a.getAttributeNode(b)) && d.specified
            ? d.value
            : null;
        }),
      fa
    );
  })(a);
  (n.find = t),
    (n.expr = t.selectors),
    (n.expr[":"] = n.expr.pseudos),
    (n.uniqueSort = n.unique = t.uniqueSort),
    (n.text = t.getText),
    (n.isXMLDoc = t.isXML),
    (n.contains = t.contains);
  var u = function (a, b, c) {
      var d = [],
        e = void 0 !== c;
      while ((a = a[b]) && 9 !== a.nodeType)
        if (1 === a.nodeType) {
          if (e && n(a).is(c)) break;
          d.push(a);
        }
      return d;
    },
    v = function (a, b) {
      for (var c = []; a; a = a.nextSibling)
        1 === a.nodeType && a !== b && c.push(a);
      return c;
    },
    w = n.expr.match.needsContext,
    x = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,
    y = /^.[^:#\[\.,]*$/;
  function z(a, b, c) {
    if (n.isFunction(b))
      return n.grep(a, function (a, d) {
        return !!b.call(a, d, a) !== c;
      });
    if (b.nodeType)
      return n.grep(a, function (a) {
        return (a === b) !== c;
      });
    if ("string" == typeof b) {
      if (y.test(b)) return n.filter(b, a, c);
      b = n.filter(b, a);
    }
    return n.grep(a, function (a) {
      return n.inArray(a, b) > -1 !== c;
    });
  }
  (n.filter = function (a, b, c) {
    var d = b[0];
    return (
      c && (a = ":not(" + a + ")"),
      1 === b.length && 1 === d.nodeType
        ? n.find.matchesSelector(d, a)
          ? [d]
          : []
        : n.find.matches(
            a,
            n.grep(b, function (a) {
              return 1 === a.nodeType;
            })
          )
    );
  }),
    n.fn.extend({
      find: function (a) {
        var b,
          c = [],
          d = this,
          e = d.length;
        if ("string" != typeof a)
          return this.pushStack(
            n(a).filter(function () {
              for (b = 0; e > b; b++) if (n.contains(d[b], this)) return !0;
            })
          );
        for (b = 0; e > b; b++) n.find(a, d[b], c);
        return (
          (c = this.pushStack(e > 1 ? n.unique(c) : c)),
          (c.selector = this.selector ? this.selector + " " + a : a),
          c
        );
      },
      filter: function (a) {
        return this.pushStack(z(this, a || [], !1));
      },
      not: function (a) {
        return this.pushStack(z(this, a || [], !0));
      },
      is: function (a) {
        return !!z(this, "string" == typeof a && w.test(a) ? n(a) : a || [], !1)
          .length;
      },
    });
  var A,
    B = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
    C = (n.fn.init = function (a, b, c) {
      var e, f;
      if (!a) return this;
      if (((c = c || A), "string" == typeof a)) {
        if (
          ((e =
            "<" === a.charAt(0) &&
            ">" === a.charAt(a.length - 1) &&
            a.length >= 3
              ? [null, a, null]
              : B.exec(a)),
          !e || (!e[1] && b))
        )
          return !b || b.jquery
            ? (b || c).find(a)
            : this.constructor(b).find(a);
        if (e[1]) {
          if (
            ((b = b instanceof n ? b[0] : b),
            n.merge(
              this,
              n.parseHTML(e[1], b && b.nodeType ? b.ownerDocument || b : d, !0)
            ),
            x.test(e[1]) && n.isPlainObject(b))
          )
            for (e in b)
              n.isFunction(this[e]) ? this[e](b[e]) : this.attr(e, b[e]);
          return this;
        }
        if (((f = d.getElementById(e[2])), f && f.parentNode)) {
          if (f.id !== e[2]) return A.find(a);
          (this.length = 1), (this[0] = f);
        }
        return (this.context = d), (this.selector = a), this;
      }
      return a.nodeType
        ? ((this.context = this[0] = a), (this.length = 1), this)
        : n.isFunction(a)
        ? "undefined" != typeof c.ready
          ? c.ready(a)
          : a(n)
        : (void 0 !== a.selector &&
            ((this.selector = a.selector), (this.context = a.context)),
          n.makeArray(a, this));
    });
  (C.prototype = n.fn), (A = n(d));
  var D = /^(?:parents|prev(?:Until|All))/,
    E = { children: !0, contents: !0, next: !0, prev: !0 };
  n.fn.extend({
    has: function (a) {
      var b,
        c = n(a, this),
        d = c.length;
      return this.filter(function () {
        for (b = 0; d > b; b++) if (n.contains(this, c[b])) return !0;
      });
    },
    closest: function (a, b) {
      for (
        var c,
          d = 0,
          e = this.length,
          f = [],
          g = w.test(a) || "string" != typeof a ? n(a, b || this.context) : 0;
        e > d;
        d++
      )
        for (c = this[d]; c && c !== b; c = c.parentNode)
          if (
            c.nodeType < 11 &&
            (g
              ? g.index(c) > -1
              : 1 === c.nodeType && n.find.matchesSelector(c, a))
          ) {
            f.push(c);
            break;
          }
      return this.pushStack(f.length > 1 ? n.uniqueSort(f) : f);
    },
    index: function (a) {
      return a
        ? "string" == typeof a
          ? n.inArray(this[0], n(a))
          : n.inArray(a.jquery ? a[0] : a, this)
        : this[0] && this[0].parentNode
        ? this.first().prevAll().length
        : -1;
    },
    add: function (a, b) {
      return this.pushStack(n.uniqueSort(n.merge(this.get(), n(a, b))));
    },
    addBack: function (a) {
      return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
    },
  });
  function F(a, b) {
    do a = a[b];
    while (a && 1 !== a.nodeType);
    return a;
  }
  n.each(
    {
      parent: function (a) {
        var b = a.parentNode;
        return b && 11 !== b.nodeType ? b : null;
      },
      parents: function (a) {
        return u(a, "parentNode");
      },
      parentsUntil: function (a, b, c) {
        return u(a, "parentNode", c);
      },
      next: function (a) {
        return F(a, "nextSibling");
      },
      prev: function (a) {
        return F(a, "previousSibling");
      },
      nextAll: function (a) {
        return u(a, "nextSibling");
      },
      prevAll: function (a) {
        return u(a, "previousSibling");
      },
      nextUntil: function (a, b, c) {
        return u(a, "nextSibling", c);
      },
      prevUntil: function (a, b, c) {
        return u(a, "previousSibling", c);
      },
      siblings: function (a) {
        return v((a.parentNode || {}).firstChild, a);
      },
      children: function (a) {
        return v(a.firstChild);
      },
      contents: function (a) {
        return n.nodeName(a, "iframe")
          ? a.contentDocument || a.contentWindow.document
          : n.merge([], a.childNodes);
      },
    },
    function (a, b) {
      n.fn[a] = function (c, d) {
        var e = n.map(this, b, c);
        return (
          "Until" !== a.slice(-5) && (d = c),
          d && "string" == typeof d && (e = n.filter(d, e)),
          this.length > 1 &&
            (E[a] || (e = n.uniqueSort(e)), D.test(a) && (e = e.reverse())),
          this.pushStack(e)
        );
      };
    }
  );
  var G = /\S+/g;
  function H(a) {
    var b = {};
    return (
      n.each(a.match(G) || [], function (a, c) {
        b[c] = !0;
      }),
      b
    );
  }
  (n.Callbacks = function (a) {
    a = "string" == typeof a ? H(a) : n.extend({}, a);
    var b,
      c,
      d,
      e,
      f = [],
      g = [],
      h = -1,
      i = function () {
        for (e = a.once, d = b = !0; g.length; h = -1) {
          c = g.shift();
          while (++h < f.length)
            f[h].apply(c[0], c[1]) === !1 &&
              a.stopOnFalse &&
              ((h = f.length), (c = !1));
        }
        a.memory || (c = !1), (b = !1), e && (f = c ? [] : "");
      },
      j = {
        add: function () {
          return (
            f &&
              (c && !b && ((h = f.length - 1), g.push(c)),
              (function d(b) {
                n.each(b, function (b, c) {
                  n.isFunction(c)
                    ? (a.unique && j.has(c)) || f.push(c)
                    : c && c.length && "string" !== n.type(c) && d(c);
                });
              })(arguments),
              c && !b && i()),
            this
          );
        },
        remove: function () {
          return (
            n.each(arguments, function (a, b) {
              var c;
              while ((c = n.inArray(b, f, c)) > -1)
                f.splice(c, 1), h >= c && h--;
            }),
            this
          );
        },
        has: function (a) {
          return a ? n.inArray(a, f) > -1 : f.length > 0;
        },
        empty: function () {
          return f && (f = []), this;
        },
        disable: function () {
          return (e = g = []), (f = c = ""), this;
        },
        disabled: function () {
          return !f;
        },
        lock: function () {
          return (e = !0), c || j.disable(), this;
        },
        locked: function () {
          return !!e;
        },
        fireWith: function (a, c) {
          return (
            e ||
              ((c = c || []),
              (c = [a, c.slice ? c.slice() : c]),
              g.push(c),
              b || i()),
            this
          );
        },
        fire: function () {
          return j.fireWith(this, arguments), this;
        },
        fired: function () {
          return !!d;
        },
      };
    return j;
  }),
    n.extend({
      Deferred: function (a) {
        var b = [
            ["resolve", "done", n.Callbacks("once memory"), "resolved"],
            ["reject", "fail", n.Callbacks("once memory"), "rejected"],
            ["notify", "progress", n.Callbacks("memory")],
          ],
          c = "pending",
          d = {
            state: function () {
              return c;
            },
            always: function () {
              return e.done(arguments).fail(arguments), this;
            },
            then: function () {
              var a = arguments;
              return n
                .Deferred(function (c) {
                  n.each(b, function (b, f) {
                    var g = n.isFunction(a[b]) && a[b];
                    e[f[1]](function () {
                      var a = g && g.apply(this, arguments);
                      a && n.isFunction(a.promise)
                        ? a
                            .promise()
                            .progress(c.notify)
                            .done(c.resolve)
                            .fail(c.reject)
                        : c[f[0] + "With"](
                            this === d ? c.promise() : this,
                            g ? [a] : arguments
                          );
                    });
                  }),
                    (a = null);
                })
                .promise();
            },
            promise: function (a) {
              return null != a ? n.extend(a, d) : d;
            },
          },
          e = {};
        return (
          (d.pipe = d.then),
          n.each(b, function (a, f) {
            var g = f[2],
              h = f[3];
            (d[f[1]] = g.add),
              h &&
                g.add(
                  function () {
                    c = h;
                  },
                  b[1 ^ a][2].disable,
                  b[2][2].lock
                ),
              (e[f[0]] = function () {
                return e[f[0] + "With"](this === e ? d : this, arguments), this;
              }),
              (e[f[0] + "With"] = g.fireWith);
          }),
          d.promise(e),
          a && a.call(e, e),
          e
        );
      },
      when: function (a) {
        var b = 0,
          c = e.call(arguments),
          d = c.length,
          f = 1 !== d || (a && n.isFunction(a.promise)) ? d : 0,
          g = 1 === f ? a : n.Deferred(),
          h = function (a, b, c) {
            return function (d) {
              (b[a] = this),
                (c[a] = arguments.length > 1 ? e.call(arguments) : d),
                c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);
            };
          },
          i,
          j,
          k;
        if (d > 1)
          for (i = new Array(d), j = new Array(d), k = new Array(d); d > b; b++)
            c[b] && n.isFunction(c[b].promise)
              ? c[b]
                  .promise()
                  .progress(h(b, j, i))
                  .done(h(b, k, c))
                  .fail(g.reject)
              : --f;
        return f || g.resolveWith(k, c), g.promise();
      },
    });
  var I;
  (n.fn.ready = function (a) {
    return n.ready.promise().done(a), this;
  }),
    n.extend({
      isReady: !1,
      readyWait: 1,
      holdReady: function (a) {
        a ? n.readyWait++ : n.ready(!0);
      },
      ready: function (a) {
        (a === !0 ? --n.readyWait : n.isReady) ||
          ((n.isReady = !0),
          (a !== !0 && --n.readyWait > 0) ||
            (I.resolveWith(d, [n]),
            n.fn.triggerHandler &&
              (n(d).triggerHandler("ready"), n(d).off("ready"))));
      },
    });
  function J() {
    d.addEventListener
      ? (d.removeEventListener("DOMContentLoaded", K),
        a.removeEventListener("load", K))
      : (d.detachEvent("onreadystatechange", K), a.detachEvent("onload", K));
  }
  function K() {
    (d.addEventListener ||
      "load" === a.event.type ||
      "complete" === d.readyState) &&
      (J(), n.ready());
  }
  (n.ready.promise = function (b) {
    if (!I)
      if (
        ((I = n.Deferred()),
        "complete" === d.readyState ||
          ("loading" !== d.readyState && !d.documentElement.doScroll))
      )
        a.setTimeout(n.ready);
      else if (d.addEventListener)
        d.addEventListener("DOMContentLoaded", K),
          a.addEventListener("load", K);
      else {
        d.attachEvent("onreadystatechange", K), a.attachEvent("onload", K);
        var c = !1;
        try {
          c = null == a.frameElement && d.documentElement;
        } catch (e) {}
        c &&
          c.doScroll &&
          !(function f() {
            if (!n.isReady) {
              try {
                c.doScroll("left");
              } catch (b) {
                return a.setTimeout(f, 50);
              }
              J(), n.ready();
            }
          })();
      }
    return I.promise(b);
  }),
    n.ready.promise();
  var L;
  for (L in n(l)) break;
  (l.ownFirst = "0" === L),
    (l.inlineBlockNeedsLayout = !1),
    n(function () {
      var a, b, c, e;
      (c = d.getElementsByTagName("body")[0]),
        c &&
          c.style &&
          ((b = d.createElement("div")),
          (e = d.createElement("div")),
          (e.style.cssText =
            "position:absolute;border:0;width:0;height:0;top:0;left:-9999px"),
          c.appendChild(e).appendChild(b),
          "undefined" != typeof b.style.zoom &&
            ((b.style.cssText =
              "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1"),
            (l.inlineBlockNeedsLayout = a = 3 === b.offsetWidth),
            a && (c.style.zoom = 1)),
          c.removeChild(e));
    }),
    (function () {
      var a = d.createElement("div");
      l.deleteExpando = !0;
      try {
        delete a.test;
      } catch (b) {
        l.deleteExpando = !1;
      }
      a = null;
    })();
  var M = function (a) {
      var b = n.noData[(a.nodeName + " ").toLowerCase()],
        c = +a.nodeType || 1;
      return 1 !== c && 9 !== c
        ? !1
        : !b || (b !== !0 && a.getAttribute("classid") === b);
    },
    N = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    O = /([A-Z])/g;
  function P(a, b, c) {
    if (void 0 === c && 1 === a.nodeType) {
      var d = "data-" + b.replace(O, "-$1").toLowerCase();
      if (((c = a.getAttribute(d)), "string" == typeof c)) {
        try {
          c =
            "true" === c
              ? !0
              : "false" === c
              ? !1
              : "null" === c
              ? null
              : +c + "" === c
              ? +c
              : N.test(c)
              ? n.parseJSON(c)
              : c;
        } catch (e) {}
        n.data(a, b, c);
      } else c = void 0;
    }
    return c;
  }
  function Q(a) {
    var b;
    for (b in a)
      if (("data" !== b || !n.isEmptyObject(a[b])) && "toJSON" !== b) return !1;
    return !0;
  }
  function R(a, b, d, e) {
    if (M(a)) {
      var f,
        g,
        h = n.expando,
        i = a.nodeType,
        j = i ? n.cache : a,
        k = i ? a[h] : a[h] && h;
      if (
        (k && j[k] && (e || j[k].data)) ||
        void 0 !== d ||
        "string" != typeof b
      )
        return (
          k || (k = i ? (a[h] = c.pop() || n.guid++) : h),
          j[k] || (j[k] = i ? {} : { toJSON: n.noop }),
          ("object" != typeof b && "function" != typeof b) ||
            (e
              ? (j[k] = n.extend(j[k], b))
              : (j[k].data = n.extend(j[k].data, b))),
          (g = j[k]),
          e || (g.data || (g.data = {}), (g = g.data)),
          void 0 !== d && (g[n.camelCase(b)] = d),
          "string" == typeof b
            ? ((f = g[b]), null == f && (f = g[n.camelCase(b)]))
            : (f = g),
          f
        );
    }
  }
  function S(a, b, c) {
    if (M(a)) {
      var d,
        e,
        f = a.nodeType,
        g = f ? n.cache : a,
        h = f ? a[n.expando] : n.expando;
      if (g[h]) {
        if (b && (d = c ? g[h] : g[h].data)) {
          n.isArray(b)
            ? (b = b.concat(n.map(b, n.camelCase)))
            : b in d
            ? (b = [b])
            : ((b = n.camelCase(b)), (b = b in d ? [b] : b.split(" "))),
            (e = b.length);
          while (e--) delete d[b[e]];
          if (c ? !Q(d) : !n.isEmptyObject(d)) return;
        }
        (c || (delete g[h].data, Q(g[h]))) &&
          (f
            ? n.cleanData([a], !0)
            : l.deleteExpando || g != g.window
            ? delete g[h]
            : (g[h] = void 0));
      }
    }
  }
  n.extend({
    cache: {},
    noData: {
      "applet ": !0,
      "embed ": !0,
      "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
    },
    hasData: function (a) {
      return (
        (a = a.nodeType ? n.cache[a[n.expando]] : a[n.expando]), !!a && !Q(a)
      );
    },
    data: function (a, b, c) {
      return R(a, b, c);
    },
    removeData: function (a, b) {
      return S(a, b);
    },
    _data: function (a, b, c) {
      return R(a, b, c, !0);
    },
    _removeData: function (a, b) {
      return S(a, b, !0);
    },
  }),
    n.fn.extend({
      data: function (a, b) {
        var c,
          d,
          e,
          f = this[0],
          g = f && f.attributes;
        if (void 0 === a) {
          if (
            this.length &&
            ((e = n.data(f)), 1 === f.nodeType && !n._data(f, "parsedAttrs"))
          ) {
            c = g.length;
            while (c--)
              g[c] &&
                ((d = g[c].name),
                0 === d.indexOf("data-") &&
                  ((d = n.camelCase(d.slice(5))), P(f, d, e[d])));
            n._data(f, "parsedAttrs", !0);
          }
          return e;
        }
        return "object" == typeof a
          ? this.each(function () {
              n.data(this, a);
            })
          : arguments.length > 1
          ? this.each(function () {
              n.data(this, a, b);
            })
          : f
          ? P(f, a, n.data(f, a))
          : void 0;
      },
      removeData: function (a) {
        return this.each(function () {
          n.removeData(this, a);
        });
      },
    }),
    n.extend({
      queue: function (a, b, c) {
        var d;
        return a
          ? ((b = (b || "fx") + "queue"),
            (d = n._data(a, b)),
            c &&
              (!d || n.isArray(c)
                ? (d = n._data(a, b, n.makeArray(c)))
                : d.push(c)),
            d || [])
          : void 0;
      },
      dequeue: function (a, b) {
        b = b || "fx";
        var c = n.queue(a, b),
          d = c.length,
          e = c.shift(),
          f = n._queueHooks(a, b),
          g = function () {
            n.dequeue(a, b);
          };
        "inprogress" === e && ((e = c.shift()), d--),
          e &&
            ("fx" === b && c.unshift("inprogress"),
            delete f.stop,
            e.call(a, g, f)),
          !d && f && f.empty.fire();
      },
      _queueHooks: function (a, b) {
        var c = b + "queueHooks";
        return (
          n._data(a, c) ||
          n._data(a, c, {
            empty: n.Callbacks("once memory").add(function () {
              n._removeData(a, b + "queue"), n._removeData(a, c);
            }),
          })
        );
      },
    }),
    n.fn.extend({
      queue: function (a, b) {
        var c = 2;
        return (
          "string" != typeof a && ((b = a), (a = "fx"), c--),
          arguments.length < c
            ? n.queue(this[0], a)
            : void 0 === b
            ? this
            : this.each(function () {
                var c = n.queue(this, a, b);
                n._queueHooks(this, a),
                  "fx" === a && "inprogress" !== c[0] && n.dequeue(this, a);
              })
        );
      },
      dequeue: function (a) {
        return this.each(function () {
          n.dequeue(this, a);
        });
      },
      clearQueue: function (a) {
        return this.queue(a || "fx", []);
      },
      promise: function (a, b) {
        var c,
          d = 1,
          e = n.Deferred(),
          f = this,
          g = this.length,
          h = function () {
            --d || e.resolveWith(f, [f]);
          };
        "string" != typeof a && ((b = a), (a = void 0)), (a = a || "fx");
        while (g--)
          (c = n._data(f[g], a + "queueHooks")),
            c && c.empty && (d++, c.empty.add(h));
        return h(), e.promise(b);
      },
    }),
    (function () {
      var a;
      l.shrinkWrapBlocks = function () {
        if (null != a) return a;
        a = !1;
        var b, c, e;
        return (
          (c = d.getElementsByTagName("body")[0]),
          c && c.style
            ? ((b = d.createElement("div")),
              (e = d.createElement("div")),
              (e.style.cssText =
                "position:absolute;border:0;width:0;height:0;top:0;left:-9999px"),
              c.appendChild(e).appendChild(b),
              "undefined" != typeof b.style.zoom &&
                ((b.style.cssText =
                  "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1"),
                (b.appendChild(d.createElement("div")).style.width = "5px"),
                (a = 3 !== b.offsetWidth)),
              c.removeChild(e),
              a)
            : void 0
        );
      };
    })();
  var T = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
    U = new RegExp("^(?:([+-])=|)(" + T + ")([a-z%]*)$", "i"),
    V = ["Top", "Right", "Bottom", "Left"],
    W = function (a, b) {
      return (
        (a = b || a),
        "none" === n.css(a, "display") || !n.contains(a.ownerDocument, a)
      );
    };
  function X(a, b, c, d) {
    var e,
      f = 1,
      g = 20,
      h = d
        ? function () {
            return d.cur();
          }
        : function () {
            return n.css(a, b, "");
          },
      i = h(),
      j = (c && c[3]) || (n.cssNumber[b] ? "" : "px"),
      k = (n.cssNumber[b] || ("px" !== j && +i)) && U.exec(n.css(a, b));
    if (k && k[3] !== j) {
      (j = j || k[3]), (c = c || []), (k = +i || 1);
      do (f = f || ".5"), (k /= f), n.style(a, b, k + j);
      while (f !== (f = h() / i) && 1 !== f && --g);
    }
    return (
      c &&
        ((k = +k || +i || 0),
        (e = c[1] ? k + (c[1] + 1) * c[2] : +c[2]),
        d && ((d.unit = j), (d.start = k), (d.end = e))),
      e
    );
  }
  var Y = function (a, b, c, d, e, f, g) {
      var h = 0,
        i = a.length,
        j = null == c;
      if ("object" === n.type(c)) {
        e = !0;
        for (h in c) Y(a, b, h, c[h], !0, f, g);
      } else if (
        void 0 !== d &&
        ((e = !0),
        n.isFunction(d) || (g = !0),
        j &&
          (g
            ? (b.call(a, d), (b = null))
            : ((j = b),
              (b = function (a, b, c) {
                return j.call(n(a), c);
              }))),
        b)
      )
        for (; i > h; h++) b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
      return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
    },
    Z = /^(?:checkbox|radio)$/i,
    $ = /<([\w:-]+)/,
    _ = /^$|\/(?:java|ecma)script/i,
    aa = /^\s+/,
    ba =
      "abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";
  function ca(a) {
    var b = ba.split("|"),
      c = a.createDocumentFragment();
    if (c.createElement) while (b.length) c.createElement(b.pop());
    return c;
  }
  !(function () {
    var a = d.createElement("div"),
      b = d.createDocumentFragment(),
      c = d.createElement("input");
    (a.innerHTML =
      "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>"),
      (l.leadingWhitespace = 3 === a.firstChild.nodeType),
      (l.tbody = !a.getElementsByTagName("tbody").length),
      (l.htmlSerialize = !!a.getElementsByTagName("link").length),
      (l.html5Clone =
        "<:nav></:nav>" !== d.createElement("nav").cloneNode(!0).outerHTML),
      (c.type = "checkbox"),
      (c.checked = !0),
      b.appendChild(c),
      (l.appendChecked = c.checked),
      (a.innerHTML = "<textarea>x</textarea>"),
      (l.noCloneChecked = !!a.cloneNode(!0).lastChild.defaultValue),
      b.appendChild(a),
      (c = d.createElement("input")),
      c.setAttribute("type", "radio"),
      c.setAttribute("checked", "checked"),
      c.setAttribute("name", "t"),
      a.appendChild(c),
      (l.checkClone = a.cloneNode(!0).cloneNode(!0).lastChild.checked),
      (l.noCloneEvent = !!a.addEventListener),
      (a[n.expando] = 1),
      (l.attributes = !a.getAttribute(n.expando));
  })();
  var da = {
    option: [1, "<select multiple='multiple'>", "</select>"],
    legend: [1, "<fieldset>", "</fieldset>"],
    area: [1, "<map>", "</map>"],
    param: [1, "<object>", "</object>"],
    thead: [1, "<table>", "</table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: l.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"],
  };
  (da.optgroup = da.option),
    (da.tbody = da.tfoot = da.colgroup = da.caption = da.thead),
    (da.th = da.td);
  function ea(a, b) {
    var c,
      d,
      e = 0,
      f =
        "undefined" != typeof a.getElementsByTagName
          ? a.getElementsByTagName(b || "*")
          : "undefined" != typeof a.querySelectorAll
          ? a.querySelectorAll(b || "*")
          : void 0;
    if (!f)
      for (f = [], c = a.childNodes || a; null != (d = c[e]); e++)
        !b || n.nodeName(d, b) ? f.push(d) : n.merge(f, ea(d, b));
    return void 0 === b || (b && n.nodeName(a, b)) ? n.merge([a], f) : f;
  }
  function fa(a, b) {
    for (var c, d = 0; null != (c = a[d]); d++)
      n._data(c, "globalEval", !b || n._data(b[d], "globalEval"));
  }
  var ga = /<|&#?\w+;/,
    ha = /<tbody/i;
  function ia(a) {
    Z.test(a.type) && (a.defaultChecked = a.checked);
  }
  function ja(a, b, c, d, e) {
    for (
      var f, g, h, i, j, k, m, o = a.length, p = ca(b), q = [], r = 0;
      o > r;
      r++
    )
      if (((g = a[r]), g || 0 === g))
        if ("object" === n.type(g)) n.merge(q, g.nodeType ? [g] : g);
        else if (ga.test(g)) {
          (i = i || p.appendChild(b.createElement("div"))),
            (j = ($.exec(g) || ["", ""])[1].toLowerCase()),
            (m = da[j] || da._default),
            (i.innerHTML = m[1] + n.htmlPrefilter(g) + m[2]),
            (f = m[0]);
          while (f--) i = i.lastChild;
          if (
            (!l.leadingWhitespace &&
              aa.test(g) &&
              q.push(b.createTextNode(aa.exec(g)[0])),
            !l.tbody)
          ) {
            (g =
              "table" !== j || ha.test(g)
                ? "<table>" !== m[1] || ha.test(g)
                  ? 0
                  : i
                : i.firstChild),
              (f = g && g.childNodes.length);
            while (f--)
              n.nodeName((k = g.childNodes[f]), "tbody") &&
                !k.childNodes.length &&
                g.removeChild(k);
          }
          n.merge(q, i.childNodes), (i.textContent = "");
          while (i.firstChild) i.removeChild(i.firstChild);
          i = p.lastChild;
        } else q.push(b.createTextNode(g));
    i && p.removeChild(i),
      l.appendChecked || n.grep(ea(q, "input"), ia),
      (r = 0);
    while ((g = q[r++]))
      if (d && n.inArray(g, d) > -1) e && e.push(g);
      else if (
        ((h = n.contains(g.ownerDocument, g)),
        (i = ea(p.appendChild(g), "script")),
        h && fa(i),
        c)
      ) {
        f = 0;
        while ((g = i[f++])) _.test(g.type || "") && c.push(g);
      }
    return (i = null), p;
  }
  !(function () {
    var b,
      c,
      e = d.createElement("div");
    for (b in { submit: !0, change: !0, focusin: !0 })
      (c = "on" + b),
        (l[b] = c in a) ||
          (e.setAttribute(c, "t"), (l[b] = e.attributes[c].expando === !1));
    e = null;
  })();
  var ka = /^(?:input|select|textarea)$/i,
    la = /^key/,
    ma = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
    na = /^(?:focusinfocus|focusoutblur)$/,
    oa = /^([^.]*)(?:\.(.+)|)/;
  function pa() {
    return !0;
  }
  function qa() {
    return !1;
  }
  function ra() {
    try {
      return d.activeElement;
    } catch (a) {}
  }
  function sa(a, b, c, d, e, f) {
    var g, h;
    if ("object" == typeof b) {
      "string" != typeof c && ((d = d || c), (c = void 0));
      for (h in b) sa(a, h, c, d, b[h], f);
      return a;
    }
    if (
      (null == d && null == e
        ? ((e = c), (d = c = void 0))
        : null == e &&
          ("string" == typeof c
            ? ((e = d), (d = void 0))
            : ((e = d), (d = c), (c = void 0))),
      e === !1)
    )
      e = qa;
    else if (!e) return a;
    return (
      1 === f &&
        ((g = e),
        (e = function (a) {
          return n().off(a), g.apply(this, arguments);
        }),
        (e.guid = g.guid || (g.guid = n.guid++))),
      a.each(function () {
        n.event.add(this, b, e, d, c);
      })
    );
  }
  (n.event = {
    global: {},
    add: function (a, b, c, d, e) {
      var f,
        g,
        h,
        i,
        j,
        k,
        l,
        m,
        o,
        p,
        q,
        r = n._data(a);
      if (r) {
        c.handler && ((i = c), (c = i.handler), (e = i.selector)),
          c.guid || (c.guid = n.guid++),
          (g = r.events) || (g = r.events = {}),
          (k = r.handle) ||
            ((k = r.handle =
              function (a) {
                return "undefined" == typeof n ||
                  (a && n.event.triggered === a.type)
                  ? void 0
                  : n.event.dispatch.apply(k.elem, arguments);
              }),
            (k.elem = a)),
          (b = (b || "").match(G) || [""]),
          (h = b.length);
        while (h--)
          (f = oa.exec(b[h]) || []),
            (o = q = f[1]),
            (p = (f[2] || "").split(".").sort()),
            o &&
              ((j = n.event.special[o] || {}),
              (o = (e ? j.delegateType : j.bindType) || o),
              (j = n.event.special[o] || {}),
              (l = n.extend(
                {
                  type: o,
                  origType: q,
                  data: d,
                  handler: c,
                  guid: c.guid,
                  selector: e,
                  needsContext: e && n.expr.match.needsContext.test(e),
                  namespace: p.join("."),
                },
                i
              )),
              (m = g[o]) ||
                ((m = g[o] = []),
                (m.delegateCount = 0),
                (j.setup && j.setup.call(a, d, p, k) !== !1) ||
                  (a.addEventListener
                    ? a.addEventListener(o, k, !1)
                    : a.attachEvent && a.attachEvent("on" + o, k))),
              j.add &&
                (j.add.call(a, l), l.handler.guid || (l.handler.guid = c.guid)),
              e ? m.splice(m.delegateCount++, 0, l) : m.push(l),
              (n.event.global[o] = !0));
        a = null;
      }
    },
    remove: function (a, b, c, d, e) {
      var f,
        g,
        h,
        i,
        j,
        k,
        l,
        m,
        o,
        p,
        q,
        r = n.hasData(a) && n._data(a);
      if (r && (k = r.events)) {
        (b = (b || "").match(G) || [""]), (j = b.length);
        while (j--)
          if (
            ((h = oa.exec(b[j]) || []),
            (o = q = h[1]),
            (p = (h[2] || "").split(".").sort()),
            o)
          ) {
            (l = n.event.special[o] || {}),
              (o = (d ? l.delegateType : l.bindType) || o),
              (m = k[o] || []),
              (h =
                h[2] &&
                new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)")),
              (i = f = m.length);
            while (f--)
              (g = m[f]),
                (!e && q !== g.origType) ||
                  (c && c.guid !== g.guid) ||
                  (h && !h.test(g.namespace)) ||
                  (d && d !== g.selector && ("**" !== d || !g.selector)) ||
                  (m.splice(f, 1),
                  g.selector && m.delegateCount--,
                  l.remove && l.remove.call(a, g));
            i &&
              !m.length &&
              ((l.teardown && l.teardown.call(a, p, r.handle) !== !1) ||
                n.removeEvent(a, o, r.handle),
              delete k[o]);
          } else for (o in k) n.event.remove(a, o + b[j], c, d, !0);
        n.isEmptyObject(k) && (delete r.handle, n._removeData(a, "events"));
      }
    },
    trigger: function (b, c, e, f) {
      var g,
        h,
        i,
        j,
        l,
        m,
        o,
        p = [e || d],
        q = k.call(b, "type") ? b.type : b,
        r = k.call(b, "namespace") ? b.namespace.split(".") : [];
      if (
        ((i = m = e = e || d),
        3 !== e.nodeType &&
          8 !== e.nodeType &&
          !na.test(q + n.event.triggered) &&
          (q.indexOf(".") > -1 &&
            ((r = q.split(".")), (q = r.shift()), r.sort()),
          (h = q.indexOf(":") < 0 && "on" + q),
          (b = b[n.expando] ? b : new n.Event(q, "object" == typeof b && b)),
          (b.isTrigger = f ? 2 : 3),
          (b.namespace = r.join(".")),
          (b.rnamespace = b.namespace
            ? new RegExp("(^|\\.)" + r.join("\\.(?:.*\\.|)") + "(\\.|$)")
            : null),
          (b.result = void 0),
          b.target || (b.target = e),
          (c = null == c ? [b] : n.makeArray(c, [b])),
          (l = n.event.special[q] || {}),
          f || !l.trigger || l.trigger.apply(e, c) !== !1))
      ) {
        if (!f && !l.noBubble && !n.isWindow(e)) {
          for (
            j = l.delegateType || q, na.test(j + q) || (i = i.parentNode);
            i;
            i = i.parentNode
          )
            p.push(i), (m = i);
          m === (e.ownerDocument || d) &&
            p.push(m.defaultView || m.parentWindow || a);
        }
        o = 0;
        while ((i = p[o++]) && !b.isPropagationStopped())
          (b.type = o > 1 ? j : l.bindType || q),
            (g = (n._data(i, "events") || {})[b.type] && n._data(i, "handle")),
            g && g.apply(i, c),
            (g = h && i[h]),
            g &&
              g.apply &&
              M(i) &&
              ((b.result = g.apply(i, c)),
              b.result === !1 && b.preventDefault());
        if (
          ((b.type = q),
          !f &&
            !b.isDefaultPrevented() &&
            (!l._default || l._default.apply(p.pop(), c) === !1) &&
            M(e) &&
            h &&
            e[q] &&
            !n.isWindow(e))
        ) {
          (m = e[h]), m && (e[h] = null), (n.event.triggered = q);
          try {
            e[q]();
          } catch (s) {}
          (n.event.triggered = void 0), m && (e[h] = m);
        }
        return b.result;
      }
    },
    dispatch: function (a) {
      a = n.event.fix(a);
      var b,
        c,
        d,
        f,
        g,
        h = [],
        i = e.call(arguments),
        j = (n._data(this, "events") || {})[a.type] || [],
        k = n.event.special[a.type] || {};
      if (
        ((i[0] = a),
        (a.delegateTarget = this),
        !k.preDispatch || k.preDispatch.call(this, a) !== !1)
      ) {
        (h = n.event.handlers.call(this, a, j)), (b = 0);
        while ((f = h[b++]) && !a.isPropagationStopped()) {
          (a.currentTarget = f.elem), (c = 0);
          while ((g = f.handlers[c++]) && !a.isImmediatePropagationStopped())
            (a.rnamespace && !a.rnamespace.test(g.namespace)) ||
              ((a.handleObj = g),
              (a.data = g.data),
              (d = (
                (n.event.special[g.origType] || {}).handle || g.handler
              ).apply(f.elem, i)),
              void 0 !== d &&
                (a.result = d) === !1 &&
                (a.preventDefault(), a.stopPropagation()));
        }
        return k.postDispatch && k.postDispatch.call(this, a), a.result;
      }
    },
    handlers: function (a, b) {
      var c,
        d,
        e,
        f,
        g = [],
        h = b.delegateCount,
        i = a.target;
      if (
        h &&
        i.nodeType &&
        ("click" !== a.type || isNaN(a.button) || a.button < 1)
      )
        for (; i != this; i = i.parentNode || this)
          if (1 === i.nodeType && (i.disabled !== !0 || "click" !== a.type)) {
            for (d = [], c = 0; h > c; c++)
              (f = b[c]),
                (e = f.selector + " "),
                void 0 === d[e] &&
                  (d[e] = f.needsContext
                    ? n(e, this).index(i) > -1
                    : n.find(e, this, null, [i]).length),
                d[e] && d.push(f);
            d.length && g.push({ elem: i, handlers: d });
          }
      return h < b.length && g.push({ elem: this, handlers: b.slice(h) }), g;
    },
    fix: function (a) {
      if (a[n.expando]) return a;
      var b,
        c,
        e,
        f = a.type,
        g = a,
        h = this.fixHooks[f];
      h ||
        (this.fixHooks[f] = h =
          ma.test(f) ? this.mouseHooks : la.test(f) ? this.keyHooks : {}),
        (e = h.props ? this.props.concat(h.props) : this.props),
        (a = new n.Event(g)),
        (b = e.length);
      while (b--) (c = e[b]), (a[c] = g[c]);
      return (
        a.target || (a.target = g.srcElement || d),
        3 === a.target.nodeType && (a.target = a.target.parentNode),
        (a.metaKey = !!a.metaKey),
        h.filter ? h.filter(a, g) : a
      );
    },
    props:
      "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(
        " "
      ),
    fixHooks: {},
    keyHooks: {
      props: "char charCode key keyCode".split(" "),
      filter: function (a, b) {
        return (
          null == a.which &&
            (a.which = null != b.charCode ? b.charCode : b.keyCode),
          a
        );
      },
    },
    mouseHooks: {
      props:
        "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(
          " "
        ),
      filter: function (a, b) {
        var c,
          e,
          f,
          g = b.button,
          h = b.fromElement;
        return (
          null == a.pageX &&
            null != b.clientX &&
            ((e = a.target.ownerDocument || d),
            (f = e.documentElement),
            (c = e.body),
            (a.pageX =
              b.clientX +
              ((f && f.scrollLeft) || (c && c.scrollLeft) || 0) -
              ((f && f.clientLeft) || (c && c.clientLeft) || 0)),
            (a.pageY =
              b.clientY +
              ((f && f.scrollTop) || (c && c.scrollTop) || 0) -
              ((f && f.clientTop) || (c && c.clientTop) || 0))),
          !a.relatedTarget &&
            h &&
            (a.relatedTarget = h === a.target ? b.toElement : h),
          a.which ||
            void 0 === g ||
            (a.which = 1 & g ? 1 : 2 & g ? 3 : 4 & g ? 2 : 0),
          a
        );
      },
    },
    special: {
      load: { noBubble: !0 },
      focus: {
        trigger: function () {
          if (this !== ra() && this.focus)
            try {
              return this.focus(), !1;
            } catch (a) {}
        },
        delegateType: "focusin",
      },
      blur: {
        trigger: function () {
          return this === ra() && this.blur ? (this.blur(), !1) : void 0;
        },
        delegateType: "focusout",
      },
      click: {
        trigger: function () {
          return n.nodeName(this, "input") &&
            "checkbox" === this.type &&
            this.click
            ? (this.click(), !1)
            : void 0;
        },
        _default: function (a) {
          return n.nodeName(a.target, "a");
        },
      },
      beforeunload: {
        postDispatch: function (a) {
          void 0 !== a.result &&
            a.originalEvent &&
            (a.originalEvent.returnValue = a.result);
        },
      },
    },
    simulate: function (a, b, c) {
      var d = n.extend(new n.Event(), c, { type: a, isSimulated: !0 });
      n.event.trigger(d, null, b), d.isDefaultPrevented() && c.preventDefault();
    },
  }),
    (n.removeEvent = d.removeEventListener
      ? function (a, b, c) {
          a.removeEventListener && a.removeEventListener(b, c);
        }
      : function (a, b, c) {
          var d = "on" + b;
          a.detachEvent &&
            ("undefined" == typeof a[d] && (a[d] = null), a.detachEvent(d, c));
        }),
    (n.Event = function (a, b) {
      return this instanceof n.Event
        ? (a && a.type
            ? ((this.originalEvent = a),
              (this.type = a.type),
              (this.isDefaultPrevented =
                a.defaultPrevented ||
                (void 0 === a.defaultPrevented && a.returnValue === !1)
                  ? pa
                  : qa))
            : (this.type = a),
          b && n.extend(this, b),
          (this.timeStamp = (a && a.timeStamp) || n.now()),
          void (this[n.expando] = !0))
        : new n.Event(a, b);
    }),
    (n.Event.prototype = {
      constructor: n.Event,
      isDefaultPrevented: qa,
      isPropagationStopped: qa,
      isImmediatePropagationStopped: qa,
      preventDefault: function () {
        var a = this.originalEvent;
        (this.isDefaultPrevented = pa),
          a && (a.preventDefault ? a.preventDefault() : (a.returnValue = !1));
      },
      stopPropagation: function () {
        var a = this.originalEvent;
        (this.isPropagationStopped = pa),
          a &&
            !this.isSimulated &&
            (a.stopPropagation && a.stopPropagation(), (a.cancelBubble = !0));
      },
      stopImmediatePropagation: function () {
        var a = this.originalEvent;
        (this.isImmediatePropagationStopped = pa),
          a && a.stopImmediatePropagation && a.stopImmediatePropagation(),
          this.stopPropagation();
      },
    }),
    n.each(
      {
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout",
      },
      function (a, b) {
        n.event.special[a] = {
          delegateType: b,
          bindType: b,
          handle: function (a) {
            var c,
              d = this,
              e = a.relatedTarget,
              f = a.handleObj;
            return (
              (e && (e === d || n.contains(d, e))) ||
                ((a.type = f.origType),
                (c = f.handler.apply(this, arguments)),
                (a.type = b)),
              c
            );
          },
        };
      }
    ),
    l.submit ||
      (n.event.special.submit = {
        setup: function () {
          return n.nodeName(this, "form")
            ? !1
            : void n.event.add(
                this,
                "click._submit keypress._submit",
                function (a) {
                  var b = a.target,
                    c =
                      n.nodeName(b, "input") || n.nodeName(b, "button")
                        ? n.prop(b, "form")
                        : void 0;
                  c &&
                    !n._data(c, "submit") &&
                    (n.event.add(c, "submit._submit", function (a) {
                      a._submitBubble = !0;
                    }),
                    n._data(c, "submit", !0));
                }
              );
        },
        postDispatch: function (a) {
          a._submitBubble &&
            (delete a._submitBubble,
            this.parentNode &&
              !a.isTrigger &&
              n.event.simulate("submit", this.parentNode, a));
        },
        teardown: function () {
          return n.nodeName(this, "form")
            ? !1
            : void n.event.remove(this, "._submit");
        },
      }),
    l.change ||
      (n.event.special.change = {
        setup: function () {
          return ka.test(this.nodeName)
            ? (("checkbox" !== this.type && "radio" !== this.type) ||
                (n.event.add(this, "propertychange._change", function (a) {
                  "checked" === a.originalEvent.propertyName &&
                    (this._justChanged = !0);
                }),
                n.event.add(this, "click._change", function (a) {
                  this._justChanged && !a.isTrigger && (this._justChanged = !1),
                    n.event.simulate("change", this, a);
                })),
              !1)
            : void n.event.add(this, "beforeactivate._change", function (a) {
                var b = a.target;
                ka.test(b.nodeName) &&
                  !n._data(b, "change") &&
                  (n.event.add(b, "change._change", function (a) {
                    !this.parentNode ||
                      a.isSimulated ||
                      a.isTrigger ||
                      n.event.simulate("change", this.parentNode, a);
                  }),
                  n._data(b, "change", !0));
              });
        },
        handle: function (a) {
          var b = a.target;
          return this !== b ||
            a.isSimulated ||
            a.isTrigger ||
            ("radio" !== b.type && "checkbox" !== b.type)
            ? a.handleObj.handler.apply(this, arguments)
            : void 0;
        },
        teardown: function () {
          return n.event.remove(this, "._change"), !ka.test(this.nodeName);
        },
      }),
    l.focusin ||
      n.each({ focus: "focusin", blur: "focusout" }, function (a, b) {
        var c = function (a) {
          n.event.simulate(b, a.target, n.event.fix(a));
        };
        n.event.special[b] = {
          setup: function () {
            var d = this.ownerDocument || this,
              e = n._data(d, b);
            e || d.addEventListener(a, c, !0), n._data(d, b, (e || 0) + 1);
          },
          teardown: function () {
            var d = this.ownerDocument || this,
              e = n._data(d, b) - 1;
            e
              ? n._data(d, b, e)
              : (d.removeEventListener(a, c, !0), n._removeData(d, b));
          },
        };
      }),
    n.fn.extend({
      on: function (a, b, c, d) {
        return sa(this, a, b, c, d);
      },
      one: function (a, b, c, d) {
        return sa(this, a, b, c, d, 1);
      },
      off: function (a, b, c) {
        var d, e;
        if (a && a.preventDefault && a.handleObj)
          return (
            (d = a.handleObj),
            n(a.delegateTarget).off(
              d.namespace ? d.origType + "." + d.namespace : d.origType,
              d.selector,
              d.handler
            ),
            this
          );
        if ("object" == typeof a) {
          for (e in a) this.off(e, b, a[e]);
          return this;
        }
        return (
          (b !== !1 && "function" != typeof b) || ((c = b), (b = void 0)),
          c === !1 && (c = qa),
          this.each(function () {
            n.event.remove(this, a, c, b);
          })
        );
      },
      trigger: function (a, b) {
        return this.each(function () {
          n.event.trigger(a, b, this);
        });
      },
      triggerHandler: function (a, b) {
        var c = this[0];
        return c ? n.event.trigger(a, b, c, !0) : void 0;
      },
    });
  var ta = / jQuery\d+="(?:null|\d+)"/g,
    ua = new RegExp("<(?:" + ba + ")[\\s/>]", "i"),
    va =
      /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
    wa = /<script|<style|<link/i,
    xa = /checked\s*(?:[^=]|=\s*.checked.)/i,
    ya = /^true\/(.*)/,
    za = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
    Aa = ca(d),
    Ba = Aa.appendChild(d.createElement("div"));
  function Ca(a, b) {
    return n.nodeName(a, "table") &&
      n.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr")
      ? a.getElementsByTagName("tbody")[0] ||
          a.appendChild(a.ownerDocument.createElement("tbody"))
      : a;
  }
  function Da(a) {
    return (a.type = (null !== n.find.attr(a, "type")) + "/" + a.type), a;
  }
  function Ea(a) {
    var b = ya.exec(a.type);
    return b ? (a.type = b[1]) : a.removeAttribute("type"), a;
  }
  function Fa(a, b) {
    if (1 === b.nodeType && n.hasData(a)) {
      var c,
        d,
        e,
        f = n._data(a),
        g = n._data(b, f),
        h = f.events;
      if (h) {
        delete g.handle, (g.events = {});
        for (c in h)
          for (d = 0, e = h[c].length; e > d; d++) n.event.add(b, c, h[c][d]);
      }
      g.data && (g.data = n.extend({}, g.data));
    }
  }
  function Ga(a, b) {
    var c, d, e;
    if (1 === b.nodeType) {
      if (((c = b.nodeName.toLowerCase()), !l.noCloneEvent && b[n.expando])) {
        e = n._data(b);
        for (d in e.events) n.removeEvent(b, d, e.handle);
        b.removeAttribute(n.expando);
      }
      "script" === c && b.text !== a.text
        ? ((Da(b).text = a.text), Ea(b))
        : "object" === c
        ? (b.parentNode && (b.outerHTML = a.outerHTML),
          l.html5Clone &&
            a.innerHTML &&
            !n.trim(b.innerHTML) &&
            (b.innerHTML = a.innerHTML))
        : "input" === c && Z.test(a.type)
        ? ((b.defaultChecked = b.checked = a.checked),
          b.value !== a.value && (b.value = a.value))
        : "option" === c
        ? (b.defaultSelected = b.selected = a.defaultSelected)
        : ("input" !== c && "textarea" !== c) ||
          (b.defaultValue = a.defaultValue);
    }
  }
  function Ha(a, b, c, d) {
    b = f.apply([], b);
    var e,
      g,
      h,
      i,
      j,
      k,
      m = 0,
      o = a.length,
      p = o - 1,
      q = b[0],
      r = n.isFunction(q);
    if (r || (o > 1 && "string" == typeof q && !l.checkClone && xa.test(q)))
      return a.each(function (e) {
        var f = a.eq(e);
        r && (b[0] = q.call(this, e, f.html())), Ha(f, b, c, d);
      });
    if (
      o &&
      ((k = ja(b, a[0].ownerDocument, !1, a, d)),
      (e = k.firstChild),
      1 === k.childNodes.length && (k = e),
      e || d)
    ) {
      for (i = n.map(ea(k, "script"), Da), h = i.length; o > m; m++)
        (g = k),
          m !== p &&
            ((g = n.clone(g, !0, !0)), h && n.merge(i, ea(g, "script"))),
          c.call(a[m], g, m);
      if (h)
        for (j = i[i.length - 1].ownerDocument, n.map(i, Ea), m = 0; h > m; m++)
          (g = i[m]),
            _.test(g.type || "") &&
              !n._data(g, "globalEval") &&
              n.contains(j, g) &&
              (g.src
                ? n._evalUrl && n._evalUrl(g.src)
                : n.globalEval(
                    (g.text || g.textContent || g.innerHTML || "").replace(
                      za,
                      ""
                    )
                  ));
      k = e = null;
    }
    return a;
  }
  function Ia(a, b, c) {
    for (var d, e = b ? n.filter(b, a) : a, f = 0; null != (d = e[f]); f++)
      c || 1 !== d.nodeType || n.cleanData(ea(d)),
        d.parentNode &&
          (c && n.contains(d.ownerDocument, d) && fa(ea(d, "script")),
          d.parentNode.removeChild(d));
    return a;
  }
  n.extend({
    htmlPrefilter: function (a) {
      return a.replace(va, "<$1></$2>");
    },
    clone: function (a, b, c) {
      var d,
        e,
        f,
        g,
        h,
        i = n.contains(a.ownerDocument, a);
      if (
        (l.html5Clone || n.isXMLDoc(a) || !ua.test("<" + a.nodeName + ">")
          ? (f = a.cloneNode(!0))
          : ((Ba.innerHTML = a.outerHTML), Ba.removeChild((f = Ba.firstChild))),
        !(
          (l.noCloneEvent && l.noCloneChecked) ||
          (1 !== a.nodeType && 11 !== a.nodeType) ||
          n.isXMLDoc(a)
        ))
      )
        for (d = ea(f), h = ea(a), g = 0; null != (e = h[g]); ++g)
          d[g] && Ga(e, d[g]);
      if (b)
        if (c)
          for (h = h || ea(a), d = d || ea(f), g = 0; null != (e = h[g]); g++)
            Fa(e, d[g]);
        else Fa(a, f);
      return (
        (d = ea(f, "script")),
        d.length > 0 && fa(d, !i && ea(a, "script")),
        (d = h = e = null),
        f
      );
    },
    cleanData: function (a, b) {
      for (
        var d,
          e,
          f,
          g,
          h = 0,
          i = n.expando,
          j = n.cache,
          k = l.attributes,
          m = n.event.special;
        null != (d = a[h]);
        h++
      )
        if ((b || M(d)) && ((f = d[i]), (g = f && j[f]))) {
          if (g.events)
            for (e in g.events)
              m[e] ? n.event.remove(d, e) : n.removeEvent(d, e, g.handle);
          j[f] &&
            (delete j[f],
            k || "undefined" == typeof d.removeAttribute
              ? (d[i] = void 0)
              : d.removeAttribute(i),
            c.push(f));
        }
    },
  }),
    n.fn.extend({
      domManip: Ha,
      detach: function (a) {
        return Ia(this, a, !0);
      },
      remove: function (a) {
        return Ia(this, a);
      },
      text: function (a) {
        return Y(
          this,
          function (a) {
            return void 0 === a
              ? n.text(this)
              : this.empty().append(
                  ((this[0] && this[0].ownerDocument) || d).createTextNode(a)
                );
          },
          null,
          a,
          arguments.length
        );
      },
      append: function () {
        return Ha(this, arguments, function (a) {
          if (
            1 === this.nodeType ||
            11 === this.nodeType ||
            9 === this.nodeType
          ) {
            var b = Ca(this, a);
            b.appendChild(a);
          }
        });
      },
      prepend: function () {
        return Ha(this, arguments, function (a) {
          if (
            1 === this.nodeType ||
            11 === this.nodeType ||
            9 === this.nodeType
          ) {
            var b = Ca(this, a);
            b.insertBefore(a, b.firstChild);
          }
        });
      },
      before: function () {
        return Ha(this, arguments, function (a) {
          this.parentNode && this.parentNode.insertBefore(a, this);
        });
      },
      after: function () {
        return Ha(this, arguments, function (a) {
          this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
        });
      },
      empty: function () {
        for (var a, b = 0; null != (a = this[b]); b++) {
          1 === a.nodeType && n.cleanData(ea(a, !1));
          while (a.firstChild) a.removeChild(a.firstChild);
          a.options && n.nodeName(a, "select") && (a.options.length = 0);
        }
        return this;
      },
      clone: function (a, b) {
        return (
          (a = null == a ? !1 : a),
          (b = null == b ? a : b),
          this.map(function () {
            return n.clone(this, a, b);
          })
        );
      },
      html: function (a) {
        return Y(
          this,
          function (a) {
            var b = this[0] || {},
              c = 0,
              d = this.length;
            if (void 0 === a)
              return 1 === b.nodeType ? b.innerHTML.replace(ta, "") : void 0;
            if (
              "string" == typeof a &&
              !wa.test(a) &&
              (l.htmlSerialize || !ua.test(a)) &&
              (l.leadingWhitespace || !aa.test(a)) &&
              !da[($.exec(a) || ["", ""])[1].toLowerCase()]
            ) {
              a = n.htmlPrefilter(a);
              try {
                for (; d > c; c++)
                  (b = this[c] || {}),
                    1 === b.nodeType &&
                      (n.cleanData(ea(b, !1)), (b.innerHTML = a));
                b = 0;
              } catch (e) {}
            }
            b && this.empty().append(a);
          },
          null,
          a,
          arguments.length
        );
      },
      replaceWith: function () {
        var a = [];
        return Ha(
          this,
          arguments,
          function (b) {
            var c = this.parentNode;
            n.inArray(this, a) < 0 &&
              (n.cleanData(ea(this)), c && c.replaceChild(b, this));
          },
          a
        );
      },
    }),
    n.each(
      {
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith",
      },
      function (a, b) {
        n.fn[a] = function (a) {
          for (var c, d = 0, e = [], f = n(a), h = f.length - 1; h >= d; d++)
            (c = d === h ? this : this.clone(!0)),
              n(f[d])[b](c),
              g.apply(e, c.get());
          return this.pushStack(e);
        };
      }
    );
  var Ja,
    Ka = { HTML: "block", BODY: "block" };
  function La(a, b) {
    var c = n(b.createElement(a)).appendTo(b.body),
      d = n.css(c[0], "display");
    return c.detach(), d;
  }
  function Ma(a) {
    var b = d,
      c = Ka[a];
    return (
      c ||
        ((c = La(a, b)),
        ("none" !== c && c) ||
          ((Ja = (
            Ja || n("<iframe frameborder='0' width='0' height='0'/>")
          ).appendTo(b.documentElement)),
          (b = (Ja[0].contentWindow || Ja[0].contentDocument).document),
          b.write(),
          b.close(),
          (c = La(a, b)),
          Ja.detach()),
        (Ka[a] = c)),
      c
    );
  }
  var Na = /^margin/,
    Oa = new RegExp("^(" + T + ")(?!px)[a-z%]+$", "i"),
    Pa = function (a, b, c, d) {
      var e,
        f,
        g = {};
      for (f in b) (g[f] = a.style[f]), (a.style[f] = b[f]);
      e = c.apply(a, d || []);
      for (f in b) a.style[f] = g[f];
      return e;
    },
    Qa = d.documentElement;
  !(function () {
    var b,
      c,
      e,
      f,
      g,
      h,
      i = d.createElement("div"),
      j = d.createElement("div");
    if (j.style) {
      (j.style.cssText = "float:left;opacity:.5"),
        (l.opacity = "0.5" === j.style.opacity),
        (l.cssFloat = !!j.style.cssFloat),
        (j.style.backgroundClip = "content-box"),
        (j.cloneNode(!0).style.backgroundClip = ""),
        (l.clearCloneStyle = "content-box" === j.style.backgroundClip),
        (i = d.createElement("div")),
        (i.style.cssText =
          "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute"),
        (j.innerHTML = ""),
        i.appendChild(j),
        (l.boxSizing =
          "" === j.style.boxSizing ||
          "" === j.style.MozBoxSizing ||
          "" === j.style.WebkitBoxSizing),
        n.extend(l, {
          reliableHiddenOffsets: function () {
            return null == b && k(), f;
          },
          boxSizingReliable: function () {
            return null == b && k(), e;
          },
          pixelMarginRight: function () {
            return null == b && k(), c;
          },
          pixelPosition: function () {
            return null == b && k(), b;
          },
          reliableMarginRight: function () {
            return null == b && k(), g;
          },
          reliableMarginLeft: function () {
            return null == b && k(), h;
          },
        });
      function k() {
        var k,
          l,
          m = d.documentElement;
        m.appendChild(i),
          (j.style.cssText =
            "-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%"),
          (b = e = h = !1),
          (c = g = !0),
          a.getComputedStyle &&
            ((l = a.getComputedStyle(j)),
            (b = "1%" !== (l || {}).top),
            (h = "2px" === (l || {}).marginLeft),
            (e = "4px" === (l || { width: "4px" }).width),
            (j.style.marginRight = "50%"),
            (c = "4px" === (l || { marginRight: "4px" }).marginRight),
            (k = j.appendChild(d.createElement("div"))),
            (k.style.cssText = j.style.cssText =
              "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0"),
            (k.style.marginRight = k.style.width = "0"),
            (j.style.width = "1px"),
            (g = !parseFloat((a.getComputedStyle(k) || {}).marginRight)),
            j.removeChild(k)),
          (j.style.display = "none"),
          (f = 0 === j.getClientRects().length),
          f &&
            ((j.style.display = ""),
            (j.innerHTML = "<table><tr><td></td><td>t</td></tr></table>"),
            (j.childNodes[0].style.borderCollapse = "separate"),
            (k = j.getElementsByTagName("td")),
            (k[0].style.cssText = "margin:0;border:0;padding:0;display:none"),
            (f = 0 === k[0].offsetHeight),
            f &&
              ((k[0].style.display = ""),
              (k[1].style.display = "none"),
              (f = 0 === k[0].offsetHeight))),
          m.removeChild(i);
      }
    }
  })();
  var Ra,
    Sa,
    Ta = /^(top|right|bottom|left)$/;
  a.getComputedStyle
    ? ((Ra = function (b) {
        var c = b.ownerDocument.defaultView;
        return (c && c.opener) || (c = a), c.getComputedStyle(b);
      }),
      (Sa = function (a, b, c) {
        var d,
          e,
          f,
          g,
          h = a.style;
        return (
          (c = c || Ra(a)),
          (g = c ? c.getPropertyValue(b) || c[b] : void 0),
          ("" !== g && void 0 !== g) ||
            n.contains(a.ownerDocument, a) ||
            (g = n.style(a, b)),
          c &&
            !l.pixelMarginRight() &&
            Oa.test(g) &&
            Na.test(b) &&
            ((d = h.width),
            (e = h.minWidth),
            (f = h.maxWidth),
            (h.minWidth = h.maxWidth = h.width = g),
            (g = c.width),
            (h.width = d),
            (h.minWidth = e),
            (h.maxWidth = f)),
          void 0 === g ? g : g + ""
        );
      }))
    : Qa.currentStyle &&
      ((Ra = function (a) {
        return a.currentStyle;
      }),
      (Sa = function (a, b, c) {
        var d,
          e,
          f,
          g,
          h = a.style;
        return (
          (c = c || Ra(a)),
          (g = c ? c[b] : void 0),
          null == g && h && h[b] && (g = h[b]),
          Oa.test(g) &&
            !Ta.test(b) &&
            ((d = h.left),
            (e = a.runtimeStyle),
            (f = e && e.left),
            f && (e.left = a.currentStyle.left),
            (h.left = "fontSize" === b ? "1em" : g),
            (g = h.pixelLeft + "px"),
            (h.left = d),
            f && (e.left = f)),
          void 0 === g ? g : g + "" || "auto"
        );
      }));
  function Ua(a, b) {
    return {
      get: function () {
        return a()
          ? void delete this.get
          : (this.get = b).apply(this, arguments);
      },
    };
  }
  var Va = /alpha\([^)]*\)/i,
    Wa = /opacity\s*=\s*([^)]*)/i,
    Xa = /^(none|table(?!-c[ea]).+)/,
    Ya = new RegExp("^(" + T + ")(.*)$", "i"),
    Za = { position: "absolute", visibility: "hidden", display: "block" },
    $a = { letterSpacing: "0", fontWeight: "400" },
    _a = ["Webkit", "O", "Moz", "ms"],
    ab = d.createElement("div").style;
  function bb(a) {
    if (a in ab) return a;
    var b = a.charAt(0).toUpperCase() + a.slice(1),
      c = _a.length;
    while (c--) if (((a = _a[c] + b), a in ab)) return a;
  }
  function cb(a, b) {
    for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++)
      (d = a[g]),
        d.style &&
          ((f[g] = n._data(d, "olddisplay")),
          (c = d.style.display),
          b
            ? (f[g] || "none" !== c || (d.style.display = ""),
              "" === d.style.display &&
                W(d) &&
                (f[g] = n._data(d, "olddisplay", Ma(d.nodeName))))
            : ((e = W(d)),
              ((c && "none" !== c) || !e) &&
                n._data(d, "olddisplay", e ? c : n.css(d, "display"))));
    for (g = 0; h > g; g++)
      (d = a[g]),
        d.style &&
          ((b && "none" !== d.style.display && "" !== d.style.display) ||
            (d.style.display = b ? f[g] || "" : "none"));
    return a;
  }
  function db(a, b, c) {
    var d = Ya.exec(b);
    return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b;
  }
  function eb(a, b, c, d, e) {
    for (
      var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0,
        g = 0;
      4 > f;
      f += 2
    )
      "margin" === c && (g += n.css(a, c + V[f], !0, e)),
        d
          ? ("content" === c && (g -= n.css(a, "padding" + V[f], !0, e)),
            "margin" !== c && (g -= n.css(a, "border" + V[f] + "Width", !0, e)))
          : ((g += n.css(a, "padding" + V[f], !0, e)),
            "padding" !== c &&
              (g += n.css(a, "border" + V[f] + "Width", !0, e)));
    return g;
  }
  function fb(a, b, c) {
    var d = !0,
      e = "width" === b ? a.offsetWidth : a.offsetHeight,
      f = Ra(a),
      g = l.boxSizing && "border-box" === n.css(a, "boxSizing", !1, f);
    if (0 >= e || null == e) {
      if (
        ((e = Sa(a, b, f)),
        (0 > e || null == e) && (e = a.style[b]),
        Oa.test(e))
      )
        return e;
      (d = g && (l.boxSizingReliable() || e === a.style[b])),
        (e = parseFloat(e) || 0);
    }
    return e + eb(a, b, c || (g ? "border" : "content"), d, f) + "px";
  }
  n.extend({
    cssHooks: {
      opacity: {
        get: function (a, b) {
          if (b) {
            var c = Sa(a, "opacity");
            return "" === c ? "1" : c;
          }
        },
      },
    },
    cssNumber: {
      animationIterationCount: !0,
      columnCount: !0,
      fillOpacity: !0,
      flexGrow: !0,
      flexShrink: !0,
      fontWeight: !0,
      lineHeight: !0,
      opacity: !0,
      order: !0,
      orphans: !0,
      widows: !0,
      zIndex: !0,
      zoom: !0,
    },
    cssProps: { float: l.cssFloat ? "cssFloat" : "styleFloat" },
    style: function (a, b, c, d) {
      if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
        var e,
          f,
          g,
          h = n.camelCase(b),
          i = a.style;
        if (
          ((b = n.cssProps[h] || (n.cssProps[h] = bb(h) || h)),
          (g = n.cssHooks[b] || n.cssHooks[h]),
          void 0 === c)
        )
          return g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b];
        if (
          ((f = typeof c),
          "string" === f &&
            (e = U.exec(c)) &&
            e[1] &&
            ((c = X(a, b, e)), (f = "number")),
          null != c &&
            c === c &&
            ("number" === f &&
              (c += (e && e[3]) || (n.cssNumber[h] ? "" : "px")),
            l.clearCloneStyle ||
              "" !== c ||
              0 !== b.indexOf("background") ||
              (i[b] = "inherit"),
            !(g && "set" in g && void 0 === (c = g.set(a, c, d)))))
        )
          try {
            i[b] = c;
          } catch (j) {}
      }
    },
    css: function (a, b, c, d) {
      var e,
        f,
        g,
        h = n.camelCase(b);
      return (
        (b = n.cssProps[h] || (n.cssProps[h] = bb(h) || h)),
        (g = n.cssHooks[b] || n.cssHooks[h]),
        g && "get" in g && (f = g.get(a, !0, c)),
        void 0 === f && (f = Sa(a, b, d)),
        "normal" === f && b in $a && (f = $a[b]),
        "" === c || c
          ? ((e = parseFloat(f)), c === !0 || isFinite(e) ? e || 0 : f)
          : f
      );
    },
  }),
    n.each(["height", "width"], function (a, b) {
      n.cssHooks[b] = {
        get: function (a, c, d) {
          return c
            ? Xa.test(n.css(a, "display")) && 0 === a.offsetWidth
              ? Pa(a, Za, function () {
                  return fb(a, b, d);
                })
              : fb(a, b, d)
            : void 0;
        },
        set: function (a, c, d) {
          var e = d && Ra(a);
          return db(
            a,
            c,
            d
              ? eb(
                  a,
                  b,
                  d,
                  l.boxSizing && "border-box" === n.css(a, "boxSizing", !1, e),
                  e
                )
              : 0
          );
        },
      };
    }),
    l.opacity ||
      (n.cssHooks.opacity = {
        get: function (a, b) {
          return Wa.test(
            (b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || ""
          )
            ? 0.01 * parseFloat(RegExp.$1) + ""
            : b
            ? "1"
            : "";
        },
        set: function (a, b) {
          var c = a.style,
            d = a.currentStyle,
            e = n.isNumeric(b) ? "alpha(opacity=" + 100 * b + ")" : "",
            f = (d && d.filter) || c.filter || "";
          (c.zoom = 1),
            ((b >= 1 || "" === b) &&
              "" === n.trim(f.replace(Va, "")) &&
              c.removeAttribute &&
              (c.removeAttribute("filter"), "" === b || (d && !d.filter))) ||
              (c.filter = Va.test(f) ? f.replace(Va, e) : f + " " + e);
        },
      }),
    (n.cssHooks.marginRight = Ua(l.reliableMarginRight, function (a, b) {
      return b
        ? Pa(a, { display: "inline-block" }, Sa, [a, "marginRight"])
        : void 0;
    })),
    (n.cssHooks.marginLeft = Ua(l.reliableMarginLeft, function (a, b) {
      return b
        ? (parseFloat(Sa(a, "marginLeft")) ||
            (n.contains(a.ownerDocument, a)
              ? a.getBoundingClientRect().left -
                Pa(a, { marginLeft: 0 }, function () {
                  return a.getBoundingClientRect().left;
                })
              : 0)) + "px"
        : void 0;
    })),
    n.each({ margin: "", padding: "", border: "Width" }, function (a, b) {
      (n.cssHooks[a + b] = {
        expand: function (c) {
          for (
            var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c];
            4 > d;
            d++
          )
            e[a + V[d] + b] = f[d] || f[d - 2] || f[0];
          return e;
        },
      }),
        Na.test(a) || (n.cssHooks[a + b].set = db);
    }),
    n.fn.extend({
      css: function (a, b) {
        return Y(
          this,
          function (a, b, c) {
            var d,
              e,
              f = {},
              g = 0;
            if (n.isArray(b)) {
              for (d = Ra(a), e = b.length; e > g; g++)
                f[b[g]] = n.css(a, b[g], !1, d);
              return f;
            }
            return void 0 !== c ? n.style(a, b, c) : n.css(a, b);
          },
          a,
          b,
          arguments.length > 1
        );
      },
      show: function () {
        return cb(this, !0);
      },
      hide: function () {
        return cb(this);
      },
      toggle: function (a) {
        return "boolean" == typeof a
          ? a
            ? this.show()
            : this.hide()
          : this.each(function () {
              W(this) ? n(this).show() : n(this).hide();
            });
      },
    });
  function gb(a, b, c, d, e) {
    return new gb.prototype.init(a, b, c, d, e);
  }
  (n.Tween = gb),
    (gb.prototype = {
      constructor: gb,
      init: function (a, b, c, d, e, f) {
        (this.elem = a),
          (this.prop = c),
          (this.easing = e || n.easing._default),
          (this.options = b),
          (this.start = this.now = this.cur()),
          (this.end = d),
          (this.unit = f || (n.cssNumber[c] ? "" : "px"));
      },
      cur: function () {
        var a = gb.propHooks[this.prop];
        return a && a.get ? a.get(this) : gb.propHooks._default.get(this);
      },
      run: function (a) {
        var b,
          c = gb.propHooks[this.prop];
        return (
          this.options.duration
            ? (this.pos = b =
                n.easing[this.easing](
                  a,
                  this.options.duration * a,
                  0,
                  1,
                  this.options.duration
                ))
            : (this.pos = b = a),
          (this.now = (this.end - this.start) * b + this.start),
          this.options.step &&
            this.options.step.call(this.elem, this.now, this),
          c && c.set ? c.set(this) : gb.propHooks._default.set(this),
          this
        );
      },
    }),
    (gb.prototype.init.prototype = gb.prototype),
    (gb.propHooks = {
      _default: {
        get: function (a) {
          var b;
          return 1 !== a.elem.nodeType ||
            (null != a.elem[a.prop] && null == a.elem.style[a.prop])
            ? a.elem[a.prop]
            : ((b = n.css(a.elem, a.prop, "")), b && "auto" !== b ? b : 0);
        },
        set: function (a) {
          n.fx.step[a.prop]
            ? n.fx.step[a.prop](a)
            : 1 !== a.elem.nodeType ||
              (null == a.elem.style[n.cssProps[a.prop]] && !n.cssHooks[a.prop])
            ? (a.elem[a.prop] = a.now)
            : n.style(a.elem, a.prop, a.now + a.unit);
        },
      },
    }),
    (gb.propHooks.scrollTop = gb.propHooks.scrollLeft =
      {
        set: function (a) {
          a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
        },
      }),
    (n.easing = {
      linear: function (a) {
        return a;
      },
      swing: function (a) {
        return 0.5 - Math.cos(a * Math.PI) / 2;
      },
      _default: "swing",
    }),
    (n.fx = gb.prototype.init),
    (n.fx.step = {});
  var hb,
    ib,
    jb = /^(?:toggle|show|hide)$/,
    kb = /queueHooks$/;
  function lb() {
    return (
      a.setTimeout(function () {
        hb = void 0;
      }),
      (hb = n.now())
    );
  }
  function mb(a, b) {
    var c,
      d = { height: a },
      e = 0;
    for (b = b ? 1 : 0; 4 > e; e += 2 - b)
      (c = V[e]), (d["margin" + c] = d["padding" + c] = a);
    return b && (d.opacity = d.width = a), d;
  }
  function nb(a, b, c) {
    for (
      var d,
        e = (qb.tweeners[b] || []).concat(qb.tweeners["*"]),
        f = 0,
        g = e.length;
      g > f;
      f++
    )
      if ((d = e[f].call(c, b, a))) return d;
  }
  function ob(a, b, c) {
    var d,
      e,
      f,
      g,
      h,
      i,
      j,
      k,
      m = this,
      o = {},
      p = a.style,
      q = a.nodeType && W(a),
      r = n._data(a, "fxshow");
    c.queue ||
      ((h = n._queueHooks(a, "fx")),
      null == h.unqueued &&
        ((h.unqueued = 0),
        (i = h.empty.fire),
        (h.empty.fire = function () {
          h.unqueued || i();
        })),
      h.unqueued++,
      m.always(function () {
        m.always(function () {
          h.unqueued--, n.queue(a, "fx").length || h.empty.fire();
        });
      })),
      1 === a.nodeType &&
        ("height" in b || "width" in b) &&
        ((c.overflow = [p.overflow, p.overflowX, p.overflowY]),
        (j = n.css(a, "display")),
        (k = "none" === j ? n._data(a, "olddisplay") || Ma(a.nodeName) : j),
        "inline" === k &&
          "none" === n.css(a, "float") &&
          (l.inlineBlockNeedsLayout && "inline" !== Ma(a.nodeName)
            ? (p.zoom = 1)
            : (p.display = "inline-block"))),
      c.overflow &&
        ((p.overflow = "hidden"),
        l.shrinkWrapBlocks() ||
          m.always(function () {
            (p.overflow = c.overflow[0]),
              (p.overflowX = c.overflow[1]),
              (p.overflowY = c.overflow[2]);
          }));
    for (d in b)
      if (((e = b[d]), jb.exec(e))) {
        if (
          (delete b[d], (f = f || "toggle" === e), e === (q ? "hide" : "show"))
        ) {
          if ("show" !== e || !r || void 0 === r[d]) continue;
          q = !0;
        }
        o[d] = (r && r[d]) || n.style(a, d);
      } else j = void 0;
    if (n.isEmptyObject(o))
      "inline" === ("none" === j ? Ma(a.nodeName) : j) && (p.display = j);
    else {
      r ? "hidden" in r && (q = r.hidden) : (r = n._data(a, "fxshow", {})),
        f && (r.hidden = !q),
        q
          ? n(a).show()
          : m.done(function () {
              n(a).hide();
            }),
        m.done(function () {
          var b;
          n._removeData(a, "fxshow");
          for (b in o) n.style(a, b, o[b]);
        });
      for (d in o)
        (g = nb(q ? r[d] : 0, d, m)),
          d in r ||
            ((r[d] = g.start),
            q &&
              ((g.end = g.start),
              (g.start = "width" === d || "height" === d ? 1 : 0)));
    }
  }
  function pb(a, b) {
    var c, d, e, f, g;
    for (c in a)
      if (
        ((d = n.camelCase(c)),
        (e = b[d]),
        (f = a[c]),
        n.isArray(f) && ((e = f[1]), (f = a[c] = f[0])),
        c !== d && ((a[d] = f), delete a[c]),
        (g = n.cssHooks[d]),
        g && "expand" in g)
      ) {
        (f = g.expand(f)), delete a[d];
        for (c in f) c in a || ((a[c] = f[c]), (b[c] = e));
      } else b[d] = e;
  }
  function qb(a, b, c) {
    var d,
      e,
      f = 0,
      g = qb.prefilters.length,
      h = n.Deferred().always(function () {
        delete i.elem;
      }),
      i = function () {
        if (e) return !1;
        for (
          var b = hb || lb(),
            c = Math.max(0, j.startTime + j.duration - b),
            d = c / j.duration || 0,
            f = 1 - d,
            g = 0,
            i = j.tweens.length;
          i > g;
          g++
        )
          j.tweens[g].run(f);
        return (
          h.notifyWith(a, [j, f, c]),
          1 > f && i ? c : (h.resolveWith(a, [j]), !1)
        );
      },
      j = h.promise({
        elem: a,
        props: n.extend({}, b),
        opts: n.extend(!0, { specialEasing: {}, easing: n.easing._default }, c),
        originalProperties: b,
        originalOptions: c,
        startTime: hb || lb(),
        duration: c.duration,
        tweens: [],
        createTween: function (b, c) {
          var d = n.Tween(
            a,
            j.opts,
            b,
            c,
            j.opts.specialEasing[b] || j.opts.easing
          );
          return j.tweens.push(d), d;
        },
        stop: function (b) {
          var c = 0,
            d = b ? j.tweens.length : 0;
          if (e) return this;
          for (e = !0; d > c; c++) j.tweens[c].run(1);
          return (
            b
              ? (h.notifyWith(a, [j, 1, 0]), h.resolveWith(a, [j, b]))
              : h.rejectWith(a, [j, b]),
            this
          );
        },
      }),
      k = j.props;
    for (pb(k, j.opts.specialEasing); g > f; f++)
      if ((d = qb.prefilters[f].call(j, a, k, j.opts)))
        return (
          n.isFunction(d.stop) &&
            (n._queueHooks(j.elem, j.opts.queue).stop = n.proxy(d.stop, d)),
          d
        );
    return (
      n.map(k, nb, j),
      n.isFunction(j.opts.start) && j.opts.start.call(a, j),
      n.fx.timer(n.extend(i, { elem: a, anim: j, queue: j.opts.queue })),
      j
        .progress(j.opts.progress)
        .done(j.opts.done, j.opts.complete)
        .fail(j.opts.fail)
        .always(j.opts.always)
    );
  }
  (n.Animation = n.extend(qb, {
    tweeners: {
      "*": [
        function (a, b) {
          var c = this.createTween(a, b);
          return X(c.elem, a, U.exec(b), c), c;
        },
      ],
    },
    tweener: function (a, b) {
      n.isFunction(a) ? ((b = a), (a = ["*"])) : (a = a.match(G));
      for (var c, d = 0, e = a.length; e > d; d++)
        (c = a[d]),
          (qb.tweeners[c] = qb.tweeners[c] || []),
          qb.tweeners[c].unshift(b);
    },
    prefilters: [ob],
    prefilter: function (a, b) {
      b ? qb.prefilters.unshift(a) : qb.prefilters.push(a);
    },
  })),
    (n.speed = function (a, b, c) {
      var d =
        a && "object" == typeof a
          ? n.extend({}, a)
          : {
              complete: c || (!c && b) || (n.isFunction(a) && a),
              duration: a,
              easing: (c && b) || (b && !n.isFunction(b) && b),
            };
      return (
        (d.duration = n.fx.off
          ? 0
          : "number" == typeof d.duration
          ? d.duration
          : d.duration in n.fx.speeds
          ? n.fx.speeds[d.duration]
          : n.fx.speeds._default),
        (null != d.queue && d.queue !== !0) || (d.queue = "fx"),
        (d.old = d.complete),
        (d.complete = function () {
          n.isFunction(d.old) && d.old.call(this),
            d.queue && n.dequeue(this, d.queue);
        }),
        d
      );
    }),
    n.fn.extend({
      fadeTo: function (a, b, c, d) {
        return this.filter(W)
          .css("opacity", 0)
          .show()
          .end()
          .animate({ opacity: b }, a, c, d);
      },
      animate: function (a, b, c, d) {
        var e = n.isEmptyObject(a),
          f = n.speed(b, c, d),
          g = function () {
            var b = qb(this, n.extend({}, a), f);
            (e || n._data(this, "finish")) && b.stop(!0);
          };
        return (
          (g.finish = g),
          e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g)
        );
      },
      stop: function (a, b, c) {
        var d = function (a) {
          var b = a.stop;
          delete a.stop, b(c);
        };
        return (
          "string" != typeof a && ((c = b), (b = a), (a = void 0)),
          b && a !== !1 && this.queue(a || "fx", []),
          this.each(function () {
            var b = !0,
              e = null != a && a + "queueHooks",
              f = n.timers,
              g = n._data(this);
            if (e) g[e] && g[e].stop && d(g[e]);
            else for (e in g) g[e] && g[e].stop && kb.test(e) && d(g[e]);
            for (e = f.length; e--; )
              f[e].elem !== this ||
                (null != a && f[e].queue !== a) ||
                (f[e].anim.stop(c), (b = !1), f.splice(e, 1));
            (!b && c) || n.dequeue(this, a);
          })
        );
      },
      finish: function (a) {
        return (
          a !== !1 && (a = a || "fx"),
          this.each(function () {
            var b,
              c = n._data(this),
              d = c[a + "queue"],
              e = c[a + "queueHooks"],
              f = n.timers,
              g = d ? d.length : 0;
            for (
              c.finish = !0,
                n.queue(this, a, []),
                e && e.stop && e.stop.call(this, !0),
                b = f.length;
              b--;

            )
              f[b].elem === this &&
                f[b].queue === a &&
                (f[b].anim.stop(!0), f.splice(b, 1));
            for (b = 0; g > b; b++)
              d[b] && d[b].finish && d[b].finish.call(this);
            delete c.finish;
          })
        );
      },
    }),
    n.each(["toggle", "show", "hide"], function (a, b) {
      var c = n.fn[b];
      n.fn[b] = function (a, d, e) {
        return null == a || "boolean" == typeof a
          ? c.apply(this, arguments)
          : this.animate(mb(b, !0), a, d, e);
      };
    }),
    n.each(
      {
        slideDown: mb("show"),
        slideUp: mb("hide"),
        slideToggle: mb("toggle"),
        fadeIn: { opacity: "show" },
        fadeOut: { opacity: "hide" },
        fadeToggle: { opacity: "toggle" },
      },
      function (a, b) {
        n.fn[a] = function (a, c, d) {
          return this.animate(b, a, c, d);
        };
      }
    ),
    (n.timers = []),
    (n.fx.tick = function () {
      var a,
        b = n.timers,
        c = 0;
      for (hb = n.now(); c < b.length; c++)
        (a = b[c]), a() || b[c] !== a || b.splice(c--, 1);
      b.length || n.fx.stop(), (hb = void 0);
    }),
    (n.fx.timer = function (a) {
      n.timers.push(a), a() ? n.fx.start() : n.timers.pop();
    }),
    (n.fx.interval = 13),
    (n.fx.start = function () {
      ib || (ib = a.setInterval(n.fx.tick, n.fx.interval));
    }),
    (n.fx.stop = function () {
      a.clearInterval(ib), (ib = null);
    }),
    (n.fx.speeds = { slow: 600, fast: 200, _default: 400 }),
    (n.fn.delay = function (b, c) {
      return (
        (b = n.fx ? n.fx.speeds[b] || b : b),
        (c = c || "fx"),
        this.queue(c, function (c, d) {
          var e = a.setTimeout(c, b);
          d.stop = function () {
            a.clearTimeout(e);
          };
        })
      );
    }),
    (function () {
      var a,
        b = d.createElement("input"),
        c = d.createElement("div"),
        e = d.createElement("select"),
        f = e.appendChild(d.createElement("option"));
      (c = d.createElement("div")),
        c.setAttribute("className", "t"),
        (c.innerHTML =
          "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>"),
        (a = c.getElementsByTagName("a")[0]),
        b.setAttribute("type", "checkbox"),
        c.appendChild(b),
        (a = c.getElementsByTagName("a")[0]),
        (a.style.cssText = "top:1px"),
        (l.getSetAttribute = "t" !== c.className),
        (l.style = /top/.test(a.getAttribute("style"))),
        (l.hrefNormalized = "/a" === a.getAttribute("href")),
        (l.checkOn = !!b.value),
        (l.optSelected = f.selected),
        (l.enctype = !!d.createElement("form").enctype),
        (e.disabled = !0),
        (l.optDisabled = !f.disabled),
        (b = d.createElement("input")),
        b.setAttribute("value", ""),
        (l.input = "" === b.getAttribute("value")),
        (b.value = "t"),
        b.setAttribute("type", "radio"),
        (l.radioValue = "t" === b.value);
    })();
  var rb = /\r/g,
    sb = /[\x20\t\r\n\f]+/g;
  n.fn.extend({
    val: function (a) {
      var b,
        c,
        d,
        e = this[0];
      {
        if (arguments.length)
          return (
            (d = n.isFunction(a)),
            this.each(function (c) {
              var e;
              1 === this.nodeType &&
                ((e = d ? a.call(this, c, n(this).val()) : a),
                null == e
                  ? (e = "")
                  : "number" == typeof e
                  ? (e += "")
                  : n.isArray(e) &&
                    (e = n.map(e, function (a) {
                      return null == a ? "" : a + "";
                    })),
                (b =
                  n.valHooks[this.type] ||
                  n.valHooks[this.nodeName.toLowerCase()]),
                (b && "set" in b && void 0 !== b.set(this, e, "value")) ||
                  (this.value = e));
            })
          );
        if (e)
          return (
            (b = n.valHooks[e.type] || n.valHooks[e.nodeName.toLowerCase()]),
            b && "get" in b && void 0 !== (c = b.get(e, "value"))
              ? c
              : ((c = e.value),
                "string" == typeof c ? c.replace(rb, "") : null == c ? "" : c)
          );
      }
    },
  }),
    n.extend({
      valHooks: {
        option: {
          get: function (a) {
            var b = n.find.attr(a, "value");
            return null != b ? b : n.trim(n.text(a)).replace(sb, " ");
          },
        },
        select: {
          get: function (a) {
            for (
              var b,
                c,
                d = a.options,
                e = a.selectedIndex,
                f = "select-one" === a.type || 0 > e,
                g = f ? null : [],
                h = f ? e + 1 : d.length,
                i = 0 > e ? h : f ? e : 0;
              h > i;
              i++
            )
              if (
                ((c = d[i]),
                (c.selected || i === e) &&
                  (l.optDisabled
                    ? !c.disabled
                    : null === c.getAttribute("disabled")) &&
                  (!c.parentNode.disabled ||
                    !n.nodeName(c.parentNode, "optgroup")))
              ) {
                if (((b = n(c).val()), f)) return b;
                g.push(b);
              }
            return g;
          },
          set: function (a, b) {
            var c,
              d,
              e = a.options,
              f = n.makeArray(b),
              g = e.length;
            while (g--)
              if (((d = e[g]), n.inArray(n.valHooks.option.get(d), f) > -1))
                try {
                  d.selected = c = !0;
                } catch (h) {
                  d.scrollHeight;
                }
              else d.selected = !1;
            return c || (a.selectedIndex = -1), e;
          },
        },
      },
    }),
    n.each(["radio", "checkbox"], function () {
      (n.valHooks[this] = {
        set: function (a, b) {
          return n.isArray(b)
            ? (a.checked = n.inArray(n(a).val(), b) > -1)
            : void 0;
        },
      }),
        l.checkOn ||
          (n.valHooks[this].get = function (a) {
            return null === a.getAttribute("value") ? "on" : a.value;
          });
    });
  var tb,
    ub,
    vb = n.expr.attrHandle,
    wb = /^(?:checked|selected)$/i,
    xb = l.getSetAttribute,
    yb = l.input;
  n.fn.extend({
    attr: function (a, b) {
      return Y(this, n.attr, a, b, arguments.length > 1);
    },
    removeAttr: function (a) {
      return this.each(function () {
        n.removeAttr(this, a);
      });
    },
  }),
    n.extend({
      attr: function (a, b, c) {
        var d,
          e,
          f = a.nodeType;
        if (3 !== f && 8 !== f && 2 !== f)
          return "undefined" == typeof a.getAttribute
            ? n.prop(a, b, c)
            : ((1 === f && n.isXMLDoc(a)) ||
                ((b = b.toLowerCase()),
                (e = n.attrHooks[b] || (n.expr.match.bool.test(b) ? ub : tb))),
              void 0 !== c
                ? null === c
                  ? void n.removeAttr(a, b)
                  : e && "set" in e && void 0 !== (d = e.set(a, c, b))
                  ? d
                  : (a.setAttribute(b, c + ""), c)
                : e && "get" in e && null !== (d = e.get(a, b))
                ? d
                : ((d = n.find.attr(a, b)), null == d ? void 0 : d));
      },
      attrHooks: {
        type: {
          set: function (a, b) {
            if (!l.radioValue && "radio" === b && n.nodeName(a, "input")) {
              var c = a.value;
              return a.setAttribute("type", b), c && (a.value = c), b;
            }
          },
        },
      },
      removeAttr: function (a, b) {
        var c,
          d,
          e = 0,
          f = b && b.match(G);
        if (f && 1 === a.nodeType)
          while ((c = f[e++]))
            (d = n.propFix[c] || c),
              n.expr.match.bool.test(c)
                ? (yb && xb) || !wb.test(c)
                  ? (a[d] = !1)
                  : (a[n.camelCase("default-" + c)] = a[d] = !1)
                : n.attr(a, c, ""),
              a.removeAttribute(xb ? c : d);
      },
    }),
    (ub = {
      set: function (a, b, c) {
        return (
          b === !1
            ? n.removeAttr(a, c)
            : (yb && xb) || !wb.test(c)
            ? a.setAttribute((!xb && n.propFix[c]) || c, c)
            : (a[n.camelCase("default-" + c)] = a[c] = !0),
          c
        );
      },
    }),
    n.each(n.expr.match.bool.source.match(/\w+/g), function (a, b) {
      var c = vb[b] || n.find.attr;
      (yb && xb) || !wb.test(b)
        ? (vb[b] = function (a, b, d) {
            var e, f;
            return (
              d ||
                ((f = vb[b]),
                (vb[b] = e),
                (e = null != c(a, b, d) ? b.toLowerCase() : null),
                (vb[b] = f)),
              e
            );
          })
        : (vb[b] = function (a, b, c) {
            return c
              ? void 0
              : a[n.camelCase("default-" + b)]
              ? b.toLowerCase()
              : null;
          });
    }),
    (yb && xb) ||
      (n.attrHooks.value = {
        set: function (a, b, c) {
          return n.nodeName(a, "input")
            ? void (a.defaultValue = b)
            : tb && tb.set(a, b, c);
        },
      }),
    xb ||
      ((tb = {
        set: function (a, b, c) {
          var d = a.getAttributeNode(c);
          return (
            d || a.setAttributeNode((d = a.ownerDocument.createAttribute(c))),
            (d.value = b += ""),
            "value" === c || b === a.getAttribute(c) ? b : void 0
          );
        },
      }),
      (vb.id =
        vb.name =
        vb.coords =
          function (a, b, c) {
            var d;
            return c
              ? void 0
              : (d = a.getAttributeNode(b)) && "" !== d.value
              ? d.value
              : null;
          }),
      (n.valHooks.button = {
        get: function (a, b) {
          var c = a.getAttributeNode(b);
          return c && c.specified ? c.value : void 0;
        },
        set: tb.set,
      }),
      (n.attrHooks.contenteditable = {
        set: function (a, b, c) {
          tb.set(a, "" === b ? !1 : b, c);
        },
      }),
      n.each(["width", "height"], function (a, b) {
        n.attrHooks[b] = {
          set: function (a, c) {
            return "" === c ? (a.setAttribute(b, "auto"), c) : void 0;
          },
        };
      })),
    l.style ||
      (n.attrHooks.style = {
        get: function (a) {
          return a.style.cssText || void 0;
        },
        set: function (a, b) {
          return (a.style.cssText = b + "");
        },
      });
  var zb = /^(?:input|select|textarea|button|object)$/i,
    Ab = /^(?:a|area)$/i;
  n.fn.extend({
    prop: function (a, b) {
      return Y(this, n.prop, a, b, arguments.length > 1);
    },
    removeProp: function (a) {
      return (
        (a = n.propFix[a] || a),
        this.each(function () {
          try {
            (this[a] = void 0), delete this[a];
          } catch (b) {}
        })
      );
    },
  }),
    n.extend({
      prop: function (a, b, c) {
        var d,
          e,
          f = a.nodeType;
        if (3 !== f && 8 !== f && 2 !== f)
          return (
            (1 === f && n.isXMLDoc(a)) ||
              ((b = n.propFix[b] || b), (e = n.propHooks[b])),
            void 0 !== c
              ? e && "set" in e && void 0 !== (d = e.set(a, c, b))
                ? d
                : (a[b] = c)
              : e && "get" in e && null !== (d = e.get(a, b))
              ? d
              : a[b]
          );
      },
      propHooks: {
        tabIndex: {
          get: function (a) {
            var b = n.find.attr(a, "tabindex");
            return b
              ? parseInt(b, 10)
              : zb.test(a.nodeName) || (Ab.test(a.nodeName) && a.href)
              ? 0
              : -1;
          },
        },
      },
      propFix: { for: "htmlFor", class: "className" },
    }),
    l.hrefNormalized ||
      n.each(["href", "src"], function (a, b) {
        n.propHooks[b] = {
          get: function (a) {
            return a.getAttribute(b, 4);
          },
        };
      }),
    l.optSelected ||
      (n.propHooks.selected = {
        get: function (a) {
          var b = a.parentNode;
          return (
            b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex),
            null
          );
        },
        set: function (a) {
          var b = a.parentNode;
          b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex);
        },
      }),
    n.each(
      [
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable",
      ],
      function () {
        n.propFix[this.toLowerCase()] = this;
      }
    ),
    l.enctype || (n.propFix.enctype = "encoding");
  var Bb = /[\t\r\n\f]/g;
  function Cb(a) {
    return n.attr(a, "class") || "";
  }
  n.fn.extend({
    addClass: function (a) {
      var b,
        c,
        d,
        e,
        f,
        g,
        h,
        i = 0;
      if (n.isFunction(a))
        return this.each(function (b) {
          n(this).addClass(a.call(this, b, Cb(this)));
        });
      if ("string" == typeof a && a) {
        b = a.match(G) || [];
        while ((c = this[i++]))
          if (
            ((e = Cb(c)),
            (d = 1 === c.nodeType && (" " + e + " ").replace(Bb, " ")))
          ) {
            g = 0;
            while ((f = b[g++])) d.indexOf(" " + f + " ") < 0 && (d += f + " ");
            (h = n.trim(d)), e !== h && n.attr(c, "class", h);
          }
      }
      return this;
    },
    removeClass: function (a) {
      var b,
        c,
        d,
        e,
        f,
        g,
        h,
        i = 0;
      if (n.isFunction(a))
        return this.each(function (b) {
          n(this).removeClass(a.call(this, b, Cb(this)));
        });
      if (!arguments.length) return this.attr("class", "");
      if ("string" == typeof a && a) {
        b = a.match(G) || [];
        while ((c = this[i++]))
          if (
            ((e = Cb(c)),
            (d = 1 === c.nodeType && (" " + e + " ").replace(Bb, " ")))
          ) {
            g = 0;
            while ((f = b[g++]))
              while (d.indexOf(" " + f + " ") > -1)
                d = d.replace(" " + f + " ", " ");
            (h = n.trim(d)), e !== h && n.attr(c, "class", h);
          }
      }
      return this;
    },
    toggleClass: function (a, b) {
      var c = typeof a;
      return "boolean" == typeof b && "string" === c
        ? b
          ? this.addClass(a)
          : this.removeClass(a)
        : n.isFunction(a)
        ? this.each(function (c) {
            n(this).toggleClass(a.call(this, c, Cb(this), b), b);
          })
        : this.each(function () {
            var b, d, e, f;
            if ("string" === c) {
              (d = 0), (e = n(this)), (f = a.match(G) || []);
              while ((b = f[d++]))
                e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
            } else (void 0 !== a && "boolean" !== c) || ((b = Cb(this)), b && n._data(this, "__className__", b), n.attr(this, "class", b || a === !1 ? "" : n._data(this, "__className__") || ""));
          });
    },
    hasClass: function (a) {
      var b,
        c,
        d = 0;
      b = " " + a + " ";
      while ((c = this[d++]))
        if (
          1 === c.nodeType &&
          (" " + Cb(c) + " ").replace(Bb, " ").indexOf(b) > -1
        )
          return !0;
      return !1;
    },
  }),
    n.each(
      "blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(
        " "
      ),
      function (a, b) {
        n.fn[b] = function (a, c) {
          return arguments.length > 0
            ? this.on(b, null, a, c)
            : this.trigger(b);
        };
      }
    ),
    n.fn.extend({
      hover: function (a, b) {
        return this.mouseenter(a).mouseleave(b || a);
      },
    });
  var Db = a.location,
    Eb = n.now(),
    Fb = /\?/,
    Gb =
      /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
  (n.parseJSON = function (b) {
    if (a.JSON && a.JSON.parse) return a.JSON.parse(b + "");
    var c,
      d = null,
      e = n.trim(b + "");
    return e &&
      !n.trim(
        e.replace(Gb, function (a, b, e, f) {
          return (
            c && b && (d = 0), 0 === d ? a : ((c = e || b), (d += !f - !e), "")
          );
        })
      )
      ? Function("return " + e)()
      : n.error("Invalid JSON: " + b);
  }),
    (n.parseXML = function (b) {
      var c, d;
      if (!b || "string" != typeof b) return null;
      try {
        a.DOMParser
          ? ((d = new a.DOMParser()), (c = d.parseFromString(b, "text/xml")))
          : ((c = new a.ActiveXObject("Microsoft.XMLDOM")),
            (c.async = "false"),
            c.loadXML(b));
      } catch (e) {
        c = void 0;
      }
      return (
        (c &&
          c.documentElement &&
          !c.getElementsByTagName("parsererror").length) ||
          n.error("Invalid XML: " + b),
        c
      );
    });
  var Hb = /#.*$/,
    Ib = /([?&])_=[^&]*/,
    Jb = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm,
    Kb = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    Lb = /^(?:GET|HEAD)$/,
    Mb = /^\/\//,
    Nb = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
    Ob = {},
    Pb = {},
    Qb = "*/".concat("*"),
    Rb = Db.href,
    Sb = Nb.exec(Rb.toLowerCase()) || [];
  function Tb(a) {
    return function (b, c) {
      "string" != typeof b && ((c = b), (b = "*"));
      var d,
        e = 0,
        f = b.toLowerCase().match(G) || [];
      if (n.isFunction(c))
        while ((d = f[e++]))
          "+" === d.charAt(0)
            ? ((d = d.slice(1) || "*"), (a[d] = a[d] || []).unshift(c))
            : (a[d] = a[d] || []).push(c);
    };
  }
  function Ub(a, b, c, d) {
    var e = {},
      f = a === Pb;
    function g(h) {
      var i;
      return (
        (e[h] = !0),
        n.each(a[h] || [], function (a, h) {
          var j = h(b, c, d);
          return "string" != typeof j || f || e[j]
            ? f
              ? !(i = j)
              : void 0
            : (b.dataTypes.unshift(j), g(j), !1);
        }),
        i
      );
    }
    return g(b.dataTypes[0]) || (!e["*"] && g("*"));
  }
  function Vb(a, b) {
    var c,
      d,
      e = n.ajaxSettings.flatOptions || {};
    for (d in b) void 0 !== b[d] && ((e[d] ? a : c || (c = {}))[d] = b[d]);
    return c && n.extend(!0, a, c), a;
  }
  function Wb(a, b, c) {
    var d,
      e,
      f,
      g,
      h = a.contents,
      i = a.dataTypes;
    while ("*" === i[0])
      i.shift(),
        void 0 === e && (e = a.mimeType || b.getResponseHeader("Content-Type"));
    if (e)
      for (g in h)
        if (h[g] && h[g].test(e)) {
          i.unshift(g);
          break;
        }
    if (i[0] in c) f = i[0];
    else {
      for (g in c) {
        if (!i[0] || a.converters[g + " " + i[0]]) {
          f = g;
          break;
        }
        d || (d = g);
      }
      f = f || d;
    }
    return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;
  }
  function Xb(a, b, c, d) {
    var e,
      f,
      g,
      h,
      i,
      j = {},
      k = a.dataTypes.slice();
    if (k[1]) for (g in a.converters) j[g.toLowerCase()] = a.converters[g];
    f = k.shift();
    while (f)
      if (
        (a.responseFields[f] && (c[a.responseFields[f]] = b),
        !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)),
        (i = f),
        (f = k.shift()))
      )
        if ("*" === f) f = i;
        else if ("*" !== i && i !== f) {
          if (((g = j[i + " " + f] || j["* " + f]), !g))
            for (e in j)
              if (
                ((h = e.split(" ")),
                h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]]))
              ) {
                g === !0
                  ? (g = j[e])
                  : j[e] !== !0 && ((f = h[0]), k.unshift(h[1]));
                break;
              }
          if (g !== !0)
            if (g && a["throws"]) b = g(b);
            else
              try {
                b = g(b);
              } catch (l) {
                return {
                  state: "parsererror",
                  error: g ? l : "No conversion from " + i + " to " + f,
                };
              }
        }
    return { state: "success", data: b };
  }
  n.extend({
    active: 0,
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: Rb,
      type: "GET",
      isLocal: Kb.test(Sb[1]),
      global: !0,
      processData: !0,
      async: !0,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      accepts: {
        "*": Qb,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript",
      },
      contents: { xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/ },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON",
      },
      converters: {
        "* text": String,
        "text html": !0,
        "text json": n.parseJSON,
        "text xml": n.parseXML,
      },
      flatOptions: { url: !0, context: !0 },
    },
    ajaxSetup: function (a, b) {
      return b ? Vb(Vb(a, n.ajaxSettings), b) : Vb(n.ajaxSettings, a);
    },
    ajaxPrefilter: Tb(Ob),
    ajaxTransport: Tb(Pb),
    ajax: function (b, c) {
      "object" == typeof b && ((c = b), (b = void 0)), (c = c || {});
      var d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l = n.ajaxSetup({}, c),
        m = l.context || l,
        o = l.context && (m.nodeType || m.jquery) ? n(m) : n.event,
        p = n.Deferred(),
        q = n.Callbacks("once memory"),
        r = l.statusCode || {},
        s = {},
        t = {},
        u = 0,
        v = "canceled",
        w = {
          readyState: 0,
          getResponseHeader: function (a) {
            var b;
            if (2 === u) {
              if (!k) {
                k = {};
                while ((b = Jb.exec(g))) k[b[1].toLowerCase()] = b[2];
              }
              b = k[a.toLowerCase()];
            }
            return null == b ? null : b;
          },
          getAllResponseHeaders: function () {
            return 2 === u ? g : null;
          },
          setRequestHeader: function (a, b) {
            var c = a.toLowerCase();
            return u || ((a = t[c] = t[c] || a), (s[a] = b)), this;
          },
          overrideMimeType: function (a) {
            return u || (l.mimeType = a), this;
          },
          statusCode: function (a) {
            var b;
            if (a)
              if (2 > u) for (b in a) r[b] = [r[b], a[b]];
              else w.always(a[w.status]);
            return this;
          },
          abort: function (a) {
            var b = a || v;
            return j && j.abort(b), y(0, b), this;
          },
        };
      if (
        ((p.promise(w).complete = q.add),
        (w.success = w.done),
        (w.error = w.fail),
        (l.url = ((b || l.url || Rb) + "")
          .replace(Hb, "")
          .replace(Mb, Sb[1] + "//")),
        (l.type = c.method || c.type || l.method || l.type),
        (l.dataTypes = n
          .trim(l.dataType || "*")
          .toLowerCase()
          .match(G) || [""]),
        null == l.crossDomain &&
          ((d = Nb.exec(l.url.toLowerCase())),
          (l.crossDomain = !(
            !d ||
            (d[1] === Sb[1] &&
              d[2] === Sb[2] &&
              (d[3] || ("http:" === d[1] ? "80" : "443")) ===
                (Sb[3] || ("http:" === Sb[1] ? "80" : "443")))
          ))),
        l.data &&
          l.processData &&
          "string" != typeof l.data &&
          (l.data = n.param(l.data, l.traditional)),
        Ub(Ob, l, c, w),
        2 === u)
      )
        return w;
      (i = n.event && l.global),
        i && 0 === n.active++ && n.event.trigger("ajaxStart"),
        (l.type = l.type.toUpperCase()),
        (l.hasContent = !Lb.test(l.type)),
        (f = l.url),
        l.hasContent ||
          (l.data &&
            ((f = l.url += (Fb.test(f) ? "&" : "?") + l.data), delete l.data),
          l.cache === !1 &&
            (l.url = Ib.test(f)
              ? f.replace(Ib, "$1_=" + Eb++)
              : f + (Fb.test(f) ? "&" : "?") + "_=" + Eb++)),
        l.ifModified &&
          (n.lastModified[f] &&
            w.setRequestHeader("If-Modified-Since", n.lastModified[f]),
          n.etag[f] && w.setRequestHeader("If-None-Match", n.etag[f])),
        ((l.data && l.hasContent && l.contentType !== !1) || c.contentType) &&
          w.setRequestHeader("Content-Type", l.contentType),
        w.setRequestHeader(
          "Accept",
          l.dataTypes[0] && l.accepts[l.dataTypes[0]]
            ? l.accepts[l.dataTypes[0]] +
                ("*" !== l.dataTypes[0] ? ", " + Qb + "; q=0.01" : "")
            : l.accepts["*"]
        );
      for (e in l.headers) w.setRequestHeader(e, l.headers[e]);
      if (l.beforeSend && (l.beforeSend.call(m, w, l) === !1 || 2 === u))
        return w.abort();
      v = "abort";
      for (e in { success: 1, error: 1, complete: 1 }) w[e](l[e]);
      if ((j = Ub(Pb, l, c, w))) {
        if (((w.readyState = 1), i && o.trigger("ajaxSend", [w, l]), 2 === u))
          return w;
        l.async &&
          l.timeout > 0 &&
          (h = a.setTimeout(function () {
            w.abort("timeout");
          }, l.timeout));
        try {
          (u = 1), j.send(s, y);
        } catch (x) {
          if (!(2 > u)) throw x;
          y(-1, x);
        }
      } else y(-1, "No Transport");
      function y(b, c, d, e) {
        var k,
          s,
          t,
          v,
          x,
          y = c;
        2 !== u &&
          ((u = 2),
          h && a.clearTimeout(h),
          (j = void 0),
          (g = e || ""),
          (w.readyState = b > 0 ? 4 : 0),
          (k = (b >= 200 && 300 > b) || 304 === b),
          d && (v = Wb(l, w, d)),
          (v = Xb(l, v, w, k)),
          k
            ? (l.ifModified &&
                ((x = w.getResponseHeader("Last-Modified")),
                x && (n.lastModified[f] = x),
                (x = w.getResponseHeader("etag")),
                x && (n.etag[f] = x)),
              204 === b || "HEAD" === l.type
                ? (y = "nocontent")
                : 304 === b
                ? (y = "notmodified")
                : ((y = v.state), (s = v.data), (t = v.error), (k = !t)))
            : ((t = y), (!b && y) || ((y = "error"), 0 > b && (b = 0))),
          (w.status = b),
          (w.statusText = (c || y) + ""),
          k ? p.resolveWith(m, [s, y, w]) : p.rejectWith(m, [w, y, t]),
          w.statusCode(r),
          (r = void 0),
          i && o.trigger(k ? "ajaxSuccess" : "ajaxError", [w, l, k ? s : t]),
          q.fireWith(m, [w, y]),
          i &&
            (o.trigger("ajaxComplete", [w, l]),
            --n.active || n.event.trigger("ajaxStop")));
      }
      return w;
    },
    getJSON: function (a, b, c) {
      return n.get(a, b, c, "json");
    },
    getScript: function (a, b) {
      return n.get(a, void 0, b, "script");
    },
  }),
    n.each(["get", "post"], function (a, b) {
      n[b] = function (a, c, d, e) {
        return (
          n.isFunction(c) && ((e = e || d), (d = c), (c = void 0)),
          n.ajax(
            n.extend(
              { url: a, type: b, dataType: e, data: c, success: d },
              n.isPlainObject(a) && a
            )
          )
        );
      };
    }),
    (n._evalUrl = function (a) {
      return n.ajax({
        url: a,
        type: "GET",
        dataType: "script",
        cache: !0,
        async: !1,
        global: !1,
        throws: !0,
      });
    }),
    n.fn.extend({
      wrapAll: function (a) {
        if (n.isFunction(a))
          return this.each(function (b) {
            n(this).wrapAll(a.call(this, b));
          });
        if (this[0]) {
          var b = n(a, this[0].ownerDocument).eq(0).clone(!0);
          this[0].parentNode && b.insertBefore(this[0]),
            b
              .map(function () {
                var a = this;
                while (a.firstChild && 1 === a.firstChild.nodeType)
                  a = a.firstChild;
                return a;
              })
              .append(this);
        }
        return this;
      },
      wrapInner: function (a) {
        return n.isFunction(a)
          ? this.each(function (b) {
              n(this).wrapInner(a.call(this, b));
            })
          : this.each(function () {
              var b = n(this),
                c = b.contents();
              c.length ? c.wrapAll(a) : b.append(a);
            });
      },
      wrap: function (a) {
        var b = n.isFunction(a);
        return this.each(function (c) {
          n(this).wrapAll(b ? a.call(this, c) : a);
        });
      },
      unwrap: function () {
        return this.parent()
          .each(function () {
            n.nodeName(this, "body") || n(this).replaceWith(this.childNodes);
          })
          .end();
      },
    });
  function Yb(a) {
    return (a.style && a.style.display) || n.css(a, "display");
  }
  function Zb(a) {
    if (!n.contains(a.ownerDocument || d, a)) return !0;
    while (a && 1 === a.nodeType) {
      if ("none" === Yb(a) || "hidden" === a.type) return !0;
      a = a.parentNode;
    }
    return !1;
  }
  (n.expr.filters.hidden = function (a) {
    return l.reliableHiddenOffsets()
      ? a.offsetWidth <= 0 && a.offsetHeight <= 0 && !a.getClientRects().length
      : Zb(a);
  }),
    (n.expr.filters.visible = function (a) {
      return !n.expr.filters.hidden(a);
    });
  var $b = /%20/g,
    _b = /\[\]$/,
    ac = /\r?\n/g,
    bc = /^(?:submit|button|image|reset|file)$/i,
    cc = /^(?:input|select|textarea|keygen)/i;
  function dc(a, b, c, d) {
    var e;
    if (n.isArray(b))
      n.each(b, function (b, e) {
        c || _b.test(a)
          ? d(a, e)
          : dc(
              a + "[" + ("object" == typeof e && null != e ? b : "") + "]",
              e,
              c,
              d
            );
      });
    else if (c || "object" !== n.type(b)) d(a, b);
    else for (e in b) dc(a + "[" + e + "]", b[e], c, d);
  }
  (n.param = function (a, b) {
    var c,
      d = [],
      e = function (a, b) {
        (b = n.isFunction(b) ? b() : null == b ? "" : b),
          (d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b));
      };
    if (
      (void 0 === b && (b = n.ajaxSettings && n.ajaxSettings.traditional),
      n.isArray(a) || (a.jquery && !n.isPlainObject(a)))
    )
      n.each(a, function () {
        e(this.name, this.value);
      });
    else for (c in a) dc(c, a[c], b, e);
    return d.join("&").replace($b, "+");
  }),
    n.fn.extend({
      serialize: function () {
        return n.param(this.serializeArray());
      },
      serializeArray: function () {
        return this.map(function () {
          var a = n.prop(this, "elements");
          return a ? n.makeArray(a) : this;
        })
          .filter(function () {
            var a = this.type;
            return (
              this.name &&
              !n(this).is(":disabled") &&
              cc.test(this.nodeName) &&
              !bc.test(a) &&
              (this.checked || !Z.test(a))
            );
          })
          .map(function (a, b) {
            var c = n(this).val();
            return null == c
              ? null
              : n.isArray(c)
              ? n.map(c, function (a) {
                  return { name: b.name, value: a.replace(ac, "\r\n") };
                })
              : { name: b.name, value: c.replace(ac, "\r\n") };
          })
          .get();
      },
    }),
    (n.ajaxSettings.xhr =
      void 0 !== a.ActiveXObject
        ? function () {
            return this.isLocal
              ? ic()
              : d.documentMode > 8
              ? hc()
              : (/^(get|post|head|put|delete|options)$/i.test(this.type) &&
                  hc()) ||
                ic();
          }
        : hc);
  var ec = 0,
    fc = {},
    gc = n.ajaxSettings.xhr();
  a.attachEvent &&
    a.attachEvent("onunload", function () {
      for (var a in fc) fc[a](void 0, !0);
    }),
    (l.cors = !!gc && "withCredentials" in gc),
    (gc = l.ajax = !!gc),
    gc &&
      n.ajaxTransport(function (b) {
        if (!b.crossDomain || l.cors) {
          var c;
          return {
            send: function (d, e) {
              var f,
                g = b.xhr(),
                h = ++ec;
              if (
                (g.open(b.type, b.url, b.async, b.username, b.password),
                b.xhrFields)
              )
                for (f in b.xhrFields) g[f] = b.xhrFields[f];
              b.mimeType &&
                g.overrideMimeType &&
                g.overrideMimeType(b.mimeType),
                b.crossDomain ||
                  d["X-Requested-With"] ||
                  (d["X-Requested-With"] = "XMLHttpRequest");
              for (f in d) void 0 !== d[f] && g.setRequestHeader(f, d[f] + "");
              g.send((b.hasContent && b.data) || null),
                (c = function (a, d) {
                  var f, i, j;
                  if (c && (d || 4 === g.readyState))
                    if (
                      (delete fc[h],
                      (c = void 0),
                      (g.onreadystatechange = n.noop),
                      d)
                    )
                      4 !== g.readyState && g.abort();
                    else {
                      (j = {}),
                        (f = g.status),
                        "string" == typeof g.responseText &&
                          (j.text = g.responseText);
                      try {
                        i = g.statusText;
                      } catch (k) {
                        i = "";
                      }
                      f || !b.isLocal || b.crossDomain
                        ? 1223 === f && (f = 204)
                        : (f = j.text ? 200 : 404);
                    }
                  j && e(f, i, j, g.getAllResponseHeaders());
                }),
                b.async
                  ? 4 === g.readyState
                    ? a.setTimeout(c)
                    : (g.onreadystatechange = fc[h] = c)
                  : c();
            },
            abort: function () {
              c && c(void 0, !0);
            },
          };
        }
      });
  function hc() {
    try {
      return new a.XMLHttpRequest();
    } catch (b) {}
  }
  function ic() {
    try {
      return new a.ActiveXObject("Microsoft.XMLHTTP");
    } catch (b) {}
  }
  n.ajaxSetup({
    accepts: {
      script:
        "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript",
    },
    contents: { script: /\b(?:java|ecma)script\b/ },
    converters: {
      "text script": function (a) {
        return n.globalEval(a), a;
      },
    },
  }),
    n.ajaxPrefilter("script", function (a) {
      void 0 === a.cache && (a.cache = !1),
        a.crossDomain && ((a.type = "GET"), (a.global = !1));
    }),
    n.ajaxTransport("script", function (a) {
      if (a.crossDomain) {
        var b,
          c = d.head || n("head")[0] || d.documentElement;
        return {
          send: function (e, f) {
            (b = d.createElement("script")),
              (b.async = !0),
              a.scriptCharset && (b.charset = a.scriptCharset),
              (b.src = a.url),
              (b.onload = b.onreadystatechange =
                function (a, c) {
                  (c ||
                    !b.readyState ||
                    /loaded|complete/.test(b.readyState)) &&
                    ((b.onload = b.onreadystatechange = null),
                    b.parentNode && b.parentNode.removeChild(b),
                    (b = null),
                    c || f(200, "success"));
                }),
              c.insertBefore(b, c.firstChild);
          },
          abort: function () {
            b && b.onload(void 0, !0);
          },
        };
      }
    });
  var jc = [],
    kc = /(=)\?(?=&|$)|\?\?/;
  n.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function () {
      var a = jc.pop() || n.expando + "_" + Eb++;
      return (this[a] = !0), a;
    },
  }),
    n.ajaxPrefilter("json jsonp", function (b, c, d) {
      var e,
        f,
        g,
        h =
          b.jsonp !== !1 &&
          (kc.test(b.url)
            ? "url"
            : "string" == typeof b.data &&
              0 ===
                (b.contentType || "").indexOf(
                  "application/x-www-form-urlencoded"
                ) &&
              kc.test(b.data) &&
              "data");
      return h || "jsonp" === b.dataTypes[0]
        ? ((e = b.jsonpCallback =
            n.isFunction(b.jsonpCallback)
              ? b.jsonpCallback()
              : b.jsonpCallback),
          h
            ? (b[h] = b[h].replace(kc, "$1" + e))
            : b.jsonp !== !1 &&
              (b.url += (Fb.test(b.url) ? "&" : "?") + b.jsonp + "=" + e),
          (b.converters["script json"] = function () {
            return g || n.error(e + " was not called"), g[0];
          }),
          (b.dataTypes[0] = "json"),
          (f = a[e]),
          (a[e] = function () {
            g = arguments;
          }),
          d.always(function () {
            void 0 === f ? n(a).removeProp(e) : (a[e] = f),
              b[e] && ((b.jsonpCallback = c.jsonpCallback), jc.push(e)),
              g && n.isFunction(f) && f(g[0]),
              (g = f = void 0);
          }),
          "script")
        : void 0;
    }),
    (n.parseHTML = function (a, b, c) {
      if (!a || "string" != typeof a) return null;
      "boolean" == typeof b && ((c = b), (b = !1)), (b = b || d);
      var e = x.exec(a),
        f = !c && [];
      return e
        ? [b.createElement(e[1])]
        : ((e = ja([a], b, f)),
          f && f.length && n(f).remove(),
          n.merge([], e.childNodes));
    });
  var lc = n.fn.load;
  (n.fn.load = function (a, b, c) {
    if ("string" != typeof a && lc) return lc.apply(this, arguments);
    var d,
      e,
      f,
      g = this,
      h = a.indexOf(" ");
    return (
      h > -1 && ((d = n.trim(a.slice(h, a.length))), (a = a.slice(0, h))),
      n.isFunction(b)
        ? ((c = b), (b = void 0))
        : b && "object" == typeof b && (e = "POST"),
      g.length > 0 &&
        n
          .ajax({ url: a, type: e || "GET", dataType: "html", data: b })
          .done(function (a) {
            (f = arguments),
              g.html(d ? n("<div>").append(n.parseHTML(a)).find(d) : a);
          })
          .always(
            c &&
              function (a, b) {
                g.each(function () {
                  c.apply(this, f || [a.responseText, b, a]);
                });
              }
          ),
      this
    );
  }),
    n.each(
      [
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend",
      ],
      function (a, b) {
        n.fn[b] = function (a) {
          return this.on(b, a);
        };
      }
    ),
    (n.expr.filters.animated = function (a) {
      return n.grep(n.timers, function (b) {
        return a === b.elem;
      }).length;
    });
  function mc(a) {
    return n.isWindow(a)
      ? a
      : 9 === a.nodeType
      ? a.defaultView || a.parentWindow
      : !1;
  }
  (n.offset = {
    setOffset: function (a, b, c) {
      var d,
        e,
        f,
        g,
        h,
        i,
        j,
        k = n.css(a, "position"),
        l = n(a),
        m = {};
      "static" === k && (a.style.position = "relative"),
        (h = l.offset()),
        (f = n.css(a, "top")),
        (i = n.css(a, "left")),
        (j =
          ("absolute" === k || "fixed" === k) &&
          n.inArray("auto", [f, i]) > -1),
        j
          ? ((d = l.position()), (g = d.top), (e = d.left))
          : ((g = parseFloat(f) || 0), (e = parseFloat(i) || 0)),
        n.isFunction(b) && (b = b.call(a, c, n.extend({}, h))),
        null != b.top && (m.top = b.top - h.top + g),
        null != b.left && (m.left = b.left - h.left + e),
        "using" in b ? b.using.call(a, m) : l.css(m);
    },
  }),
    n.fn.extend({
      offset: function (a) {
        if (arguments.length)
          return void 0 === a
            ? this
            : this.each(function (b) {
                n.offset.setOffset(this, a, b);
              });
        var b,
          c,
          d = { top: 0, left: 0 },
          e = this[0],
          f = e && e.ownerDocument;
        if (f)
          return (
            (b = f.documentElement),
            n.contains(b, e)
              ? ("undefined" != typeof e.getBoundingClientRect &&
                  (d = e.getBoundingClientRect()),
                (c = mc(f)),
                {
                  top:
                    d.top + (c.pageYOffset || b.scrollTop) - (b.clientTop || 0),
                  left:
                    d.left +
                    (c.pageXOffset || b.scrollLeft) -
                    (b.clientLeft || 0),
                })
              : d
          );
      },
      position: function () {
        if (this[0]) {
          var a,
            b,
            c = { top: 0, left: 0 },
            d = this[0];
          return (
            "fixed" === n.css(d, "position")
              ? (b = d.getBoundingClientRect())
              : ((a = this.offsetParent()),
                (b = this.offset()),
                n.nodeName(a[0], "html") || (c = a.offset()),
                (c.top += n.css(a[0], "borderTopWidth", !0)),
                (c.left += n.css(a[0], "borderLeftWidth", !0))),
            {
              top: b.top - c.top - n.css(d, "marginTop", !0),
              left: b.left - c.left - n.css(d, "marginLeft", !0),
            }
          );
        }
      },
      offsetParent: function () {
        return this.map(function () {
          var a = this.offsetParent;
          while (
            a &&
            !n.nodeName(a, "html") &&
            "static" === n.css(a, "position")
          )
            a = a.offsetParent;
          return a || Qa;
        });
      },
    }),
    n.each(
      { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" },
      function (a, b) {
        var c = /Y/.test(b);
        n.fn[a] = function (d) {
          return Y(
            this,
            function (a, d, e) {
              var f = mc(a);
              return void 0 === e
                ? f
                  ? b in f
                    ? f[b]
                    : f.document.documentElement[d]
                  : a[d]
                : void (f
                    ? f.scrollTo(
                        c ? n(f).scrollLeft() : e,
                        c ? e : n(f).scrollTop()
                      )
                    : (a[d] = e));
            },
            a,
            d,
            arguments.length,
            null
          );
        };
      }
    ),
    n.each(["top", "left"], function (a, b) {
      n.cssHooks[b] = Ua(l.pixelPosition, function (a, c) {
        return c
          ? ((c = Sa(a, b)), Oa.test(c) ? n(a).position()[b] + "px" : c)
          : void 0;
      });
    }),
    n.each({ Height: "height", Width: "width" }, function (a, b) {
      n.each(
        { padding: "inner" + a, content: b, "": "outer" + a },
        function (c, d) {
          n.fn[d] = function (d, e) {
            var f = arguments.length && (c || "boolean" != typeof d),
              g = c || (d === !0 || e === !0 ? "margin" : "border");
            return Y(
              this,
              function (b, c, d) {
                var e;
                return n.isWindow(b)
                  ? b.document.documentElement["client" + a]
                  : 9 === b.nodeType
                  ? ((e = b.documentElement),
                    Math.max(
                      b.body["scroll" + a],
                      e["scroll" + a],
                      b.body["offset" + a],
                      e["offset" + a],
                      e["client" + a]
                    ))
                  : void 0 === d
                  ? n.css(b, c, g)
                  : n.style(b, c, d, g);
              },
              b,
              f ? d : void 0,
              f,
              null
            );
          };
        }
      );
    }),
    n.fn.extend({
      bind: function (a, b, c) {
        return this.on(a, null, b, c);
      },
      unbind: function (a, b) {
        return this.off(a, null, b);
      },
      delegate: function (a, b, c, d) {
        return this.on(b, a, c, d);
      },
      undelegate: function (a, b, c) {
        return 1 === arguments.length
          ? this.off(a, "**")
          : this.off(b, a || "**", c);
      },
    }),
    (n.fn.size = function () {
      return this.length;
    }),
    (n.fn.andSelf = n.fn.addBack),
    "function" == typeof define &&
      define.amd &&
      define("jquery", [], function () {
        return n;
      });
  var nc = a.jQuery,
    oc = a.$;
  return (
    (n.noConflict = function (b) {
      return a.$ === n && (a.$ = oc), b && a.jQuery === n && (a.jQuery = nc), n;
    }),
    b || (a.jQuery = a.$ = n),
    n
  );
});
(function (factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], function ($) {
      return factory($);
    });
  } else if (typeof module === "object" && typeof module.exports === "object") {
    module.exports = factory(require("jquery"));
  } else {
    factory(window.jQuery);
  }
})(function (jQuery) {
  "use strict";
  function uaMatch(ua) {
    if (ua === undefined) {
      ua = window.navigator.userAgent;
    }
    ua = ua.toLowerCase();
    var match =
      /(edge)\/([\w.]+)/.exec(ua) ||
      /(opr)[\/]([\w.]+)/.exec(ua) ||
      /(chrome)[ \/]([\w.]+)/.exec(ua) ||
      /(iemobile)[\/]([\w.]+)/.exec(ua) ||
      /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) ||
      /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(
        ua
      ) ||
      /(webkit)[ \/]([\w.]+)/.exec(ua) ||
      /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
      /(msie) ([\w.]+)/.exec(ua) ||
      (ua.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec(ua)) ||
      (ua.indexOf("compatible") < 0 &&
        /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua)) ||
      [];
    var platform_match =
      /(ipad)/.exec(ua) ||
      /(ipod)/.exec(ua) ||
      /(windows phone)/.exec(ua) ||
      /(iphone)/.exec(ua) ||
      /(kindle)/.exec(ua) ||
      /(silk)/.exec(ua) ||
      /(android)/.exec(ua) ||
      /(win)/.exec(ua) ||
      /(mac)/.exec(ua) ||
      /(linux)/.exec(ua) ||
      /(cros)/.exec(ua) ||
      /(playbook)/.exec(ua) ||
      /(bb)/.exec(ua) ||
      /(blackberry)/.exec(ua) ||
      [];
    var browser = {},
      matched = {
        browser: match[5] || match[3] || match[1] || "",
        version: match[2] || match[4] || "0",
        versionNumber: match[4] || match[2] || "0",
        platform: platform_match[0] || "",
      };
    if (matched.browser) {
      browser[matched.browser] = true;
      browser.version = matched.version;
      browser.versionNumber = parseInt(matched.versionNumber, 10);
    }
    if (matched.platform) {
      browser[matched.platform] = true;
    }
    if (
      browser.android ||
      browser.bb ||
      browser.blackberry ||
      browser.ipad ||
      browser.iphone ||
      browser.ipod ||
      browser.kindle ||
      browser.playbook ||
      browser.silk ||
      browser["windows phone"]
    ) {
      browser.mobile = true;
    }
    if (browser.cros || browser.mac || browser.linux || browser.win) {
      browser.desktop = true;
    }
    if (browser.chrome || browser.opr || browser.safari) {
      browser.webkit = true;
    }
    if (browser.rv || browser.iemobile) {
      var ie = "msie";
      matched.browser = ie;
      browser[ie] = true;
    }
    if (browser.edge) {
      delete browser.edge;
      var msedge = "msedge";
      matched.browser = msedge;
      browser[msedge] = true;
    }
    if (browser.safari && browser.blackberry) {
      var blackberry = "blackberry";
      matched.browser = blackberry;
      browser[blackberry] = true;
    }
    if (browser.safari && browser.playbook) {
      var playbook = "playbook";
      matched.browser = playbook;
      browser[playbook] = true;
    }
    if (browser.bb) {
      var bb = "blackberry";
      matched.browser = bb;
      browser[bb] = true;
    }
    if (browser.opr) {
      var opera = "opera";
      matched.browser = opera;
      browser[opera] = true;
    }
    if (browser.safari && browser.android) {
      var android = "android";
      matched.browser = android;
      browser[android] = true;
    }
    if (browser.safari && browser.kindle) {
      var kindle = "kindle";
      matched.browser = kindle;
      browser[kindle] = true;
    }
    if (browser.safari && browser.silk) {
      var silk = "silk";
      matched.browser = silk;
      browser[silk] = true;
    }
    browser.name = matched.browser;
    browser.platform = matched.platform;
    return browser;
  }
  window.jQBrowser = uaMatch(window.navigator.userAgent);
  window.jQBrowser.uaMatch = uaMatch;
  if (jQuery) {
    jQuery.browser = window.jQBrowser;
  }
  return window.jQBrowser;
});
(function (factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery", "./version"], factory);
  } else {
    factory(jQuery);
  }
})(function ($) {
  var widgetUuid = 0;
  var widgetSlice = Array.prototype.slice;
  $.cleanData = (function (orig) {
    return function (elems) {
      var events, elem, i;
      for (i = 0; (elem = elems[i]) != null; i++) {
        try {
          events = $._data(elem, "events");
          if (events && events.remove) {
            $(elem).triggerHandler("remove");
          }
        } catch (e) {}
      }
      orig(elems);
    };
  })($.cleanData);
  $.widget = function (name, base, prototype) {
    var existingConstructor, constructor, basePrototype;
    var proxiedPrototype = {};
    var namespace = name.split(".")[0];
    name = name.split(".")[1];
    var fullName = namespace + "-" + name;
    if (!prototype) {
      prototype = base;
      base = $.Widget;
    }
    if ($.isArray(prototype)) {
      prototype = $.extend.apply(null, [{}].concat(prototype));
    }
    $.expr[":"][fullName.toLowerCase()] = function (elem) {
      return !!$.data(elem, fullName);
    };
    $[namespace] = $[namespace] || {};
    existingConstructor = $[namespace][name];
    constructor = $[namespace][name] = function (options, element) {
      if (!this._createWidget) {
        return new constructor(options, element);
      }
      if (arguments.length) {
        this._createWidget(options, element);
      }
    };
    $.extend(constructor, existingConstructor, {
      version: prototype.version,
      _proto: $.extend({}, prototype),
      _childConstructors: [],
    });
    basePrototype = new base();
    basePrototype.options = $.widget.extend({}, basePrototype.options);
    $.each(prototype, function (prop, value) {
      if (!$.isFunction(value)) {
        proxiedPrototype[prop] = value;
        return;
      }
      proxiedPrototype[prop] = (function () {
        function _super() {
          return base.prototype[prop].apply(this, arguments);
        }
        function _superApply(args) {
          return base.prototype[prop].apply(this, args);
        }
        return function () {
          var __super = this._super;
          var __superApply = this._superApply;
          var returnValue;
          this._super = _super;
          this._superApply = _superApply;
          returnValue = value.apply(this, arguments);
          this._super = __super;
          this._superApply = __superApply;
          return returnValue;
        };
      })();
    });
    constructor.prototype = $.widget.extend(
      basePrototype,
      {
        widgetEventPrefix: existingConstructor
          ? basePrototype.widgetEventPrefix || name
          : name,
      },
      proxiedPrototype,
      {
        constructor: constructor,
        namespace: namespace,
        widgetName: name,
        widgetFullName: fullName,
      }
    );
    if (existingConstructor) {
      $.each(existingConstructor._childConstructors, function (i, child) {
        var childPrototype = child.prototype;
        $.widget(
          childPrototype.namespace + "." + childPrototype.widgetName,
          constructor,
          child._proto
        );
      });
      delete existingConstructor._childConstructors;
    } else {
      base._childConstructors.push(constructor);
    }
    $.widget.bridge(name, constructor);
    return constructor;
  };
  $.widget.extend = function (target) {
    var input = widgetSlice.call(arguments, 1);
    var inputIndex = 0;
    var inputLength = input.length;
    var key;
    var value;
    for (; inputIndex < inputLength; inputIndex++) {
      for (key in input[inputIndex]) {
        value = input[inputIndex][key];
        if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {
          if ($.isPlainObject(value)) {
            target[key] = $.isPlainObject(target[key])
              ? $.widget.extend({}, target[key], value)
              : $.widget.extend({}, value);
          } else {
            target[key] = value;
          }
        }
      }
    }
    return target;
  };
  $.widget.bridge = function (name, object) {
    var fullName = object.prototype.widgetFullName || name;
    $.fn[name] = function (options) {
      var isMethodCall = typeof options === "string";
      var args = widgetSlice.call(arguments, 1);
      var returnValue = this;
      if (isMethodCall) {
        this.each(function () {
          var methodValue;
          var instance = $.data(this, fullName);
          if (options === "instance") {
            returnValue = instance;
            return false;
          }
          if (!instance) {
            return $.error(
              "cannot call methods on " +
                name +
                " prior to initialization; " +
                "attempted to call method '" +
                options +
                "'"
            );
          }
          if (!$.isFunction(instance[options]) || options.charAt(0) === "_") {
            return $.error(
              "no such method '" +
                options +
                "' for " +
                name +
                " widget instance"
            );
          }
          methodValue = instance[options].apply(instance, args);
          if (methodValue !== instance && methodValue !== undefined) {
            returnValue =
              methodValue && methodValue.jquery
                ? returnValue.pushStack(methodValue.get())
                : methodValue;
            return false;
          }
        });
      } else {
        if (args.length) {
          options = $.widget.extend.apply(null, [options].concat(args));
        }
        this.each(function () {
          var instance = $.data(this, fullName);
          if (instance) {
            instance.option(options || {});
            if (instance._init) {
              instance._init();
            }
          } else {
            $.data(this, fullName, new object(options, this));
          }
        });
      }
      return returnValue;
    };
  };
  $.Widget = function () {};
  $.Widget._childConstructors = [];
  $.Widget.prototype = {
    widgetName: "widget",
    widgetEventPrefix: "",
    defaultElement: "<div>",
    options: { classes: {}, disabled: false, create: null },
    _createWidget: function (options, element) {
      element = $(element || this.defaultElement || this)[0];
      this.element = $(element);
      this.uuid = widgetUuid++;
      this.eventNamespace = "." + this.widgetName + this.uuid;
      this.bindings = $();
      this.hoverable = $();
      this.focusable = $();
      this.classesElementLookup = {};
      if (element !== this) {
        $.data(element, this.widgetFullName, this);
        this._on(true, this.element, {
          remove: function (event) {
            if (event.target === element) {
              this.destroy();
            }
          },
        });
        this.document = $(
          element.style ? element.ownerDocument : element.document || element
        );
        this.window = $(
          this.document[0].defaultView || this.document[0].parentWindow
        );
      }
      this.options = $.widget.extend(
        {},
        this.options,
        this._getCreateOptions(),
        options
      );
      this._create();
      if (this.options.disabled) {
        this._setOptionDisabled(this.options.disabled);
      }
      this._trigger("create", null, this._getCreateEventData());
      this._init();
    },
    _getCreateOptions: function () {
      return {};
    },
    _getCreateEventData: $.noop,
    _create: $.noop,
    _init: $.noop,
    destroy: function () {
      var that = this;
      this._destroy();
      $.each(this.classesElementLookup, function (key, value) {
        that._removeClass(value, key);
      });
      this.element.off(this.eventNamespace).removeData(this.widgetFullName);
      this.widget().off(this.eventNamespace).removeAttr("aria-disabled");
      this.bindings.off(this.eventNamespace);
    },
    _destroy: $.noop,
    widget: function () {
      return this.element;
    },
    option: function (key, value) {
      var options = key;
      var parts;
      var curOption;
      var i;
      if (arguments.length === 0) {
        return $.widget.extend({}, this.options);
      }
      if (typeof key === "string") {
        options = {};
        parts = key.split(".");
        key = parts.shift();
        if (parts.length) {
          curOption = options[key] = $.widget.extend({}, this.options[key]);
          for (i = 0; i < parts.length - 1; i++) {
            curOption[parts[i]] = curOption[parts[i]] || {};
            curOption = curOption[parts[i]];
          }
          key = parts.pop();
          if (arguments.length === 1) {
            return curOption[key] === undefined ? null : curOption[key];
          }
          curOption[key] = value;
        } else {
          if (arguments.length === 1) {
            return this.options[key] === undefined ? null : this.options[key];
          }
          options[key] = value;
        }
      }
      this._setOptions(options);
      return this;
    },
    _setOptions: function (options) {
      var key;
      for (key in options) {
        this._setOption(key, options[key]);
      }
      return this;
    },
    _setOption: function (key, value) {
      if (key === "classes") {
        this._setOptionClasses(value);
      }
      this.options[key] = value;
      if (key === "disabled") {
        this._setOptionDisabled(value);
      }
      return this;
    },
    _setOptionClasses: function (value) {
      var classKey, elements, currentElements;
      for (classKey in value) {
        currentElements = this.classesElementLookup[classKey];
        if (
          value[classKey] === this.options.classes[classKey] ||
          !currentElements ||
          !currentElements.length
        ) {
          continue;
        }
        elements = $(currentElements.get());
        this._removeClass(currentElements, classKey);
        elements.addClass(
          this._classes({
            element: elements,
            keys: classKey,
            classes: value,
            add: true,
          })
        );
      }
    },
    _setOptionDisabled: function (value) {
      this._toggleClass(
        this.widget(),
        this.widgetFullName + "-disabled",
        null,
        !!value
      );
      if (value) {
        this._removeClass(this.hoverable, null, "ui-state-hover");
        this._removeClass(this.focusable, null, "ui-state-focus");
      }
    },
    enable: function () {
      return this._setOptions({ disabled: false });
    },
    disable: function () {
      return this._setOptions({ disabled: true });
    },
    _classes: function (options) {
      var full = [];
      var that = this;
      options = $.extend(
        { element: this.element, classes: this.options.classes || {} },
        options
      );
      function processClassString(classes, checkOption) {
        var current, i;
        for (i = 0; i < classes.length; i++) {
          current = that.classesElementLookup[classes[i]] || $();
          if (options.add) {
            current = $($.unique(current.get().concat(options.element.get())));
          } else {
            current = $(current.not(options.element).get());
          }
          that.classesElementLookup[classes[i]] = current;
          full.push(classes[i]);
          if (checkOption && options.classes[classes[i]]) {
            full.push(options.classes[classes[i]]);
          }
        }
      }
      if (options.keys) {
        processClassString(options.keys.match(/\S+/g) || [], true);
      }
      if (options.extra) {
        processClassString(options.extra.match(/\S+/g) || []);
      }
      return full.join(" ");
    },
    _removeClass: function (element, keys, extra) {
      return this._toggleClass(element, keys, extra, false);
    },
    _addClass: function (element, keys, extra) {
      return this._toggleClass(element, keys, extra, true);
    },
    _toggleClass: function (element, keys, extra, add) {
      add = typeof add === "boolean" ? add : extra;
      var shift = typeof element === "string" || element === null,
        options = {
          extra: shift ? keys : extra,
          keys: shift ? element : keys,
          element: shift ? this.element : element,
          add: add,
        };
      options.element.toggleClass(this._classes(options), add);
      return this;
    },
    _on: function (suppressDisabledCheck, element, handlers) {
      var delegateElement;
      var instance = this;
      if (typeof suppressDisabledCheck !== "boolean") {
        handlers = element;
        element = suppressDisabledCheck;
        suppressDisabledCheck = false;
      }
      if (!handlers) {
        handlers = element;
        element = this.element;
        delegateElement = this.widget();
      } else {
        element = delegateElement = $(element);
        this.bindings = this.bindings.add(element);
      }
      $.each(handlers, function (event, handler) {
        function handlerProxy() {
          if (
            !suppressDisabledCheck &&
            (instance.options.disabled === true ||
              $(this).hasClass("ui-state-disabled"))
          ) {
            return;
          }
          return (
            typeof handler === "string" ? instance[handler] : handler
          ).apply(instance, arguments);
        }
        if (typeof handler !== "string") {
          handlerProxy.guid = handler.guid =
            handler.guid || handlerProxy.guid || $.guid++;
        }
        var match = event.match(/^([\w:-]*)\s*(.*)$/);
        var eventName = match[1] + instance.eventNamespace;
        var selector = match[2];
        if (selector) {
          delegateElement.on(eventName, selector, handlerProxy);
        } else {
          element.on(eventName, handlerProxy);
        }
      });
    },
    _off: function (element, eventName) {
      eventName =
        (eventName || "").split(" ").join(this.eventNamespace + " ") +
        this.eventNamespace;
      element.off(eventName).off(eventName);
      this.bindings = $(this.bindings.not(element).get());
      this.focusable = $(this.focusable.not(element).get());
      this.hoverable = $(this.hoverable.not(element).get());
    },
    _delay: function (handler, delay) {
      function handlerProxy() {
        return (
          typeof handler === "string" ? instance[handler] : handler
        ).apply(instance, arguments);
      }
      var instance = this;
      return setTimeout(handlerProxy, delay || 0);
    },
    _hoverable: function (element) {
      this.hoverable = this.hoverable.add(element);
      this._on(element, {
        mouseenter: function (event) {
          this._addClass($(event.currentTarget), null, "ui-state-hover");
        },
        mouseleave: function (event) {
          this._removeClass($(event.currentTarget), null, "ui-state-hover");
        },
      });
    },
    _focusable: function (element) {
      this.focusable = this.focusable.add(element);
      this._on(element, {
        focusin: function (event) {
          this._addClass($(event.currentTarget), null, "ui-state-focus");
        },
        focusout: function (event) {
          this._removeClass($(event.currentTarget), null, "ui-state-focus");
        },
      });
    },
    _trigger: function (type, event, data) {
      var prop, orig;
      var callback = this.options[type];
      data = data || {};
      event = $.Event(event);
      event.type = (
        type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type
      ).toLowerCase();
      event.target = this.element[0];
      orig = event.originalEvent;
      if (orig) {
        for (prop in orig) {
          if (!(prop in event)) {
            event[prop] = orig[prop];
          }
        }
      }
      this.element.trigger(event, data);
      return !(
        ($.isFunction(callback) &&
          callback.apply(this.element[0], [event].concat(data)) === false) ||
        event.isDefaultPrevented()
      );
    },
  };
  $.each({ show: "fadeIn", hide: "fadeOut" }, function (method, defaultEffect) {
    $.Widget.prototype["_" + method] = function (element, options, callback) {
      if (typeof options === "string") {
        options = { effect: options };
      }
      var hasOptions;
      var effectName = !options
        ? method
        : options === true || typeof options === "number"
        ? defaultEffect
        : options.effect || defaultEffect;
      options = options || {};
      if (typeof options === "number") {
        options = { duration: options };
      }
      hasOptions = !$.isEmptyObject(options);
      options.complete = callback;
      if (options.delay) {
        element.delay(options.delay);
      }
      if (hasOptions && $.effects && $.effects.effect[effectName]) {
        element[method](options);
      } else if (effectName !== method && element[effectName]) {
        element[effectName](options.duration, options.easing, callback);
      } else {
        element.queue(function (next) {
          $(this)[method]();
          if (callback) {
            callback.call(element[0]);
          }
          next();
        });
      }
    };
  });
  return $.widget;
});
(function (factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else if (typeof exports === "object") {
    module.exports = factory(require("jquery"));
  } else {
    factory(jQuery);
  }
})(function ($) {
  var pluses = /\+/g;
  function encode(s) {
    return config.raw ? s : encodeURIComponent(s);
  }
  function decode(s) {
    return config.raw ? s : decodeURIComponent(s);
  }
  function stringifyCookieValue(value) {
    return encode(config.json ? JSON.stringify(value) : String(value));
  }
  function parseCookieValue(s) {
    if (s.indexOf('"') === 0) {
      s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, "\\");
    }
    try {
      s = decodeURIComponent(s.replace(pluses, " "));
      return config.json ? JSON.parse(s) : s;
    } catch (e) {}
  }
  function read(s, converter) {
    var value = config.raw ? s : parseCookieValue(s);
    return $.isFunction(converter) ? converter(value) : value;
  }
  var config = ($.cookie = function (key, value, options) {
    if (arguments.length > 1 && !$.isFunction(value)) {
      options = $.extend({}, config.defaults, options);
      if (typeof options.expires === "number") {
        var days = options.expires,
          t = (options.expires = new Date());
        t.setMilliseconds(t.getMilliseconds() + days * 864e5);
      }
      return (document.cookie = [
        encode(key),
        "=",
        stringifyCookieValue(value),
        options.expires ? "; expires=" + options.expires.toUTCString() : "",
        options.path ? "; path=" + options.path : "",
        options.domain ? "; domain=" + options.domain : "",
        options.secure ? "; secure" : "",
      ].join(""));
    }
    var result = key ? undefined : {},
      cookies = document.cookie ? document.cookie.split("; ") : [],
      i = 0,
      l = cookies.length;
    for (; i < l; i++) {
      var parts = cookies[i].split("="),
        name = decode(parts.shift()),
        cookie = parts.join("=");
      if (key === name) {
        result = read(cookie, value);
        break;
      }
      if (!key && (cookie = read(cookie)) !== undefined) {
        result[name] = cookie;
      }
    }
    return result;
  });
  config.defaults = {};
  $.removeCookie = function (key, options) {
    $.cookie(key, "", $.extend({}, options, { expires: -1 }));
    return !$.cookie(key);
  };
});
(function (factory) {
  "use strict";
  if (typeof define === "function" && define.amd) {
    define(["jquery", "jquery.ui.widget"], factory);
  } else {
    factory(window.jQuery);
  }
})(function ($) {
  "use strict";
  $.support.fileInput = !(
    new RegExp(
      "(Android (1\\.[0156]|2\\.[01]))" +
        "|(Windows Phone (OS 7|8\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)" +
        "|(w(eb)?OSBrowser)|(webOS)" +
        "|(Kindle/(1\\.0|2\\.[05]|3\\.0))"
    ).test(window.navigator.userAgent) ||
    $('<input type="file">').prop("disabled")
  );
  $.support.xhrFileUpload = !!(window.ProgressEvent && window.FileReader);
  $.support.xhrFormDataFileUpload = !!window.FormData;
  $.support.blobSlice =
    window.Blob &&
    (Blob.prototype.slice ||
      Blob.prototype.webkitSlice ||
      Blob.prototype.mozSlice);
  $.widget("blueimp.fileupload", {
    options: {
      dropZone: $(document),
      pasteZone: $(document),
      fileInput: undefined,
      replaceFileInput: true,
      paramName: undefined,
      singleFileUploads: true,
      limitMultiFileUploads: undefined,
      limitMultiFileUploadSize: undefined,
      limitMultiFileUploadSizeOverhead: 512,
      sequentialUploads: false,
      limitConcurrentUploads: undefined,
      forceIframeTransport: false,
      redirect: undefined,
      redirectParamName: undefined,
      postMessage: undefined,
      multipart: true,
      maxChunkSize: undefined,
      uploadedBytes: undefined,
      recalculateProgress: true,
      progressInterval: 100,
      bitrateInterval: 500,
      autoUpload: true,
      messages: { uploadedBytes: "Uploaded bytes exceed file size" },
      i18n: function (message, context) {
        message = this.messages[message] || message.toString();
        if (context) {
          $.each(context, function (key, value) {
            message = message.replace("{" + key + "}", value);
          });
        }
        return message;
      },
      formData: function (form) {
        return form.serializeArray();
      },
      add: function (e, data) {
        if (e.isDefaultPrevented()) {
          return false;
        }
        if (
          data.autoUpload ||
          (data.autoUpload !== false &&
            $(this).fileupload("option", "autoUpload"))
        ) {
          data.process().done(function () {
            data.submit();
          });
        }
      },
      processData: false,
      contentType: false,
      cache: false,
    },
    _specialOptions: [
      "fileInput",
      "dropZone",
      "pasteZone",
      "multipart",
      "forceIframeTransport",
    ],
    _blobSlice:
      $.support.blobSlice &&
      function () {
        var slice = this.slice || this.webkitSlice || this.mozSlice;
        return slice.apply(this, arguments);
      },
    _BitrateTimer: function () {
      this.timestamp = Date.now ? Date.now() : new Date().getTime();
      this.loaded = 0;
      this.bitrate = 0;
      this.getBitrate = function (now, loaded, interval) {
        var timeDiff = now - this.timestamp;
        if (!this.bitrate || !interval || timeDiff > interval) {
          this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;
          this.loaded = loaded;
          this.timestamp = now;
        }
        return this.bitrate;
      };
    },
    _isXHRUpload: function (options) {
      return (
        !options.forceIframeTransport &&
        ((!options.multipart && $.support.xhrFileUpload) ||
          $.support.xhrFormDataFileUpload)
      );
    },
    _getFormData: function (options) {
      var formData;
      if ($.type(options.formData) === "function") {
        return options.formData(options.form);
      }
      if ($.isArray(options.formData)) {
        return options.formData;
      }
      if ($.type(options.formData) === "object") {
        formData = [];
        $.each(options.formData, function (name, value) {
          formData.push({ name: name, value: value });
        });
        return formData;
      }
      return [];
    },
    _getTotal: function (files) {
      var total = 0;
      $.each(files, function (index, file) {
        total += file.size || 1;
      });
      return total;
    },
    _initProgressObject: function (obj) {
      var progress = { loaded: 0, total: 0, bitrate: 0 };
      if (obj._progress) {
        $.extend(obj._progress, progress);
      } else {
        obj._progress = progress;
      }
    },
    _initResponseObject: function (obj) {
      var prop;
      if (obj._response) {
        for (prop in obj._response) {
          if (obj._response.hasOwnProperty(prop)) {
            delete obj._response[prop];
          }
        }
      } else {
        obj._response = {};
      }
    },
    _onProgress: function (e, data) {
      if (e.lengthComputable) {
        var now = Date.now ? Date.now() : new Date().getTime(),
          loaded;
        if (
          data._time &&
          data.progressInterval &&
          now - data._time < data.progressInterval &&
          e.loaded !== e.total
        ) {
          return;
        }
        data._time = now;
        loaded =
          Math.floor(
            (e.loaded / e.total) * (data.chunkSize || data._progress.total)
          ) + (data.uploadedBytes || 0);
        this._progress.loaded += loaded - data._progress.loaded;
        this._progress.bitrate = this._bitrateTimer.getBitrate(
          now,
          this._progress.loaded,
          data.bitrateInterval
        );
        data._progress.loaded = data.loaded = loaded;
        data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(
          now,
          loaded,
          data.bitrateInterval
        );
        this._trigger(
          "progress",
          $.Event("progress", { delegatedEvent: e }),
          data
        );
        this._trigger(
          "progressall",
          $.Event("progressall", { delegatedEvent: e }),
          this._progress
        );
      }
    },
    _initProgressListener: function (options) {
      var that = this,
        xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();
      if (xhr.upload) {
        $(xhr.upload).bind("progress", function (e) {
          var oe = e.originalEvent;
          e.lengthComputable = oe.lengthComputable;
          e.loaded = oe.loaded;
          e.total = oe.total;
          that._onProgress(e, options);
        });
        options.xhr = function () {
          return xhr;
        };
      }
    },
    _isInstanceOf: function (type, obj) {
      return Object.prototype.toString.call(obj) === "[object " + type + "]";
    },
    _initXHRData: function (options) {
      var that = this,
        formData,
        file = options.files[0],
        multipart = options.multipart || !$.support.xhrFileUpload,
        paramName =
          $.type(options.paramName) === "array"
            ? options.paramName[0]
            : options.paramName;
      options.headers = $.extend({}, options.headers);
      if (options.contentRange) {
        options.headers["Content-Range"] = options.contentRange;
      }
      if (!multipart || options.blob || !this._isInstanceOf("File", file)) {
        options.headers["Content-Disposition"] =
          'attachment; filename="' + encodeURI(file.name) + '"';
      }
      if (!multipart) {
        options.contentType = file.type || "application/octet-stream";
        options.data = options.blob || file;
      } else if ($.support.xhrFormDataFileUpload) {
        if (options.postMessage) {
          formData = this._getFormData(options);
          if (options.blob) {
            formData.push({ name: paramName, value: options.blob });
          } else {
            $.each(options.files, function (index, file) {
              formData.push({
                name:
                  ($.type(options.paramName) === "array" &&
                    options.paramName[index]) ||
                  paramName,
                value: file,
              });
            });
          }
        } else {
          if (that._isInstanceOf("FormData", options.formData)) {
            formData = options.formData;
          } else {
            formData = new FormData();
            $.each(this._getFormData(options), function (index, field) {
              formData.append(field.name, field.value);
            });
          }
          if (options.blob) {
            formData.append(paramName, options.blob, file.name);
          } else {
            $.each(options.files, function (index, file) {
              if (
                that._isInstanceOf("File", file) ||
                that._isInstanceOf("Blob", file)
              ) {
                formData.append(
                  ($.type(options.paramName) === "array" &&
                    options.paramName[index]) ||
                    paramName,
                  file,
                  file.uploadName || file.name
                );
              }
            });
          }
        }
        options.data = formData;
      }
      options.blob = null;
    },
    _initIframeSettings: function (options) {
      var targetHost = $("<a></a>").prop("href", options.url).prop("host");
      options.dataType = "iframe " + (options.dataType || "");
      options.formData = this._getFormData(options);
      if (options.redirect && targetHost && targetHost !== location.host) {
        options.formData.push({
          name: options.redirectParamName || "redirect",
          value: options.redirect,
        });
      }
    },
    _initDataSettings: function (options) {
      if (this._isXHRUpload(options)) {
        if (!this._chunkedUpload(options, true)) {
          if (!options.data) {
            this._initXHRData(options);
          }
          this._initProgressListener(options);
        }
        if (options.postMessage) {
          options.dataType = "postmessage " + (options.dataType || "");
        }
      } else {
        this._initIframeSettings(options);
      }
    },
    _getParamName: function (options) {
      var fileInput = $(options.fileInput),
        paramName = options.paramName;
      if (!paramName) {
        paramName = [];
        fileInput.each(function () {
          var input = $(this),
            name = input.prop("name") || "files[]",
            i = (input.prop("files") || [1]).length;
          while (i) {
            paramName.push(name);
            i -= 1;
          }
        });
        if (!paramName.length) {
          paramName = [fileInput.prop("name") || "files[]"];
        }
      } else if (!$.isArray(paramName)) {
        paramName = [paramName];
      }
      return paramName;
    },
    _initFormSettings: function (options) {
      if (!options.form || !options.form.length) {
        options.form = $(options.fileInput.prop("form"));
        if (!options.form.length) {
          options.form = $(this.options.fileInput.prop("form"));
        }
      }
      options.paramName = this._getParamName(options);
      if (!options.url) {
        options.url = options.form.prop("action") || location.href;
      }
      options.type = (
        options.type ||
        ($.type(options.form.prop("method")) === "string" &&
          options.form.prop("method")) ||
        ""
      ).toUpperCase();
      if (
        options.type !== "POST" &&
        options.type !== "PUT" &&
        options.type !== "PATCH"
      ) {
        options.type = "POST";
      }
      if (!options.formAcceptCharset) {
        options.formAcceptCharset = options.form.attr("accept-charset");
      }
    },
    _getAJAXSettings: function (data) {
      var options = $.extend({}, this.options, data);
      this._initFormSettings(options);
      this._initDataSettings(options);
      return options;
    },
    _getDeferredState: function (deferred) {
      if (deferred.state) {
        return deferred.state();
      }
      if (deferred.isResolved()) {
        return "resolved";
      }
      if (deferred.isRejected()) {
        return "rejected";
      }
      return "pending";
    },
    _enhancePromise: function (promise) {
      promise.success = promise.done;
      promise.error = promise.fail;
      promise.complete = promise.always;
      return promise;
    },
    _getXHRPromise: function (resolveOrReject, context, args) {
      var dfd = $.Deferred(),
        promise = dfd.promise();
      context = context || this.options.context || promise;
      if (resolveOrReject === true) {
        dfd.resolveWith(context, args);
      } else if (resolveOrReject === false) {
        dfd.rejectWith(context, args);
      }
      promise.abort = dfd.promise;
      return this._enhancePromise(promise);
    },
    _addConvenienceMethods: function (e, data) {
      var that = this,
        getPromise = function (args) {
          return $.Deferred().resolveWith(that, args).promise();
        };
      data.process = function (resolveFunc, rejectFunc) {
        if (resolveFunc || rejectFunc) {
          data._processQueue = this._processQueue = (
            this._processQueue || getPromise([this])
          )
            .pipe(function () {
              if (data.errorThrown) {
                return $.Deferred().rejectWith(that, [data]).promise();
              }
              return getPromise(arguments);
            })
            .pipe(resolveFunc, rejectFunc);
        }
        return this._processQueue || getPromise([this]);
      };
      data.submit = function () {
        if (this.state() !== "pending") {
          data.jqXHR = this.jqXHR =
            that._trigger(
              "submit",
              $.Event("submit", { delegatedEvent: e }),
              this
            ) !== false && that._onSend(e, this);
        }
        return this.jqXHR || that._getXHRPromise();
      };
      data.abort = function () {
        if (this.jqXHR) {
          return this.jqXHR.abort();
        }
        this.errorThrown = "abort";
        that._trigger("fail", null, this);
        return that._getXHRPromise(false);
      };
      data.state = function () {
        if (this.jqXHR) {
          return that._getDeferredState(this.jqXHR);
        }
        if (this._processQueue) {
          return that._getDeferredState(this._processQueue);
        }
      };
      data.processing = function () {
        return (
          !this.jqXHR &&
          this._processQueue &&
          that._getDeferredState(this._processQueue) === "pending"
        );
      };
      data.progress = function () {
        return this._progress;
      };
      data.response = function () {
        return this._response;
      };
    },
    _getUploadedBytes: function (jqXHR) {
      var range = jqXHR.getResponseHeader("Range"),
        parts = range && range.split("-"),
        upperBytesPos = parts && parts.length > 1 && parseInt(parts[1], 10);
      return upperBytesPos && upperBytesPos + 1;
    },
    _chunkedUpload: function (options, testOnly) {
      options.uploadedBytes = options.uploadedBytes || 0;
      var that = this,
        file = options.files[0],
        fs = file.size,
        ub = options.uploadedBytes,
        mcs = options.maxChunkSize || fs,
        slice = this._blobSlice,
        dfd = $.Deferred(),
        promise = dfd.promise(),
        jqXHR,
        upload;
      if (
        !(this._isXHRUpload(options) && slice && (ub || mcs < fs)) ||
        options.data
      ) {
        return false;
      }
      if (testOnly) {
        return true;
      }
      if (ub >= fs) {
        file.error = options.i18n("uploadedBytes");
        return this._getXHRPromise(false, options.context, [
          null,
          "error",
          file.error,
        ]);
      }
      upload = function () {
        var o = $.extend({}, options),
          currentLoaded = o._progress.loaded;
        o.blob = slice.call(file, ub, ub + mcs, file.type);
        o.chunkSize = o.blob.size;
        o.contentRange =
          "bytes " + ub + "-" + (ub + o.chunkSize - 1) + "/" + fs;
        that._initXHRData(o);
        that._initProgressListener(o);
        jqXHR = (
          (that._trigger("chunksend", null, o) !== false && $.ajax(o)) ||
          that._getXHRPromise(false, o.context)
        )
          .done(function (result, textStatus, jqXHR) {
            ub = that._getUploadedBytes(jqXHR) || ub + o.chunkSize;
            if (currentLoaded + o.chunkSize - o._progress.loaded) {
              that._onProgress(
                $.Event("progress", {
                  lengthComputable: true,
                  loaded: ub - o.uploadedBytes,
                  total: ub - o.uploadedBytes,
                }),
                o
              );
            }
            options.uploadedBytes = o.uploadedBytes = ub;
            o.result = result;
            o.textStatus = textStatus;
            o.jqXHR = jqXHR;
            that._trigger("chunkdone", null, o);
            that._trigger("chunkalways", null, o);
            if (ub < fs) {
              upload();
            } else {
              dfd.resolveWith(o.context, [result, textStatus, jqXHR]);
            }
          })
          .fail(function (jqXHR, textStatus, errorThrown) {
            o.jqXHR = jqXHR;
            o.textStatus = textStatus;
            o.errorThrown = errorThrown;
            that._trigger("chunkfail", null, o);
            that._trigger("chunkalways", null, o);
            dfd.rejectWith(o.context, [jqXHR, textStatus, errorThrown]);
          });
      };
      this._enhancePromise(promise);
      promise.abort = function () {
        return jqXHR.abort();
      };
      upload();
      return promise;
    },
    _beforeSend: function (e, data) {
      if (this._active === 0) {
        this._trigger("start");
        this._bitrateTimer = new this._BitrateTimer();
        this._progress.loaded = this._progress.total = 0;
        this._progress.bitrate = 0;
      }
      this._initResponseObject(data);
      this._initProgressObject(data);
      data._progress.loaded = data.loaded = data.uploadedBytes || 0;
      data._progress.total = data.total = this._getTotal(data.files) || 1;
      data._progress.bitrate = data.bitrate = 0;
      this._active += 1;
      this._progress.loaded += data.loaded;
      this._progress.total += data.total;
    },
    _onDone: function (result, textStatus, jqXHR, options) {
      var total = options._progress.total,
        response = options._response;
      if (options._progress.loaded < total) {
        this._onProgress(
          $.Event("progress", {
            lengthComputable: true,
            loaded: total,
            total: total,
          }),
          options
        );
      }
      response.result = options.result = result;
      response.textStatus = options.textStatus = textStatus;
      response.jqXHR = options.jqXHR = jqXHR;
      this._trigger("done", null, options);
    },
    _onFail: function (jqXHR, textStatus, errorThrown, options) {
      var response = options._response;
      if (options.recalculateProgress) {
        this._progress.loaded -= options._progress.loaded;
        this._progress.total -= options._progress.total;
      }
      response.jqXHR = options.jqXHR = jqXHR;
      response.textStatus = options.textStatus = textStatus;
      response.errorThrown = options.errorThrown = errorThrown;
      this._trigger("fail", null, options);
    },
    _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {
      this._trigger("always", null, options);
    },
    _onSend: function (e, data) {
      if (!data.submit) {
        this._addConvenienceMethods(e, data);
      }
      var that = this,
        jqXHR,
        aborted,
        slot,
        pipe,
        options = that._getAJAXSettings(data),
        send = function () {
          that._sending += 1;
          options._bitrateTimer = new that._BitrateTimer();
          jqXHR =
            jqXHR ||
            (
              ((aborted ||
                that._trigger(
                  "send",
                  $.Event("send", { delegatedEvent: e }),
                  options
                ) === false) &&
                that._getXHRPromise(false, options.context, aborted)) ||
              that._chunkedUpload(options) ||
              $.ajax(options)
            )
              .done(function (result, textStatus, jqXHR) {
                that._onDone(result, textStatus, jqXHR, options);
              })
              .fail(function (jqXHR, textStatus, errorThrown) {
                that._onFail(jqXHR, textStatus, errorThrown, options);
              })
              .always(function (jqXHRorResult, textStatus, jqXHRorError) {
                that._onAlways(
                  jqXHRorResult,
                  textStatus,
                  jqXHRorError,
                  options
                );
                that._sending -= 1;
                that._active -= 1;
                if (
                  options.limitConcurrentUploads &&
                  options.limitConcurrentUploads > that._sending
                ) {
                  var nextSlot = that._slots.shift();
                  while (nextSlot) {
                    if (that._getDeferredState(nextSlot) === "pending") {
                      nextSlot.resolve();
                      break;
                    }
                    nextSlot = that._slots.shift();
                  }
                }
                if (that._active === 0) {
                  that._trigger("stop");
                }
              });
          return jqXHR;
        };
      this._beforeSend(e, options);
      if (
        this.options.sequentialUploads ||
        (this.options.limitConcurrentUploads &&
          this.options.limitConcurrentUploads <= this._sending)
      ) {
        if (this.options.limitConcurrentUploads > 1) {
          slot = $.Deferred();
          this._slots.push(slot);
          pipe = slot.pipe(send);
        } else {
          this._sequence = this._sequence.pipe(send, send);
          pipe = this._sequence;
        }
        pipe.abort = function () {
          aborted = [undefined, "abort", "abort"];
          if (!jqXHR) {
            if (slot) {
              slot.rejectWith(options.context, aborted);
            }
            return send();
          }
          return jqXHR.abort();
        };
        return this._enhancePromise(pipe);
      }
      return send();
    },
    _onAdd: function (e, data) {
      var that = this,
        result = true,
        options = $.extend({}, this.options, data),
        files = data.files,
        filesLength = files.length,
        limit = options.limitMultiFileUploads,
        limitSize = options.limitMultiFileUploadSize,
        overhead = options.limitMultiFileUploadSizeOverhead,
        batchSize = 0,
        paramName = this._getParamName(options),
        paramNameSet,
        paramNameSlice,
        fileSet,
        i,
        j = 0;
      if (limitSize && (!filesLength || files[0].size === undefined)) {
        limitSize = undefined;
      }
      if (
        !(options.singleFileUploads || limit || limitSize) ||
        !this._isXHRUpload(options)
      ) {
        fileSet = [files];
        paramNameSet = [paramName];
      } else if (!(options.singleFileUploads || limitSize) && limit) {
        fileSet = [];
        paramNameSet = [];
        for (i = 0; i < filesLength; i += limit) {
          fileSet.push(files.slice(i, i + limit));
          paramNameSlice = paramName.slice(i, i + limit);
          if (!paramNameSlice.length) {
            paramNameSlice = paramName;
          }
          paramNameSet.push(paramNameSlice);
        }
      } else if (!options.singleFileUploads && limitSize) {
        fileSet = [];
        paramNameSet = [];
        for (i = 0; i < filesLength; i = i + 1) {
          batchSize += files[i].size + overhead;
          if (
            i + 1 === filesLength ||
            batchSize + files[i + 1].size + overhead > limitSize ||
            (limit && i + 1 - j >= limit)
          ) {
            fileSet.push(files.slice(j, i + 1));
            paramNameSlice = paramName.slice(j, i + 1);
            if (!paramNameSlice.length) {
              paramNameSlice = paramName;
            }
            paramNameSet.push(paramNameSlice);
            j = i + 1;
            batchSize = 0;
          }
        }
      } else {
        paramNameSet = paramName;
      }
      data.originalFiles = files;
      $.each(fileSet || files, function (index, element) {
        var newData = $.extend({}, data);
        newData.files = fileSet ? element : [element];
        newData.paramName = paramNameSet[index];
        that._initResponseObject(newData);
        that._initProgressObject(newData);
        that._addConvenienceMethods(e, newData);
        result = that._trigger(
          "add",
          $.Event("add", { delegatedEvent: e }),
          newData
        );
        return result;
      });
      return result;
    },
    _replaceFileInput: function (input) {
      var inputClone = input.clone(true);
      $("<form></form>").append(inputClone)[0].reset();
      input.after(inputClone).detach();
      $.cleanData(input.unbind("remove"));
      this.options.fileInput = this.options.fileInput.map(function (i, el) {
        if (el === input[0]) {
          return inputClone[0];
        }
        return el;
      });
      if (input[0] === this.element[0]) {
        this.element = inputClone;
      }
    },
    _handleFileTreeEntry: function (entry, path) {
      var that = this,
        dfd = $.Deferred(),
        errorHandler = function (e) {
          if (e && !e.entry) {
            e.entry = entry;
          }
          dfd.resolve([e]);
        },
        dirReader;
      path = path || "";
      if (entry.isFile) {
        if (entry._file) {
          entry._file.relativePath = path;
          dfd.resolve(entry._file);
        } else {
          entry.file(function (file) {
            file.relativePath = path;
            dfd.resolve(file);
          }, errorHandler);
        }
      } else if (entry.isDirectory) {
        dirReader = entry.createReader();
        dirReader.readEntries(function (entries) {
          that
            ._handleFileTreeEntries(entries, path + entry.name + "/")
            .done(function (files) {
              dfd.resolve(files);
            })
            .fail(errorHandler);
        }, errorHandler);
      } else {
        dfd.resolve([]);
      }
      return dfd.promise();
    },
    _handleFileTreeEntries: function (entries, path) {
      var that = this;
      return $.when
        .apply(
          $,
          $.map(entries, function (entry) {
            return that._handleFileTreeEntry(entry, path);
          })
        )
        .pipe(function () {
          return Array.prototype.concat.apply([], arguments);
        });
    },
    _getDroppedFiles: function (dataTransfer) {
      dataTransfer = dataTransfer || {};
      var items = dataTransfer.items;
      if (
        items &&
        items.length &&
        (items[0].webkitGetAsEntry || items[0].getAsEntry)
      ) {
        return this._handleFileTreeEntries(
          $.map(items, function (item) {
            var entry;
            if (item.webkitGetAsEntry) {
              entry = item.webkitGetAsEntry();
              if (entry) {
                entry._file = item.getAsFile();
              }
              return entry;
            }
            return item.getAsEntry();
          })
        );
      }
      return $.Deferred().resolve($.makeArray(dataTransfer.files)).promise();
    },
    _getSingleFileInputFiles: function (fileInput) {
      fileInput = $(fileInput);
      var entries =
          fileInput.prop("webkitEntries") || fileInput.prop("entries"),
        files,
        value;
      if (entries && entries.length) {
        return this._handleFileTreeEntries(entries);
      }
      files = $.makeArray(fileInput.prop("files"));
      if (!files.length) {
        value = fileInput.prop("value");
        if (!value) {
          return $.Deferred().resolve([]).promise();
        }
        files = [{ name: value.replace(/^.*\\/, "") }];
      } else if (files[0].name === undefined && files[0].fileName) {
        $.each(files, function (index, file) {
          file.name = file.fileName;
          file.size = file.fileSize;
        });
      }
      return $.Deferred().resolve(files).promise();
    },
    _getFileInputFiles: function (fileInput) {
      if (!(fileInput instanceof $) || fileInput.length === 1) {
        return this._getSingleFileInputFiles(fileInput);
      }
      return $.when
        .apply($, $.map(fileInput, this._getSingleFileInputFiles))
        .pipe(function () {
          return Array.prototype.concat.apply([], arguments);
        });
    },
    _onChange: function (e) {
      var that = this,
        data = { fileInput: $(e.target), form: $(e.target.form) };
      this._getFileInputFiles(data.fileInput).always(function (files) {
        data.files = files;
        if (that.options.replaceFileInput) {
          that._replaceFileInput(data.fileInput);
        }
        if (
          that._trigger(
            "change",
            $.Event("change", { delegatedEvent: e }),
            data
          ) !== false
        ) {
          that._onAdd(e, data);
        }
      });
    },
    _onPaste: function (e) {
      var items =
          e.originalEvent &&
          e.originalEvent.clipboardData &&
          e.originalEvent.clipboardData.items,
        data = { files: [] };
      if (items && items.length) {
        $.each(items, function (index, item) {
          var file = item.getAsFile && item.getAsFile();
          if (file) {
            data.files.push(file);
          }
        });
        if (
          this._trigger(
            "paste",
            $.Event("paste", { delegatedEvent: e }),
            data
          ) !== false
        ) {
          this._onAdd(e, data);
        }
      }
    },
    _onDrop: function (e) {
      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;
      var that = this,
        dataTransfer = e.dataTransfer,
        data = {};
      if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {
        e.preventDefault();
        this._getDroppedFiles(dataTransfer).always(function (files) {
          data.files = files;
          if (
            that._trigger(
              "drop",
              $.Event("drop", { delegatedEvent: e }),
              data
            ) !== false
          ) {
            that._onAdd(e, data);
          }
        });
      }
    },
    _onDragOver: function (e) {
      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;
      var dataTransfer = e.dataTransfer;
      if (
        dataTransfer &&
        $.inArray("Files", dataTransfer.types) !== -1 &&
        this._trigger(
          "dragover",
          $.Event("dragover", { delegatedEvent: e })
        ) !== false
      ) {
        e.preventDefault();
        dataTransfer.dropEffect = "copy";
      }
    },
    _initEventHandlers: function () {
      if (this._isXHRUpload(this.options)) {
        this._on(this.options.dropZone, {
          dragover: this._onDragOver,
          drop: this._onDrop,
        });
        this._on(this.options.pasteZone, { paste: this._onPaste });
      }
      if ($.support.fileInput) {
        this._on(this.options.fileInput, { change: this._onChange });
      }
    },
    _destroyEventHandlers: function () {
      this._off(this.options.dropZone, "dragover drop");
      this._off(this.options.pasteZone, "paste");
      this._off(this.options.fileInput, "change");
    },
    _setOption: function (key, value) {
      var reinit = $.inArray(key, this._specialOptions) !== -1;
      if (reinit) {
        this._destroyEventHandlers();
      }
      this._super(key, value);
      if (reinit) {
        this._initSpecialOptions();
        this._initEventHandlers();
      }
    },
    _initSpecialOptions: function () {
      var options = this.options;
      if (options.fileInput === undefined) {
        options.fileInput = this.element.is('input[type="file"]')
          ? this.element
          : this.element.find('input[type="file"]');
      } else if (!(options.fileInput instanceof $)) {
        options.fileInput = $(options.fileInput);
      }
      if (!(options.dropZone instanceof $)) {
        options.dropZone = $(options.dropZone);
      }
      if (!(options.pasteZone instanceof $)) {
        options.pasteZone = $(options.pasteZone);
      }
    },
    _getRegExp: function (str) {
      var parts = str.split("/"),
        modifiers = parts.pop();
      parts.shift();
      return new RegExp(parts.join("/"), modifiers);
    },
    _isRegExpOption: function (key, value) {
      return (
        key !== "url" &&
        $.type(value) === "string" &&
        /^\/.*\/[igm]{0,3}$/.test(value)
      );
    },
    _initDataAttributes: function () {
      var that = this,
        options = this.options;
      $.each($(this.element[0].cloneNode(false)).data(), function (key, value) {
        if (that._isRegExpOption(key, value)) {
          value = that._getRegExp(value);
        }
        options[key] = value;
      });
    },
    _create: function () {
      this._initDataAttributes();
      this._initSpecialOptions();
      this._slots = [];
      this._sequence = this._getXHRPromise(true);
      this._sending = this._active = 0;
      this._initProgressObject(this);
      this._initEventHandlers();
    },
    active: function () {
      return this._active;
    },
    progress: function () {
      return this._progress;
    },
    add: function (data) {
      var that = this;
      if (!data || this.options.disabled) {
        return;
      }
      if (data.fileInput && !data.files) {
        this._getFileInputFiles(data.fileInput).always(function (files) {
          data.files = files;
          that._onAdd(null, data);
        });
      } else {
        data.files = $.makeArray(data.files);
        this._onAdd(null, data);
      }
    },
    send: function (data) {
      if (data && !this.options.disabled) {
        if (data.fileInput && !data.files) {
          var that = this,
            dfd = $.Deferred(),
            promise = dfd.promise(),
            jqXHR,
            aborted;
          promise.abort = function () {
            aborted = true;
            if (jqXHR) {
              return jqXHR.abort();
            }
            dfd.reject(null, "abort", "abort");
            return promise;
          };
          this._getFileInputFiles(data.fileInput).always(function (files) {
            if (aborted) {
              return;
            }
            if (!files.length) {
              dfd.reject();
              return;
            }
            data.files = files;
            jqXHR = that._onSend(null, data).then(
              function (result, textStatus, jqXHR) {
                dfd.resolve(result, textStatus, jqXHR);
              },
              function (jqXHR, textStatus, errorThrown) {
                dfd.reject(jqXHR, textStatus, errorThrown);
              }
            );
          });
          return this._enhancePromise(promise);
        }
        data.files = $.makeArray(data.files);
        if (data.files.length) {
          return this._onSend(null, data);
        }
      }
      return this._getXHRPromise(false, data && data.context);
    },
  });
});
(function (factory) {
  "use strict";
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else {
    factory(typeof jQuery != "undefined" ? jQuery : window.Zepto);
  }
})(function ($) {
  "use strict";
  var feature = {};
  feature.fileapi = $("<input type='file'/>").get(0).files !== undefined;
  feature.formdata = window.FormData !== undefined;
  var hasProp = !!$.fn.prop;
  $.fn.attr2 = function () {
    if (!hasProp) {
      return this.attr.apply(this, arguments);
    }
    var val = this.prop.apply(this, arguments);
    if ((val && val.jquery) || typeof val === "string") {
      return val;
    }
    return this.attr.apply(this, arguments);
  };
  $.fn.ajaxSubmit = function (options) {
    if (!this.length) {
      log("ajaxSubmit: skipping submit process - no element selected");
      return this;
    }
    var method,
      action,
      url,
      $form = this;
    if (typeof options == "function") {
      options = { success: options };
    } else if (options === undefined) {
      options = {};
    }
    method = options.type || this.attr2("method");
    action = options.url || this.attr2("action");
    url = typeof action === "string" ? $.trim(action) : "";
    url = url || window.location.href || "";
    if (url) {
      url = (url.match(/^([^#]+)/) || [])[1];
    }
    options = $.extend(
      true,
      {
        url: url,
        success: $.ajaxSettings.success,
        type: method || $.ajaxSettings.type,
        iframeSrc: /^https/i.test(window.location.href || "")
          ? "javascript:false"
          : "about:blank",
      },
      options
    );
    var veto = {};
    this.trigger("form-pre-serialize", [this, options, veto]);
    if (veto.veto) {
      log("ajaxSubmit: submit vetoed via form-pre-serialize trigger");
      return this;
    }
    if (
      options.beforeSerialize &&
      options.beforeSerialize(this, options) === false
    ) {
      log("ajaxSubmit: submit aborted via beforeSerialize callback");
      return this;
    }
    var traditional = options.traditional;
    if (traditional === undefined) {
      traditional = $.ajaxSettings.traditional;
    }
    var elements = [];
    var qx,
      a = this.formToArray(options.semantic, elements);
    if (options.data) {
      options.extraData = options.data;
      qx = $.param(options.data, traditional);
    }
    if (
      options.beforeSubmit &&
      options.beforeSubmit(a, this, options) === false
    ) {
      log("ajaxSubmit: submit aborted via beforeSubmit callback");
      return this;
    }
    this.trigger("form-submit-validate", [a, this, options, veto]);
    if (veto.veto) {
      log("ajaxSubmit: submit vetoed via form-submit-validate trigger");
      return this;
    }
    var q = $.param(a, traditional);
    if (qx) {
      q = q ? q + "&" + qx : qx;
    }
    if (options.type.toUpperCase() == "GET") {
      options.url += (options.url.indexOf("?") >= 0 ? "&" : "?") + q;
      options.data = null;
    } else {
      options.data = q;
    }
    var callbacks = [];
    if (options.resetForm) {
      callbacks.push(function () {
        $form.resetForm();
      });
    }
    if (options.clearForm) {
      callbacks.push(function () {
        $form.clearForm(options.includeHidden);
      });
    }
    if (!options.dataType && options.target) {
      var oldSuccess = options.success || function () {};
      callbacks.push(function (data) {
        var fn = options.replaceTarget ? "replaceWith" : "html";
        $(options.target)[fn](data).each(oldSuccess, arguments);
      });
    } else if (options.success) {
      callbacks.push(options.success);
    }
    options.success = function (data, status, xhr) {
      var context = options.context || this;
      for (var i = 0, max = callbacks.length; i < max; i++) {
        callbacks[i].apply(context, [data, status, xhr || $form, $form]);
      }
    };
    if (options.error) {
      var oldError = options.error;
      options.error = function (xhr, status, error) {
        var context = options.context || this;
        oldError.apply(context, [xhr, status, error, $form]);
      };
    }
    if (options.complete) {
      var oldComplete = options.complete;
      options.complete = function (xhr, status) {
        var context = options.context || this;
        oldComplete.apply(context, [xhr, status, $form]);
      };
    }
    var fileInputs = $("input[type=file]:enabled", this).filter(function () {
      return $(this).val() !== "";
    });
    var hasFileInputs = fileInputs.length > 0;
    var mp = "multipart/form-data";
    var multipart = $form.attr("enctype") == mp || $form.attr("encoding") == mp;
    var fileAPI = feature.fileapi && feature.formdata;
    log("fileAPI :" + fileAPI);
    var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;
    var jqxhr;
    if (options.iframe !== false && (options.iframe || shouldUseFrame)) {
      if (options.closeKeepAlive) {
        $.get(options.closeKeepAlive, function () {
          jqxhr = fileUploadIframe(a);
        });
      } else {
        jqxhr = fileUploadIframe(a);
      }
    } else if ((hasFileInputs || multipart) && fileAPI) {
      jqxhr = fileUploadXhr(a);
    } else {
      jqxhr = $.ajax(options);
    }
    $form.removeData("jqxhr").data("jqxhr", jqxhr);
    for (var k = 0; k < elements.length; k++) {
      elements[k] = null;
    }
    this.trigger("form-submit-notify", [this, options]);
    return this;
    function deepSerialize(extraData) {
      var serialized = $.param(extraData, options.traditional).split("&");
      var len = serialized.length;
      var result = [];
      var i, part;
      for (i = 0; i < len; i++) {
        serialized[i] = serialized[i].replace(/\+/g, " ");
        part = serialized[i].split("=");
        result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);
      }
      return result;
    }
    function fileUploadXhr(a) {
      var formdata = new FormData();
      for (var i = 0; i < a.length; i++) {
        formdata.append(a[i].name, a[i].value);
      }
      if (options.extraData) {
        var serializedData = deepSerialize(options.extraData);
        for (i = 0; i < serializedData.length; i++) {
          if (serializedData[i]) {
            formdata.append(serializedData[i][0], serializedData[i][1]);
          }
        }
      }
      options.data = null;
      var s = $.extend(true, {}, $.ajaxSettings, options, {
        contentType: false,
        processData: false,
        cache: false,
        type: method || "POST",
      });
      if (options.uploadProgress) {
        s.xhr = function () {
          var xhr = $.ajaxSettings.xhr();
          if (xhr.upload) {
            xhr.upload.addEventListener(
              "progress",
              function (event) {
                var percent = 0;
                var position = event.loaded || event.position;
                var total = event.total;
                if (event.lengthComputable) {
                  percent = Math.ceil((position / total) * 100);
                }
                options.uploadProgress(event, position, total, percent);
              },
              false
            );
          }
          return xhr;
        };
      }
      s.data = null;
      var beforeSend = s.beforeSend;
      s.beforeSend = function (xhr, o) {
        if (options.formData) {
          o.data = options.formData;
        } else {
          o.data = formdata;
        }
        if (beforeSend) {
          beforeSend.call(this, xhr, o);
        }
      };
      return $.ajax(s);
    }
    function fileUploadIframe(a) {
      var form = $form[0],
        el,
        i,
        s,
        g,
        id,
        $io,
        io,
        xhr,
        sub,
        n,
        timedOut,
        timeoutHandle;
      var deferred = $.Deferred();
      deferred.abort = function (status) {
        xhr.abort(status);
      };
      if (a) {
        for (i = 0; i < elements.length; i++) {
          el = $(elements[i]);
          if (hasProp) {
            el.prop("disabled", false);
          } else {
            el.removeAttr("disabled");
          }
        }
      }
      s = $.extend(true, {}, $.ajaxSettings, options);
      s.context = s.context || s;
      id = "jqFormIO" + new Date().getTime();
      if (s.iframeTarget) {
        $io = $(s.iframeTarget);
        n = $io.attr2("name");
        if (!n) {
          $io.attr2("name", id);
        } else {
          id = n;
        }
      } else {
        $io = $('<iframe name="' + id + '" src="' + s.iframeSrc + '" />');
        $io.css({ position: "absolute", top: "-1000px", left: "-1000px" });
      }
      io = $io[0];
      xhr = {
        aborted: 0,
        responseText: null,
        responseXML: null,
        status: 0,
        statusText: "n/a",
        getAllResponseHeaders: function () {},
        getResponseHeader: function () {},
        setRequestHeader: function () {},
        abort: function (status) {
          var e = status === "timeout" ? "timeout" : "aborted";
          log("aborting upload... " + e);
          this.aborted = 1;
          try {
            if (io.contentWindow.document.execCommand) {
              io.contentWindow.document.execCommand("Stop");
            }
          } catch (ignore) {}
          $io.attr("src", s.iframeSrc);
          xhr.error = e;
          if (s.error) {
            s.error.call(s.context, xhr, e, status);
          }
          if (g) {
            $.event.trigger("ajaxError", [xhr, s, e]);
          }
          if (s.complete) {
            s.complete.call(s.context, xhr, e);
          }
        },
      };
      g = s.global;
      if (g && 0 === $.active++) {
        $.event.trigger("ajaxStart");
      }
      if (g) {
        $.event.trigger("ajaxSend", [xhr, s]);
      }
      if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {
        if (s.global) {
          $.active--;
        }
        deferred.reject();
        return deferred;
      }
      if (xhr.aborted) {
        deferred.reject();
        return deferred;
      }
      sub = form.clk;
      if (sub) {
        n = sub.name;
        if (n && !sub.disabled) {
          s.extraData = s.extraData || {};
          s.extraData[n] = sub.value;
          if (sub.type == "image") {
            s.extraData[n + ".x"] = form.clk_x;
            s.extraData[n + ".y"] = form.clk_y;
          }
        }
      }
      var CLIENT_TIMEOUT_ABORT = 1;
      var SERVER_ABORT = 2;
      function getDoc(frame) {
        var doc = null;
        try {
          if (frame.contentWindow) {
            doc = frame.contentWindow.document;
          }
        } catch (err) {
          log("cannot get iframe.contentWindow document: " + err);
        }
        if (doc) {
          return doc;
        }
        try {
          doc = frame.contentDocument ? frame.contentDocument : frame.document;
        } catch (err) {
          log("cannot get iframe.contentDocument: " + err);
          doc = frame.document;
        }
        return doc;
      }
      var csrf_token = $("meta[name=csrf-token]").attr("content");
      var csrf_param = $("meta[name=csrf-param]").attr("content");
      if (csrf_param && csrf_token) {
        s.extraData = s.extraData || {};
        s.extraData[csrf_param] = csrf_token;
      }
      function doSubmit() {
        var t = $form.attr2("target"),
          a = $form.attr2("action"),
          mp = "multipart/form-data",
          et = $form.attr("enctype") || $form.attr("encoding") || mp;
        form.setAttribute("target", id);
        if (!method || /post/i.test(method)) {
          form.setAttribute("method", "POST");
        }
        if (a != s.url) {
          form.setAttribute("action", s.url);
        }
        if (!s.skipEncodingOverride && (!method || /post/i.test(method))) {
          $form.attr({
            encoding: "multipart/form-data",
            enctype: "multipart/form-data",
          });
        }
        if (s.timeout) {
          timeoutHandle = setTimeout(function () {
            timedOut = true;
            cb(CLIENT_TIMEOUT_ABORT);
          }, s.timeout);
        }
        function checkState() {
          try {
            var state = getDoc(io).readyState;
            log("state = " + state);
            if (state && state.toLowerCase() == "uninitialized") {
              setTimeout(checkState, 50);
            }
          } catch (e) {
            log("Server abort: ", e, " (", e.name, ")");
            cb(SERVER_ABORT);
            if (timeoutHandle) {
              clearTimeout(timeoutHandle);
            }
            timeoutHandle = undefined;
          }
        }
        var extraInputs = [];
        try {
          if (s.extraData) {
            for (var n in s.extraData) {
              if (s.extraData.hasOwnProperty(n)) {
                if (
                  $.isPlainObject(s.extraData[n]) &&
                  s.extraData[n].hasOwnProperty("name") &&
                  s.extraData[n].hasOwnProperty("value")
                ) {
                  extraInputs.push(
                    $(
                      '<input type="hidden" name="' + s.extraData[n].name + '">'
                    )
                      .val(s.extraData[n].value)
                      .appendTo(form)[0]
                  );
                } else {
                  extraInputs.push(
                    $('<input type="hidden" name="' + n + '">')
                      .val(s.extraData[n])
                      .appendTo(form)[0]
                  );
                }
              }
            }
          }
          if (!s.iframeTarget) {
            $io.appendTo("body");
          }
          if (io.attachEvent) {
            io.attachEvent("onload", cb);
          } else {
            io.addEventListener("load", cb, false);
          }
          setTimeout(checkState, 15);
          try {
            form.submit();
          } catch (err) {
            var submitFn = document.createElement("form").submit;
            submitFn.apply(form);
          }
        } finally {
          form.setAttribute("action", a);
          form.setAttribute("enctype", et);
          if (t) {
            form.setAttribute("target", t);
          } else {
            $form.removeAttr("target");
          }
          $(extraInputs).remove();
        }
      }
      if (s.forceSync) {
        doSubmit();
      } else {
        setTimeout(doSubmit, 10);
      }
      var data,
        doc,
        domCheckCount = 50,
        callbackProcessed;
      function cb(e) {
        if (xhr.aborted || callbackProcessed) {
          return;
        }
        doc = getDoc(io);
        if (!doc) {
          log("cannot access response document");
          e = SERVER_ABORT;
        }
        if (e === CLIENT_TIMEOUT_ABORT && xhr) {
          xhr.abort("timeout");
          deferred.reject(xhr, "timeout");
          return;
        } else if (e == SERVER_ABORT && xhr) {
          xhr.abort("server abort");
          deferred.reject(xhr, "error", "server abort");
          return;
        }
        if (!doc || doc.location.href == s.iframeSrc) {
          if (!timedOut) {
            return;
          }
        }
        if (io.detachEvent) {
          io.detachEvent("onload", cb);
        } else {
          io.removeEventListener("load", cb, false);
        }
        var status = "success",
          errMsg;
        try {
          if (timedOut) {
            throw "timeout";
          }
          var isXml = s.dataType == "xml" || doc.XMLDocument || $.isXMLDoc(doc);
          log("isXml=" + isXml);
          if (
            !isXml &&
            window.opera &&
            (doc.body === null || !doc.body.innerHTML)
          ) {
            if (--domCheckCount) {
              log("requeing onLoad callback, DOM not available");
              setTimeout(cb, 250);
              return;
            }
          }
          var docRoot = doc.body ? doc.body : doc.documentElement;
          xhr.responseText = docRoot ? docRoot.innerHTML : null;
          xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
          if (isXml) {
            s.dataType = "xml";
          }
          xhr.getResponseHeader = function (header) {
            var headers = { "content-type": s.dataType };
            return headers[header.toLowerCase()];
          };
          if (docRoot) {
            xhr.status = Number(docRoot.getAttribute("status")) || xhr.status;
            xhr.statusText =
              docRoot.getAttribute("statusText") || xhr.statusText;
          }
          var dt = (s.dataType || "").toLowerCase();
          var scr = /(json|script|text)/.test(dt);
          if (scr || s.textarea) {
            var ta = doc.getElementsByTagName("textarea")[0];
            if (ta) {
              xhr.responseText = ta.value;
              xhr.status = Number(ta.getAttribute("status")) || xhr.status;
              xhr.statusText = ta.getAttribute("statusText") || xhr.statusText;
            } else if (scr) {
              var pre = doc.getElementsByTagName("pre")[0];
              var b = doc.getElementsByTagName("body")[0];
              if (pre) {
                xhr.responseText = pre.textContent
                  ? pre.textContent
                  : pre.innerText;
              } else if (b) {
                xhr.responseText = b.textContent ? b.textContent : b.innerText;
              }
            }
          } else if (dt == "xml" && !xhr.responseXML && xhr.responseText) {
            xhr.responseXML = toXml(xhr.responseText);
          }
          try {
            data = httpData(xhr, dt, s);
          } catch (err) {
            status = "parsererror";
            xhr.error = errMsg = err || status;
          }
        } catch (err) {
          log("error caught: ", err);
          status = "error";
          xhr.error = errMsg = err || status;
        }
        if (xhr.aborted) {
          log("upload aborted");
          status = null;
        }
        if (xhr.status) {
          status =
            (xhr.status >= 200 && xhr.status < 300) || xhr.status === 304
              ? "success"
              : "error";
        }
        if (status === "success") {
          if (s.success) {
            s.success.call(s.context, data, "success", xhr);
          }
          deferred.resolve(xhr.responseText, "success", xhr);
          if (g) {
            $.event.trigger("ajaxSuccess", [xhr, s]);
          }
        } else if (status) {
          if (errMsg === undefined) {
            errMsg = xhr.statusText;
          }
          if (s.error) {
            s.error.call(s.context, xhr, status, errMsg);
          }
          deferred.reject(xhr, "error", errMsg);
          if (g) {
            $.event.trigger("ajaxError", [xhr, s, errMsg]);
          }
        }
        if (g) {
          $.event.trigger("ajaxComplete", [xhr, s]);
        }
        if (g && !--$.active) {
          $.event.trigger("ajaxStop");
        }
        if (s.complete) {
          s.complete.call(s.context, xhr, status);
        }
        callbackProcessed = true;
        if (s.timeout) {
          clearTimeout(timeoutHandle);
        }
        setTimeout(function () {
          if (!s.iframeTarget) {
            $io.remove();
          } else {
            $io.attr("src", s.iframeSrc);
          }
          xhr.responseXML = null;
        }, 100);
      }
      var toXml =
        $.parseXML ||
        function (s, doc) {
          if (window.ActiveXObject) {
            doc = new ActiveXObject("Microsoft.XMLDOM");
            doc.async = "false";
            doc.loadXML(s);
          } else {
            doc = new DOMParser().parseFromString(s, "text/xml");
          }
          return doc &&
            doc.documentElement &&
            doc.documentElement.nodeName != "parsererror"
            ? doc
            : null;
        };
      var parseJSON =
        $.parseJSON ||
        function (s) {
          return window["eval"]("(" + s + ")");
        };
      var httpData = function (xhr, type, s) {
        var ct = xhr.getResponseHeader("content-type") || "",
          xml = type === "xml" || (!type && ct.indexOf("xml") >= 0),
          data = xml ? xhr.responseXML : xhr.responseText;
        if (xml && data.documentElement.nodeName === "parsererror") {
          if ($.error) {
            $.error("parsererror");
          }
        }
        if (s && s.dataFilter) {
          data = s.dataFilter(data, type);
        }
        if (typeof data === "string") {
          if (type === "json" || (!type && ct.indexOf("json") >= 0)) {
            data = parseJSON(data);
          } else if (
            type === "script" ||
            (!type && ct.indexOf("javascript") >= 0)
          ) {
            $.globalEval(data);
          }
        }
        return data;
      };
      return deferred;
    }
  };
  $.fn.ajaxForm = function (options) {
    options = options || {};
    options.delegation = options.delegation && $.isFunction($.fn.on);
    if (!options.delegation && this.length === 0) {
      var o = { s: this.selector, c: this.context };
      if (!$.isReady && o.s) {
        log("DOM not ready, queuing ajaxForm");
        $(function () {
          $(o.s, o.c).ajaxForm(options);
        });
        return this;
      }
      log(
        "terminating; zero elements found by selector" +
          ($.isReady ? "" : " (DOM not ready)")
      );
      return this;
    }
    if (options.delegation) {
      $(document)
        .off("submit.form-plugin", this.selector, doAjaxSubmit)
        .off("click.form-plugin", this.selector, captureSubmittingElement)
        .on("submit.form-plugin", this.selector, options, doAjaxSubmit)
        .on(
          "click.form-plugin",
          this.selector,
          options,
          captureSubmittingElement
        );
      return this;
    }
    return this.ajaxFormUnbind()
      .bind("submit.form-plugin", options, doAjaxSubmit)
      .bind("click.form-plugin", options, captureSubmittingElement);
  };
  function doAjaxSubmit(e) {
    var options = e.data;
    if (!e.isDefaultPrevented()) {
      e.preventDefault();
      $(e.target).ajaxSubmit(options);
    }
  }
  function captureSubmittingElement(e) {
    var target = e.target;
    var $el = $(target);
    if (!$el.is("[type=submit],[type=image]")) {
      var t = $el.closest("[type=submit]");
      if (t.length === 0) {
        return;
      }
      target = t[0];
    }
    var form = this;
    form.clk = target;
    if (target.type == "image") {
      if (e.offsetX !== undefined) {
        form.clk_x = e.offsetX;
        form.clk_y = e.offsetY;
      } else if (typeof $.fn.offset == "function") {
        var offset = $el.offset();
        form.clk_x = e.pageX - offset.left;
        form.clk_y = e.pageY - offset.top;
      } else {
        form.clk_x = e.pageX - target.offsetLeft;
        form.clk_y = e.pageY - target.offsetTop;
      }
    }
    setTimeout(function () {
      form.clk = form.clk_x = form.clk_y = null;
    }, 100);
  }
  $.fn.ajaxFormUnbind = function () {
    return this.unbind("submit.form-plugin click.form-plugin");
  };
  $.fn.formToArray = function (semantic, elements) {
    var a = [];
    if (this.length === 0) {
      return a;
    }
    var form = this[0];
    var formId = this.attr("id");
    var els = semantic ? form.getElementsByTagName("*") : form.elements;
    var els2;
    if (els && !/MSIE [678]/.test(navigator.userAgent)) {
      els = $(els).get();
    }
    if (formId) {
      els2 = $(':input[form="' + formId + '"]').get();
      if (els2.length) {
        els = (els || []).concat(els2);
      }
    }
    if (!els || !els.length) {
      return a;
    }
    var i, j, n, v, el, max, jmax;
    for (i = 0, max = els.length; i < max; i++) {
      el = els[i];
      n = el.name;
      if (!n || el.disabled) {
        continue;
      }
      if (semantic && form.clk && el.type == "image") {
        if (form.clk == el) {
          a.push({ name: n, value: $(el).val(), type: el.type });
          a.push(
            { name: n + ".x", value: form.clk_x },
            { name: n + ".y", value: form.clk_y }
          );
        }
        continue;
      }
      v = $.fieldValue(el, true);
      if (v && v.constructor == Array) {
        if (elements) {
          elements.push(el);
        }
        for (j = 0, jmax = v.length; j < jmax; j++) {
          a.push({ name: n, value: v[j] });
        }
      } else if (feature.fileapi && el.type == "file") {
        if (elements) {
          elements.push(el);
        }
        var files = el.files;
        if (files.length) {
          for (j = 0; j < files.length; j++) {
            a.push({ name: n, value: files[j], type: el.type });
          }
        } else {
          a.push({ name: n, value: "", type: el.type });
        }
      } else if (v !== null && typeof v != "undefined") {
        if (elements) {
          elements.push(el);
        }
        a.push({ name: n, value: v, type: el.type, required: el.required });
      }
    }
    if (!semantic && form.clk) {
      var $input = $(form.clk),
        input = $input[0];
      n = input.name;
      if (n && !input.disabled && input.type == "image") {
        a.push({ name: n, value: $input.val() });
        a.push(
          { name: n + ".x", value: form.clk_x },
          { name: n + ".y", value: form.clk_y }
        );
      }
    }
    return a;
  };
  $.fn.formSerialize = function (semantic) {
    return $.param(this.formToArray(semantic));
  };
  $.fn.fieldSerialize = function (successful) {
    var a = [];
    this.each(function () {
      var n = this.name;
      if (!n) {
        return;
      }
      var v = $.fieldValue(this, successful);
      if (v && v.constructor == Array) {
        for (var i = 0, max = v.length; i < max; i++) {
          a.push({ name: n, value: v[i] });
        }
      } else if (v !== null && typeof v != "undefined") {
        a.push({ name: this.name, value: v });
      }
    });
    return $.param(a);
  };
  $.fn.fieldValue = function (successful) {
    for (var val = [], i = 0, max = this.length; i < max; i++) {
      var el = this[i];
      var v = $.fieldValue(el, successful);
      if (
        v === null ||
        typeof v == "undefined" ||
        (v.constructor == Array && !v.length)
      ) {
        continue;
      }
      if (v.constructor == Array) {
        $.merge(val, v);
      } else {
        val.push(v);
      }
    }
    return val;
  };
  $.fieldValue = function (el, successful) {
    var n = el.name,
      t = el.type,
      tag = el.tagName.toLowerCase();
    if (successful === undefined) {
      successful = true;
    }
    if (
      successful &&
      (!n ||
        el.disabled ||
        t == "reset" ||
        t == "button" ||
        ((t == "checkbox" || t == "radio") && !el.checked) ||
        ((t == "submit" || t == "image") && el.form && el.form.clk != el) ||
        (tag == "select" && el.selectedIndex == -1))
    ) {
      return null;
    }
    if (tag == "select") {
      var index = el.selectedIndex;
      if (index < 0) {
        return null;
      }
      var a = [],
        ops = el.options;
      var one = t == "select-one";
      var max = one ? index + 1 : ops.length;
      for (var i = one ? index : 0; i < max; i++) {
        var op = ops[i];
        if (op.selected) {
          var v = op.value;
          if (!v) {
            v =
              op.attributes &&
              op.attributes.value &&
              !op.attributes.value.specified
                ? op.text
                : op.value;
          }
          if (one) {
            return v;
          }
          a.push(v);
        }
      }
      return a;
    }
    return $(el).val();
  };
  $.fn.clearForm = function (includeHidden) {
    return this.each(function () {
      $("input,select,textarea", this).clearFields(includeHidden);
    });
  };
  $.fn.clearFields = $.fn.clearInputs = function (includeHidden) {
    var re =
      /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;
    return this.each(function () {
      var t = this.type,
        tag = this.tagName.toLowerCase();
      if (re.test(t) || tag == "textarea") {
        this.value = "";
      } else if (t == "checkbox" || t == "radio") {
        this.checked = false;
      } else if (tag == "select") {
        this.selectedIndex = -1;
      } else if (t == "file") {
        if (/MSIE/.test(navigator.userAgent)) {
          $(this).replaceWith($(this).clone(true));
        } else {
          $(this).val("");
        }
      } else if (includeHidden) {
        if (
          (includeHidden === true && /hidden/.test(t)) ||
          (typeof includeHidden == "string" && $(this).is(includeHidden))
        ) {
          this.value = "";
        }
      }
    });
  };
  $.fn.resetForm = function () {
    return this.each(function () {
      if (
        typeof this.reset == "function" ||
        (typeof this.reset == "object" && !this.reset.nodeType)
      ) {
        this.reset();
      }
    });
  };
  $.fn.enable = function (b) {
    if (b === undefined) {
      b = true;
    }
    return this.each(function () {
      this.disabled = !b;
    });
  };
  $.fn.selected = function (select) {
    if (select === undefined) {
      select = true;
    }
    return this.each(function () {
      var t = this.type;
      if (t == "checkbox" || t == "radio") {
        this.checked = select;
      } else if (this.tagName.toLowerCase() == "option") {
        var $sel = $(this).parent("select");
        if (select && $sel[0] && $sel[0].type == "select-one") {
          $sel.find("option").selected(false);
        }
        this.selected = select;
      }
    });
  };
  $.fn.ajaxSubmit.debug = false;
  function log() {
    if (!$.fn.ajaxSubmit.debug) {
      return;
    }
    var msg = "[jquery.form] " + Array.prototype.join.call(arguments, "");
    if (window.console && window.console.log) {
      window.console.log(msg);
    } else if (window.opera && window.opera.postError) {
      window.opera.postError(msg);
    }
  }
});
(function (jQuery) {
  jQuery.hotkeys = {
    version: "0.8",
    specialKeys: {
      8: "backspace",
      9: "tab",
      10: "return",
      13: "return",
      16: "shift",
      17: "ctrl",
      18: "alt",
      19: "pause",
      20: "capslock",
      27: "esc",
      32: "space",
      33: "pageup",
      34: "pagedown",
      35: "end",
      36: "home",
      37: "left",
      38: "up",
      39: "right",
      40: "down",
      45: "insert",
      46: "del",
      59: ";",
      61: "=",
      96: "0",
      97: "1",
      98: "2",
      99: "3",
      100: "4",
      101: "5",
      102: "6",
      103: "7",
      104: "8",
      105: "9",
      106: "*",
      107: "+",
      109: "-",
      110: ".",
      111: "/",
      112: "f1",
      113: "f2",
      114: "f3",
      115: "f4",
      116: "f5",
      117: "f6",
      118: "f7",
      119: "f8",
      120: "f9",
      121: "f10",
      122: "f11",
      123: "f12",
      144: "numlock",
      145: "scroll",
      173: "-",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'",
    },
    shiftNums: {
      "`": "~",
      1: "!",
      2: "@",
      3: "#",
      4: "$",
      5: "%",
      6: "^",
      7: "&",
      8: "*",
      9: "(",
      0: ")",
      "-": "_",
      "=": "+",
      ";": ": ",
      "'": '"',
      ",": "<",
      ".": ">",
      "/": "?",
      "\\": "|",
    },
  };
  function keyHandler(handleObj) {
    if (typeof handleObj.data === "string") {
      handleObj.data = { keys: handleObj.data };
    }
    if (
      !handleObj.data ||
      !handleObj.data.keys ||
      typeof handleObj.data.keys !== "string"
    ) {
      return;
    }
    var origHandler = handleObj.handler,
      keys = handleObj.data.keys.toLowerCase().split(" "),
      textAcceptingInputTypes = [
        "text",
        "password",
        "number",
        "email",
        "url",
        "range",
        "date",
        "month",
        "week",
        "time",
        "datetime",
        "datetime-local",
        "search",
        "color",
        "tel",
      ];
    handleObj.handler = function (event) {
      if (
        this !== event.target &&
        (/textarea|select/i.test(event.target.nodeName) ||
          jQuery.inArray(event.target.type, textAcceptingInputTypes) > -1)
      ) {
        return;
      }
      var special = jQuery.hotkeys.specialKeys[event.keyCode],
        character = String.fromCharCode(event.which).toLowerCase(),
        modif = "",
        possible = {};
      jQuery.each(
        ["alt", "ctrl", "meta", "shift"],
        function (index, specialKey) {
          if (event[specialKey + "Key"] && special !== specialKey) {
            modif += specialKey + "+";
          }
        }
      );
      modif = modif.replace("alt+ctrl+meta+shift", "hyper");
      if (special) {
        possible[modif + special] = true;
      }
      if (character) {
        possible[modif + character] = true;
        possible[modif + jQuery.hotkeys.shiftNums[character]] = true;
        if (modif === "shift+") {
          possible[jQuery.hotkeys.shiftNums[character]] = true;
        }
      }
      for (var i = 0, l = keys.length; i < l; i++) {
        if (possible[keys[i]]) {
          return origHandler.apply(this, arguments);
        }
      }
    };
  }
  jQuery.each(["keydown", "keyup", "keypress"], function () {
    jQuery.event.special[this] = { add: keyHandler };
  });
})(this.jQuery);
(function ($) {
  if (typeof $.browser === "undefined" || !$.browser) {
    var browser = {};
    $.extend(browser);
  }
  var pluginList = {
    flash: {
      activex: [
        "ShockwaveFlash.ShockwaveFlash",
        "ShockwaveFlash.ShockwaveFlash.3",
        "ShockwaveFlash.ShockwaveFlash.4",
        "ShockwaveFlash.ShockwaveFlash.5",
        "ShockwaveFlash.ShockwaveFlash.6",
        "ShockwaveFlash.ShockwaveFlash.7",
      ],
      plugin: /flash/gim,
    },
    sl: { activex: ["AgControl.AgControl"], plugin: /silverlight/gim },
    pdf: {
      activex: [
        "acroPDF.PDF.1",
        "PDF.PdfCtrl.1",
        "PDF.PdfCtrl.4",
        "PDF.PdfCtrl.5",
        "PDF.PdfCtrl.6",
      ],
      plugin: /adobe\s?acrobat/gim,
    },
    qtime: {
      activex: [
        "QuickTime.QuickTime",
        "QuickTimeCheckObject.QuickTimeCheck.1",
        "QuickTime.QuickTime.4",
      ],
      plugin: /quicktime/gim,
    },
    wmp: {
      activex: ["WMPlayer.OCX", "MediaPlayer.MediaPlayer.1"],
      plugin: /(windows\smedia)|(Microsoft)/gim,
    },
    shk: {
      activex: [
        "SWCtl.SWCtl",
        "SWCt1.SWCt1.7",
        "SWCt1.SWCt1.8",
        "SWCt1.SWCt1.9",
        "ShockwaveFlash.ShockwaveFlash.1",
      ],
      plugin: /shockwave/gim,
    },
    rp: {
      activex: ["RealPlayer", "rmocx.RealPlayer G2 Control.1"],
      plugin: /realplayer/gim,
    },
  };
  var isSupported = function (p) {
    if (window.ActiveXObject) {
      $.browser[p] = false;
      for (i = 0; i < pluginList[p].activex.length; i++) {
        try {
          new ActiveXObject(pluginList[p].activex[i]);
          $.browser[p] = true;
        } catch (e) {}
      }
    } else {
      $.each(navigator.plugins, function () {
        if (this.name.match(pluginList[p].plugin)) {
          $.browser[p] = true;
          return false;
        } else {
          $.browser[p] = false;
        }
      });
    }
  };
  $.each(pluginList, function (i, n) {
    isSupported(i);
  });
})(jQuery);
(function ($) {
  $.extend($.fn, {
    livequery: function (type, fn, fn2) {
      var self = this,
        q;
      if ($.isFunction(type)) (fn2 = fn), (fn = type), (type = undefined);
      $.each($.livequery.queries, function (i, query) {
        if (
          self.selector == query.selector &&
          self.context == query.context &&
          type == query.type &&
          (!fn || fn.$lqguid == query.fn.$lqguid) &&
          (!fn2 || fn2.$lqguid == query.fn2.$lqguid)
        )
          return (q = query) && false;
      });
      q = q || new $.livequery(this.selector, this.context, type, fn, fn2);
      q.stopped = false;
      q.run();
      return this;
    },
    expire: function (type, fn, fn2) {
      var self = this;
      if ($.isFunction(type)) (fn2 = fn), (fn = type), (type = undefined);
      $.each($.livequery.queries, function (i, query) {
        if (
          self.selector == query.selector &&
          self.context == query.context &&
          (!type || type == query.type) &&
          (!fn || fn.$lqguid == query.fn.$lqguid) &&
          (!fn2 || fn2.$lqguid == query.fn2.$lqguid) &&
          !this.stopped
        )
          $.livequery.stop(query.id);
      });
      return this;
    },
  });
  $.livequery = function (selector, context, type, fn, fn2) {
    this.selector = selector;
    this.context = context;
    this.type = type;
    this.fn = fn;
    this.fn2 = fn2;
    this.elements = [];
    this.stopped = false;
    this.id = $.livequery.queries.push(this) - 1;
    fn.$lqguid = fn.$lqguid || $.livequery.guid++;
    if (fn2) fn2.$lqguid = fn2.$lqguid || $.livequery.guid++;
    return this;
  };
  $.livequery.prototype = {
    stop: function () {
      var query = this;
      if (this.type) this.elements.unbind(this.type, this.fn);
      else if (this.fn2)
        this.elements.each(function (i, el) {
          query.fn2.apply(el);
        });
      this.elements = [];
      this.stopped = true;
    },
    run: function () {
      if (this.stopped) return;
      var query = this;
      var oEls = this.elements,
        els = $(this.selector, this.context),
        nEls = els.not(oEls);
      this.elements = els;
      if (this.type) {
        nEls.bind(this.type, this.fn);
        if (oEls.length > 0)
          $.each(oEls, function (i, el) {
            if ($.inArray(el, els) < 0)
              $.event.remove(el, query.type, query.fn);
          });
      } else {
        nEls.each(function () {
          query.fn.apply(this);
        });
        if (this.fn2 && oEls.length > 0)
          $.each(oEls, function (i, el) {
            if ($.inArray(el, els) < 0) query.fn2.apply(el);
          });
      }
    },
  };
  $.extend($.livequery, {
    guid: 0,
    queries: [],
    queue: [],
    running: false,
    timeout: null,
    checkQueue: function () {
      if ($.livequery.running && $.livequery.queue.length) {
        var length = $.livequery.queue.length;
        while (length--) $.livequery.queries[$.livequery.queue.shift()].run();
      }
    },
    pause: function () {
      $.livequery.running = false;
    },
    play: function () {
      $.livequery.running = true;
      $.livequery.run();
    },
    registerPlugin: function () {
      $.each(arguments, function (i, n) {
        if (!$.fn[n]) return;
        var old = $.fn[n];
        $.fn[n] = function () {
          var r = old.apply(this, arguments);
          $.livequery.run();
          return r;
        };
      });
    },
    run: function (id) {
      if (id != undefined) {
        if ($.inArray(id, $.livequery.queue) < 0) $.livequery.queue.push(id);
      } else
        $.each($.livequery.queries, function (id) {
          if ($.inArray(id, $.livequery.queue) < 0) $.livequery.queue.push(id);
        });
      if ($.livequery.timeout) clearTimeout($.livequery.timeout);
      $.livequery.timeout = setTimeout($.livequery.checkQueue, 20);
    },
    stop: function (id) {
      if (id != undefined) $.livequery.queries[id].stop();
      else
        $.each($.livequery.queries, function (id) {
          $.livequery.queries[id].stop();
        });
    },
  });
  $.livequery.registerPlugin(
    "append",
    "prepend",
    "after",
    "before",
    "wrap",
    "attr",
    "removeAttr",
    "addClass",
    "removeClass",
    "toggleClass",
    "empty",
    "remove",
    "html"
  );
  $(function () {
    $.livequery.play();
  });
})(jQuery);
(function (factory) {
  "use strict";
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else if (typeof module !== "undefined" && module.exports) {
    module.exports = factory(require("jquery"));
  } else {
    factory(jQuery);
  }
})(function ($) {
  "use strict";
  var $scrollTo = ($.scrollTo = function (target, duration, settings) {
    return $(window).scrollTo(target, duration, settings);
  });
  $scrollTo.defaults = { axis: "xy", duration: 0, limit: true };
  function isWin(elem) {
    return (
      !elem.nodeName ||
      $.inArray(elem.nodeName.toLowerCase(), [
        "iframe",
        "#document",
        "html",
        "body",
      ]) !== -1
    );
  }
  $.fn.scrollTo = function (target, duration, settings) {
    if (typeof duration === "object") {
      settings = duration;
      duration = 0;
    }
    if (typeof settings === "function") {
      settings = { onAfter: settings };
    }
    if (target === "max") {
      target = 9e9;
    }
    settings = $.extend({}, $scrollTo.defaults, settings);
    duration = duration || settings.duration;
    var queue = settings.queue && settings.axis.length > 1;
    if (queue) {
      duration /= 2;
    }
    settings.offset = both(settings.offset);
    settings.over = both(settings.over);
    return this.each(function () {
      if (target === null) return;
      var win = isWin(this),
        elem = win ? this.contentWindow || window : this,
        $elem = $(elem),
        targ = target,
        attr = {},
        toff;
      switch (typeof targ) {
        case "number":
        case "string":
          if (/^([+-]=?)?\d+(\.\d+)?(px|%)?$/.test(targ)) {
            targ = both(targ);
            break;
          }
          targ = win ? $(targ) : $(targ, elem);
        case "object":
          if (targ.length === 0) return;
          if (targ.is || targ.style) {
            toff = (targ = $(targ)).offset();
          }
      }
      var offset =
        ($.isFunction(settings.offset) && settings.offset(elem, targ)) ||
        settings.offset;
      $.each(settings.axis.split(""), function (i, axis) {
        var Pos = axis === "x" ? "Left" : "Top",
          pos = Pos.toLowerCase(),
          key = "scroll" + Pos,
          prev = $elem[key](),
          max = $scrollTo.max(elem, axis);
        if (toff) {
          attr[key] = toff[pos] + (win ? 0 : prev - $elem.offset()[pos]);
          if (settings.margin) {
            attr[key] -= parseInt(targ.css("margin" + Pos), 10) || 0;
            attr[key] -= parseInt(targ.css("border" + Pos + "Width"), 10) || 0;
          }
          attr[key] += offset[pos] || 0;
          if (settings.over[pos]) {
            attr[key] +=
              targ[axis === "x" ? "width" : "height"]() * settings.over[pos];
          }
        } else {
          var val = targ[pos];
          attr[key] =
            val.slice && val.slice(-1) === "%"
              ? (parseFloat(val) / 100) * max
              : val;
        }
        if (settings.limit && /^\d+$/.test(attr[key])) {
          attr[key] = attr[key] <= 0 ? 0 : Math.min(attr[key], max);
        }
        if (!i && settings.axis.length > 1) {
          if (prev === attr[key]) {
            attr = {};
          } else if (queue) {
            animate(settings.onAfterFirst);
            attr = {};
          }
        }
      });
      animate(settings.onAfter);
      function animate(callback) {
        var opts = $.extend({}, settings, {
          queue: true,
          duration: duration,
          complete:
            callback &&
            function () {
              callback.call(elem, targ, settings);
            },
        });
        $elem.animate(attr, opts);
      }
    });
  };
  $scrollTo.max = function (elem, axis) {
    var Dim = axis === "x" ? "Width" : "Height",
      scroll = "scroll" + Dim;
    if (!isWin(elem)) return elem[scroll] - $(elem)[Dim.toLowerCase()]();
    var size = "client" + Dim,
      doc = elem.ownerDocument || elem.document,
      html = doc.documentElement,
      body = doc.body;
    return (
      Math.max(html[scroll], body[scroll]) - Math.min(html[size], body[size])
    );
  };
  function both(val) {
    return $.isFunction(val) || $.isPlainObject(val)
      ? val
      : { top: val, left: val };
  }
  $.Tween.propHooks.scrollLeft = $.Tween.propHooks.scrollTop = {
    get: function (t) {
      return $(t.elem)[t.prop]();
    },
    set: function (t) {
      var curr = this.get(t);
      if (t.options.interrupt && t._last && t._last !== curr) {
        return $(t.elem).stop();
      }
      var next = Math.round(t.now);
      if (curr !== next) {
        $(t.elem)[t.prop](next);
        t._last = this.get(t);
      }
    },
  };
  return $scrollTo;
});
(function (factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else if (typeof exports === "object") {
    var jQuery = require("jquery");
    module.exports = factory(jQuery);
  } else {
    factory(window.jQuery || window.Zepto || window.$);
  }
})(function ($) {
  "use strict";
  $.fn.serializeJSON = function (options) {
    var f,
      $form,
      opts,
      formAsArray,
      serializedObject,
      name,
      value,
      _obj,
      nameWithNoType,
      type,
      keys;
    f = $.serializeJSON;
    $form = this;
    opts = f.setupOpts(options);
    formAsArray = $form.serializeArray();
    f.readCheckboxUncheckedValues(formAsArray, opts, $form);
    serializedObject = {};
    $.each(formAsArray, function (i, obj) {
      name = obj.name;
      value = obj.value;
      _obj = f.extractTypeAndNameWithNoType(name);
      nameWithNoType = _obj.nameWithNoType;
      type = _obj.type;
      if (!type) type = f.tryToFindTypeFromDataAttr(name, $form);
      f.validateType(name, type, opts);
      if (type !== "skip") {
        keys = f.splitInputNameIntoKeysArray(nameWithNoType);
        value = f.parseValue(value, name, type, opts);
        f.deepSet(serializedObject, keys, value, opts);
      }
    });
    return serializedObject;
  };
  $.serializeJSON = {
    defaultOptions: {
      checkboxUncheckedValue: undefined,
      parseNumbers: false,
      parseBooleans: false,
      parseNulls: false,
      parseAll: false,
      parseWithFunction: null,
      customTypes: {},
      defaultTypes: {
        string: function (str) {
          return String(str);
        },
        number: function (str) {
          return Number(str);
        },
        boolean: function (str) {
          var falses = ["false", "null", "undefined", "", "0"];
          return falses.indexOf(str) === -1;
        },
        null: function (str) {
          var falses = ["false", "null", "undefined", "", "0"];
          return falses.indexOf(str) === -1 ? str : null;
        },
        array: function (str) {
          return JSON.parse(str);
        },
        object: function (str) {
          return JSON.parse(str);
        },
        auto: function (str) {
          return $.serializeJSON.parseValue(str, null, null, {
            parseNumbers: true,
            parseBooleans: true,
            parseNulls: true,
          });
        },
        skip: null,
      },
      useIntKeysAsArrayIndex: false,
    },
    setupOpts: function (options) {
      var opt, validOpts, defaultOptions, optWithDefault, parseAll, f;
      f = $.serializeJSON;
      if (options == null) {
        options = {};
      }
      defaultOptions = f.defaultOptions || {};
      validOpts = [
        "checkboxUncheckedValue",
        "parseNumbers",
        "parseBooleans",
        "parseNulls",
        "parseAll",
        "parseWithFunction",
        "customTypes",
        "defaultTypes",
        "useIntKeysAsArrayIndex",
      ];
      for (opt in options) {
        if (validOpts.indexOf(opt) === -1) {
          throw new Error(
            "serializeJSON ERROR: invalid option '" +
              opt +
              "'. Please use one of " +
              validOpts.join(", ")
          );
        }
      }
      optWithDefault = function (key) {
        return (
          options[key] !== false &&
          options[key] !== "" &&
          (options[key] || defaultOptions[key])
        );
      };
      parseAll = optWithDefault("parseAll");
      return {
        checkboxUncheckedValue: optWithDefault("checkboxUncheckedValue"),
        parseNumbers: parseAll || optWithDefault("parseNumbers"),
        parseBooleans: parseAll || optWithDefault("parseBooleans"),
        parseNulls: parseAll || optWithDefault("parseNulls"),
        parseWithFunction: optWithDefault("parseWithFunction"),
        typeFunctions: $.extend(
          {},
          optWithDefault("defaultTypes"),
          optWithDefault("customTypes")
        ),
        useIntKeysAsArrayIndex: optWithDefault("useIntKeysAsArrayIndex"),
      };
    },
    parseValue: function (valStr, inputName, type, opts) {
      var f, parsedVal;
      f = $.serializeJSON;
      parsedVal = valStr;
      if (opts.typeFunctions && type && opts.typeFunctions[type]) {
        parsedVal = opts.typeFunctions[type](valStr);
      } else if (opts.parseNumbers && f.isNumeric(valStr)) {
        parsedVal = Number(valStr);
      } else if (
        opts.parseBooleans &&
        (valStr === "true" || valStr === "false")
      ) {
        parsedVal = valStr === "true";
      } else if (opts.parseNulls && valStr == "null") {
        parsedVal = null;
      }
      if (opts.parseWithFunction && !type) {
        parsedVal = opts.parseWithFunction(parsedVal, inputName);
      }
      return parsedVal;
    },
    isObject: function (obj) {
      return obj === Object(obj);
    },
    isUndefined: function (obj) {
      return obj === void 0;
    },
    isValidArrayIndex: function (val) {
      return /^[0-9]+$/.test(String(val));
    },
    isNumeric: function (obj) {
      return obj - parseFloat(obj) >= 0;
    },
    optionKeys: function (obj) {
      if (Object.keys) {
        return Object.keys(obj);
      } else {
        var key,
          keys = [];
        for (key in obj) {
          keys.push(key);
        }
        return keys;
      }
    },
    readCheckboxUncheckedValues: function (formAsArray, opts, $form) {
      var selector, $uncheckedCheckboxes, $el, dataUncheckedValue, f;
      if (opts == null) {
        opts = {};
      }
      f = $.serializeJSON;
      selector = "input[type=checkbox][name]:not(:checked):not([disabled])";
      $uncheckedCheckboxes = $form.find(selector).add($form.filter(selector));
      $uncheckedCheckboxes.each(function (i, el) {
        $el = $(el);
        dataUncheckedValue = $el.attr("data-unchecked-value");
        if (dataUncheckedValue) {
          formAsArray.push({ name: el.name, value: dataUncheckedValue });
        } else {
          if (!f.isUndefined(opts.checkboxUncheckedValue)) {
            formAsArray.push({
              name: el.name,
              value: opts.checkboxUncheckedValue,
            });
          }
        }
      });
    },
    extractTypeAndNameWithNoType: function (name) {
      var match;
      if ((match = name.match(/(.*):([^:]+)$/))) {
        return { nameWithNoType: match[1], type: match[2] };
      } else {
        return { nameWithNoType: name, type: null };
      }
    },
    tryToFindTypeFromDataAttr: function (name, $form) {
      var escapedName, selector, $input, typeFromDataAttr;
      escapedName = name.replace(/(:|\.|\[|\]|\s)/g, "\\$1");
      selector = '[name="' + escapedName + '"]';
      $input = $form.find(selector).add($form.filter(selector));
      typeFromDataAttr = $input.attr("data-value-type");
      return typeFromDataAttr || null;
    },
    validateType: function (name, type, opts) {
      var validTypes, f;
      f = $.serializeJSON;
      validTypes = f.optionKeys(
        opts ? opts.typeFunctions : f.defaultOptions.defaultTypes
      );
      if (!type || validTypes.indexOf(type) !== -1) {
        return true;
      } else {
        throw new Error(
          "serializeJSON ERROR: Invalid type " +
            type +
            " found in input name '" +
            name +
            "', please use one of " +
            validTypes.join(", ")
        );
      }
    },
    splitInputNameIntoKeysArray: function (nameWithNoType) {
      var keys, f;
      f = $.serializeJSON;
      keys = nameWithNoType.split("[");
      keys = $.map(keys, function (key) {
        return key.replace(/\]/g, "");
      });
      if (keys[0] === "") {
        keys.shift();
      }
      return keys;
    },
    deepSet: function (o, keys, value, opts) {
      var key, nextKey, tail, lastIdx, lastVal, f;
      if (opts == null) {
        opts = {};
      }
      f = $.serializeJSON;
      if (f.isUndefined(o)) {
        throw new Error(
          "ArgumentError: param 'o' expected to be an object or array, found undefined"
        );
      }
      if (!keys || keys.length === 0) {
        throw new Error(
          "ArgumentError: param 'keys' expected to be an array with least one element"
        );
      }
      key = keys[0];
      if (keys.length === 1) {
        if (key === "") {
          o.push(value);
        } else {
          o[key] = value;
        }
      } else {
        nextKey = keys[1];
        if (key === "") {
          lastIdx = o.length - 1;
          lastVal = o[lastIdx];
          if (
            f.isObject(lastVal) &&
            (f.isUndefined(lastVal[nextKey]) || keys.length > 2)
          ) {
            key = lastIdx;
          } else {
            key = lastIdx + 1;
          }
        }
        if (nextKey === "") {
          if (f.isUndefined(o[key]) || !$.isArray(o[key])) {
            o[key] = [];
          }
        } else {
          if (opts.useIntKeysAsArrayIndex && f.isValidArrayIndex(nextKey)) {
            if (f.isUndefined(o[key]) || !$.isArray(o[key])) {
              o[key] = [];
            }
          } else {
            if (f.isUndefined(o[key]) || !f.isObject(o[key])) {
              o[key] = {};
            }
          }
        }
        tail = keys.slice(1);
        f.deepSet(o[key], tail, value, opts);
      }
    },
  };
});
jQuery.fn.extend({
  everyTime: function (interval, label, fn, times) {
    return this.each(function () {
      jQuery.timer.add(this, interval, label, fn, times);
    });
  },
  oneTime: function (interval, label, fn) {
    return this.each(function () {
      jQuery.timer.add(this, interval, label, fn, 1);
    });
  },
  stopTime: function (label, fn) {
    return this.each(function () {
      jQuery.timer.remove(this, label, fn);
    });
  },
});
jQuery.extend({
  timer: {
    global: [],
    guid: 1,
    dataKey: "jQuery.timer",
    regex: /^([0-9]+(?:\.[0-9]*)?)\s*(.*s)?$/,
    powers: {
      ms: 1,
      cs: 10,
      ds: 100,
      s: 1000,
      das: 10000,
      hs: 100000,
      ks: 1000000,
    },
    timeParse: function (value) {
      if (value == undefined || value == null) return null;
      var result = this.regex.exec(jQuery.trim(value.toString()));
      if (result[2]) {
        var num = parseFloat(result[1]);
        var mult = this.powers[result[2]] || 1;
        return num * mult;
      } else {
        return value;
      }
    },
    add: function (element, interval, label, fn, times) {
      var counter = 0;
      if (jQuery.isFunction(label)) {
        if (!times) times = fn;
        fn = label;
        label = interval;
      }
      interval = jQuery.timer.timeParse(interval);
      if (typeof interval != "number" || isNaN(interval) || interval < 0)
        return;
      if (typeof times != "number" || isNaN(times) || times < 0) times = 0;
      times = times || 0;
      var timers =
        jQuery.data(element, this.dataKey) ||
        jQuery.data(element, this.dataKey, {});
      if (!timers[label]) timers[label] = {};
      fn.timerID = fn.timerID || this.guid++;
      var handler = function () {
        if (
          (++counter > times && times !== 0) ||
          fn.call(element, counter) === false
        )
          jQuery.timer.remove(element, label, fn);
      };
      handler.timerID = fn.timerID;
      if (!timers[label][fn.timerID])
        timers[label][fn.timerID] = window.setInterval(handler, interval);
      this.global.push(element);
    },
    remove: function (element, label, fn) {
      var timers = jQuery.data(element, this.dataKey),
        ret;
      if (timers) {
        if (!label) {
          for (label in timers) this.remove(element, label, fn);
        } else if (timers[label]) {
          if (fn) {
            if (fn.timerID) {
              window.clearInterval(timers[label][fn.timerID]);
              delete timers[label][fn.timerID];
            }
          } else {
            for (var fn in timers[label]) {
              window.clearInterval(timers[label][fn]);
              delete timers[label][fn];
            }
          }
          for (ret in timers[label]) break;
          if (!ret) {
            ret = null;
            delete timers[label];
          }
        }
        for (ret in timers) break;
        if (!ret) jQuery.removeData(element, this.dataKey);
      }
    },
  },
});
jQuery(window).bind("unload", function () {
  jQuery.each(jQuery.timer.global, function (index, item) {
    jQuery.timer.remove(item);
  });
});
(function (factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else {
    factory(jQuery);
  }
})(function ($) {
  (function () {
    $.ui = $.ui || {};
    var cachedScrollbarWidth,
      supportsOffsetFractions,
      max = Math.max,
      abs = Math.abs,
      round = Math.round,
      rhorizontal = /left|center|right/,
      rvertical = /top|center|bottom/,
      roffset = /[\+\-]\d+(\.[\d]+)?%?/,
      rposition = /^\w+/,
      rpercent = /%$/,
      _position = $.fn.position;
    function getOffsets(offsets, width, height) {
      return [
        parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1),
        parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1),
      ];
    }
    function parseCss(element, property) {
      return parseInt($.css(element, property), 10) || 0;
    }
    function getDimensions(elem) {
      var raw = elem[0];
      if (raw.nodeType === 9) {
        return {
          width: elem.width(),
          height: elem.height(),
          offset: { top: 0, left: 0 },
        };
      }
      if ($.isWindow(raw)) {
        return {
          width: elem.width(),
          height: elem.height(),
          offset: { top: elem.scrollTop(), left: elem.scrollLeft() },
        };
      }
      if (raw.preventDefault) {
        return {
          width: 0,
          height: 0,
          offset: { top: raw.pageY, left: raw.pageX },
        };
      }
      return {
        width: elem.outerWidth(),
        height: elem.outerHeight(),
        offset: elem.offset(),
      };
    }
    $.position = {
      scrollbarWidth: function () {
        if (cachedScrollbarWidth !== undefined) {
          return cachedScrollbarWidth;
        }
        var w1,
          w2,
          div = $(
            "<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"
          ),
          innerDiv = div.children()[0];
        $("body").append(div);
        w1 = innerDiv.offsetWidth;
        div.css("overflow", "scroll");
        w2 = innerDiv.offsetWidth;
        if (w1 === w2) {
          w2 = div[0].clientWidth;
        }
        div.remove();
        return (cachedScrollbarWidth = w1 - w2);
      },
      getScrollInfo: function (within) {
        var overflowX =
            within.isWindow || within.isDocument
              ? ""
              : within.element.css("overflow-x"),
          overflowY =
            within.isWindow || within.isDocument
              ? ""
              : within.element.css("overflow-y"),
          hasOverflowX =
            overflowX === "scroll" ||
            (overflowX === "auto" &&
              within.width < within.element[0].scrollWidth),
          hasOverflowY =
            overflowY === "scroll" ||
            (overflowY === "auto" &&
              within.height < within.element[0].scrollHeight);
        return {
          width: hasOverflowY ? $.position.scrollbarWidth() : 0,
          height: hasOverflowX ? $.position.scrollbarWidth() : 0,
        };
      },
      getWithinInfo: function (element) {
        var withinElement = $(element || window),
          isWindow = $.isWindow(withinElement[0]),
          isDocument = !!withinElement[0] && withinElement[0].nodeType === 9;
        return {
          element: withinElement,
          isWindow: isWindow,
          isDocument: isDocument,
          offset: withinElement.offset() || { left: 0, top: 0 },
          scrollLeft: withinElement.scrollLeft(),
          scrollTop: withinElement.scrollTop(),
          width:
            isWindow || isDocument
              ? withinElement.width()
              : withinElement.outerWidth(),
          height:
            isWindow || isDocument
              ? withinElement.height()
              : withinElement.outerHeight(),
        };
      },
    };
    $.fn.position = function (options) {
      if (!options || !options.of) {
        return _position.apply(this, arguments);
      }
      options = $.extend({}, options);
      var atOffset,
        targetWidth,
        targetHeight,
        targetOffset,
        basePosition,
        dimensions,
        target = $(options.of),
        within = $.position.getWithinInfo(options.within),
        scrollInfo = $.position.getScrollInfo(within),
        collision = (options.collision || "flip").split(" "),
        offsets = {};
      dimensions = getDimensions(target);
      if (target[0].preventDefault) {
        options.at = "left top";
      }
      targetWidth = dimensions.width;
      targetHeight = dimensions.height;
      targetOffset = dimensions.offset;
      basePosition = $.extend({}, targetOffset);
      $.each(["my", "at"], function () {
        var pos = (options[this] || "").split(" "),
          horizontalOffset,
          verticalOffset;
        if (pos.length === 1) {
          pos = rhorizontal.test(pos[0])
            ? pos.concat(["center"])
            : rvertical.test(pos[0])
            ? ["center"].concat(pos)
            : ["center", "center"];
        }
        pos[0] = rhorizontal.test(pos[0]) ? pos[0] : "center";
        pos[1] = rvertical.test(pos[1]) ? pos[1] : "center";
        horizontalOffset = roffset.exec(pos[0]);
        verticalOffset = roffset.exec(pos[1]);
        offsets[this] = [
          horizontalOffset ? horizontalOffset[0] : 0,
          verticalOffset ? verticalOffset[0] : 0,
        ];
        options[this] = [rposition.exec(pos[0])[0], rposition.exec(pos[1])[0]];
      });
      if (collision.length === 1) {
        collision[1] = collision[0];
      }
      if (options.at[0] === "right") {
        basePosition.left += targetWidth;
      } else if (options.at[0] === "center") {
        basePosition.left += targetWidth / 2;
      }
      if (options.at[1] === "bottom") {
        basePosition.top += targetHeight;
      } else if (options.at[1] === "center") {
        basePosition.top += targetHeight / 2;
      }
      atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
      basePosition.left += atOffset[0];
      basePosition.top += atOffset[1];
      return this.each(function () {
        var collisionPosition,
          using,
          elem = $(this),
          elemWidth = elem.outerWidth(),
          elemHeight = elem.outerHeight(),
          marginLeft = parseCss(this, "marginLeft"),
          marginTop = parseCss(this, "marginTop"),
          collisionWidth =
            elemWidth +
            marginLeft +
            parseCss(this, "marginRight") +
            scrollInfo.width,
          collisionHeight =
            elemHeight +
            marginTop +
            parseCss(this, "marginBottom") +
            scrollInfo.height,
          position = $.extend({}, basePosition),
          myOffset = getOffsets(
            offsets.my,
            elem.outerWidth(),
            elem.outerHeight()
          );
        if (options.my[0] === "right") {
          position.left -= elemWidth;
        } else if (options.my[0] === "center") {
          position.left -= elemWidth / 2;
        }
        if (options.my[1] === "bottom") {
          position.top -= elemHeight;
        } else if (options.my[1] === "center") {
          position.top -= elemHeight / 2;
        }
        position.left += myOffset[0];
        position.top += myOffset[1];
        if (!supportsOffsetFractions) {
          position.left = round(position.left);
          position.top = round(position.top);
        }
        collisionPosition = { marginLeft: marginLeft, marginTop: marginTop };
        $.each(["left", "top"], function (i, dir) {
          if ($.ui.position[collision[i]]) {
            $.ui.position[collision[i]][dir](position, {
              targetWidth: targetWidth,
              targetHeight: targetHeight,
              elemWidth: elemWidth,
              elemHeight: elemHeight,
              collisionPosition: collisionPosition,
              collisionWidth: collisionWidth,
              collisionHeight: collisionHeight,
              offset: [atOffset[0] + myOffset[0], atOffset[1] + myOffset[1]],
              my: options.my,
              at: options.at,
              within: within,
              elem: elem,
            });
          }
        });
        if (options.using) {
          using = function (props) {
            var left = targetOffset.left - position.left,
              right = left + targetWidth - elemWidth,
              top = targetOffset.top - position.top,
              bottom = top + targetHeight - elemHeight,
              feedback = {
                target: {
                  element: target,
                  left: targetOffset.left,
                  top: targetOffset.top,
                  width: targetWidth,
                  height: targetHeight,
                },
                element: {
                  element: elem,
                  left: position.left,
                  top: position.top,
                  width: elemWidth,
                  height: elemHeight,
                },
                horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
                vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle",
              };
            if (targetWidth < elemWidth && abs(left + right) < targetWidth) {
              feedback.horizontal = "center";
            }
            if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {
              feedback.vertical = "middle";
            }
            if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {
              feedback.important = "horizontal";
            } else {
              feedback.important = "vertical";
            }
            options.using.call(this, props, feedback);
          };
        }
        elem.offset($.extend(position, { using: using }));
      });
    };
    $.ui.position = {
      fit: {
        left: function (position, data) {
          var within = data.within,
            withinOffset = within.isWindow
              ? within.scrollLeft
              : within.offset.left,
            outerWidth = within.width,
            collisionPosLeft =
              position.left - data.collisionPosition.marginLeft,
            overLeft = withinOffset - collisionPosLeft,
            overRight =
              collisionPosLeft +
              data.collisionWidth -
              outerWidth -
              withinOffset,
            newOverRight;
          if (data.collisionWidth > outerWidth) {
            if (overLeft > 0 && overRight <= 0) {
              newOverRight =
                position.left +
                overLeft +
                data.collisionWidth -
                outerWidth -
                withinOffset;
              position.left += overLeft - newOverRight;
            } else if (overRight > 0 && overLeft <= 0) {
              position.left = withinOffset;
            } else {
              if (overLeft > overRight) {
                position.left = withinOffset + outerWidth - data.collisionWidth;
              } else {
                position.left = withinOffset;
              }
            }
          } else if (overLeft > 0) {
            position.left += overLeft;
          } else if (overRight > 0) {
            position.left -= overRight;
          } else {
            position.left = max(
              position.left - collisionPosLeft,
              position.left
            );
          }
        },
        top: function (position, data) {
          var within = data.within,
            withinOffset = within.isWindow
              ? within.scrollTop
              : within.offset.top,
            outerHeight = data.within.height,
            collisionPosTop = position.top - data.collisionPosition.marginTop,
            overTop = withinOffset - collisionPosTop,
            overBottom =
              collisionPosTop +
              data.collisionHeight -
              outerHeight -
              withinOffset,
            newOverBottom;
          if (data.collisionHeight > outerHeight) {
            if (overTop > 0 && overBottom <= 0) {
              newOverBottom =
                position.top +
                overTop +
                data.collisionHeight -
                outerHeight -
                withinOffset;
              position.top += overTop - newOverBottom;
            } else if (overBottom > 0 && overTop <= 0) {
              position.top = withinOffset;
            } else {
              if (overTop > overBottom) {
                position.top =
                  withinOffset + outerHeight - data.collisionHeight;
              } else {
                position.top = withinOffset;
              }
            }
          } else if (overTop > 0) {
            position.top += overTop;
          } else if (overBottom > 0) {
            position.top -= overBottom;
          } else {
            position.top = max(position.top - collisionPosTop, position.top);
          }
        },
      },
      flip: {
        left: function (position, data) {
          var within = data.within,
            withinOffset = within.offset.left + within.scrollLeft,
            outerWidth = within.width,
            offsetLeft = within.isWindow
              ? within.scrollLeft
              : within.offset.left,
            collisionPosLeft =
              position.left - data.collisionPosition.marginLeft,
            overLeft = collisionPosLeft - offsetLeft,
            overRight =
              collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
            myOffset =
              data.my[0] === "left"
                ? -data.elemWidth
                : data.my[0] === "right"
                ? data.elemWidth
                : 0,
            atOffset =
              data.at[0] === "left"
                ? data.targetWidth
                : data.at[0] === "right"
                ? -data.targetWidth
                : 0,
            offset = -2 * data.offset[0],
            newOverRight,
            newOverLeft;
          if (overLeft < 0) {
            newOverRight =
              position.left +
              myOffset +
              atOffset +
              offset +
              data.collisionWidth -
              outerWidth -
              withinOffset;
            if (newOverRight < 0 || newOverRight < abs(overLeft)) {
              position.left += myOffset + atOffset + offset;
            }
          } else if (overRight > 0) {
            newOverLeft =
              position.left -
              data.collisionPosition.marginLeft +
              myOffset +
              atOffset +
              offset -
              offsetLeft;
            if (newOverLeft > 0 || abs(newOverLeft) < overRight) {
              position.left += myOffset + atOffset + offset;
            }
          }
        },
        top: function (position, data) {
          var within = data.within,
            withinOffset = within.offset.top + within.scrollTop,
            outerHeight = within.height,
            offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
            collisionPosTop = position.top - data.collisionPosition.marginTop,
            overTop = collisionPosTop - offsetTop,
            overBottom =
              collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
            top = data.my[1] === "top",
            myOffset = top
              ? -data.elemHeight
              : data.my[1] === "bottom"
              ? data.elemHeight
              : 0,
            atOffset =
              data.at[1] === "top"
                ? data.targetHeight
                : data.at[1] === "bottom"
                ? -data.targetHeight
                : 0,
            offset = -2 * data.offset[1],
            newOverTop,
            newOverBottom;
          if (overTop < 0) {
            newOverBottom =
              position.top +
              myOffset +
              atOffset +
              offset +
              data.collisionHeight -
              outerHeight -
              withinOffset;
            if (newOverBottom < 0 || newOverBottom < abs(overTop)) {
              position.top += myOffset + atOffset + offset;
            }
          } else if (overBottom > 0) {
            newOverTop =
              position.top -
              data.collisionPosition.marginTop +
              myOffset +
              atOffset +
              offset -
              offsetTop;
            if (newOverTop > 0 || abs(newOverTop) < overBottom) {
              position.top += myOffset + atOffset + offset;
            }
          }
        },
      },
      flipfit: {
        left: function () {
          $.ui.position.flip.left.apply(this, arguments);
          $.ui.position.fit.left.apply(this, arguments);
        },
        top: function () {
          $.ui.position.flip.top.apply(this, arguments);
          $.ui.position.fit.top.apply(this, arguments);
        },
      },
    };
    (function () {
      var testElement,
        testElementParent,
        testElementStyle,
        offsetLeft,
        i,
        body = document.getElementsByTagName("body")[0],
        div = document.createElement("div");
      testElement = document.createElement(body ? "div" : "body");
      testElementStyle = {
        visibility: "hidden",
        width: 0,
        height: 0,
        border: 0,
        margin: 0,
        background: "none",
      };
      if (body) {
        $.extend(testElementStyle, {
          position: "absolute",
          left: "-1000px",
          top: "-1000px",
        });
      }
      for (i in testElementStyle) {
        testElement.style[i] = testElementStyle[i];
      }
      testElement.appendChild(div);
      testElementParent = body || document.documentElement;
      testElementParent.insertBefore(testElement, testElementParent.firstChild);
      div.style.cssText = "position: absolute; left: 10.7432222px;";
      offsetLeft = $(div).offset().left;
      supportsOffsetFractions = offsetLeft > 10 && offsetLeft < 11;
      testElement.innerHTML = "";
      testElementParent.removeChild(testElement);
    })();
  })();
  var position = $.ui.position;
});
(function (factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery", "../ie", "../version", "../widget"], factory);
  } else {
    factory(jQuery);
  }
})(function ($) {
  var mouseHandled = false;
  $(document).on("mouseup", function () {
    mouseHandled = false;
  });
  return $.widget("ui.mouse", {
    version: "@VERSION",
    options: {
      cancel: "input, textarea, button, select, option",
      distance: 1,
      delay: 0,
    },
    _mouseInit: function () {
      var that = this;
      this.element
        .on("mousedown." + this.widgetName, function (event) {
          return that._mouseDown(event);
        })
        .on("click." + this.widgetName, function (event) {
          if (
            true ===
            $.data(event.target, that.widgetName + ".preventClickEvent")
          ) {
            $.removeData(event.target, that.widgetName + ".preventClickEvent");
            event.stopImmediatePropagation();
            return false;
          }
        });
      this.started = false;
    },
    _mouseDestroy: function () {
      this.element.off("." + this.widgetName);
      if (this._mouseMoveDelegate) {
        this.document
          .off("mousemove." + this.widgetName, this._mouseMoveDelegate)
          .off("mouseup." + this.widgetName, this._mouseUpDelegate);
      }
    },
    _mouseDown: function (event) {
      if (mouseHandled) {
        return;
      }
      this._mouseMoved = false;
      this._mouseStarted && this._mouseUp(event);
      this._mouseDownEvent = event;
      var that = this,
        btnIsLeft = event.which === 1,
        elIsCancel =
          typeof this.options.cancel === "string" && event.target.nodeName
            ? $(event.target).closest(this.options.cancel).length
            : false;
      if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
        return true;
      }
      this.mouseDelayMet = !this.options.delay;
      if (!this.mouseDelayMet) {
        this._mouseDelayTimer = setTimeout(function () {
          that.mouseDelayMet = true;
        }, this.options.delay);
      }
      if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
        this._mouseStarted = this._mouseStart(event) !== false;
        if (!this._mouseStarted) {
          event.preventDefault();
          return true;
        }
      }
      if (
        true === $.data(event.target, this.widgetName + ".preventClickEvent")
      ) {
        $.removeData(event.target, this.widgetName + ".preventClickEvent");
      }
      this._mouseMoveDelegate = function (event) {
        return that._mouseMove(event);
      };
      this._mouseUpDelegate = function (event) {
        return that._mouseUp(event);
      };
      this.document
        .on("mousemove." + this.widgetName, this._mouseMoveDelegate)
        .on("mouseup." + this.widgetName, this._mouseUpDelegate);
      event.preventDefault();
      mouseHandled = true;
      return true;
    },
    _mouseMove: function (event) {
      if (this._mouseMoved) {
        if (
          $.ui.ie &&
          (!document.documentMode || document.documentMode < 9) &&
          !event.button
        ) {
          return this._mouseUp(event);
        } else if (!event.which) {
          if (
            event.originalEvent.altKey ||
            event.originalEvent.ctrlKey ||
            event.originalEvent.metaKey ||
            event.originalEvent.shiftKey
          ) {
            this.ignoreMissingWhich = true;
          } else if (!this.ignoreMissingWhich) {
            return this._mouseUp(event);
          }
        }
      }
      if (event.which || event.button) {
        this._mouseMoved = true;
      }
      if (this._mouseStarted) {
        this._mouseDrag(event);
        return event.preventDefault();
      }
      if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
        this._mouseStarted =
          this._mouseStart(this._mouseDownEvent, event) !== false;
        this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event);
      }
      return !this._mouseStarted;
    },
    _mouseUp: function (event) {
      this.document
        .off("mousemove." + this.widgetName, this._mouseMoveDelegate)
        .off("mouseup." + this.widgetName, this._mouseUpDelegate);
      if (this._mouseStarted) {
        this._mouseStarted = false;
        if (event.target === this._mouseDownEvent.target) {
          $.data(event.target, this.widgetName + ".preventClickEvent", true);
        }
        this._mouseStop(event);
      }
      if (this._mouseDelayTimer) {
        clearTimeout(this._mouseDelayTimer);
        delete this._mouseDelayTimer;
      }
      this.ignoreMissingWhich = false;
      mouseHandled = false;
      event.preventDefault();
    },
    _mouseDistanceMet: function (event) {
      return (
        Math.max(
          Math.abs(this._mouseDownEvent.pageX - event.pageX),
          Math.abs(this._mouseDownEvent.pageY - event.pageY)
        ) >= this.options.distance
      );
    },
    _mouseDelayMet: function () {
      return this.mouseDelayMet;
    },
    _mouseStart: function () {},
    _mouseDrag: function () {},
    _mouseStop: function () {},
    _mouseCapture: function () {
      return true;
    },
  });
});
(function (factory) {
  if (typeof define === "function" && define.amd) {
    define([
      "jquery",
      "./mouse",
      "../data",
      "../plugin",
      "../safe-active-element",
      "../safe-blur",
      "../scroll-parent",
      "../version",
      "../widget",
    ], factory);
  } else {
    factory(jQuery);
  }
})(function ($) {
  $.widget("ui.draggable", $.ui.mouse, {
    version: "@VERSION",
    widgetEventPrefix: "drag",
    options: {
      addClasses: true,
      appendTo: "parent",
      axis: false,
      connectToSortable: false,
      containment: false,
      cursor: "auto",
      cursorAt: false,
      grid: false,
      handle: false,
      helper: "original",
      iframeFix: false,
      opacity: false,
      refreshPositions: false,
      revert: false,
      revertDuration: 500,
      scope: "default",
      scroll: true,
      scrollSensitivity: 20,
      scrollSpeed: 20,
      snap: false,
      snapMode: "both",
      snapTolerance: 20,
      stack: false,
      zIndex: false,
      drag: null,
      start: null,
      stop: null,
    },
    _create: function () {
      if (this.options.helper === "original") {
        this._setPositionRelative();
      }
      if (this.options.addClasses) {
        this._addClass("ui-draggable");
      }
      this._setHandleClassName();
      this._mouseInit();
    },
    _setOption: function (key, value) {
      this._super(key, value);
      if (key === "handle") {
        this._removeHandleClassName();
        this._setHandleClassName();
      }
    },
    _destroy: function () {
      if ((this.helper || this.element).is(".ui-draggable-dragging")) {
        this.destroyOnClear = true;
        return;
      }
      this._removeHandleClassName();
      this._mouseDestroy();
    },
    _mouseCapture: function (event) {
      var o = this.options;
      if (
        this.helper ||
        o.disabled ||
        $(event.target).closest(".ui-resizable-handle").length > 0
      ) {
        return false;
      }
      this.handle = this._getHandle(event);
      if (!this.handle) {
        return false;
      }
      this._blurActiveElement(event);
      this._blockFrames(o.iframeFix === true ? "iframe" : o.iframeFix);
      return true;
    },
    _blockFrames: function (selector) {
      this.iframeBlocks = this.document.find(selector).map(function () {
        var iframe = $(this);
        return $("<div>")
          .css("position", "absolute")
          .appendTo(iframe.parent())
          .outerWidth(iframe.outerWidth())
          .outerHeight(iframe.outerHeight())
          .offset(iframe.offset())[0];
      });
    },
    _unblockFrames: function () {
      if (this.iframeBlocks) {
        this.iframeBlocks.remove();
        delete this.iframeBlocks;
      }
    },
    _blurActiveElement: function (event) {
      var activeElement = $.ui.safeActiveElement(this.document[0]),
        target = $(event.target);
      if (target.closest(activeElement).length) {
        return;
      }
      $.ui.safeBlur(activeElement);
    },
    _mouseStart: function (event) {
      var o = this.options;
      this.helper = this._createHelper(event);
      this._addClass(this.helper, "ui-draggable-dragging");
      this._cacheHelperProportions();
      if ($.ui.ddmanager) {
        $.ui.ddmanager.current = this;
      }
      this._cacheMargins();
      this.cssPosition = this.helper.css("position");
      this.scrollParent = this.helper.scrollParent(true);
      this.offsetParent = this.helper.offsetParent();
      this.hasFixedAncestor =
        this.helper.parents().filter(function () {
          return $(this).css("position") === "fixed";
        }).length > 0;
      this.positionAbs = this.element.offset();
      this._refreshOffsets(event);
      this.originalPosition = this.position = this._generatePosition(
        event,
        false
      );
      this.originalPageX = event.pageX;
      this.originalPageY = event.pageY;
      o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);
      this._setContainment();
      if (this._trigger("start", event) === false) {
        this._clear();
        return false;
      }
      this._cacheHelperProportions();
      if ($.ui.ddmanager && !o.dropBehaviour) {
        $.ui.ddmanager.prepareOffsets(this, event);
      }
      this._mouseDrag(event, true);
      if ($.ui.ddmanager) {
        $.ui.ddmanager.dragStart(this, event);
      }
      return true;
    },
    _refreshOffsets: function (event) {
      this.offset = {
        top: this.positionAbs.top - this.margins.top,
        left: this.positionAbs.left - this.margins.left,
        scroll: false,
        parent: this._getParentOffset(),
        relative: this._getRelativeOffset(),
      };
      this.offset.click = {
        left: event.pageX - this.offset.left,
        top: event.pageY - this.offset.top,
      };
    },
    _mouseDrag: function (event, noPropagation) {
      if (this.hasFixedAncestor) {
        this.offset.parent = this._getParentOffset();
      }
      this.position = this._generatePosition(event, true);
      this.positionAbs = this._convertPositionTo("absolute");
      if (!noPropagation) {
        var ui = this._uiHash();
        if (this._trigger("drag", event, ui) === false) {
          this._mouseUp(new $.Event("mouseup", event));
          return false;
        }
        this.position = ui.position;
      }
      this.helper[0].style.left = this.position.left + "px";
      this.helper[0].style.top = this.position.top + "px";
      if ($.ui.ddmanager) {
        $.ui.ddmanager.drag(this, event);
      }
      return false;
    },
    _mouseStop: function (event) {
      var that = this,
        dropped = false;
      if ($.ui.ddmanager && !this.options.dropBehaviour) {
        dropped = $.ui.ddmanager.drop(this, event);
      }
      if (this.dropped) {
        dropped = this.dropped;
        this.dropped = false;
      }
      if (
        (this.options.revert === "invalid" && !dropped) ||
        (this.options.revert === "valid" && dropped) ||
        this.options.revert === true ||
        ($.isFunction(this.options.revert) &&
          this.options.revert.call(this.element, dropped))
      ) {
        $(this.helper).animate(
          this.originalPosition,
          parseInt(this.options.revertDuration, 10),
          function () {
            if (that._trigger("stop", event) !== false) {
              that._clear();
            }
          }
        );
      } else {
        if (this._trigger("stop", event) !== false) {
          this._clear();
        }
      }
      return false;
    },
    _mouseUp: function (event) {
      this._unblockFrames();
      if ($.ui.ddmanager) {
        $.ui.ddmanager.dragStop(this, event);
      }
      if (this.handleElement.is(event.target)) {
        this.element.trigger("focus");
      }
      return $.ui.mouse.prototype._mouseUp.call(this, event);
    },
    cancel: function () {
      if (this.helper.is(".ui-draggable-dragging")) {
        this._mouseUp(new $.Event("mouseup", { target: this.element[0] }));
      } else {
        this._clear();
      }
      return this;
    },
    _getHandle: function (event) {
      return this.options.handle
        ? !!$(event.target).closest(this.element.find(this.options.handle))
            .length
        : true;
    },
    _setHandleClassName: function () {
      this.handleElement = this.options.handle
        ? this.element.find(this.options.handle)
        : this.element;
      this._addClass(this.handleElement, "ui-draggable-handle");
    },
    _removeHandleClassName: function () {
      this._removeClass(this.handleElement, "ui-draggable-handle");
    },
    _createHelper: function (event) {
      var o = this.options,
        helperIsFunction = $.isFunction(o.helper),
        helper = helperIsFunction
          ? $(o.helper.apply(this.element[0], [event]))
          : o.helper === "clone"
          ? this.element.clone().removeAttr("id")
          : this.element;
      if (!helper.parents("body").length) {
        helper.appendTo(
          o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo
        );
      }
      if (helperIsFunction && helper[0] === this.element[0]) {
        this._setPositionRelative();
      }
      if (
        helper[0] !== this.element[0] &&
        !/(fixed|absolute)/.test(helper.css("position"))
      ) {
        helper.css("position", "absolute");
      }
      return helper;
    },
    _setPositionRelative: function () {
      if (!/^(?:r|a|f)/.test(this.element.css("position"))) {
        this.element[0].style.position = "relative";
      }
    },
    _adjustOffsetFromHelper: function (obj) {
      if (typeof obj === "string") {
        obj = obj.split(" ");
      }
      if ($.isArray(obj)) {
        obj = { left: +obj[0], top: +obj[1] || 0 };
      }
      if ("left" in obj) {
        this.offset.click.left = obj.left + this.margins.left;
      }
      if ("right" in obj) {
        this.offset.click.left =
          this.helperProportions.width - obj.right + this.margins.left;
      }
      if ("top" in obj) {
        this.offset.click.top = obj.top + this.margins.top;
      }
      if ("bottom" in obj) {
        this.offset.click.top =
          this.helperProportions.height - obj.bottom + this.margins.top;
      }
    },
    _isRootNode: function (element) {
      return (
        /(html|body)/i.test(element.tagName) || element === this.document[0]
      );
    },
    _getParentOffset: function () {
      var po = this.offsetParent.offset(),
        document = this.document[0];
      if (
        this.cssPosition === "absolute" &&
        this.scrollParent[0] !== document &&
        $.contains(this.scrollParent[0], this.offsetParent[0])
      ) {
        po.left += this.scrollParent.scrollLeft();
        po.top += this.scrollParent.scrollTop();
      }
      if (this._isRootNode(this.offsetParent[0])) {
        po = { top: 0, left: 0 };
      }
      return {
        top:
          po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
        left:
          po.left +
          (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0),
      };
    },
    _getRelativeOffset: function () {
      if (this.cssPosition !== "relative") {
        return { top: 0, left: 0 };
      }
      var p = this.element.position(),
        scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
      return {
        top:
          p.top -
          (parseInt(this.helper.css("top"), 10) || 0) +
          (!scrollIsRootNode ? this.scrollParent.scrollTop() : 0),
        left:
          p.left -
          (parseInt(this.helper.css("left"), 10) || 0) +
          (!scrollIsRootNode ? this.scrollParent.scrollLeft() : 0),
      };
    },
    _cacheMargins: function () {
      this.margins = {
        left: parseInt(this.element.css("marginLeft"), 10) || 0,
        top: parseInt(this.element.css("marginTop"), 10) || 0,
        right: parseInt(this.element.css("marginRight"), 10) || 0,
        bottom: parseInt(this.element.css("marginBottom"), 10) || 0,
      };
    },
    _cacheHelperProportions: function () {
      this.helperProportions = {
        width: this.helper.outerWidth(),
        height: this.helper.outerHeight(),
      };
    },
    _setContainment: function () {
      var isUserScrollable,
        c,
        ce,
        o = this.options,
        document = this.document[0];
      this.relativeContainer = null;
      if (!o.containment) {
        this.containment = null;
        return;
      }
      if (o.containment === "window") {
        this.containment = [
          $(window).scrollLeft() -
            this.offset.relative.left -
            this.offset.parent.left,
          $(window).scrollTop() -
            this.offset.relative.top -
            this.offset.parent.top,
          $(window).scrollLeft() +
            $(window).width() -
            this.helperProportions.width -
            this.margins.left,
          $(window).scrollTop() +
            ($(window).height() || document.body.parentNode.scrollHeight) -
            this.helperProportions.height -
            this.margins.top,
        ];
        return;
      }
      if (o.containment === "document") {
        this.containment = [
          0,
          0,
          $(document).width() -
            this.helperProportions.width -
            this.margins.left,
          ($(document).height() || document.body.parentNode.scrollHeight) -
            this.helperProportions.height -
            this.margins.top,
        ];
        return;
      }
      if (o.containment.constructor === Array) {
        this.containment = o.containment;
        return;
      }
      if (o.containment === "parent") {
        o.containment = this.helper[0].parentNode;
      }
      c = $(o.containment);
      ce = c[0];
      if (!ce) {
        return;
      }
      isUserScrollable = /(scroll|auto)/.test(c.css("overflow"));
      this.containment = [
        (parseInt(c.css("borderLeftWidth"), 10) || 0) +
          (parseInt(c.css("paddingLeft"), 10) || 0),
        (parseInt(c.css("borderTopWidth"), 10) || 0) +
          (parseInt(c.css("paddingTop"), 10) || 0),
        (isUserScrollable
          ? Math.max(ce.scrollWidth, ce.offsetWidth)
          : ce.offsetWidth) -
          (parseInt(c.css("borderRightWidth"), 10) || 0) -
          (parseInt(c.css("paddingRight"), 10) || 0) -
          this.helperProportions.width -
          this.margins.left -
          this.margins.right,
        (isUserScrollable
          ? Math.max(ce.scrollHeight, ce.offsetHeight)
          : ce.offsetHeight) -
          (parseInt(c.css("borderBottomWidth"), 10) || 0) -
          (parseInt(c.css("paddingBottom"), 10) || 0) -
          this.helperProportions.height -
          this.margins.top -
          this.margins.bottom,
      ];
      this.relativeContainer = c;
    },
    _convertPositionTo: function (d, pos) {
      if (!pos) {
        pos = this.position;
      }
      var mod = d === "absolute" ? 1 : -1,
        scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
      return {
        top:
          pos.top +
          this.offset.relative.top * mod +
          this.offset.parent.top * mod -
          (this.cssPosition === "fixed"
            ? -this.offset.scroll.top
            : scrollIsRootNode
            ? 0
            : this.offset.scroll.top) *
            mod,
        left:
          pos.left +
          this.offset.relative.left * mod +
          this.offset.parent.left * mod -
          (this.cssPosition === "fixed"
            ? -this.offset.scroll.left
            : scrollIsRootNode
            ? 0
            : this.offset.scroll.left) *
            mod,
      };
    },
    _generatePosition: function (event, constrainPosition) {
      var containment,
        co,
        top,
        left,
        o = this.options,
        scrollIsRootNode = this._isRootNode(this.scrollParent[0]),
        pageX = event.pageX,
        pageY = event.pageY;
      if (!scrollIsRootNode || !this.offset.scroll) {
        this.offset.scroll = {
          top: this.scrollParent.scrollTop(),
          left: this.scrollParent.scrollLeft(),
        };
      }
      if (constrainPosition) {
        if (this.containment) {
          if (this.relativeContainer) {
            co = this.relativeContainer.offset();
            containment = [
              this.containment[0] + co.left,
              this.containment[1] + co.top,
              this.containment[2] + co.left,
              this.containment[3] + co.top,
            ];
          } else {
            containment = this.containment;
          }
          if (event.pageX - this.offset.click.left < containment[0]) {
            pageX = containment[0] + this.offset.click.left;
          }
          if (event.pageY - this.offset.click.top < containment[1]) {
            pageY = containment[1] + this.offset.click.top;
          }
          if (event.pageX - this.offset.click.left > containment[2]) {
            pageX = containment[2] + this.offset.click.left;
          }
          if (event.pageY - this.offset.click.top > containment[3]) {
            pageY = containment[3] + this.offset.click.top;
          }
        }
        if (o.grid) {
          top = o.grid[1]
            ? this.originalPageY +
              Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1]
            : this.originalPageY;
          pageY = containment
            ? top - this.offset.click.top >= containment[1] ||
              top - this.offset.click.top > containment[3]
              ? top
              : top - this.offset.click.top >= containment[1]
              ? top - o.grid[1]
              : top + o.grid[1]
            : top;
          left = o.grid[0]
            ? this.originalPageX +
              Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0]
            : this.originalPageX;
          pageX = containment
            ? left - this.offset.click.left >= containment[0] ||
              left - this.offset.click.left > containment[2]
              ? left
              : left - this.offset.click.left >= containment[0]
              ? left - o.grid[0]
              : left + o.grid[0]
            : left;
        }
        if (o.axis === "y") {
          pageX = this.originalPageX;
        }
        if (o.axis === "x") {
          pageY = this.originalPageY;
        }
      }
      return {
        top:
          pageY -
          this.offset.click.top -
          this.offset.relative.top -
          this.offset.parent.top +
          (this.cssPosition === "fixed"
            ? -this.offset.scroll.top
            : scrollIsRootNode
            ? 0
            : this.offset.scroll.top),
        left:
          pageX -
          this.offset.click.left -
          this.offset.relative.left -
          this.offset.parent.left +
          (this.cssPosition === "fixed"
            ? -this.offset.scroll.left
            : scrollIsRootNode
            ? 0
            : this.offset.scroll.left),
      };
    },
    _clear: function () {
      this._removeClass(this.helper, "ui-draggable-dragging");
      if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
        this.helper.remove();
      }
      this.helper = null;
      this.cancelHelperRemoval = false;
      if (this.destroyOnClear) {
        this.destroy();
      }
    },
    _trigger: function (type, event, ui) {
      ui = ui || this._uiHash();
      $.ui.plugin.call(this, type, [event, ui, this], true);
      if (/^(drag|start|stop)/.test(type)) {
        this.positionAbs = this._convertPositionTo("absolute");
        ui.offset = this.positionAbs;
      }
      return $.Widget.prototype._trigger.call(this, type, event, ui);
    },
    plugins: {},
    _uiHash: function () {
      return {
        helper: this.helper,
        position: this.position,
        originalPosition: this.originalPosition,
        offset: this.positionAbs,
      };
    },
  });
  return $.ui.draggable;
});
(function (factory) {
  if (typeof define === "function" && define.amd) {
    define([
      "jquery",
      "./mouse",
      "../keycode",
      "../version",
      "../widget",
    ], factory);
  } else {
    factory(jQuery);
  }
})(function ($) {
  return $.widget("ui.slider", $.ui.mouse, {
    version: "@VERSION",
    widgetEventPrefix: "slide",
    options: {
      animate: false,
      classes: {
        "ui-slider": "ui-corner-all",
        "ui-slider-handle": "ui-corner-all",
        "ui-slider-range": "ui-corner-all ui-widget-header",
      },
      distance: 0,
      max: 100,
      min: 0,
      orientation: "horizontal",
      range: false,
      step: 1,
      value: 0,
      values: null,
      change: null,
      slide: null,
      start: null,
      stop: null,
    },
    numPages: 5,
    _create: function () {
      this._keySliding = false;
      this._mouseSliding = false;
      this._animateOff = true;
      this._handleIndex = null;
      this._detectOrientation();
      this._mouseInit();
      this._calculateNewMax();
      this._addClass(
        "ui-slider ui-slider-" + this.orientation,
        "ui-widget ui-widget-content"
      );
      this._refresh();
      this._animateOff = false;
    },
    _refresh: function () {
      this._createRange();
      this._createHandles();
      this._setupEvents();
      this._refreshValue();
    },
    _createHandles: function () {
      var i,
        handleCount,
        options = this.options,
        existingHandles = this.element.find(".ui-slider-handle"),
        handle = "<span tabindex='0'></span>",
        handles = [];
      handleCount = (options.values && options.values.length) || 1;
      if (existingHandles.length > handleCount) {
        existingHandles.slice(handleCount).remove();
        existingHandles = existingHandles.slice(0, handleCount);
      }
      for (i = existingHandles.length; i < handleCount; i++) {
        handles.push(handle);
      }
      this.handles = existingHandles.add(
        $(handles.join("")).appendTo(this.element)
      );
      this._addClass(this.handles, "ui-slider-handle", "ui-state-default");
      this.handle = this.handles.eq(0);
      this.handles.each(function (i) {
        $(this).data("ui-slider-handle-index", i).attr("tabIndex", 0);
      });
    },
    _createRange: function () {
      var options = this.options;
      if (options.range) {
        if (options.range === true) {
          if (!options.values) {
            options.values = [this._valueMin(), this._valueMin()];
          } else if (options.values.length && options.values.length !== 2) {
            options.values = [options.values[0], options.values[0]];
          } else if ($.isArray(options.values)) {
            options.values = options.values.slice(0);
          }
        }
        if (!this.range || !this.range.length) {
          this.range = $("<div>").appendTo(this.element);
          this._addClass(this.range, "ui-slider-range");
        } else {
          this._removeClass(
            this.range,
            "ui-slider-range-min ui-slider-range-max"
          );
          this.range.css({ left: "", bottom: "" });
        }
        if (options.range === "min" || options.range === "max") {
          this._addClass(this.range, "ui-slider-range-" + options.range);
        }
      } else {
        if (this.range) {
          this.range.remove();
        }
        this.range = null;
      }
    },
    _setupEvents: function () {
      this._off(this.handles);
      this._hoverable(this.handles);
      this._focusable(this.handles);
    },
    _destroy: function () {
      this.handles.remove();
      if (this.range) {
        this.range.remove();
      }
      this._mouseDestroy();
    },
    _mouseCapture: function (event) {
      var position,
        normValue,
        distance,
        closestHandle,
        index,
        allowed,
        offset,
        mouseOverHandle,
        that = this,
        o = this.options;
      if (o.disabled) {
        return false;
      }
      this.elementSize = {
        width: this.element.outerWidth(),
        height: this.element.outerHeight(),
      };
      this.elementOffset = this.element.offset();
      position = { x: event.pageX, y: event.pageY };
      normValue = this._normValueFromMouse(position);
      distance = this._valueMax() - this._valueMin() + 1;
      this.handles.each(function (i) {
        var thisDistance = Math.abs(normValue - that.values(i));
        if (
          distance > thisDistance ||
          (distance === thisDistance &&
            (i === that._lastChangedValue || that.values(i) === o.min))
        ) {
          distance = thisDistance;
          closestHandle = $(this);
          index = i;
        }
      });
      allowed = this._start(event, index);
      if (allowed === false) {
        return false;
      }
      this._mouseSliding = true;
      this._handleIndex = index;
      this._addClass(closestHandle, null, "ui-state-active");
      closestHandle.trigger("focus");
      offset = closestHandle.offset();
      mouseOverHandle = !$(event.target)
        .parents()
        .addBack()
        .is(".ui-slider-handle");
      this._clickOffset = mouseOverHandle
        ? { left: 0, top: 0 }
        : {
            left: event.pageX - offset.left - closestHandle.width() / 2,
            top:
              event.pageY -
              offset.top -
              closestHandle.height() / 2 -
              (parseInt(closestHandle.css("borderTopWidth"), 10) || 0) -
              (parseInt(closestHandle.css("borderBottomWidth"), 10) || 0) +
              (parseInt(closestHandle.css("marginTop"), 10) || 0),
          };
      if (!this.handles.hasClass("ui-state-hover")) {
        this._slide(event, index, normValue);
      }
      this._animateOff = true;
      return true;
    },
    _mouseStart: function () {
      return true;
    },
    _mouseDrag: function (event) {
      var position = { x: event.pageX, y: event.pageY },
        normValue = this._normValueFromMouse(position);
      this._slide(event, this._handleIndex, normValue);
      return false;
    },
    _mouseStop: function (event) {
      this._removeClass(this.handles, null, "ui-state-active");
      this._mouseSliding = false;
      this._stop(event, this._handleIndex);
      this._change(event, this._handleIndex);
      this._handleIndex = null;
      this._clickOffset = null;
      this._animateOff = false;
      return false;
    },
    _detectOrientation: function () {
      this.orientation =
        this.options.orientation === "vertical" ? "vertical" : "horizontal";
    },
    _normValueFromMouse: function (position) {
      var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;
      if (this.orientation === "horizontal") {
        pixelTotal = this.elementSize.width;
        pixelMouse =
          position.x -
          this.elementOffset.left -
          (this._clickOffset ? this._clickOffset.left : 0);
      } else {
        pixelTotal = this.elementSize.height;
        pixelMouse =
          position.y -
          this.elementOffset.top -
          (this._clickOffset ? this._clickOffset.top : 0);
      }
      percentMouse = pixelMouse / pixelTotal;
      if (percentMouse > 1) {
        percentMouse = 1;
      }
      if (percentMouse < 0) {
        percentMouse = 0;
      }
      if (this.orientation === "vertical") {
        percentMouse = 1 - percentMouse;
      }
      valueTotal = this._valueMax() - this._valueMin();
      valueMouse = this._valueMin() + percentMouse * valueTotal;
      return this._trimAlignValue(valueMouse);
    },
    _uiHash: function (index, value, values) {
      var uiHash = {
        handle: this.handles[index],
        handleIndex: index,
        value: value !== undefined ? value : this.value(),
      };
      if (this._hasMultipleValues()) {
        uiHash.value = value !== undefined ? value : this.values(index);
        uiHash.values = values || this.values();
      }
      return uiHash;
    },
    _hasMultipleValues: function () {
      return this.options.values && this.options.values.length;
    },
    _start: function (event, index) {
      return this._trigger("start", event, this._uiHash(index));
    },
    _slide: function (event, index, newVal) {
      var allowed,
        otherVal,
        currentValue = this.value(),
        newValues = this.values();
      if (this._hasMultipleValues()) {
        otherVal = this.values(index ? 0 : 1);
        currentValue = this.values(index);
        if (this.options.values.length === 2 && this.options.range === true) {
          newVal =
            index === 0
              ? Math.min(otherVal, newVal)
              : Math.max(otherVal, newVal);
        }
        newValues[index] = newVal;
      }
      if (newVal === currentValue) {
        return;
      }
      allowed = this._trigger(
        "slide",
        event,
        this._uiHash(index, newVal, newValues)
      );
      if (allowed === false) {
        return;
      }
      if (this._hasMultipleValues()) {
        this.values(index, newVal);
      } else {
        this.value(newVal);
      }
    },
    _stop: function (event, index) {
      this._trigger("stop", event, this._uiHash(index));
    },
    _change: function (event, index) {
      if (!this._keySliding && !this._mouseSliding) {
        this._lastChangedValue = index;
        this._trigger("change", event, this._uiHash(index));
      }
    },
    value: function (newValue) {
      if (arguments.length) {
        this.options.value = this._trimAlignValue(newValue);
        this._refreshValue();
        this._change(null, 0);
        return;
      }
      return this._value();
    },
    values: function (index, newValue) {
      var vals, newValues, i;
      if (arguments.length > 1) {
        this.options.values[index] = this._trimAlignValue(newValue);
        this._refreshValue();
        this._change(null, index);
        return;
      }
      if (arguments.length) {
        if ($.isArray(arguments[0])) {
          vals = this.options.values;
          newValues = arguments[0];
          for (i = 0; i < vals.length; i += 1) {
            vals[i] = this._trimAlignValue(newValues[i]);
            this._change(null, i);
          }
          this._refreshValue();
        } else {
          if (this._hasMultipleValues()) {
            return this._values(index);
          } else {
            return this.value();
          }
        }
      } else {
        return this._values();
      }
    },
    _setOption: function (key, value) {
      var i,
        valsLength = 0;
      if (key === "range" && this.options.range === true) {
        if (value === "min") {
          this.options.value = this._values(0);
          this.options.values = null;
        } else if (value === "max") {
          this.options.value = this._values(this.options.values.length - 1);
          this.options.values = null;
        }
      }
      if ($.isArray(this.options.values)) {
        valsLength = this.options.values.length;
      }
      this._super(key, value);
      switch (key) {
        case "orientation":
          this._detectOrientation();
          this._removeClass(
            "ui-slider-horizontal ui-slider-vertical"
          )._addClass("ui-slider-" + this.orientation);
          this._refreshValue();
          if (this.options.range) {
            this._refreshRange(value);
          }
          this.handles.css(value === "horizontal" ? "bottom" : "left", "");
          break;
        case "value":
          this._animateOff = true;
          this._refreshValue();
          this._change(null, 0);
          this._animateOff = false;
          break;
        case "values":
          this._animateOff = true;
          this._refreshValue();
          for (i = valsLength - 1; i >= 0; i--) {
            this._change(null, i);
          }
          this._animateOff = false;
          break;
        case "step":
        case "min":
        case "max":
          this._animateOff = true;
          this._calculateNewMax();
          this._refreshValue();
          this._animateOff = false;
          break;
        case "range":
          this._animateOff = true;
          this._refresh();
          this._animateOff = false;
          break;
      }
    },
    _setOptionDisabled: function (value) {
      this._super(value);
      this._toggleClass(null, "ui-state-disabled", !!value);
    },
    _value: function () {
      var val = this.options.value;
      val = this._trimAlignValue(val);
      return val;
    },
    _values: function (index) {
      var val, vals, i;
      if (arguments.length) {
        val = this.options.values[index];
        val = this._trimAlignValue(val);
        return val;
      } else if (this._hasMultipleValues()) {
        vals = this.options.values.slice();
        for (i = 0; i < vals.length; i += 1) {
          vals[i] = this._trimAlignValue(vals[i]);
        }
        return vals;
      } else {
        return [];
      }
    },
    _trimAlignValue: function (val) {
      if (val <= this._valueMin()) {
        return this._valueMin();
      }
      if (val >= this._valueMax()) {
        return this._valueMax();
      }
      var step = this.options.step > 0 ? this.options.step : 1,
        valModStep = (val - this._valueMin()) % step,
        alignValue = val - valModStep;
      if (Math.abs(valModStep) * 2 >= step) {
        alignValue += valModStep > 0 ? step : -step;
      }
      return parseFloat(alignValue.toFixed(5));
    },
    _calculateNewMax: function () {
      var max = this.options.max,
        min = this._valueMin(),
        step = this.options.step,
        aboveMin = Math.round((max - min) / step) * step;
      max = aboveMin + min;
      if (max > this.options.max) {
        max -= step;
      }
      this.max = parseFloat(max.toFixed(this._precision()));
    },
    _precision: function () {
      var precision = this._precisionOf(this.options.step);
      if (this.options.min !== null) {
        precision = Math.max(precision, this._precisionOf(this.options.min));
      }
      return precision;
    },
    _precisionOf: function (num) {
      var str = num.toString(),
        decimal = str.indexOf(".");
      return decimal === -1 ? 0 : str.length - decimal - 1;
    },
    _valueMin: function () {
      return this.options.min;
    },
    _valueMax: function () {
      return this.max;
    },
    _refreshRange: function (orientation) {
      if (orientation === "vertical") {
        this.range.css({ width: "", left: "" });
      }
      if (orientation === "horizontal") {
        this.range.css({ height: "", bottom: "" });
      }
    },
    _refreshValue: function () {
      var lastValPercent,
        valPercent,
        value,
        valueMin,
        valueMax,
        oRange = this.options.range,
        o = this.options,
        that = this,
        animate = !this._animateOff ? o.animate : false,
        _set = {};
      if (this._hasMultipleValues()) {
        this.handles.each(function (i) {
          valPercent =
            ((that.values(i) - that._valueMin()) /
              (that._valueMax() - that._valueMin())) *
            100;
          _set[that.orientation === "horizontal" ? "left" : "bottom"] =
            valPercent + "%";
          $(this).stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
          if (that.options.range === true) {
            if (that.orientation === "horizontal") {
              if (i === 0) {
                that.range
                  .stop(1, 1)
                  [animate ? "animate" : "css"](
                    { left: valPercent + "%" },
                    o.animate
                  );
              }
              if (i === 1) {
                that.range[animate ? "animate" : "css"](
                  { width: valPercent - lastValPercent + "%" },
                  { queue: false, duration: o.animate }
                );
              }
            } else {
              if (i === 0) {
                that.range
                  .stop(1, 1)
                  [animate ? "animate" : "css"](
                    { bottom: valPercent + "%" },
                    o.animate
                  );
              }
              if (i === 1) {
                that.range[animate ? "animate" : "css"](
                  { height: valPercent - lastValPercent + "%" },
                  { queue: false, duration: o.animate }
                );
              }
            }
          }
          lastValPercent = valPercent;
        });
      } else {
        value = this.value();
        valueMin = this._valueMin();
        valueMax = this._valueMax();
        valPercent =
          valueMax !== valueMin
            ? ((value - valueMin) / (valueMax - valueMin)) * 100
            : 0;
        _set[this.orientation === "horizontal" ? "left" : "bottom"] =
          valPercent + "%";
        this.handle.stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
        if (oRange === "min" && this.orientation === "horizontal") {
          this.range
            .stop(1, 1)
            [animate ? "animate" : "css"](
              { width: valPercent + "%" },
              o.animate
            );
        }
        if (oRange === "max" && this.orientation === "horizontal") {
          this.range
            .stop(1, 1)
            [animate ? "animate" : "css"](
              { width: 100 - valPercent + "%" },
              o.animate
            );
        }
        if (oRange === "min" && this.orientation === "vertical") {
          this.range
            .stop(1, 1)
            [animate ? "animate" : "css"](
              { height: valPercent + "%" },
              o.animate
            );
        }
        if (oRange === "max" && this.orientation === "vertical") {
          this.range
            .stop(1, 1)
            [animate ? "animate" : "css"](
              { height: 100 - valPercent + "%" },
              o.animate
            );
        }
      }
    },
  });
});
!(function (a) {
  function f(a, b) {
    if (!(a.originalEvent.touches.length > 1)) {
      a.preventDefault();
      var c = a.originalEvent.changedTouches[0],
        d = document.createEvent("MouseEvents");
      d.initMouseEvent(
        b,
        !0,
        !0,
        window,
        1,
        c.screenX,
        c.screenY,
        c.clientX,
        c.clientY,
        !1,
        !1,
        !1,
        !1,
        0,
        null
      ),
        a.target.dispatchEvent(d);
    }
  }
  if (((a.support.touch = "ontouchend" in document), a.support.touch)) {
    var e,
      b = a.ui.mouse.prototype,
      c = b._mouseInit,
      d = b._mouseDestroy;
    (b._touchStart = function (a) {
      var b = this;
      !e &&
        b._mouseCapture(a.originalEvent.changedTouches[0]) &&
        ((e = !0),
        (b._touchMoved = !1),
        f(a, "mouseover"),
        f(a, "mousemove"),
        f(a, "mousedown"));
    }),
      (b._touchMove = function (a) {
        e && ((this._touchMoved = !0), f(a, "mousemove"));
      }),
      (b._touchEnd = function (a) {
        e &&
          (f(a, "mouseup"),
          f(a, "mouseout"),
          this._touchMoved || f(a, "click"),
          (e = !1));
      }),
      (b._mouseInit = function () {
        var b = this;
        b.element.bind({
          touchstart: a.proxy(b, "_touchStart"),
          touchmove: a.proxy(b, "_touchMove"),
          touchend: a.proxy(b, "_touchEnd"),
        }),
          c.call(b);
      }),
      (b._mouseDestroy = function () {
        var b = this;
        b.element.unbind({
          touchstart: a.proxy(b, "_touchStart"),
          touchmove: a.proxy(b, "_touchMove"),
          touchend: a.proxy(b, "_touchEnd"),
        }),
          d.call(b);
      });
  }
})(jQuery);
(function (root, factory) {
  if (typeof define === "function" && define.amd) {
    define(factory);
  } else if (typeof exports === "object") {
    module.exports = factory();
  } else {
    root.NProgress = factory();
  }
})(this, function () {
  var NProgress = {};
  NProgress.version = "0.2.0";
  var Settings = (NProgress.settings = {
    minimum: 0.995,
    easing: "linear",
    positionUsing: "",
    speed: 1600,
    trickle: false,
    trickleSpeed: 50,
    showSpinner: false,
    barSelector: '[role="bar"]',
    spinnerSelector: '[role="spinner"]',
    parent: "body",
    template:
      '<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>',
  });
  NProgress.configure = function (options) {
    var key, value;
    for (key in options) {
      value = options[key];
      if (value !== undefined && options.hasOwnProperty(key))
        Settings[key] = value;
    }
    return this;
  };
  NProgress.status = null;
  NProgress.set = function (n) {
    var started = NProgress.isStarted();
    n = clamp(n, Settings.minimum, 1);
    NProgress.status = n === 1 ? null : n;
    var progress = NProgress.render(!started),
      bar = progress.querySelector(Settings.barSelector),
      speed = Settings.speed,
      ease = Settings.easing;
    speed = n == 1 ? 200 : speed;
    progress.offsetWidth;
    queue(function (next) {
      if (Settings.positionUsing === "")
        Settings.positionUsing = NProgress.getPositioningCSS();
      css(bar, barPositionCSS(n, speed, ease));
      if (n === 1) {
        css(progress, { transition: "none", opacity: 1 });
        progress.offsetWidth;
        setTimeout(function () {
          css(progress, {
            transition: "all " + speed + "ms linear",
            opacity: 0,
          });
          setTimeout(function () {
            NProgress.remove();
            next();
          }, speed);
        }, speed);
      } else {
        setTimeout(next, speed);
      }
    });
    return this;
  };
  NProgress.isStarted = function () {
    return typeof NProgress.status === "number";
  };
  NProgress.start = function () {
    if (!NProgress.status) NProgress.set(0);
    var work = function () {
      setTimeout(function () {
        if (!NProgress.status) return;
        NProgress.trickle();
        work();
      }, Settings.trickleSpeed);
    };
    if (Settings.trickle) work();
    return this;
  };
  NProgress.done = function (force) {
    if (!force && !NProgress.status) return this;
    return NProgress.inc(0.3 + 0.5 * Math.random()).set(1);
  };
  NProgress.inc = function (amount) {
    var n = NProgress.status;
    if (!n) {
      return NProgress.start();
    } else if (n > 1) {
      return;
    } else {
      if (typeof amount !== "number") {
        if (n >= 0 && n < 0.2) {
          amount = 0.1;
        } else if (n >= 0.2 && n < 0.5) {
          amount = 0.04;
        } else if (n >= 0.5 && n < 0.8) {
          amount = 0.02;
        } else if (n >= 0.8 && n < 0.99) {
          amount = 0.005;
        } else {
          amount = 0;
        }
      }
      n = clamp(n + amount, 0, 0.994);
      return NProgress.set(n);
    }
  };
  NProgress.trickle = function () {
    return NProgress.inc();
  };
  (function () {
    var initial = 0,
      current = 0;
    NProgress.promise = function ($promise) {
      if (!$promise || $promise.state() === "resolved") {
        return this;
      }
      if (current === 0) {
        NProgress.start();
      }
      initial++;
      current++;
      $promise.always(function () {
        current--;
        if (current === 0) {
          initial = 0;
          NProgress.done();
        } else {
          NProgress.set((initial - current) / initial);
        }
      });
      return this;
    };
  })();
  NProgress.render = function (fromStart) {
    if (NProgress.isRendered()) return document.getElementById("nprogress");
    addClass(document.documentElement, "nprogress-busy");
    var progress = document.createElement("div");
    progress.id = "nprogress";
    progress.innerHTML = Settings.template;
    var bar = progress.querySelector(Settings.barSelector),
      perc = fromStart ? "-100" : toBarPerc(NProgress.status || 0),
      parent = document.querySelector(Settings.parent),
      spinner;
    css(bar, {
      transition: "all 0 linear",
      transform: "translate3d(" + perc + "%,0,0)",
    });
    if (!Settings.showSpinner) {
      spinner = progress.querySelector(Settings.spinnerSelector);
      spinner && removeElement(spinner);
    }
    if (parent != document.body) {
      addClass(parent, "nprogress-custom-parent");
    }
    parent.appendChild(progress);
    return progress;
  };
  NProgress.remove = function () {
    removeClass(document.documentElement, "nprogress-busy");
    removeClass(
      document.querySelector(Settings.parent),
      "nprogress-custom-parent"
    );
    var progress = document.getElementById("nprogress");
    progress && removeElement(progress);
  };
  NProgress.isRendered = function () {
    return !!document.getElementById("nprogress");
  };
  NProgress.getPositioningCSS = function () {
    var bodyStyle = document.body.style;
    var vendorPrefix =
      "WebkitTransform" in bodyStyle
        ? "Webkit"
        : "MozTransform" in bodyStyle
        ? "Moz"
        : "msTransform" in bodyStyle
        ? "ms"
        : "OTransform" in bodyStyle
        ? "O"
        : "";
    if (vendorPrefix + "Perspective" in bodyStyle) {
      return "translate3d";
    } else if (vendorPrefix + "Transform" in bodyStyle) {
      return "translate";
    } else {
      return "margin";
    }
  };
  function clamp(n, min, max) {
    if (n < min) return min;
    if (n > max) return max;
    return n;
  }
  function toBarPerc(n) {
    return (-1 + n) * 100;
  }
  function barPositionCSS(n, speed, ease) {
    var barCSS;
    if (Settings.positionUsing === "translate3d") {
      barCSS = { transform: "translate3d(" + toBarPerc(n) + "%,0,0)" };
    } else if (Settings.positionUsing === "translate") {
      barCSS = { transform: "translate(" + toBarPerc(n) + "%,0)" };
    } else {
      barCSS = { "margin-left": toBarPerc(n) + "%" };
    }
    barCSS.transition = "all " + speed + "ms " + ease;
    return barCSS;
  }
  var queue = (function () {
    var pending = [];
    function next() {
      var fn = pending.shift();
      if (fn) {
        fn(next);
      }
    }
    return function (fn) {
      pending.push(fn);
      if (pending.length == 1) next();
    };
  })();
  var css = (function () {
    var cssPrefixes = ["Webkit", "O", "Moz", "ms"],
      cssProps = {};
    function camelCase(string) {
      return string
        .replace(/^-ms-/, "ms-")
        .replace(/-([\da-z])/gi, function (match, letter) {
          return letter.toUpperCase();
        });
    }
    function getVendorProp(name) {
      var style = document.body.style;
      if (name in style) return name;
      var i = cssPrefixes.length,
        capName = name.charAt(0).toUpperCase() + name.slice(1),
        vendorName;
      while (i--) {
        vendorName = cssPrefixes[i] + capName;
        if (vendorName in style) return vendorName;
      }
      return name;
    }
    function getStyleProp(name) {
      name = camelCase(name);
      return cssProps[name] || (cssProps[name] = getVendorProp(name));
    }
    function applyCss(element, prop, value) {
      prop = getStyleProp(prop);
      element.style[prop] = value;
    }
    return function (element, properties) {
      var args = arguments,
        prop,
        value;
      if (args.length == 2) {
        for (prop in properties) {
          value = properties[prop];
          if (value !== undefined && properties.hasOwnProperty(prop))
            applyCss(element, prop, value);
        }
      } else {
        applyCss(element, args[1], args[2]);
      }
    };
  })();
  function hasClass(element, name) {
    var list = typeof element == "string" ? element : classList(element);
    return list.indexOf(" " + name + " ") >= 0;
  }
  function addClass(element, name) {
    var oldList = classList(element),
      newList = oldList + name;
    if (hasClass(oldList, name)) return;
    element.className = newList.substring(1);
  }
  function removeClass(element, name) {
    var oldList = classList(element),
      newList;
    if (!hasClass(element, name)) return;
    newList = oldList.replace(" " + name + " ", " ");
    element.className = newList.substring(1, newList.length - 1);
  }
  function classList(element) {
    return (" " + ((element && element.className) || "") + " ").replace(
      /\s+/gi,
      " "
    );
  }
  function removeElement(element) {
    element && element.parentNode && element.parentNode.removeChild(element);
  }
  return NProgress;
});
var ls = ls || {};
ls.ajax = function ($) {
  "use strict";
  this.options = {
    selectors: { alert: ".js-ajax-form-alert" },
    html: {
      alert: function (title, text) {
        return (
          '<div class="ls-alert ls-alert--error js-ajax-form-alert">' +
          (title ? '<h4 class="ls-alert-title">' + title + "</h4>" : "") +
          (text ? '<div class="ls-alert-body">' + text + "</div>" : "") +
          "</div>"
        );
      },
    },
  };
  this.load = function (url, params, callback, more) {
    more = more || {};
    params = params || {};
    more.showNotices =
      typeof more.showNotices === "undefined" ? true : more.showNotices;
    more.showProgress =
      typeof more.showProgress === "undefined" ? true : more.showProgress;
    if (more.showProgress) {
      NProgress.start();
    }
    if (typeof LIVESTREET_SECURITY_KEY !== "undefined")
      params.security_ls_key = LIVESTREET_SECURITY_KEY;
    $.each(params, function (k, v) {
      if (typeof v == "boolean") {
        params[k] = v ? 1 : 0;
      }
    });
    if (
      url.indexOf("http://") != 0 &&
      url.indexOf("https://") != 0 &&
      url.indexOf("/") != 0
    ) {
      url = aRouter["ajax"] + url + "/";
    }
    var ajaxOptions = $.extend(
      {},
      {
        type: "POST",
        url: url,
        data: params,
        dataType: "json",
        success: function (response) {
          if (response.bStateError) {
            if (more.showNotices && (response.sMsgTitle || response.sMsg))
              ls.msg.error(response.sMsgTitle, response.sMsg);
            if ($.isFunction(more.onError)) more.onError.apply(this, arguments);
          } else {
            if (more.showNotices && (response.sMsgTitle || response.sMsg))
              ls.msg.notice(response.sMsgTitle, response.sMsg);
            if ($.isFunction(callback)) callback.apply(this, arguments);
          }
          response.sUrlRedirect && (window.location = response.sUrlRedirect);
          response.bRefresh && window.location.reload();
          if ($.isFunction(more.onResponse))
            more.onResponse.apply(this, arguments);
        }.bind(this),
        error: function (msg) {
          if ($.isFunction(more.onError)) more.onError.apply(this, arguments);
        }.bind(this),
        complete: function (msg) {
          NProgress.done();
          if ($.isFunction(more.onComplete))
            more.onComplete.apply(this, arguments);
        }.bind(this),
      },
      more
    );
    ls.hook.run("ls_ajax_before", [ajaxOptions, callback, more], this);
    return $.ajax(ajaxOptions);
  };
  this.submit = function (url, form, callback, more) {
    var more = more || {},
      form = typeof form == "string" ? $(form) : form,
      buttonSubmit = form.find("[type=submit]").eq(0),
      button =
        more.submitButton ||
        (buttonSubmit.length && buttonSubmit) ||
        $("button[form=" + form.attr("id") + "]"),
      params = more.params || {},
      lock = typeof more.lock === "undefined" ? true : more.lock;
    more.showNotices =
      typeof more.showNotices === "undefined" ? true : more.showNotices;
    more.showProgress =
      typeof more.showProgress === "undefined" ? true : more.showProgress;
    if (more.showProgress) {
      NProgress.start();
    }
    if (typeof LIVESTREET_SECURITY_KEY !== "undefined")
      params.security_ls_key = LIVESTREET_SECURITY_KEY;
    if (
      url.indexOf("http://") != 0 &&
      url.indexOf("https://") != 0 &&
      url.indexOf("/") != 0
    ) {
      url = aRouter["ajax"] + url + "/";
    }
    if ($.isFunction(form.parsley)) {
      form.parsley().off("form:validate", ls.ajax.onFormValidate);
      form.parsley().on("form:validate", ls.ajax.onFormValidate);
    }
    var options = {
      type: "POST",
      url: url,
      dataType: more.dataType || "json",
      data: params,
      beforeSubmit: function (arr, form, options) {
        if (lock) ls.utils.formLock(form);
        button &&
          button
            .prop("disabled", true)
            .addClass(ls.options.classes.states.loading);
        this.clearFieldErrors(form);
      }.bind(this),
      beforeSerialize: function (form, options) {
        if (typeof more.validate == "undefined" || more.validate === true) {
          var res = form.parsley("validate");
          if (!res) {
            NProgress.done();
            if ($.isFunction(more.onValidateFail))
              more.onValidateFail.apply(this, arguments);
          }
          return res;
        }
        return true;
      },
      success: function (response, status, xhr, form) {
        if (response.bStateError) {
          if (response.errors) {
            this.showFieldErrors(form, response.errors);
          } else {
            if (more.showNotices) {
              if (response.sMsgTitle || response.sMsg)
                ls.msg.error(response.sMsgTitle, response.sMsg);
            } else {
              if (
                response.is_form_error &&
                (response.sMsgTitle || response.sMsg)
              )
                this.showFormAlert(form, response.sMsgTitle, response.sMsg);
            }
          }
          if ($.isFunction(more.onError)) more.onError.apply(this, arguments);
        } else {
          if (more.showNotices && (response.sMsgTitle || response.sMsg))
            ls.msg.notice(response.sMsgTitle, response.sMsg);
          if ($.isFunction(callback)) callback.apply(this, arguments);
        }
        response.sUrlRedirect && (window.location = response.sUrlRedirect);
        response.bRefresh && window.location.reload();
        if ($.isFunction(more.onResponse))
          more.onResponse.apply(this, arguments);
      }.bind(this),
      error: function (msg) {
        if ($.isFunction(more.onError)) more.onError.apply(this, arguments);
      }.bind(this),
      complete: function () {
        NProgress.done();
        button
          .prop("disabled", false)
          .removeClass(ls.options.classes.states.loading);
        if ($.isFunction(more.onComplete))
          more.onComplete.apply(this, arguments);
        if (lock) ls.utils.formUnlock(form);
      }.bind(this),
    };
    ls.hook.run("ls_ajaxsubmit_before", [options, form, callback, more], this);
    form.ajaxSubmit(options);
  };
  this.onFormValidate = function (event) {
    ls.ajax.clearFieldErrors(event.$element);
  };
  this.clearFieldErrors = function (form) {
    var fieldsForClearError = form.data("fieldsForClearError");
    if (fieldsForClearError && fieldsForClearError.length) {
      $.each(fieldsForClearError, function (k, v) {
        var parsley = form.find('[name="' + v + '"]').parsley();
        if (parsley) parsley.removeError(v);
      });
    }
  };
  this.showFieldErrors = function (form, errors) {
    var fieldsForClearError = [];
    $.each(errors, function (key, field) {
      var input = form.find('[name="' + key + '"]');
      if (input.length && input.parsley()) {
        input.parsley().addError(key, { message: field.join("<br>") });
        fieldsForClearError.push(key);
      }
    });
    form.data("fieldsForClearError", fieldsForClearError);
  };
  this.showFormAlert = function (form, title, text) {
    form.find(this.options.selectors.alert).remove();
    form.prepend(this.options.html.alert(title, text));
  };
  this.form = function (url, form, callback, more) {
    var form = typeof form == "string" ? $(form) : form;
    form.on("submit", function (e) {
      ls.ajax.submit(url, form, callback, more);
      e.preventDefault();
    });
  };
  return this;
}.call(ls.ajax || {}, jQuery);
var ls = ls || {};
ls.dev = function ($) {
  var _defaults = {};
  this.init = function (options) {
    this.options = $.extend({}, _defaults, options);
  };
  this.debug = function () {
    if (ls.options.production) return;
    this.log.apply(this, arguments);
  };
  this.log = function () {
    if (window.console && window.console.log) {
      Function.prototype.bind
        .call(console.log, console)
        .apply(console, arguments);
    }
  };
  return this;
}.call(ls.dev || {}, jQuery);
var ls = ls || {};
ls.hook = function ($) {
  this.hooks = {};
  this.cloneFunc = function (func, as_text, no_def) {
    var f;
    if ($.type(func) == "string") {
      eval("f = " + func + ";");
    } else if ($.type(func) == "array") {
      f = func[0][func[1]];
    } else {
      f = func;
    }
    if ($.type(f) == "function") {
      var fbody = f.toString().replace(/^(function)([^\(]*)\(/gi, "$1 (");
      if (typeof as_text != "undefined" && as_text) {
        if (typeof no_def != "undefined" && no_def) {
          return fbody.replace(/^[^\{]*\{/gi, "").replace(/\}$/gi, "");
        } else {
          return fbody;
        }
      }
      return eval("(" + fbody + ")");
    }
    return function () {};
  };
  this.inject = function (func, funcInj, marker) {
    var funcBody = ls.hook.cloneFunc(func, 1);
    var funcDefinition =
      ($.type(func) == "string"
        ? func
        : $.type(func) == "array"
        ? "func[0][func[1]]"
        : "func") + " = ";
    var replaceFrom = /\{/m;
    var replaceTo = "{ ";
    if ($.type(marker) == "string") {
      replaceFrom = new RegExp(
        "(ls\\.hook\\.marker\\((['\"])" + marker + "(\\2)\\)[\\r\\n\\t ]*;?)",
        "m"
      );
      replaceTo = "$1";
    }
    if ($.type(funcInj) == "function") {
      var funcInjName = "funcInj" + Math.floor(Math.random() * 1000000);
      eval('window["' + funcInjName + '"] = funcInj;');
      eval(
        funcDefinition +
          funcBody.replace(
            replaceFrom,
            replaceTo + funcInjName + ".apply(this, arguments); "
          )
      );
    } else {
      eval(
        funcDefinition +
          funcBody.replace(replaceFrom, replaceTo + funcInj + "; ")
      );
    }
  };
  this.add = function (name, callback, priority) {
    var priority = priority || 0;
    if (typeof ls.hook.hooks[name] == "undefined") {
      ls.hook.hooks[name] = [];
    }
    ls.hook.hooks[name].push({ callback: callback, priority: priority });
  };
  this.run = function (name, params, o) {
    var params = params || [];
    var hooks = ls.hook.hooks;
    if (typeof hooks[name] != "undefined") {
      hooks[name].sort(function (a, b) {
        return a.priority > b.priority ? 1 : a.priority < b.priority ? -1 : 0;
      });
      $.each(hooks[name], function (i) {
        var callback = hooks[name][i].callback;
        if ($.type(callback) == "function") {
          callback.apply(o, params);
        } else if ($.type(callback) == "array") {
          callback[0][callback[1]].apply(o, params);
        } else if ($.type(callback) == "string") {
          eval("(function(){" + callback + "}).apply(o, params);");
        } else {
          ls.dev.debug('cant call hook "' + name + '"[' + i + "]");
        }
      });
    }
  };
  this.marker = function (name) {};
  return this;
}.call(ls.hook || {}, jQuery);
var ls = ls || {};
ls.lang = ls.i18n = function ($) {
  "use strict";
  var _aMsgs = {};
  this.load = function (msgs) {
    $.extend(true, _aMsgs, msgs);
  };
  this.get = function (sName, oReplaceStrings) {
    if (_aMsgs[sName]) {
      var sValue = _aMsgs[sName];
      if (oReplaceStrings) {
        sValue = this.replace(sValue, oReplaceStrings);
      }
      return sValue;
    }
    return sName;
  };
  this.replace = function (sString, oParams) {
    jQuery.each(oParams, function (sIndex, sValue) {
      sString = sString.replace(new RegExp("%%" + sIndex + "%%", "g"), sValue);
    });
    return sString;
  };
  this.pluralize = function (iNumber, mText, sLanguage) {
    var aWords = $.isArray(mText) ? mText : this.get(mText).split(";"),
      sLanguage = sLanguage || LANGUAGE,
      n = Math.abs(iNumber);
    var mIndex =
      n % 10 == 1 && n % 100 != 11
        ? 0
        : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20)
        ? 1
        : 2;
    mIndex = typeof mIndex === "boolean" ? (mIndex ? 1 : 0) : mIndex;
    if (aWords[mIndex]) {
      var sWord = aWords[mIndex];
    } else {
      var sWord = aWords[0] ? aWords[0] : "";
    }
    var sReplacedWord = this.replace(sWord, { count: iNumber });
    return sWord === sReplacedWord ? iNumber + " " + sWord : sReplacedWord;
  };
  return this;
}.call(ls.lang || {}, jQuery);
var ls = ls || {};
ls = function ($) {
  var _defaults = {
    production: false,
    classes: {
      states: { active: "active", loading: "ls-loading", open: "open" },
    },
  };
  this.init = function (options) {
    this.options = $.extend({}, _defaults, options);
  };
  return this;
}.call(ls || {}, jQuery);
if (!Function.prototype.bind) {
  Function.prototype.bind = function (obj) {
    if (typeof this !== "function") {
      throw new TypeError(
        "Function.prototype.bind - what is trying to be bound is not callable"
      );
    }
    var slice = [].slice,
      args = slice.call(arguments, 1),
      self = this,
      nop = function () {},
      bound = function () {
        return self.apply(
          this instanceof nop ? this : obj || {},
          args.concat(slice.call(arguments))
        );
      };
    nop.prototype = this.prototype;
    bound.prototype = new nop();
    return bound;
  };
}
var ls = ls || {};
ls.registry = function ($) {
  "use strict";
  var _aData = {};
  this.set = function (sName, data) {
    if (typeof sName == "object") {
      $.each(sName, function (k, v) {
        _aData[k] = v;
      });
    } else {
      _aData[sName] = data;
    }
  };
  this.get = function (sName) {
    return _aData[sName];
  };
  return this;
}.call(ls.registry || {}, jQuery);
var ls = ls || {};
ls.timer = function ($) {
  "use strict";
  var _aTimers = {};
  this.run = function (oContext, fMethod, sUniqKey, aParams, iTime) {
    iTime = iTime || 1500;
    aParams = aParams || [];
    sUniqKey = sUniqKey || Math.random();
    if (_aTimers[sUniqKey]) {
      clearTimeout(_aTimers[sUniqKey]);
      _aTimers[sUniqKey] = null;
    }
    var timeout = setTimeout(
      function () {
        clearTimeout(_aTimers[sUniqKey]);
        _aTimers[sUniqKey] = null;
        fMethod.apply(oContext, aParams);
      }.bind(this),
      iTime
    );
    _aTimers[sUniqKey] = timeout;
  };
  return this;
}.call(ls.timer || {}, jQuery);
var ls = ls || {};
ls.utils = function ($) {
  this.ucfirst = function (str) {
    var f = str.charAt(0).toUpperCase();
    return f + str.substr(1, str.length - 1);
  };
  this.checkAll = function (cssclass, checkbox, invert) {
    $("." + cssclass).each(function (index, item) {
      if (invert) {
        $(item).attr("checked", !$(item).attr("checked"));
      } else {
        $(item).attr("checked", $(checkbox).attr("checked"));
      }
    });
  };
  this.textPreview = function (mTextSelector, mPreviewSelector, bSave) {
    var sText = WYSIWYG
        ? tinyMCE.activeEditor.getContent()
        : (typeof mTextSelector === "string"
            ? $(mTextSelector)
            : mTextSelector
          ).val(),
      sUrl = aRouter["ajax"] + "preview/text/",
      oParams = { text: sText, save: bSave };
    ls.hook.marker("textPreviewAjaxBefore");
    ls.ajax.load(sUrl, oParams, function (result) {
      if (result.bStateError) {
        ls.msg.error(
          result.sMsgTitle || "Error",
          result.sMsg || "Please try again later"
        );
      } else {
        var oPreview =
          typeof mTextSelector === "string"
            ? $(mPreviewSelector || "#text_preview")
            : mPreviewSelector;
        ls.hook.marker("textPreviewDisplayBefore");
        if (oPreview.length) {
          oPreview.html(result.sText);
          ls.hook.marker("textPreviewDisplayAfter");
        }
      }
    });
  };
  this.getSelectedText = function () {
    var text = "";
    if (window.getSelection) {
      text = window.getSelection().toString();
    } else if (window.document.selection) {
      var sel = window.document.selection.createRange();
      text = sel.text || sel;
      if (text.toString) {
        text = text.toString();
      } else {
        text = "";
      }
    }
    return text;
  };
  this.getDataOptions = function (element, prefix) {
    var prefix = prefix || "option",
      resultOptions = {},
      dataOptions =
        typeof element === "string" ? $(element).data() : element.data();
    for (var option in dataOptions) {
      if (option === "options") continue;
      if (option.substring(0, prefix.length) == prefix) {
        var str = option.substring(prefix.length);
        resultOptions[str.charAt(0).toLowerCase() + str.substring(1)] =
          dataOptions[option];
      }
    }
    return resultOptions;
  };
  this.removeClassByPrefix = function (element, prefix) {
    element[0].className = $.trim(
      (element[0].className + " ").replace(
        new RegExp("\\b" + prefix + ".*?\\s", "g"),
        ""
      )
    );
  };
  this.formLockAccessor = function (sName) {
    return function (oForm) {
      var oElements = oForm
        .find("input, select, textarea, button")
        .filter(sName == "lock" ? ":not(:disabled)" : ".js-ls-form-disabled");
      oElements.each(function (iIndex, oInput) {
        $(this)
          .prop("disabled", sName == "lock" ? true : false)
          [sName == "lock" ? "addClass" : "removeClass"]("js-ls-form-disabled");
      });
    };
  };
  this.formLock = function (oForm) {
    this.formLockAccessor("lock").apply(this, arguments);
  };
  this.formUnlock = function (oForm) {
    this.formLockAccessor("unlock").apply(this, arguments);
  };
  this.timeRemaining = function (seconds) {
    days = parseInt(seconds / 86400);
    seconds = seconds % 86400;
    hours = parseInt(seconds / 3600);
    seconds = seconds % 3600;
    minutes = parseInt(seconds / 60);
    seconds = parseInt(seconds % 60);
    if (days > 0) {
      return days + ", " + hours + ":" + minutes + ":" + seconds;
    }
    if (hours > 0) {
      return hours + ":" + minutes + ":" + seconds;
    }
    if (minutes > 0) {
      return minutes + ":" + seconds;
    }
    return seconds;
  };
  this.escapeHtml = function (text) {
    return text
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  };
  return this;
}.call(ls.utils || {}, jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsComponent", {
    options: {
      classes: {},
      selectors: {},
      urls: {},
      params: { security_ls_key: LIVESTREET_SECURITY_KEY },
      i18n: {},
      elements: {},
      _globalChar: "@",
    },
    _create: function () {
      $.extend(this.options, this.getData());
      $.extend(
        this.options,
        this.element.data(this.widgetName.toLowerCase() + "-options")
      );
      this._getParamsFromData();
      this.elements = this._getElementsFromSelectors(
        this.options.selectors,
        this.element
      );
      this.option("elements", this.elements);
    },
    _getElementsFromSelectors: function (selectors, context) {
      var elements = {},
        context = context || this.document,
        ctx;
      $.each(
        selectors || {},
        function (key, value) {
          ctx = context;
          if (
            $.type(value) == "string" &&
            value.charAt(0) == this.option("_globalChar")
          ) {
            value = value.substr(1);
            ctx = this.document;
          }
          elements[key] =
            $.type(value) == "object"
              ? this._getElementsFromSelectors(value, ctx)
              : ctx.find(value);
        }.bind(this)
      );
      return elements;
    },
    getElement: function (name) {
      return this.option("elements." + name);
    },
    getData: function (element, prefix) {
      if (typeof element === "string") {
        prefix = element;
        element = this.element;
      }
      return ls.utils.getDataOptions(
        element || this.element,
        prefix || this.widgetName.toLowerCase()
      );
    },
    _getParamsFromData: function (url, params, callback) {
      $.extend(this.options.params, this.getData("param"));
    },
    _load: function (url, params, callback, more) {
      if ($.isFunction(params) || typeof params === "string") {
        more = callback;
        callback = params;
        params = {};
      }
      params = params || {};
      if (this.option("params")) {
        params = $.extend({}, this.option("params"), params);
      }
      if (typeof callback === "string") {
        callback = this[callback];
      }
      if ($.isFunction(callback)) {
        callback = callback.bind(this);
      }
      return ls.ajax.load(
        this.option("urls." + url),
        params || {},
        callback,
        more
      );
    },
    _submit: function (url, form, callback, more) {
      if (typeof callback === "string") {
        callback = this[callback];
      }
      if ($.isFunction(callback)) {
        callback = callback.bind(this);
      }
      ls.ajax.submit(
        this.option("urls." + url),
        form,
        callback,
        $.extend({ params: this.option("params") || {} }, more)
      );
    },
    _form: function (url, form, callback, more) {
      var args = arguments;
      form.on(
        "submit",
        function (event) {
          event.preventDefault();
          this._submit.apply(this, [].slice.call(args));
        }.bind(this)
      );
    },
    _setParam: function (param, value) {
      return this.option("params." + param, value);
    },
    _getParam: function (param) {
      return this.option("params." + param);
    },
    _trigger: function (type, event, data) {
      var prop,
        orig,
        callback = this.options[type];
      if (typeof callback === "string") {
        eval(callback);
        return true;
      }
      data = data || {};
      event = $.Event(event);
      event.type = (
        type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type
      ).toLowerCase();
      event.target = this.element[0];
      orig = event.originalEvent;
      if (orig) {
        for (prop in orig) {
          if (!(prop in event)) {
            event[prop] = orig[prop];
          }
        }
      }
      this.element.trigger(event, data);
      return !(
        ($.isFunction(callback) &&
          callback.apply(this.element[0], [event].concat(data)) === false) ||
        event.isDefaultPrevented()
      );
    },
    _hasClass: function (element, key) {
      if (typeof element === "string") {
        key = element;
        element = this.element;
      }
      return element.hasClass(this.option("classes." + key));
    },
    _i18n: function (key, params, count) {
      var text = this.option("i18n." + key);
      if (text && text.charAt(0) == this.option("_globalChar")) {
        text = ls.i18n.get(text.substr(1));
      }
      if (!text) return key;
      if ($.isNumeric(params)) {
        count = params;
        params = null;
      }
      if ($.isFunction(text)) {
        text = text();
      }
      if ($.isNumeric(count)) {
        text = ls.i18n.pluralize(count, text);
      }
      if (params) {
        text = ls.i18n.replace(text, params);
      }
      return text;
    },
    _classes: function (options) {
      var full = [];
      var that = this;
      options = $.extend(
        { element: this.element, classes: this.options.classes || {} },
        options
      );
      function processClassString(classes, checkOption) {
        var current, i;
        for (i = 0; i < classes.length; i++) {
          if (checkOption) {
            if (options.classes[classes[i]]) {
              full.push(options.classes[classes[i]]);
            }
          } else {
            current = that.classesElementLookup[classes[i]] || $();
            if (options.add) {
              current = $(
                $.unique(current.get().concat(options.element.get()))
              );
            } else {
              current = $(current.not(options.element).get());
            }
            that.classesElementLookup[classes[i]] = current;
            full.push(classes[i]);
          }
        }
      }
      if (options.keys) {
        processClassString(options.keys.match(/\S+/g) || [], true);
      }
      if (options.extra) {
        processClassString(options.extra.match(/\S+/g) || []);
      }
      return full.join(" ");
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsDetails", $.livestreet.lsComponent, {
    options: {
      selectors: { title: "> .js-details-title", body: "> .js-details-body" },
      classes: { open: "is-open" },
    },
    _create: function () {
      this._super();
      if (this.isOpen()) this.show();
      this._on(this.getElement("title"), { click: "toggle" });
    },
    toggle: function () {
      this[this.isOpen() ? "hide" : "show"]();
    },
    show: function () {
      if (this.isOpen()) return;
      this._addClass("open");
      this._trigger("aftershow", null, this);
    },
    hide: function () {
      if (!this.isOpen()) return;
      this._removeClass("open");
      this._trigger("afterhide", null, this);
    },
    isOpen: function () {
      return this._hasClass("open");
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsDetailsGroup", $.livestreet.lsComponent, {
    options: {
      single: true,
      selectors: { item: "> .js-details-group-item" },
      itemOptions: {},
    },
    _create: function () {
      this._super();
      this.getElement("item").lsDetails(this.option("itemOptions"));
      if (this.option("single")) {
        this._on(this.getElement("item"), { lsdetailsaftershow: "onItemShow" });
      }
    },
    onItemShow: function (event, data) {
      this.getElement("item").not(data.element).lsDetails("hide");
    },
  });
})(jQuery);
$.widget("livestreet.lsAlert", $.livestreet.lsComponent, {
  options: { selectors: { close: ".js-ls-alert-close" } },
  _create: function () {
    this._super();
    this._on(this.elements.close, { click: "hide" });
  },
  hide: function () {
    this.element.hide();
  },
  show: function () {
    this.element.show();
  },
});
jQuery(function ($) {
  var element = document.createElement("div");
  document.body.appendChild(element);
  element.innerHTML = '<form id="form"></form><input form="form">';
  if (element.lastChild.form != element.firstChild) {
    $(document).on("click", "button[form]", function () {
      $("#" + $(this).attr("form")).submit();
    });
  }
  document.body.removeChild(element);
});
$.widget("livestreet.lsDropdown", $.livestreet.lsComponent, {
  options: {
    classes: { open: "active" },
    selectors: {
      toggle: ".js-ls-dropdown-toggle",
      text: "",
      menu: ".js-ls-dropdown-menu",
    },
    position: {
      my: "left top+4",
      at: "left bottom",
      collision: "flipfit flip",
    },
    show: { effect: "show", duration: 200 },
    hide: { effect: "hide", duration: 200 },
    selectable: false,
    body: false,
    reposition: null,
    aftershow: null,
    afterhide: null,
    beforeshow: null,
    beforehide: null,
  },
  _create: function () {
    var _this = this;
    this._super();
    if (this.options.body) {
      this._initialMenuParent = this.elements.menu.parent();
      this.elements.menu.appendTo("body");
    }
    this._menuItems = this.elements.menu.find("li:not(.ls-dropdown-separator)");
    this._menuLinks = this._menuItems.find("a");
    this._menuFocusedItem = null;
    if (this.options.selectable) {
      var text = this.getActiveItemText();
      if (text) this.setText(text);
    }
    this.options.position.of = this.options.position.of || this.elements.toggle;
    this.options.position.using =
      this.options.position.using ||
      function (position, feedback) {
        ls.utils.removeClassByPrefix(this.elements.menu, "position-");
        this.elements.menu
          .addClass(
            "position-y-" +
              feedback.vertical +
              " " +
              "position-x-" +
              feedback.horizontal
          )
          .css(position);
      }.bind(this);
    this._on(this.elements.toggle, { click: "toggle" });
    this.elements.menu.bind(
      "keydown" + this.eventNamespace,
      "down",
      this.focusNextLink.bind(this)
    );
    this.elements.menu.bind(
      "keydown" + this.eventNamespace,
      "up",
      this.focusPrevLink.bind(this)
    );
    $()
      .add(this.elements.menu)
      .add(this.element)
      .bind("keydown" + this.eventNamespace, "esc", this.hide.bind(this, true));
    this._menuLinks.on("focus" + this.eventNamespace, function () {
      _this._menuFocusedItem = $(this).closest("li");
    });
    this._on(this._menuLinks, { click: "onItemClick" });
    this.window.on(
      "resize" + this.eventNamespace + "scroll" + this.eventNamespace,
      this._reposition.bind(this)
    );
    this.document.on(
      "click" + this.eventNamespace,
      function (event) {
        if (
          !this.elements.menu.is(event.target) &&
          this.elements.menu.has(event.target).length === 0 &&
          !this.element.is(event.target) &&
          this.element.has(event.target).length === 0
        )
          this.hide();
      }.bind(this)
    );
  },
  setText: function (text) {
    this.elements[this.elements.text.length ? "text" : "toggle"].text(text);
  },
  toggle: function (event) {
    event.preventDefault();
    this[this.elements.menu.is(":visible") ? "hide" : "show"]();
  },
  getMenu: function () {
    return this.elements.menu;
  },
  show: function () {
    this._trigger("beforeshow", null, this);
    this.elements.toggle.attr("aria-expanded", true);
    this._show(
      this.elements.menu,
      this.options.show,
      function () {
        this.elements.menu.attr("aria-hidden", false);
        this._trigger("aftershow", null, this);
      }.bind(this)
    );
    this._reposition();
    this._addClass("open");
    this._addClass(this.elements.toggle, "open");
  },
  hide: function (focus) {
    if (
      !this.elements.menu.is(":visible") ||
      this.elements.toggle.data("dropdown-state-hide") === true
    )
      return false;
    this._trigger("beforehide", null, this);
    this.elements.toggle.attr("aria-expanded", false);
    this.elements.toggle.data("dropdown-state-hide", true);
    this._hide(
      this.elements.menu,
      this.options.hide,
      function () {
        this._menuFocusedItem = null;
        this.elements.menu.attr("aria-hidden", true);
        this._removeClass("open");
        this._removeClass(this.elements.toggle, "open");
        this.elements.toggle.removeData("dropdown-state-hide");
        this._trigger("afterhide", null, this);
      }.bind(this)
    );
  },
  onItemClick: function (event) {
    if (this.options.selectable) {
      var itemLink = $(event.currentTarget);
      this._menuItems.removeClass("active");
      itemLink.closest("li").addClass("active");
      this.setText(itemLink.text());
    }
    this.hide(true);
  },
  getItems: function () {
    return (
      this._menuItems ||
      (this._menuItems = this.elements.menu.find("li:not(.dropdown-separator)"))
    );
  },
  focusNextLink: function () {
    this._menuFocusedItem.next().find("a").focus();
  },
  focusPrevLink: function () {
    this._menuFocusedItem.prev().find("a").focus();
  },
  getActiveItem: function () {
    return this.getItems().filter(".active").eq(0);
  },
  getActiveItemText: function () {
    return this.getActiveItem().find("a").text();
  },
  _reposition: function () {
    if (!this.elements.menu.is(":visible")) return false;
    this.elements.menu.position(this.options.position);
    this._trigger("reposition", null, this);
  },
  _destroy: function () {
    if (this.options.body) {
      this.elements.menu.appendTo(this._initialMenuParent);
    }
  },
});
(function ($) {
  "use strict";
  $.widget("livestreet.lsTab", $.livestreet.lsComponent, {
    options: {
      target: null,
      tabs: $(),
      classes: { active: "active", loading: "ls-loading" },
      urls: { load: null },
      result: "sText",
      params: {},
      beforeactivate: null,
      activate: null,
    },
    _create: function () {
      this._super();
      this._pane = $("#" + this.option("target"));
      this._on({ click: "onClick" });
      if (
        this.options.target == location.hash.substring(1) ||
        (this.options.urls.load &&
          this._hasClass("active") &&
          !this._pane.text())
      )
        this.activate();
    },
    onClick: function (event) {
      this.activate();
      event.preventDefault();
    },
    isActive: function () {
      return this._hasClass("active");
    },
    activate: function () {
      this._trigger("beforeactivate", null, this);
      this._addClass("active");
      this._pane.show();
      if (this.options.urls.load) {
        this._loadContent();
      } else {
        this._trigger("activate", null, this);
      }
    },
    deactivate: function () {
      this._removeClass("active");
      this._pane.hide();
    },
    getPane: function () {
      return this._pane;
    },
    setPaneContent: function (html) {
      return this.getPane().html(html);
    },
    _loadContent: function () {
      this._addClass(this._pane.empty(), "loading");
      this._load(
        "load",
        function (response) {
          this.setPaneContent(response[this.options.result]);
        },
        {
          onError: function (response) {
            this._removeClass(this._pane, "loading");
          }.bind(this),
          onComplete: function (response) {
            this._removeClass(this._pane, "loading");
            this._trigger("activate", null, this);
          }.bind(this),
        }
      );
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsTabs", $.livestreet.lsComponent, {
    options: { selectors: { tab: "[data-tab]", pane: "[data-tab-pane]" } },
    _create: function () {
      this._super();
      this.elements.tab.lsTab({
        tabs: this.element,
        beforeactivate: function (event, data) {
          this._trigger("tabbeforeactivate", event, data);
          this.getTabs().not(data.element).lsTab("deactivate");
        }.bind(this),
        activate: function (event, data) {
          this._trigger("tabactivate", event, data);
        }.bind(this),
      });
    },
    getTabs: function () {
      return this.elements.tab;
    },
    getPanes: function () {
      return this.elements.pane;
    },
    getActiveTab: function () {
      return this.getTabs().filter(function () {
        return $(this).lsTab("isActive");
      });
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsBlock", $.livestreet.lsComponent, {
    options: {
      selectors: { tabs: ".js-tabs-block", pane_container: "[data-tab-panes]" },
    },
    _create: function () {
      this._super();
      this.elements.tabs.lsTabs({
        tabbeforeactivate: function () {
          var h = this.elements.pane_container.height();
          this.elements.pane_container.css("height", h > 150 ? h : 150);
        }.bind(this),
        tabactivate: function () {
          this.elements.pane_container.css("height", "auto");
        }.bind(this),
      });
    },
  });
})(jQuery);
var ls = ls || {};
(function ($) {
  "use strict";
  var scrollbarWidth,
    html,
    body,
    _window = $(window);
  var _overlay = function ($) {
    this.element = $('<div class="ls-modal-overlay js-ls-modal-overlay" />');
    this.init = function () {
      html = $("html");
      body = $("body");
      scrollbarWidth = this.getScrollbarWidth();
      body.append(this.element);
      this.resize();
    };
    this.show = function () {
      html.css("overflow", "hidden");
      if (body.outerHeight() > _window.height())
        body.css("margin-right", scrollbarWidth);
      this.element.css({ overflow: "auto" });
      this.element.fadeIn(300);
    };
    this.hide = function (callback) {
      this.element.fadeOut(300, function () {
        html.css("overflow", "auto");
        body.css("margin-right", 0);
        if ($.isFunction(callback)) callback();
      });
    };
    this.resize = function () {
      this.element.innerHeight(_window.height());
      var modal = this.getActiveModal();
      if (!modal.length) return;
      modal.css(
        "margin-left",
        (_overlay.element.width() - modal.outerWidth()) / 2
      );
    };
    this.isVisible = function () {
      return this.element.is(":visible");
    };
    this.getActiveModal = function () {
      return _overlay.element.find("[data-type=modal]:visible").eq(0);
    };
    this.getScrollbarWidth = function () {
      var holder = $("<div>").css({
        width: 100,
        height: 100,
        overflow: "auto",
        position: "absolute",
        bottom: 0,
        left: 0,
      });
      var width =
        100 -
        $("<div>").css("height", 200).appendTo(holder.appendTo("body")).width();
      holder.remove();
      return width;
    };
    return this;
  }.call(_overlay || {}, jQuery);
  var _loader = function ($) {
    this.element = $(
      '<div class="ls-modal-loader ls-loading js-ls-modal-loader" />'
    );
    this.init = function () {
      _overlay.element.append(this.element);
    };
    this.show = function () {
      this.element.show();
    };
    this.hide = function () {
      this.element.hide();
    };
    return this;
  }.call(_loader || {}, jQuery);
  $.widget("livestreet.lsModal", $.livestreet.lsComponent, {
    options: {
      selectors: {
        close: "[data-type=modal-close]",
        tabs: ".js-ls-modal-tabs",
      },
      show: { effect: "slide", duration: 300, direction: "up" },
      hide: { effect: "drop", duration: 200, direction: "up" },
      center: true,
      url: null,
      params: null,
      create: null,
      aftershow: null,
      afterhide: null,
      tabsOptions: {},
    },
    _create: function () {
      this._super();
      if (this.options.url) {
        _overlay.element.append(this.element);
      } else {
        this.document.on(
          "ready" + this.eventNamespace,
          function (e) {
            _overlay.element.append(this.element);
          }.bind(this)
        );
      }
      if (this.elements.tabs)
        this.elements.tabs.lsTabs(this.option("tabsOptions"));
      this._on(this.getElement("close"), { click: "hide" });
      this._trigger("create", null, this);
    },
    show: function () {
      var isOverlayVisible = _overlay.isVisible();
      this._trigger("beforeshow", null, this);
      _overlay.getActiveModal().lsModal("hide", false);
      if (!isOverlayVisible)
        _overlay.element.css({ display: "block", visibility: "hidden" });
      this.element.css({ display: "block", visibility: "hidden" });
      this.element.css({
        "margin-top":
          this.options.center &&
          this.element.outerHeight() < _overlay.element.height()
            ? (_overlay.element.height() - this.element.outerHeight()) / 2
            : this.element.css("margin-top"),
        "margin-left":
          (_overlay.element.width() - this.element.outerWidth()) / 2,
      });
      if (!isOverlayVisible)
        _overlay.element.css({ display: "none", visibility: "visible" });
      this.element.css({ display: "none", visibility: "visible" });
      if (!isOverlayVisible) _overlay.show();
      this._show(
        this.element,
        this.options.show,
        function () {
          this._trigger("aftershow", null, this);
        }.bind(this)
      );
    },
    hide: function (hideOverlay) {
      hideOverlay = typeof hideOverlay === "undefined" ? true : hideOverlay;
      this._trigger("beforehide", null, this);
      this._hide(
        this.element,
        this.options.hide,
        function () {
          if (this.options.url) this.element.remove();
          if (
            hideOverlay &&
            !_overlay.getActiveModal().not(this.element).length
          ) {
            _overlay.hide(
              function () {
                this._trigger("afterhide", null, this);
              }.bind(this)
            );
          } else {
            this._trigger("afterhide", null, this);
          }
        }.bind(this)
      );
    },
    toggle: function () {
      this[this.element.is(":visible") ? "hide" : "show"]();
    },
  });
  ls.modal = function ($) {
    this.load = function (url, params, options) {
      options = options || {};
      if (!_overlay.isVisible()) _overlay.show();
      _overlay.getActiveModal().lsModal("hide", false);
      _loader.show();
      options.url = url;
      options.params = params || {};
      ls.ajax.load(
        url,
        params,
        function (result) {
          _loader.hide();
          $($.trim(result["sText"])).lsModal(options).lsModal("show");
        },
        {
          onError: function () {
            _loader.hide();
            _overlay.hide();
          },
        }
      );
    };
    this.reload = function () {
      var modal = _overlay.getActiveModal();
      if (!modal.length) return;
      var options = modal.data("livestreet-modal").options;
      modal.remove();
      ls.modal.load(options.url, options.params, options);
    };
    return this;
  }.call(ls.modal || {}, jQuery);
  _overlay.element.on("click", function (e) {
    if (e.target == this) {
      _overlay.getActiveModal().lsModal("hide");
      _loader.hide();
    }
  });
  $(document).on("keyup.modal", function (e) {
    var modal = _overlay.getActiveModal();
    if (e.keyCode === 27 && modal.length) modal.lsModal("hide");
  });
  $(document).on("ready", function (e) {
    _overlay.init();
    _loader.init();
    $(document).on(
      "click",
      "[data-type=modal-toggle][data-modal-url]",
      function (e) {
        var options = ls.utils.getDataOptions($(this), "modal");
        var params = ls.utils.getDataOptions($(this), "param") || {};
        ls.modal.load(options.url, params, options);
        e.preventDefault();
      }
    );
  });
  _window.on("resize", function () {
    _overlay.resize();
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsModalToggle", $.livestreet.lsComponent, {
    options: { modal: null, url: null, params: {}, modalOptions: {} },
    _create: function () {
      this._super();
      this._modal =
        typeof this.option("modal") === "string"
          ? $("#" + this.option("modal"))
          : this.option("modal");
      this._on({ click: "onClick" });
    },
    onClick: function (event) {
      if (this.option("url")) {
        ls.modal.load(
          this.option("url"),
          this.option("params"),
          $.extend(
            this.option("modalOptions"),
            {
              aftershow: function (event, data) {
                this._trigger("show", event, data);
              }.bind(this),
              afterhide: function (event, data) {
                this._trigger("hide", event, data);
              }.bind(this),
            },
            this.getData("lsmodal")
          )
        );
      } else if (this._modal) {
        this._modal.lsModal("toggle");
      }
      event.preventDefault();
    },
  });
})(jQuery);
(function () {
  var $,
    AbstractChosen,
    Chosen,
    SelectParser,
    _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function (child, parent) {
      for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
      }
      function ctor() {
        this.constructor = child;
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor();
      child.__super__ = parent.prototype;
      return child;
    };
  SelectParser = (function () {
    function SelectParser() {
      this.options_index = 0;
      this.parsed = [];
    }
    SelectParser.prototype.add_node = function (child) {
      if (child.nodeName.toUpperCase() === "OPTGROUP") {
        return this.add_group(child);
      } else {
        return this.add_option(child);
      }
    };
    SelectParser.prototype.add_group = function (group) {
      var group_position, option, _i, _len, _ref, _results;
      group_position = this.parsed.length;
      this.parsed.push({
        array_index: group_position,
        group: true,
        label: this.escapeExpression(group.label),
        children: 0,
        disabled: group.disabled,
        classes: group.className,
      });
      _ref = group.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        _results.push(this.add_option(option, group_position, group.disabled));
      }
      return _results;
    };
    SelectParser.prototype.add_option = function (
      option,
      group_position,
      group_disabled
    ) {
      if (option.nodeName.toUpperCase() === "OPTION") {
        if (option.text !== "") {
          if (group_position != null) {
            this.parsed[group_position].children += 1;
          }
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            value: option.value,
            text: option.text,
            html: option.innerHTML,
            selected: option.selected,
            disabled:
              group_disabled === true ? group_disabled : option.disabled,
            group_array_index: group_position,
            classes: option.className,
            style: option.style.cssText,
          });
        } else {
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            empty: true,
          });
        }
        return (this.options_index += 1);
      }
    };
    SelectParser.prototype.escapeExpression = function (text) {
      var map, unsafe_chars;
      if (text == null || text === false) {
        return "";
      }
      if (!/[\&\<\>\"\'\`]/.test(text)) {
        return text;
      }
      map = {
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#x27;",
        "`": "&#x60;",
      };
      unsafe_chars = /&(?!\w+;)|[\<\>\"\'\`]/g;
      return text.replace(unsafe_chars, function (chr) {
        return map[chr] || "&amp;";
      });
    };
    return SelectParser;
  })();
  SelectParser.select_to_array = function (select) {
    var child, parser, _i, _len, _ref;
    parser = new SelectParser();
    _ref = select.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      parser.add_node(child);
    }
    return parser.parsed;
  };
  AbstractChosen = (function () {
    function AbstractChosen(form_field, options) {
      this.form_field = form_field;
      this.options = options != null ? options : {};
      if (!AbstractChosen.browser_is_supported()) {
        return;
      }
      this.is_multiple = this.form_field.multiple;
      this.set_default_text();
      this.set_default_values();
      this.setup();
      this.set_up_html();
      this.register_observers();
      this.on_ready();
    }
    AbstractChosen.prototype.set_default_values = function () {
      var _this = this;
      this.click_test_action = function (evt) {
        return _this.test_active_click(evt);
      };
      this.activate_action = function (evt) {
        return _this.activate_field(evt);
      };
      this.active_field = false;
      this.mouse_on_container = false;
      this.results_showing = false;
      this.result_highlighted = null;
      this.allow_single_deselect =
        this.options.allow_single_deselect != null &&
        this.form_field.options[0] != null &&
        this.form_field.options[0].text === ""
          ? this.options.allow_single_deselect
          : false;
      this.disable_search_threshold =
        this.options.disable_search_threshold || 0;
      this.disable_search = this.options.disable_search || false;
      this.enable_split_word_search =
        this.options.enable_split_word_search != null
          ? this.options.enable_split_word_search
          : true;
      this.group_search =
        this.options.group_search != null ? this.options.group_search : true;
      this.search_contains = this.options.search_contains || false;
      this.single_backstroke_delete =
        this.options.single_backstroke_delete != null
          ? this.options.single_backstroke_delete
          : true;
      this.max_selected_options = this.options.max_selected_options || Infinity;
      this.inherit_select_classes =
        this.options.inherit_select_classes || false;
      this.display_selected_options =
        this.options.display_selected_options != null
          ? this.options.display_selected_options
          : true;
      return (this.display_disabled_options =
        this.options.display_disabled_options != null
          ? this.options.display_disabled_options
          : true);
    };
    AbstractChosen.prototype.set_default_text = function () {
      if (this.form_field.getAttribute("data-placeholder")) {
        this.default_text = this.form_field.getAttribute("data-placeholder");
      } else if (this.is_multiple) {
        this.default_text =
          this.options.placeholder_text_multiple ||
          this.options.placeholder_text ||
          AbstractChosen.default_multiple_text;
      } else {
        this.default_text =
          this.options.placeholder_text_single ||
          this.options.placeholder_text ||
          AbstractChosen.default_single_text;
      }
      return (this.results_none_found =
        this.form_field.getAttribute("data-no_results_text") ||
        this.options.no_results_text ||
        AbstractChosen.default_no_result_text);
    };
    AbstractChosen.prototype.mouse_enter = function () {
      return (this.mouse_on_container = true);
    };
    AbstractChosen.prototype.mouse_leave = function () {
      return (this.mouse_on_container = false);
    };
    AbstractChosen.prototype.input_focus = function (evt) {
      var _this = this;
      if (this.is_multiple) {
        if (!this.active_field) {
          return setTimeout(function () {
            return _this.container_mousedown();
          }, 50);
        }
      } else {
        if (!this.active_field) {
          return this.activate_field();
        }
      }
    };
    AbstractChosen.prototype.input_blur = function (evt) {
      var _this = this;
      if (!this.mouse_on_container) {
        this.active_field = false;
        return setTimeout(function () {
          return _this.blur_test();
        }, 100);
      }
    };
    AbstractChosen.prototype.results_option_build = function (options) {
      var content, data, _i, _len, _ref;
      content = "";
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        data = _ref[_i];
        if (data.group) {
          content += this.result_add_group(data);
        } else {
          content += this.result_add_option(data);
        }
        if (options != null ? options.first : void 0) {
          if (data.selected && this.is_multiple) {
            this.choice_build(data);
          } else if (data.selected && !this.is_multiple) {
            this.single_set_selected_text(data.html);
          }
        }
      }
      return content;
    };
    AbstractChosen.prototype.result_add_option = function (option) {
      var classes, option_el;
      if (!option.search_match) {
        return "";
      }
      if (!this.include_option_in_results(option)) {
        return "";
      }
      classes = [];
      if (!option.disabled && !(option.selected && this.is_multiple)) {
        classes.push("active-result");
      }
      if (option.disabled && !(option.selected && this.is_multiple)) {
        classes.push("disabled-result");
      }
      if (option.selected) {
        classes.push("result-selected");
      }
      if (option.group_array_index != null) {
        classes.push("group-option");
      }
      if (option.classes !== "") {
        classes.push(option.classes);
      }
      option_el = document.createElement("li");
      option_el.className = classes.join(" ");
      option_el.style.cssText = option.style;
      option_el.setAttribute("data-option-array-index", option.array_index);
      option_el.innerHTML = option.search_text;
      return this.outerHTML(option_el);
    };
    AbstractChosen.prototype.result_add_group = function (group) {
      var classes, group_el;
      if (!(group.search_match || group.group_match)) {
        return "";
      }
      if (!(group.active_options > 0)) {
        return "";
      }
      classes = [];
      classes.push("group-result");
      if (group.classes) {
        classes.push(group.classes);
      }
      group_el = document.createElement("li");
      group_el.className = classes.join(" ");
      group_el.innerHTML = group.search_text;
      return this.outerHTML(group_el);
    };
    AbstractChosen.prototype.results_update_field = function () {
      this.set_default_text();
      if (!this.is_multiple) {
        this.results_reset_cleanup();
      }
      this.result_clear_highlight();
      this.results_build();
      if (this.results_showing) {
        return this.winnow_results();
      }
    };
    AbstractChosen.prototype.reset_single_select_options = function () {
      var result, _i, _len, _ref, _results;
      _ref = this.results_data;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        result = _ref[_i];
        if (result.selected) {
          _results.push((result.selected = false));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    AbstractChosen.prototype.results_toggle = function () {
      if (this.results_showing) {
        return this.results_hide();
      } else {
        return this.results_show();
      }
    };
    AbstractChosen.prototype.results_search = function (evt) {
      if (this.results_showing) {
        return this.winnow_results();
      } else {
        return this.results_show();
      }
    };
    AbstractChosen.prototype.winnow_results = function () {
      var escapedSearchText,
        option,
        regex,
        results,
        results_group,
        searchText,
        startpos,
        text,
        zregex,
        _i,
        _len,
        _ref;
      this.no_results_clear();
      results = 0;
      searchText = this.get_search_text();
      escapedSearchText = searchText.replace(
        /[-[\]{}()*+?.,\\^$|#\s]/g,
        "\\$&"
      );
      zregex = new RegExp(escapedSearchText, "i");
      regex = this.get_search_regex(escapedSearchText);
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        option.search_match = false;
        results_group = null;
        if (this.include_option_in_results(option)) {
          if (option.group) {
            option.group_match = false;
            option.active_options = 0;
          }
          if (
            option.group_array_index != null &&
            this.results_data[option.group_array_index]
          ) {
            results_group = this.results_data[option.group_array_index];
            if (
              results_group.active_options === 0 &&
              results_group.search_match
            ) {
              results += 1;
            }
            results_group.active_options += 1;
          }
          if (!(option.group && !this.group_search)) {
            option.search_text = option.group ? option.label : option.html;
            option.search_match = this.search_string_match(
              option.search_text,
              regex
            );
            if (option.search_match && !option.group) {
              results += 1;
            }
            if (option.search_match) {
              if (searchText.length) {
                startpos = option.search_text.search(zregex);
                text =
                  option.search_text.substr(0, startpos + searchText.length) +
                  "</em>" +
                  option.search_text.substr(startpos + searchText.length);
                option.search_text =
                  text.substr(0, startpos) + "<em>" + text.substr(startpos);
              }
              if (results_group != null) {
                results_group.group_match = true;
              }
            } else if (
              option.group_array_index != null &&
              this.results_data[option.group_array_index].search_match
            ) {
              option.search_match = true;
            }
          }
        }
      }
      this.result_clear_highlight();
      if (results < 1 && searchText.length) {
        this.update_results_content("");
        return this.no_results(searchText);
      } else {
        this.update_results_content(this.results_option_build());
        return this.winnow_results_set_highlight();
      }
    };
    AbstractChosen.prototype.get_search_regex = function (
      escaped_search_string
    ) {
      var regex_anchor;
      regex_anchor = this.search_contains ? "" : "^";
      return new RegExp(regex_anchor + escaped_search_string, "i");
    };
    AbstractChosen.prototype.search_string_match = function (
      search_string,
      regex
    ) {
      var part, parts, _i, _len;
      if (regex.test(search_string)) {
        return true;
      } else if (
        this.enable_split_word_search &&
        (search_string.indexOf(" ") >= 0 || search_string.indexOf("[") === 0)
      ) {
        parts = search_string.replace(/\[|\]/g, "").split(" ");
        if (parts.length) {
          for (_i = 0, _len = parts.length; _i < _len; _i++) {
            part = parts[_i];
            if (regex.test(part)) {
              return true;
            }
          }
        }
      }
    };
    AbstractChosen.prototype.choices_count = function () {
      var option, _i, _len, _ref;
      if (this.selected_option_count != null) {
        return this.selected_option_count;
      }
      this.selected_option_count = 0;
      _ref = this.form_field.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (option.selected) {
          this.selected_option_count += 1;
        }
      }
      return this.selected_option_count;
    };
    AbstractChosen.prototype.choices_click = function (evt) {
      evt.preventDefault();
      if (!(this.results_showing || this.is_disabled)) {
        return this.results_show();
      }
    };
    AbstractChosen.prototype.keyup_checker = function (evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      switch (stroke) {
        case 8:
          if (
            this.is_multiple &&
            this.backstroke_length < 1 &&
            this.choices_count() > 0
          ) {
            return this.keydown_backstroke();
          } else if (!this.pending_backstroke) {
            this.result_clear_highlight();
            return this.results_search();
          }
          break;
        case 13:
          evt.preventDefault();
          if (this.results_showing) {
            return this.result_select(evt);
          }
          break;
        case 27:
          if (this.results_showing) {
            this.results_hide();
          }
          return true;
        case 9:
        case 38:
        case 40:
        case 16:
        case 91:
        case 17:
          break;
        default:
          return this.results_search();
      }
    };
    AbstractChosen.prototype.clipboard_event_checker = function (evt) {
      var _this = this;
      return setTimeout(function () {
        return _this.results_search();
      }, 50);
    };
    AbstractChosen.prototype.container_width = function () {
      if (this.options.width != null) {
        return this.options.width;
      } else {
        return "" + this.form_field.offsetWidth + "px";
      }
    };
    AbstractChosen.prototype.include_option_in_results = function (option) {
      if (
        this.is_multiple &&
        !this.display_selected_options &&
        option.selected
      ) {
        return false;
      }
      if (!this.display_disabled_options && option.disabled) {
        return false;
      }
      if (option.empty) {
        return false;
      }
      return true;
    };
    AbstractChosen.prototype.search_results_touchstart = function (evt) {
      this.touch_started = true;
      return this.search_results_mouseover(evt);
    };
    AbstractChosen.prototype.search_results_touchmove = function (evt) {
      this.touch_started = false;
      return this.search_results_mouseout(evt);
    };
    AbstractChosen.prototype.search_results_touchend = function (evt) {
      if (this.touch_started) {
        return this.search_results_mouseup(evt);
      }
    };
    AbstractChosen.prototype.outerHTML = function (element) {
      var tmp;
      if (element.outerHTML) {
        return element.outerHTML;
      }
      tmp = document.createElement("div");
      tmp.appendChild(element);
      return tmp.innerHTML;
    };
    AbstractChosen.browser_is_supported = function () {
      return true;
    };
    AbstractChosen.default_multiple_text = "ÐÐ°Ñ‡Ð½Ð¸Ñ‚Ðµ Ð²Ð²Ð¾Ð´Ð¸Ñ‚ÑŒ";
    AbstractChosen.default_single_text = "";
    AbstractChosen.default_no_result_text = "ÐÐµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾";
    return AbstractChosen;
  })();
  $ = jQuery;
  $.fn.extend({
    chosen: function (options) {
      if (!AbstractChosen.browser_is_supported()) {
        return this;
      }
      return this.each(function (input_field) {
        var $this, chosen;
        $this = $(this);
        chosen = $this.data("chosen");
        if (options === "destroy" && chosen instanceof Chosen) {
          chosen.destroy();
        } else if (!(chosen instanceof Chosen)) {
          $this.data("chosen", new Chosen(this, options));
        }
      });
    },
  });
  Chosen = (function (_super) {
    __extends(Chosen, _super);
    function Chosen() {
      _ref = Chosen.__super__.constructor.apply(this, arguments);
      return _ref;
    }
    Chosen.prototype.setup = function () {
      this.form_field_jq = $(this.form_field);
      this.current_selectedIndex = this.form_field.selectedIndex;
      return (this.is_rtl = this.form_field_jq.hasClass("chosen-rtl"));
    };
    Chosen.prototype.set_up_html = function () {
      var container_classes, container_props;
      container_classes = ["chosen-container"];
      container_classes.push(
        "chosen-container-" + (this.is_multiple ? "multi" : "single")
      );
      if (this.inherit_select_classes && this.form_field.className) {
        container_classes.push(this.form_field.className);
      }
      if (this.is_rtl) {
        container_classes.push("chosen-rtl");
      }
      container_props = {
        class: container_classes.join(" "),
        style: "width: " + this.container_width() + ";",
        title: this.form_field.title,
      };
      if (this.form_field.id.length) {
        container_props.id =
          this.form_field.id.replace(/[^\w]/g, "_") + "_chosen";
      }
      this.container = $("<div />", container_props);
      if (this.is_multiple) {
        this.container.html(
          '<ul class="chosen-choices"><li class="search-field"><input type="text" value="' +
            this.default_text +
            '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><ul class="chosen-results"></ul></div>'
        );
      } else {
        this.container.html(
          '<a class="chosen-single chosen-default" tabindex="-1"><span>' +
            this.default_text +
            '</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><ul class="chosen-results"></ul></div>'
        );
      }
      this.form_field_jq.hide().after(this.container);
      this.dropdown = this.container.find("div.chosen-drop").first();
      this.search_field = this.container.find("input").first();
      this.search_results = this.container.find("ul.chosen-results").first();
      this.search_field_scale();
      this.search_no_results = this.container.find("li.no-results").first();
      if (this.is_multiple) {
        this.search_choices = this.container.find("ul.chosen-choices").first();
        this.search_container = this.container.find("li.search-field").first();
      } else {
        this.search_container = this.container
          .find("div.chosen-search")
          .first();
        this.selected_item = this.container.find(".chosen-single").first();
      }
      this.results_build();
      this.set_tab_index();
      return this.set_label_behavior();
    };
    Chosen.prototype.on_ready = function () {
      return this.form_field_jq.trigger("chosen:ready", { chosen: this });
    };
    Chosen.prototype.register_observers = function () {
      var _this = this;
      this.container.bind("touchstart.chosen", function (evt) {
        _this.container_mousedown(evt);
      });
      this.container.bind("touchend.chosen", function (evt) {
        _this.container_mouseup(evt);
      });
      this.container.bind("mousedown.chosen", function (evt) {
        _this.container_mousedown(evt);
      });
      this.container.bind("mouseup.chosen", function (evt) {
        _this.container_mouseup(evt);
      });
      this.container.bind("mouseenter.chosen", function (evt) {
        _this.mouse_enter(evt);
      });
      this.container.bind("mouseleave.chosen", function (evt) {
        _this.mouse_leave(evt);
      });
      this.search_results.bind("mouseup.chosen", function (evt) {
        _this.search_results_mouseup(evt);
      });
      this.search_results.bind("mouseover.chosen", function (evt) {
        _this.search_results_mouseover(evt);
      });
      this.search_results.bind("mouseout.chosen", function (evt) {
        _this.search_results_mouseout(evt);
      });
      this.search_results.bind(
        "mousewheel.chosen DOMMouseScroll.chosen",
        function (evt) {
          _this.search_results_mousewheel(evt);
        }
      );
      this.search_results.bind("touchstart.chosen", function (evt) {
        _this.search_results_touchstart(evt);
      });
      this.search_results.bind("touchmove.chosen", function (evt) {
        _this.search_results_touchmove(evt);
      });
      this.search_results.bind("touchend.chosen", function (evt) {
        _this.search_results_touchend(evt);
      });
      this.form_field_jq.bind("chosen:updated.chosen", function (evt) {
        _this.results_update_field(evt);
      });
      this.form_field_jq.bind("chosen:activate.chosen", function (evt) {
        _this.activate_field(evt);
      });
      this.form_field_jq.bind("chosen:open.chosen", function (evt) {
        _this.container_mousedown(evt);
      });
      this.form_field_jq.bind("chosen:close.chosen", function (evt) {
        _this.input_blur(evt);
      });
      this.search_field.bind("blur.chosen", function (evt) {
        _this.input_blur(evt);
      });
      this.search_field.bind("keyup.chosen", function (evt) {
        _this.keyup_checker(evt);
      });
      this.search_field.bind("keydown.chosen", function (evt) {
        _this.keydown_checker(evt);
      });
      this.search_field.bind("focus.chosen", function (evt) {
        _this.input_focus(evt);
      });
      this.search_field.bind("cut.chosen", function (evt) {
        _this.clipboard_event_checker(evt);
      });
      this.search_field.bind("paste.chosen", function (evt) {
        _this.clipboard_event_checker(evt);
      });
      if (this.is_multiple) {
        return this.search_choices.bind("click.chosen", function (evt) {
          _this.choices_click(evt);
        });
      } else {
        return this.container.bind("click.chosen", function (evt) {
          evt.preventDefault();
        });
      }
    };
    Chosen.prototype.destroy = function () {
      $(this.container[0].ownerDocument).unbind(
        "click.chosen",
        this.click_test_action
      );
      if (this.search_field[0].tabIndex) {
        this.form_field_jq[0].tabIndex = this.search_field[0].tabIndex;
      }
      this.container.remove();
      this.form_field_jq.removeData("chosen");
      return this.form_field_jq.show();
    };
    Chosen.prototype.search_field_disabled = function () {
      this.is_disabled = this.form_field_jq[0].disabled;
      if (this.is_disabled) {
        this.container.addClass("chosen-disabled");
        this.search_field[0].disabled = true;
        if (!this.is_multiple) {
          this.selected_item.unbind("focus.chosen", this.activate_action);
        }
        return this.close_field();
      } else {
        this.container.removeClass("chosen-disabled");
        this.search_field[0].disabled = false;
        if (!this.is_multiple) {
          return this.selected_item.bind("focus.chosen", this.activate_action);
        }
      }
    };
    Chosen.prototype.container_mousedown = function (evt) {
      if (!this.is_disabled) {
        if (evt && evt.type === "mousedown" && !this.results_showing) {
          evt.preventDefault();
        }
        if (!(evt != null && $(evt.target).hasClass("search-choice-close"))) {
          if (!this.active_field) {
            if (this.is_multiple) {
              this.search_field.val("");
            }
            $(this.container[0].ownerDocument).bind(
              "click.chosen",
              this.click_test_action
            );
            this.results_show();
          } else if (
            !this.is_multiple &&
            evt &&
            ($(evt.target)[0] === this.selected_item[0] ||
              $(evt.target).parents("a.chosen-single").length)
          ) {
            evt.preventDefault();
            this.results_toggle();
          }
          return this.activate_field();
        }
      }
    };
    Chosen.prototype.container_mouseup = function (evt) {
      if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
        return this.results_reset(evt);
      }
    };
    Chosen.prototype.search_results_mousewheel = function (evt) {
      var delta;
      if (evt.originalEvent) {
        delta =
          evt.originalEvent.deltaY ||
          -evt.originalEvent.wheelDelta ||
          evt.originalEvent.detail;
      }
      if (delta != null) {
        evt.preventDefault();
        if (evt.type === "DOMMouseScroll") {
          delta = delta * 40;
        }
        return this.search_results.scrollTop(
          delta + this.search_results.scrollTop()
        );
      }
    };
    Chosen.prototype.blur_test = function (evt) {
      if (
        !this.active_field &&
        this.container.hasClass("chosen-container-active")
      ) {
        return this.close_field();
      }
    };
    Chosen.prototype.close_field = function () {
      $(this.container[0].ownerDocument).unbind(
        "click.chosen",
        this.click_test_action
      );
      this.active_field = false;
      this.results_hide();
      this.container.removeClass("chosen-container-active");
      this.clear_backstroke();
      this.show_search_field_default();
      return this.search_field_scale();
    };
    Chosen.prototype.activate_field = function () {
      this.container.addClass("chosen-container-active");
      this.active_field = true;
      this.search_field.val(this.search_field.val());
      return this.search_field.focus();
    };
    Chosen.prototype.test_active_click = function (evt) {
      var active_container;
      active_container = $(evt.target).closest(".chosen-container");
      if (
        active_container.length &&
        this.container[0] === active_container[0]
      ) {
        return (this.active_field = true);
      } else {
        return this.close_field();
      }
    };
    Chosen.prototype.results_build = function () {
      this.parsing = true;
      this.selected_option_count = null;
      this.results_data = SelectParser.select_to_array(this.form_field);
      if (this.is_multiple) {
        this.search_choices.find("li.search-choice").remove();
      } else if (!this.is_multiple) {
        this.single_set_selected_text();
        if (
          this.disable_search ||
          this.form_field.options.length <= this.disable_search_threshold
        ) {
          this.search_field[0].readOnly = true;
          this.container.addClass("chosen-container-single-nosearch");
        } else {
          this.search_field[0].readOnly = false;
          this.container.removeClass("chosen-container-single-nosearch");
        }
      }
      this.update_results_content(this.results_option_build({ first: true }));
      this.search_field_disabled();
      this.show_search_field_default();
      this.search_field_scale();
      return (this.parsing = false);
    };
    Chosen.prototype.result_do_highlight = function (el) {
      var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
      if (el.length) {
        this.result_clear_highlight();
        this.result_highlight = el;
        this.result_highlight.addClass("highlighted");
        maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
        visible_top = this.search_results.scrollTop();
        visible_bottom = maxHeight + visible_top;
        high_top =
          this.result_highlight.position().top +
          this.search_results.scrollTop();
        high_bottom = high_top + this.result_highlight.outerHeight();
        if (high_bottom >= visible_bottom) {
          return this.search_results.scrollTop(
            high_bottom - maxHeight > 0 ? high_bottom - maxHeight : 0
          );
        } else if (high_top < visible_top) {
          return this.search_results.scrollTop(high_top);
        }
      }
    };
    Chosen.prototype.result_clear_highlight = function () {
      if (this.result_highlight) {
        this.result_highlight.removeClass("highlighted");
      }
      return (this.result_highlight = null);
    };
    Chosen.prototype.results_show = function () {
      if (
        this.is_multiple &&
        this.max_selected_options <= this.choices_count()
      ) {
        this.form_field_jq.trigger("chosen:maxselected", { chosen: this });
        return false;
      }
      this.container.addClass("chosen-with-drop");
      this.results_showing = true;
      this.search_field.focus();
      this.search_field.val(this.search_field.val());
      this.winnow_results();
      return this.form_field_jq.trigger("chosen:showing_dropdown", {
        chosen: this,
      });
    };
    Chosen.prototype.update_results_content = function (content) {
      return this.search_results.html(content);
    };
    Chosen.prototype.results_hide = function () {
      if (this.results_showing) {
        this.result_clear_highlight();
        this.container.removeClass("chosen-with-drop");
        this.form_field_jq.trigger("chosen:hiding_dropdown", { chosen: this });
      }
      return (this.results_showing = false);
    };
    Chosen.prototype.set_tab_index = function (el) {
      var ti;
      if (this.form_field.tabIndex) {
        ti = this.form_field.tabIndex;
        this.form_field.tabIndex = -1;
        return (this.search_field[0].tabIndex = ti);
      }
    };
    Chosen.prototype.set_label_behavior = function () {
      var _this = this;
      this.form_field_label = this.form_field_jq.parents("label");
      if (!this.form_field_label.length && this.form_field.id.length) {
        this.form_field_label = $("label[for='" + this.form_field.id + "']");
      }
      if (this.form_field_label.length > 0) {
        return this.form_field_label.bind("click.chosen", function (evt) {
          if (_this.is_multiple) {
            return _this.container_mousedown(evt);
          } else {
            return _this.activate_field();
          }
        });
      }
    };
    Chosen.prototype.show_search_field_default = function () {
      if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
        this.search_field.val(this.default_text);
        return this.search_field.addClass("default");
      } else {
        this.search_field.val("");
        return this.search_field.removeClass("default");
      }
    };
    Chosen.prototype.search_results_mouseup = function (evt) {
      var target;
      target = $(evt.target).hasClass("active-result")
        ? $(evt.target)
        : $(evt.target).parents(".active-result").first();
      if (target.length) {
        this.result_highlight = target;
        this.result_select(evt);
        return this.search_field.focus();
      }
    };
    Chosen.prototype.search_results_mouseover = function (evt) {
      var target;
      target = $(evt.target).hasClass("active-result")
        ? $(evt.target)
        : $(evt.target).parents(".active-result").first();
      if (target) {
        return this.result_do_highlight(target);
      }
    };
    Chosen.prototype.search_results_mouseout = function (evt) {
      if (
        $(evt.target).hasClass(
          "active-result" || $(evt.target).parents(".active-result").first()
        )
      ) {
        return this.result_clear_highlight();
      }
    };
    Chosen.prototype.choice_build = function (item) {
      var choice,
        close_link,
        _this = this;
      choice = $("<li />", { class: "search-choice" }).html(
        "<span>" + item.html + "</span>"
      );
      if (item.disabled) {
        choice.addClass("search-choice-disabled");
      } else {
        close_link = $("<a />", {
          class: "search-choice-close",
          "data-option-array-index": item.array_index,
        });
        close_link.bind("click.chosen", function (evt) {
          return _this.choice_destroy_link_click(evt);
        });
        choice.append(close_link);
      }
      return this.search_container.before(choice);
    };
    Chosen.prototype.choice_destroy_link_click = function (evt) {
      evt.preventDefault();
      evt.stopPropagation();
      if (!this.is_disabled) {
        return this.choice_destroy($(evt.target));
      }
    };
    Chosen.prototype.choice_destroy = function (link) {
      if (
        this.result_deselect(link[0].getAttribute("data-option-array-index"))
      ) {
        this.show_search_field_default();
        if (
          this.is_multiple &&
          this.choices_count() > 0 &&
          this.search_field.val().length < 1
        ) {
          this.results_hide();
        }
        link.parents("li").first().remove();
        return this.search_field_scale();
      }
    };
    Chosen.prototype.results_reset = function () {
      this.reset_single_select_options();
      this.form_field.options[0].selected = true;
      this.single_set_selected_text();
      this.show_search_field_default();
      this.results_reset_cleanup();
      this.form_field_jq.trigger("change");
      if (this.active_field) {
        return this.results_hide();
      }
    };
    Chosen.prototype.results_reset_cleanup = function () {
      this.current_selectedIndex = this.form_field.selectedIndex;
      return this.selected_item.find("abbr").remove();
    };
    Chosen.prototype.result_select = function (evt) {
      var high, item;
      if (this.result_highlight) {
        high = this.result_highlight;
        this.result_clear_highlight();
        if (
          this.is_multiple &&
          this.max_selected_options <= this.choices_count()
        ) {
          this.form_field_jq.trigger("chosen:maxselected", { chosen: this });
          return false;
        }
        if (this.is_multiple) {
          high.removeClass("active-result");
        } else {
          this.reset_single_select_options();
        }
        item =
          this.results_data[high[0].getAttribute("data-option-array-index")];
        item.selected = true;
        this.form_field.options[item.options_index].selected = true;
        this.selected_option_count = null;
        if (this.is_multiple) {
          this.choice_build(item);
        } else {
          this.single_set_selected_text(item.text);
        }
        if (!((evt.metaKey || evt.ctrlKey) && this.is_multiple)) {
          this.results_hide();
        }
        this.search_field.val("");
        if (
          this.is_multiple ||
          this.form_field.selectedIndex !== this.current_selectedIndex
        ) {
          this.form_field_jq.trigger("change", {
            selected: this.form_field.options[item.options_index].value,
          });
        }
        this.current_selectedIndex = this.form_field.selectedIndex;
        return this.search_field_scale();
      }
    };
    Chosen.prototype.single_set_selected_text = function (text) {
      if (text == null) {
        text = this.default_text;
      }
      if (text === this.default_text) {
        this.selected_item.addClass("chosen-default");
      } else {
        this.single_deselect_control_build();
        this.selected_item.removeClass("chosen-default");
      }
      return this.selected_item.find("span").text(text);
    };
    Chosen.prototype.result_deselect = function (pos) {
      var result_data;
      result_data = this.results_data[pos];
      if (!this.form_field.options[result_data.options_index].disabled) {
        result_data.selected = false;
        this.form_field.options[result_data.options_index].selected = false;
        this.selected_option_count = null;
        this.result_clear_highlight();
        if (this.results_showing) {
          this.winnow_results();
        }
        this.form_field_jq.trigger("change", {
          deselected: this.form_field.options[result_data.options_index].value,
        });
        this.search_field_scale();
        return true;
      } else {
        return false;
      }
    };
    Chosen.prototype.single_deselect_control_build = function () {
      if (!this.allow_single_deselect) {
        return;
      }
      if (!this.selected_item.find("abbr").length) {
        this.selected_item
          .find("span")
          .first()
          .after('<abbr class="search-choice-close"></abbr>');
      }
      return this.selected_item.addClass("chosen-single-with-deselect");
    };
    Chosen.prototype.get_search_text = function () {
      if (this.search_field.val() === this.default_text) {
        return "";
      } else {
        return $("<div/>").text($.trim(this.search_field.val())).html();
      }
    };
    Chosen.prototype.winnow_results_set_highlight = function () {
      var do_high, selected_results;
      selected_results = !this.is_multiple
        ? this.search_results.find(".result-selected.active-result")
        : [];
      do_high = selected_results.length
        ? selected_results.first()
        : this.search_results.find(".active-result").first();
      if (do_high != null) {
        return this.result_do_highlight(do_high);
      }
    };
    Chosen.prototype.no_results = function (terms) {
      var no_results_html;
      no_results_html = $(
        '<li class="no-results">' +
          this.results_none_found +
          ' "<span></span>"</li>'
      );
      no_results_html.find("span").first().html(terms);
      this.search_results.append(no_results_html);
      return this.form_field_jq.trigger("chosen:no_results", { chosen: this });
    };
    Chosen.prototype.no_results_clear = function () {
      return this.search_results.find(".no-results").remove();
    };
    Chosen.prototype.keydown_arrow = function () {
      var next_sib;
      if (this.results_showing && this.result_highlight) {
        next_sib = this.result_highlight.nextAll("li.active-result").first();
        if (next_sib) {
          return this.result_do_highlight(next_sib);
        }
      } else {
        return this.results_show();
      }
    };
    Chosen.prototype.keyup_arrow = function () {
      var prev_sibs;
      if (!this.results_showing && !this.is_multiple) {
        return this.results_show();
      } else if (this.result_highlight) {
        prev_sibs = this.result_highlight.prevAll("li.active-result");
        if (prev_sibs.length) {
          return this.result_do_highlight(prev_sibs.first());
        } else {
          if (this.choices_count() > 0) {
            this.results_hide();
          }
          return this.result_clear_highlight();
        }
      }
    };
    Chosen.prototype.keydown_backstroke = function () {
      var next_available_destroy;
      if (this.pending_backstroke) {
        this.choice_destroy(this.pending_backstroke.find("a").first());
        return this.clear_backstroke();
      } else {
        next_available_destroy = this.search_container
          .siblings("li.search-choice")
          .last();
        if (
          next_available_destroy.length &&
          !next_available_destroy.hasClass("search-choice-disabled")
        ) {
          this.pending_backstroke = next_available_destroy;
          if (this.single_backstroke_delete) {
            return this.keydown_backstroke();
          } else {
            return this.pending_backstroke.addClass("search-choice-focus");
          }
        }
      }
    };
    Chosen.prototype.clear_backstroke = function () {
      if (this.pending_backstroke) {
        this.pending_backstroke.removeClass("search-choice-focus");
      }
      return (this.pending_backstroke = null);
    };
    Chosen.prototype.keydown_checker = function (evt) {
      var stroke, _ref1;
      stroke = (_ref1 = evt.which) != null ? _ref1 : evt.keyCode;
      this.search_field_scale();
      if (stroke !== 8 && this.pending_backstroke) {
        this.clear_backstroke();
      }
      switch (stroke) {
        case 8:
          this.backstroke_length = this.search_field.val().length;
          break;
        case 9:
          if (this.results_showing && !this.is_multiple) {
            this.result_select(evt);
          }
          this.mouse_on_container = false;
          break;
        case 13:
          if (this.results_showing) {
            evt.preventDefault();
          }
          break;
        case 32:
          if (this.disable_search) {
            evt.preventDefault();
          }
          break;
        case 38:
          evt.preventDefault();
          this.keyup_arrow();
          break;
        case 40:
          evt.preventDefault();
          this.keydown_arrow();
          break;
      }
    };
    Chosen.prototype.search_field_scale = function () {
      var div, f_width, h, style, style_block, styles, w, _i, _len;
      if (this.is_multiple) {
        h = 0;
        w = 0;
        style_block =
          "position:absolute; left: -1000px; top: -1000px; display:none;";
        styles = [
          "font-size",
          "font-style",
          "font-weight",
          "font-family",
          "line-height",
          "text-transform",
          "letter-spacing",
        ];
        for (_i = 0, _len = styles.length; _i < _len; _i++) {
          style = styles[_i];
          style_block += style + ":" + this.search_field.css(style) + ";";
        }
        div = $("<div />", { style: style_block });
        div.text(this.search_field.val());
        $("body").append(div);
        w = div.width() + 25;
        div.remove();
        f_width = this.container.outerWidth();
        if (w > f_width - 10) {
          w = f_width - 10;
        }
        return this.search_field.css({ width: w + "px" });
      }
    };
    return Chosen;
  })(AbstractChosen);
}).call(this);
(function () {
  var $,
    AbstractChosenOrder,
    _ref,
    __indexOf =
      [].indexOf ||
      function (item) {
        for (var i = 0, l = this.length; i < l; i++) {
          if (i in this && this[i] === item) return i;
        }
        return -1;
      },
    __hasProp = {}.hasOwnProperty,
    __extends = function (child, parent) {
      for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
      }
      function ctor() {
        this.constructor = child;
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor();
      child.__super__ = parent.prototype;
      return child;
    };
  AbstractChosenOrder = (function () {
    var ERRORS,
      forceSelection,
      getChosenUIContainer,
      getFlattenedOptionsAndGroups,
      insertAt,
      isChosenified,
      isValidMultipleSelectElement;
    function AbstractChosenOrder() {}
    ERRORS = {
      invalid_select_element:
        "ChosenOrder::{{function}}: first argument must be a valid HTML Multiple Select element that has been Chosenified!",
      invalid_selection_array:
        "ChosenOrder::{{function}}: second argument must be an Array!",
      unreachable_chosen_container:
        'ChosenOrder::{{function}}: could not find the Chosen UI container! To solve the problem, try adding an "id" attribute to your <select> element.',
    };
    insertAt = function (node, index, parentNode) {
      return parentNode.insertBefore(
        node,
        parentNode.children[index].nextSibling
      );
    };
    getFlattenedOptionsAndGroups = function (select) {
      var flattened_options,
        opt,
        options,
        sub_opt,
        sub_options,
        _i,
        _j,
        _len,
        _len1;
      options = Array.prototype.filter.call(select.childNodes, function (o) {
        var _ref;
        return (
          (_ref = o.nodeName.toUpperCase()) === "OPTION" || _ref === "OPTGROUP"
        );
      });
      flattened_options = [];
      for (_i = 0, _len = options.length; _i < _len; _i++) {
        opt = options[_i];
        flattened_options.push(opt);
        if (opt.nodeName.toUpperCase() === "OPTGROUP") {
          sub_options = Array.prototype.filter.call(
            opt.childNodes,
            function (o) {
              return o.nodeName.toUpperCase() === "OPTION";
            }
          );
          for (_j = 0, _len1 = sub_options.length; _j < _len1; _j++) {
            sub_opt = sub_options[_j];
            flattened_options.push(sub_opt);
          }
        }
      }
      return flattened_options;
    };
    isValidMultipleSelectElement = function (element) {
      return (
        element !== null &&
        typeof element !== "undefined" &&
        element.nodeName === "SELECT" &&
        element.multiple
      );
    };
    getChosenUIContainer = function (select) {
      if (select.id !== "") {
        return document.getElementById(
          select.id.replace(/-/g, "_") + "_chosen"
        );
      } else {
        return searchChosenUIContainer(select);
      }
    };
    isChosenified = function (select) {
      return getChosenUIContainer(select) != null;
    };
    forceSelection = function (selection) {
      var i, opt, options, _ref;
      options = getFlattenedOptionsAndGroups(this);
      i = 0;
      while (i < options.length) {
        opt = options[i];
        if (
          ((_ref = opt.getAttribute("value")),
          __indexOf.call(selection, _ref) >= 0)
        ) {
          opt.selected = true;
          opt.setAttribute("selected", "");
        } else {
          opt.selected = false;
          opt.removeAttribute("selected");
        }
        i++;
      }
      return triggerEvent(this, "chosen:updated");
    };
    AbstractChosenOrder.getSelectionOrder = function (select) {
      var chosen_options,
        chosen_ui,
        close_btn,
        opt,
        option,
        options,
        order,
        rel,
        _i,
        _len;
      if (typeof getDOMElement !== "undefined" && getDOMElement !== null) {
        select = getDOMElement(select);
      }
      order = [];
      if (!isValidMultipleSelectElement(select)) {
        console.error(
          ERRORS.invalid_select_element.replace(
            "{{function}}",
            "getSelectionOrder"
          )
        );
        return order;
      }
      chosen_ui = getChosenUIContainer(select);
      if (chosen_ui == null) {
        console.error(
          ERRORS.unreachable_chosen_container.replace(
            "{{function}}",
            "getSelectionOrder"
          )
        );
        return order;
      }
      chosen_options = chosen_ui.querySelectorAll(".search-choice");
      options = getFlattenedOptionsAndGroups(select);
      for (_i = 0, _len = chosen_options.length; _i < _len; _i++) {
        opt = chosen_options[_i];
        close_btn = opt.querySelectorAll(".search-choice-close")[0];
        if (close_btn != null) {
          rel = close_btn.getAttribute(this.relAttributeName);
        }
        option = options[rel];
        order.push(option.value);
      }
      return order;
    };
    AbstractChosenOrder.setSelectionOrder = function (select, order, force) {
      var chosen_choices,
        chosen_options,
        chosen_ui,
        i,
        j,
        opt,
        opt_val,
        option,
        options,
        rel,
        relAttributeName,
        _i,
        _j,
        _len,
        _len1,
        _results;
      if (typeof getDOMElement !== "undefined" && getDOMElement !== null) {
        select = getDOMElement(select);
      }
      if (!isValidMultipleSelectElement(select)) {
        console.error(
          ERRORS.invalid_select_element.replace(
            "{{function}}",
            "setSelectionOrder"
          )
        );
        return;
      }
      chosen_ui = getChosenUIContainer(select);
      if (chosen_ui == null) {
        console.error(
          ERRORS.unreachable_chosen_container.replace(
            "{{function}}",
            "setSelectionOrder"
          )
        );
        return;
      }
      if (order instanceof Array) {
        order = order.map(Function.prototype.call, String.prototype.trim);
        options = getFlattenedOptionsAndGroups(select);
        if (force != null && force === true) {
          forceSelection.call(select, order);
        }
        _results = [];
        for (i = _i = 0, _len = order.length; _i < _len; i = ++_i) {
          opt_val = order[i];
          rel = null;
          for (j = _j = 0, _len1 = options.length; _j < _len1; j = ++_j) {
            opt = options[j];
            if (opt.value === opt_val) {
              rel = j;
            }
          }
          chosen_options = chosen_ui.querySelectorAll(".search-choice");
          relAttributeName = this.relAttributeName;
          option = Array.prototype.filter.call(chosen_options, function (o) {
            return (
              o.querySelector(
                "a.search-choice-close[" + relAttributeName + '="' + rel + '"]'
              ) != null
            );
          })[0];
          chosen_choices = chosen_ui.querySelector("ul.chosen-choices");
          _results.push(
            insertAt(option, i, chosen_ui.querySelector("ul.chosen-choices"))
          );
        }
        return _results;
      } else {
        return console.error(
          ERRORS.invalid_selection_array.replace(
            "{{function}}",
            "setSelectionOrder"
          )
        );
      }
    };
    return AbstractChosenOrder;
  })();
  $ = jQuery;
  $.fn.extend({
    getSelectionOrder: function () {
      return ChosenOrder.getSelectionOrder(this);
    },
    setSelectionOrder: function (order, force) {
      return ChosenOrder.setSelectionOrder(this, order, force);
    },
  });
  this.ChosenOrder = (function (_super) {
    var isjQueryObject;
    __extends(ChosenOrder, _super);
    function ChosenOrder() {
      _ref = ChosenOrder.__super__.constructor.apply(this, arguments);
      return _ref;
    }
    ChosenOrder.relAttributeName = "data-option-array-index";
    isjQueryObject = function (obj) {
      return (
        typeof jQuery !== "undefined" &&
        jQuery !== null &&
        obj instanceof jQuery
      );
    };
    parent.getDOMElement = function (element) {
      if (isjQueryObject(element)) {
        return element.get(0);
      } else {
        return element;
      }
    };
    parent.searchChosenUIContainer = function (element) {
      if ($(element).data("chosen") != null) {
        return $(element).data("chosen").container[0];
      } else {
        return $(element)
          .next(".chosen-container.chosen-container-multi")
          .get(0);
      }
    };
    parent.triggerEvent = function (target, event_name) {
      return $(target).trigger(event_name);
    };
    return ChosenOrder;
  })(AbstractChosenOrder);
}).call(this);
(function ($) {
  return ($.fn.ajaxChosen = function (settings, callback, chosenOptions) {
    var chosenXhr, defaultOptions, options, select;
    if (settings == null) {
      settings = {};
    }
    if (chosenOptions == null) {
      chosenOptions = {};
    }
    defaultOptions = {
      minTermLength: 3,
      afterTypeDelay: 500,
      jsonTermKey: "term",
      keepTypingMsg: "Keep typing...",
      lookingForMsg: "Looking for",
    };
    select = this;
    chosenXhr = null;
    options = $.extend({}, defaultOptions, $(select).data(), settings);
    this.chosen(chosenOptions ? chosenOptions : {});
    return this.each(function () {
      return $(this)
        .next(".chosen-container")
        .find(".search-field > input, .chosen-search > input")
        .bind("keyup", function () {
          var field, msg, success, untrimmed_val, val;
          untrimmed_val = $(this).val();
          val = $.trim($(this).val());
          msg =
            val.length < options.minTermLength
              ? options.keepTypingMsg
              : options.lookingForMsg + (" '" + val + "'");
          select.next(".chosen-container").find(".no-results").text(msg);
          if (val === $(this).data("prevVal")) {
            return false;
          }
          $(this).data("prevVal", val);
          if (this.timer) {
            clearTimeout(this.timer);
          }
          if (val.length < options.minTermLength) {
            return false;
          }
          field = $(this);
          if (options.data == null) {
            options.data = {};
          }
          options.data[options.jsonTermKey] = val;
          if (options.dataCallback != null) {
            options.data = options.dataCallback(options.data);
          }
          success = options.success;
          options.success = function (data) {
            var items, nbItems, selected_values;
            if (data == null) {
              return;
            }
            selected_values = [];
            select.find("option").each(function () {
              if (!$(this).is(":selected")) {
                return $(this).remove();
              } else {
                return selected_values.push(
                  $(this).val() + "-" + $(this).text()
                );
              }
            });
            select.find("optgroup:empty").each(function () {
              return $(this).remove();
            });
            items = callback != null ? callback(data, field) : data;
            nbItems = 0;
            $.each(items, function (i, element) {
              var group, text, value;
              nbItems++;
              if (element.group) {
                group = select.find("optgroup[label='" + element.text + "']");
                if (!group.size()) {
                  group = $("<optgroup />");
                }
                group.attr("label", element.text).appendTo(select);
                return $.each(element.items, function (i, element) {
                  var text, value;
                  if (typeof element === "string") {
                    value = i;
                    text = element;
                  } else {
                    value = element.value;
                    text = element.text;
                  }
                  if ($.inArray(value + "-" + text, selected_values) === -1) {
                    return $("<option />")
                      .attr("value", value)
                      .html(text)
                      .appendTo(group);
                  }
                });
              } else {
                if (typeof element === "string") {
                  value = i;
                  text = element;
                } else {
                  value = element.value;
                  text = element.text;
                }
                if ($.inArray(value + "-" + text, selected_values) === -1) {
                  return $("<option />")
                    .attr("value", value)
                    .html(text)
                    .appendTo(select);
                }
              }
            });
            if (nbItems) {
              select.trigger("chosen:updated");
            } else {
              select.data().chosen.no_results_clear();
              var valEscape = $("<div/>").text($.trim(field.val())).html();
              select.data().chosen.no_results(valEscape);
            }
            if (settings.success != null) {
              settings.success(data);
            }
            return field.val(untrimmed_val);
          };
          return (this.timer = setTimeout(function () {
            if (chosenXhr) {
              chosenXhr.abort();
            }
            return (chosenXhr = $.ajax(options));
          }, options.afterTypeDelay));
        });
    });
  });
})(jQuery);
(function (factory) {
  "use strict";
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else if (typeof exports === "object" && typeof require === "function") {
    factory(require("jquery"));
  } else {
    factory(jQuery);
  }
})(function ($) {
  "use strict";
  var utils = (function () {
      return {
        escapeRegExChars: function (value) {
          return value.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
        },
        createNode: function (containerClass) {
          var div = document.createElement("div");
          div.className = containerClass;
          div.style.position = "absolute";
          div.style.display = "none";
          return div;
        },
      };
    })(),
    keys = {
      ESC: 27,
      TAB: 9,
      RETURN: 13,
      LEFT: 37,
      UP: 38,
      RIGHT: 39,
      DOWN: 40,
    };
  function Autocomplete(el, options) {
    var noop = function () {},
      that = this,
      defaults = {
        ajaxSettings: {},
        autoSelectFirst: false,
        appendTo: document.body,
        serviceUrl: null,
        lookup: null,
        onSelect: null,
        width: "auto",
        minChars: 1,
        maxHeight: 300,
        deferRequestBy: 0,
        params: {},
        formatResult: Autocomplete.formatResult,
        delimiter: null,
        zIndex: 9999,
        type: "GET",
        noCache: false,
        onSearchStart: noop,
        onSearchComplete: noop,
        onSearchError: noop,
        preserveInput: false,
        containerClass: "autocomplete-suggestions",
        tabDisabled: false,
        dataType: "text",
        currentRequest: null,
        triggerSelectOnValidInput: true,
        preventBadQueries: true,
        lookupFilter: function (suggestion, originalQuery, queryLowerCase) {
          return suggestion.value.toLowerCase().indexOf(queryLowerCase) !== -1;
        },
        paramName: "query",
        transformResult: function (response) {
          return typeof response === "string"
            ? $.parseJSON(response)
            : response;
        },
        showNoSuggestionNotice: false,
        noSuggestionNotice: "No results",
        orientation: "bottom",
        forceFixPosition: false,
      };
    that.element = el;
    that.el = $(el);
    that.suggestions = [];
    that.badQueries = [];
    that.selectedIndex = -1;
    that.currentValue = that.element.value;
    that.intervalId = 0;
    that.cachedResponse = {};
    that.onChangeInterval = null;
    that.onChange = null;
    that.isLocal = false;
    that.suggestionsContainer = null;
    that.noSuggestionsContainer = null;
    that.options = $.extend({}, defaults, options);
    that.classes = {
      selected: "autocomplete-selected",
      suggestion: "autocomplete-suggestion",
    };
    that.hint = null;
    that.hintValue = "";
    that.selection = null;
    that.initialize();
    that.setOptions(options);
  }
  Autocomplete.utils = utils;
  $.Autocomplete = Autocomplete;
  Autocomplete.formatResult = function (suggestion, currentValue) {
    var pattern = "(" + utils.escapeRegExChars(currentValue) + ")";
    return suggestion.value
      .replace(new RegExp(pattern, "gi"), "<strong>$1</strong>")
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/&lt;(\/?strong)&gt;/g, "<$1>");
  };
  Autocomplete.prototype = {
    killerFn: null,
    initialize: function () {
      var that = this,
        suggestionSelector = "." + that.classes.suggestion,
        selected = that.classes.selected,
        options = that.options,
        container;
      that.element.setAttribute("autocomplete", "off");
      that.killerFn = function (e) {
        if (
          $(e.target).closest("." + that.options.containerClass).length === 0
        ) {
          that.killSuggestions();
          that.disableKillerFn();
        }
      };
      that.noSuggestionsContainer = $(
        '<div class="autocomplete-no-suggestion"></div>'
      )
        .html(this.options.noSuggestionNotice)
        .get(0);
      that.suggestionsContainer = Autocomplete.utils.createNode(
        options.containerClass
      );
      container = $(that.suggestionsContainer);
      container.appendTo(options.appendTo);
      if (options.width !== "auto") {
        container.width(options.width);
      }
      container.on("mouseover.autocomplete", suggestionSelector, function () {
        that.activate($(this).data("index"));
      });
      container.on("mouseout.autocomplete", function () {
        that.selectedIndex = -1;
        container.children("." + selected).removeClass(selected);
      });
      container.on("click.autocomplete", suggestionSelector, function () {
        that.select($(this).data("index"));
      });
      that.fixPositionCapture = function () {
        if (that.visible) {
          that.fixPosition();
        }
      };
      $(window).on("resize.autocomplete", that.fixPositionCapture);
      that.el.on("keydown.autocomplete", function (e) {
        that.onKeyPress(e);
      });
      that.el.on("keyup.autocomplete", function (e) {
        that.onKeyUp(e);
      });
      that.el.on("blur.autocomplete", function () {
        that.onBlur();
      });
      that.el.on("focus.autocomplete", function () {
        that.onFocus();
      });
      that.el.on("change.autocomplete", function (e) {
        that.onKeyUp(e);
      });
      that.el.on("input.autocomplete", function (e) {
        that.onKeyUp(e);
      });
    },
    onFocus: function () {
      var that = this;
      that.fixPosition();
      if (that.options.minChars === 0 && that.el.val().length === 0) {
        that.onValueChange();
      }
    },
    onBlur: function () {
      this.enableKillerFn();
    },
    abortAjax: function () {
      var that = this;
      if (that.currentRequest) {
        that.currentRequest.abort();
        that.currentRequest = null;
      }
    },
    setOptions: function (suppliedOptions) {
      var that = this,
        options = that.options;
      $.extend(options, suppliedOptions);
      that.isLocal = $.isArray(options.lookup);
      if (that.isLocal) {
        options.lookup = that.verifySuggestionsFormat(options.lookup);
      }
      options.orientation = that.validateOrientation(
        options.orientation,
        "bottom"
      );
      $(that.suggestionsContainer).css({
        "max-height": options.maxHeight + "px",
        width: options.width + "px",
        "z-index": options.zIndex,
      });
    },
    clearCache: function () {
      this.cachedResponse = {};
      this.badQueries = [];
    },
    clear: function () {
      this.clearCache();
      this.currentValue = "";
      this.suggestions = [];
    },
    disable: function () {
      var that = this;
      that.disabled = true;
      clearInterval(that.onChangeInterval);
      that.abortAjax();
    },
    enable: function () {
      this.disabled = false;
    },
    fixPosition: function () {
      var that = this,
        $container = $(that.suggestionsContainer),
        containerParent = $container.parent().get(0);
      if (containerParent !== document.body && !that.options.forceFixPosition) {
        return;
      }
      var orientation = that.options.orientation,
        containerHeight = $container.outerHeight(),
        height = that.el.outerHeight(),
        offset = that.el.offset(),
        styles = { top: offset.top, left: offset.left };
      if (orientation === "auto") {
        var viewPortHeight = $(window).height(),
          scrollTop = $(window).scrollTop(),
          topOverflow = -scrollTop + offset.top - containerHeight,
          bottomOverflow =
            scrollTop +
            viewPortHeight -
            (offset.top + height + containerHeight);
        orientation =
          Math.max(topOverflow, bottomOverflow) === topOverflow
            ? "top"
            : "bottom";
      }
      if (orientation === "top") {
        styles.top += -containerHeight;
      } else {
        styles.top += height;
      }
      if (containerParent !== document.body) {
        var opacity = $container.css("opacity"),
          parentOffsetDiff;
        if (!that.visible) {
          $container.css("opacity", 0).show();
        }
        parentOffsetDiff = $container.offsetParent().offset();
        styles.top -= parentOffsetDiff.top;
        styles.left -= parentOffsetDiff.left;
        if (!that.visible) {
          $container.css("opacity", opacity).hide();
        }
      }
      if (that.options.width === "auto") {
        styles.width = that.el.outerWidth() - 2 + "px";
      }
      $container.css(styles);
    },
    enableKillerFn: function () {
      var that = this;
      $(document).on("click.autocomplete", that.killerFn);
    },
    disableKillerFn: function () {
      var that = this;
      $(document).off("click.autocomplete", that.killerFn);
    },
    killSuggestions: function () {
      var that = this;
      that.stopKillSuggestions();
      that.intervalId = window.setInterval(function () {
        that.hide();
        that.stopKillSuggestions();
      }, 50);
    },
    stopKillSuggestions: function () {
      window.clearInterval(this.intervalId);
    },
    isCursorAtEnd: function () {
      var that = this,
        valLength = that.el.val().length,
        selectionStart = that.element.selectionStart,
        range;
      if (typeof selectionStart === "number") {
        return selectionStart === valLength;
      }
      if (document.selection) {
        range = document.selection.createRange();
        range.moveStart("character", -valLength);
        return valLength === range.text.length;
      }
      return true;
    },
    onKeyPress: function (e) {
      var that = this;
      if (
        !that.disabled &&
        !that.visible &&
        e.which === keys.DOWN &&
        that.currentValue
      ) {
        that.suggest();
        return;
      }
      if (that.disabled || !that.visible) {
        return;
      }
      switch (e.which) {
        case keys.ESC:
          that.el.val(that.currentValue);
          that.hide();
          break;
        case keys.RIGHT:
          if (that.hint && that.options.onHint && that.isCursorAtEnd()) {
            that.selectHint();
            break;
          }
          return;
        case keys.TAB:
          if (that.hint && that.options.onHint) {
            that.selectHint();
            return;
          }
          if (that.selectedIndex === -1) {
            that.hide();
            return;
          }
          that.select(that.selectedIndex);
          if (that.options.tabDisabled === false) {
            return;
          }
          break;
        case keys.RETURN:
          if (that.selectedIndex === -1) {
            that.hide();
            return;
          }
          that.select(that.selectedIndex);
          break;
        case keys.UP:
          that.moveUp();
          break;
        case keys.DOWN:
          that.moveDown();
          break;
        default:
          return;
      }
      e.stopImmediatePropagation();
      e.preventDefault();
    },
    onKeyUp: function (e) {
      var that = this;
      if (that.disabled) {
        return;
      }
      switch (e.which) {
        case keys.UP:
        case keys.DOWN:
          return;
      }
      clearInterval(that.onChangeInterval);
      if (that.currentValue !== that.el.val()) {
        that.findBestHint();
        if (that.options.deferRequestBy > 0) {
          that.onChangeInterval = setInterval(function () {
            that.onValueChange();
          }, that.options.deferRequestBy);
        } else {
          that.onValueChange();
        }
      }
    },
    onValueChange: function () {
      var that = this,
        options = that.options,
        value = that.el.val(),
        query = that.getQuery(value);
      if (that.selection && that.currentValue !== query) {
        that.selection = null;
        (options.onInvalidateSelection || $.noop).call(that.element);
      }
      clearInterval(that.onChangeInterval);
      that.currentValue = value;
      that.selectedIndex = -1;
      if (options.triggerSelectOnValidInput && that.isExactMatch(query)) {
        that.select(0);
        return;
      }
      if (query.length < options.minChars) {
        that.hide();
      } else {
        that.getSuggestions(query);
      }
    },
    isExactMatch: function (query) {
      var suggestions = this.suggestions;
      return (
        suggestions.length === 1 &&
        suggestions[0].value.toLowerCase() === query.toLowerCase()
      );
    },
    getQuery: function (value) {
      var delimiter = this.options.delimiter,
        parts;
      if (!delimiter) {
        return value;
      }
      parts = value.split(delimiter);
      return $.trim(parts[parts.length - 1]);
    },
    getSuggestionsLocal: function (query) {
      var that = this,
        options = that.options,
        queryLowerCase = query.toLowerCase(),
        filter = options.lookupFilter,
        limit = parseInt(options.lookupLimit, 10),
        data;
      data = {
        suggestions: $.grep(options.lookup, function (suggestion) {
          return filter(suggestion, query, queryLowerCase);
        }),
      };
      if (limit && data.suggestions.length > limit) {
        data.suggestions = data.suggestions.slice(0, limit);
      }
      return data;
    },
    getSuggestions: function (q) {
      var response,
        that = this,
        options = that.options,
        serviceUrl = options.serviceUrl,
        params,
        cacheKey,
        ajaxSettings;
      options.params[options.paramName] = q;
      params = options.ignoreParams ? null : options.params;
      if (options.onSearchStart.call(that.element, options.params) === false) {
        return;
      }
      if ($.isFunction(options.lookup)) {
        options.lookup(q, function (data) {
          that.suggestions = data.suggestions;
          that.suggest();
          options.onSearchComplete.call(that.element, q, data.suggestions);
        });
        return;
      }
      if (that.isLocal) {
        response = that.getSuggestionsLocal(q);
      } else {
        if ($.isFunction(serviceUrl)) {
          serviceUrl = serviceUrl.call(that.element, q);
        }
        cacheKey = serviceUrl + "?" + $.param(params || {});
        response = that.cachedResponse[cacheKey];
      }
      if (response && $.isArray(response.suggestions)) {
        that.suggestions = response.suggestions;
        that.suggest();
        options.onSearchComplete.call(that.element, q, response.suggestions);
      } else if (!that.isBadQuery(q)) {
        that.abortAjax();
        ajaxSettings = {
          url: serviceUrl,
          data: params,
          type: options.type,
          dataType: options.dataType,
        };
        $.extend(ajaxSettings, options.ajaxSettings);
        that.currentRequest = $.ajax(ajaxSettings)
          .done(function (data) {
            var result;
            that.currentRequest = null;
            result = options.transformResult(data, q);
            that.processResponse(result, q, cacheKey);
            options.onSearchComplete.call(that.element, q, result.suggestions);
          })
          .fail(function (jqXHR, textStatus, errorThrown) {
            options.onSearchError.call(
              that.element,
              q,
              jqXHR,
              textStatus,
              errorThrown
            );
          });
      } else {
        options.onSearchComplete.call(that.element, q, []);
      }
    },
    isBadQuery: function (q) {
      if (!this.options.preventBadQueries) {
        return false;
      }
      var badQueries = this.badQueries,
        i = badQueries.length;
      while (i--) {
        if (q.indexOf(badQueries[i]) === 0) {
          return true;
        }
      }
      return false;
    },
    hide: function () {
      var that = this,
        container = $(that.suggestionsContainer);
      if ($.isFunction(that.options.onHide) && that.visible) {
        that.options.onHide.call(that.element, container);
      }
      that.visible = false;
      that.selectedIndex = -1;
      clearInterval(that.onChangeInterval);
      $(that.suggestionsContainer).hide();
      that.signalHint(null);
    },
    suggest: function () {
      if (this.suggestions.length === 0) {
        if (this.options.showNoSuggestionNotice) {
          this.noSuggestions();
        } else {
          this.hide();
        }
        return;
      }
      var that = this,
        options = that.options,
        groupBy = options.groupBy,
        formatResult = options.formatResult,
        value = that.getQuery(that.currentValue),
        className = that.classes.suggestion,
        classSelected = that.classes.selected,
        container = $(that.suggestionsContainer),
        noSuggestionsContainer = $(that.noSuggestionsContainer),
        beforeRender = options.beforeRender,
        html = "",
        category,
        formatGroup = function (suggestion, index) {
          var currentCategory = suggestion.data[groupBy];
          if (category === currentCategory) {
            return "";
          }
          category = currentCategory;
          return (
            '<div class="autocomplete-group"><strong>' +
            category +
            "</strong></div>"
          );
        };
      if (options.triggerSelectOnValidInput && that.isExactMatch(value)) {
        that.select(0);
        return;
      }
      $.each(that.suggestions, function (i, suggestion) {
        if (groupBy) {
          html += formatGroup(suggestion, value, i);
        }
        html +=
          '<div class="' +
          className +
          '" data-index="' +
          i +
          '">' +
          formatResult(suggestion, value) +
          "</div>";
      });
      this.adjustContainerWidth();
      noSuggestionsContainer.detach();
      container.html(html);
      if ($.isFunction(beforeRender)) {
        beforeRender.call(that.element, container);
      }
      that.fixPosition();
      container.show();
      if (options.autoSelectFirst) {
        that.selectedIndex = 0;
        container.scrollTop(0);
        container
          .children("." + className)
          .first()
          .addClass(classSelected);
      }
      that.visible = true;
      that.findBestHint();
    },
    noSuggestions: function () {
      var that = this,
        container = $(that.suggestionsContainer),
        noSuggestionsContainer = $(that.noSuggestionsContainer);
      this.adjustContainerWidth();
      noSuggestionsContainer.detach();
      container.empty();
      container.append(noSuggestionsContainer);
      that.fixPosition();
      container.show();
      that.visible = true;
    },
    adjustContainerWidth: function () {
      var that = this,
        options = that.options,
        width,
        container = $(that.suggestionsContainer);
      if (options.width === "auto") {
        width = that.el.outerWidth() - 2;
        container.width(width > 0 ? width : 300);
      }
    },
    findBestHint: function () {
      var that = this,
        value = that.el.val().toLowerCase(),
        bestMatch = null;
      if (!value) {
        return;
      }
      $.each(that.suggestions, function (i, suggestion) {
        var foundMatch = suggestion.value.toLowerCase().indexOf(value) === 0;
        if (foundMatch) {
          bestMatch = suggestion;
        }
        return !foundMatch;
      });
      that.signalHint(bestMatch);
    },
    signalHint: function (suggestion) {
      var hintValue = "",
        that = this;
      if (suggestion) {
        hintValue =
          that.currentValue + suggestion.value.substr(that.currentValue.length);
      }
      if (that.hintValue !== hintValue) {
        that.hintValue = hintValue;
        that.hint = suggestion;
        (this.options.onHint || $.noop)(hintValue);
      }
    },
    verifySuggestionsFormat: function (suggestions) {
      if (suggestions.length && typeof suggestions[0] === "string") {
        return $.map(suggestions, function (value) {
          return { value: value, data: null };
        });
      }
      return suggestions;
    },
    validateOrientation: function (orientation, fallback) {
      orientation = $.trim(orientation || "").toLowerCase();
      if ($.inArray(orientation, ["auto", "bottom", "top"]) === -1) {
        orientation = fallback;
      }
      return orientation;
    },
    processResponse: function (result, originalQuery, cacheKey) {
      var that = this,
        options = that.options;
      result.suggestions = that.verifySuggestionsFormat(result.suggestions);
      if (!options.noCache) {
        that.cachedResponse[cacheKey] = result;
        if (options.preventBadQueries && result.suggestions.length === 0) {
          that.badQueries.push(originalQuery);
        }
      }
      if (originalQuery !== that.getQuery(that.currentValue)) {
        return;
      }
      that.suggestions = result.suggestions;
      that.suggest();
    },
    activate: function (index) {
      var that = this,
        activeItem,
        selected = that.classes.selected,
        container = $(that.suggestionsContainer),
        children = container.find("." + that.classes.suggestion);
      container.find("." + selected).removeClass(selected);
      that.selectedIndex = index;
      if (that.selectedIndex !== -1 && children.length > that.selectedIndex) {
        activeItem = children.get(that.selectedIndex);
        $(activeItem).addClass(selected);
        return activeItem;
      }
      return null;
    },
    selectHint: function () {
      var that = this,
        i = $.inArray(that.hint, that.suggestions);
      that.select(i);
    },
    select: function (i) {
      var that = this;
      that.hide();
      that.onSelect(i);
    },
    moveUp: function () {
      var that = this;
      if (that.selectedIndex === -1) {
        return;
      }
      if (that.selectedIndex === 0) {
        $(that.suggestionsContainer)
          .children()
          .first()
          .removeClass(that.classes.selected);
        that.selectedIndex = -1;
        that.el.val(that.currentValue);
        that.findBestHint();
        return;
      }
      that.adjustScroll(that.selectedIndex - 1);
    },
    moveDown: function () {
      var that = this;
      if (that.selectedIndex === that.suggestions.length - 1) {
        return;
      }
      that.adjustScroll(that.selectedIndex + 1);
    },
    adjustScroll: function (index) {
      var that = this,
        activeItem = that.activate(index);
      if (!activeItem) {
        return;
      }
      var offsetTop,
        upperBound,
        lowerBound,
        heightDelta = $(activeItem).outerHeight();
      offsetTop = activeItem.offsetTop;
      upperBound = $(that.suggestionsContainer).scrollTop();
      lowerBound = upperBound + that.options.maxHeight - heightDelta;
      if (offsetTop < upperBound) {
        $(that.suggestionsContainer).scrollTop(offsetTop);
      } else if (offsetTop > lowerBound) {
        $(that.suggestionsContainer).scrollTop(
          offsetTop - that.options.maxHeight + heightDelta
        );
      }
      if (!that.options.preserveInput) {
        that.el.val(that.getValue(that.suggestions[index].value));
      }
      that.signalHint(null);
    },
    onSelect: function (index) {
      var that = this,
        onSelectCallback = that.options.onSelect,
        suggestion = that.suggestions[index];
      that.currentValue = that.getValue(suggestion.value);
      if (that.currentValue !== that.el.val() && !that.options.preserveInput) {
        that.el.val(that.currentValue);
      }
      that.signalHint(null);
      that.suggestions = [];
      that.selection = suggestion;
      if ($.isFunction(onSelectCallback)) {
        onSelectCallback.call(that.element, suggestion);
      }
    },
    getValue: function (value) {
      var that = this,
        delimiter = that.options.delimiter,
        currentValue,
        parts;
      if (!delimiter) {
        return value;
      }
      currentValue = that.currentValue;
      parts = currentValue.split(delimiter);
      if (parts.length === 1) {
        return value;
      }
      return (
        currentValue.substr(
          0,
          currentValue.length - parts[parts.length - 1].length
        ) + value
      );
    },
    dispose: function () {
      var that = this;
      that.el.off(".autocomplete").removeData("autocomplete");
      that.disableKillerFn();
      $(window).off("resize.autocomplete", that.fixPositionCapture);
      $(that.suggestionsContainer).remove();
    },
  };
  $.fn.autocomplete = $.fn.devbridgeAutocomplete = function (options, args) {
    var dataKey = "autocomplete";
    if (arguments.length === 0) {
      return this.first().data(dataKey);
    }
    return this.each(function () {
      var inputElement = $(this),
        instance = inputElement.data(dataKey);
      if (typeof options === "string") {
        if (instance && typeof instance[options] === "function") {
          instance[options](args);
        }
      } else {
        if (instance && instance.dispose) {
          instance.dispose();
        }
        instance = new Autocomplete(this, options);
        inputElement.data(dataKey, instance);
      }
    });
  };
});
var _slice = Array.prototype.slice;
function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++)
      arr2[i] = arr[i];
    return arr2;
  } else {
    return Array.from(arr);
  }
}
(function (global, factory) {
  typeof exports === "object" && typeof module !== "undefined"
    ? (module.exports = factory(require("jquery")))
    : typeof define === "function" && define.amd
    ? define(["jquery"], factory)
    : (global.parsley = factory(global.jQuery));
})(this, function ($) {
  "use strict";
  var globalID = 1;
  var pastWarnings = {};
  var ParsleyUtils__ParsleyUtils = {
    attr: function attr($element, namespace, obj) {
      var i;
      var attribute;
      var attributes;
      var regex = new RegExp("^" + namespace, "i");
      if ("undefined" === typeof obj) obj = {};
      else {
        for (i in obj) {
          if (obj.hasOwnProperty(i)) delete obj[i];
        }
      }
      if ("undefined" === typeof $element || "undefined" === typeof $element[0])
        return obj;
      attributes = $element[0].attributes;
      for (i = attributes.length; i--; ) {
        attribute = attributes[i];
        if (attribute && attribute.specified && regex.test(attribute.name)) {
          obj[this.camelize(attribute.name.slice(namespace.length))] =
            this.deserializeValue(attribute.value);
        }
      }
      return obj;
    },
    checkAttr: function checkAttr($element, namespace, _checkAttr) {
      return $element.is("[" + namespace + _checkAttr + "]");
    },
    setAttr: function setAttr($element, namespace, attr, value) {
      $element[0].setAttribute(this.dasherize(namespace + attr), String(value));
    },
    generateID: function generateID() {
      return "" + globalID++;
    },
    deserializeValue: function deserializeValue(value) {
      var num;
      try {
        return value
          ? value == "true" ||
              (value == "false"
                ? false
                : value == "null"
                ? null
                : !isNaN((num = Number(value)))
                ? num
                : /^[\[\{]/.test(value)
                ? $.parseJSON(value)
                : value)
          : value;
      } catch (e) {
        return value;
      }
    },
    camelize: function camelize(str) {
      return str.replace(/-+(.)?/g, function (match, chr) {
        return chr ? chr.toUpperCase() : "";
      });
    },
    dasherize: function dasherize(str) {
      return str
        .replace(/::/g, "/")
        .replace(/([A-Z]+)([A-Z][a-z])/g, "$1_$2")
        .replace(/([a-z\d])([A-Z])/g, "$1_$2")
        .replace(/_/g, "-")
        .toLowerCase();
    },
    warn: function warn() {
      var _window$console;
      if (window.console && "function" === typeof window.console.warn)
        (_window$console = window.console).warn.apply(
          _window$console,
          arguments
        );
    },
    warnOnce: function warnOnce(msg) {
      if (!pastWarnings[msg]) {
        pastWarnings[msg] = true;
        this.warn.apply(this, arguments);
      }
    },
    _resetWarnings: function _resetWarnings() {
      pastWarnings = {};
    },
    trimString: function trimString(string) {
      return string.replace(/^\s+|\s+$/g, "");
    },
    namespaceEvents: function namespaceEvents(events, namespace) {
      events = this.trimString(events || "").split(/\s+/);
      if (!events[0]) return "";
      return $.map(events, function (evt) {
        return evt + "." + namespace;
      }).join(" ");
    },
    objectCreate:
      Object.create ||
      (function () {
        var Object = function Object() {};
        return function (prototype) {
          if (arguments.length > 1) {
            throw Error("Second argument not supported");
          }
          if (typeof prototype != "object") {
            throw TypeError("Argument must be an object");
          }
          Object.prototype = prototype;
          var result = new Object();
          Object.prototype = null;
          return result;
        };
      })(),
  };
  var ParsleyUtils__default = ParsleyUtils__ParsleyUtils;
  var ParsleyDefaults = {
    namespace: "data-parsley-",
    inputs: "input, textarea, select",
    excluded:
      "input[type=button], input[type=submit], input[type=reset], input[type=hidden]",
    priorityEnabled: true,
    multiple: null,
    group: null,
    uiEnabled: true,
    validationThreshold: 3,
    focus: "first",
    trigger: false,
    triggerAfterFailure: "input",
    errorClass: "parsley-error",
    successClass: "parsley-success",
    classHandler: function classHandler(ParsleyField) {},
    errorsContainer: function errorsContainer(ParsleyField) {},
    errorsWrapper: '<ul class="parsley-errors-list"></ul>',
    errorTemplate: "<li></li>",
  };
  var ParsleyAbstract = function ParsleyAbstract() {};
  ParsleyAbstract.prototype = {
    asyncSupport: true,
    actualizeOptions: function actualizeOptions() {
      ParsleyUtils__default.attr(
        this.$element,
        this.options.namespace,
        this.domOptions
      );
      if (this.parent && this.parent.actualizeOptions)
        this.parent.actualizeOptions();
      return this;
    },
    _resetOptions: function _resetOptions(initOptions) {
      this.domOptions = ParsleyUtils__default.objectCreate(this.parent.options);
      this.options = ParsleyUtils__default.objectCreate(this.domOptions);
      for (var i in initOptions) {
        if (initOptions.hasOwnProperty(i)) this.options[i] = initOptions[i];
      }
      this.actualizeOptions();
    },
    _listeners: null,
    on: function on(name, fn) {
      this._listeners = this._listeners || {};
      var queue = (this._listeners[name] = this._listeners[name] || []);
      queue.push(fn);
      return this;
    },
    subscribe: function subscribe(name, fn) {
      $.listenTo(this, name.toLowerCase(), fn);
    },
    off: function off(name, fn) {
      var queue = this._listeners && this._listeners[name];
      if (queue) {
        if (!fn) {
          delete this._listeners[name];
        } else {
          for (var i = queue.length; i--; )
            if (queue[i] === fn) queue.splice(i, 1);
        }
      }
      return this;
    },
    unsubscribe: function unsubscribe(name, fn) {
      $.unsubscribeTo(this, name.toLowerCase());
    },
    trigger: function trigger(name, target, extraArg) {
      target = target || this;
      var queue = this._listeners && this._listeners[name];
      var result;
      var parentResult;
      if (queue) {
        for (var i = queue.length; i--; ) {
          result = queue[i].call(target, target, extraArg);
          if (result === false) return result;
        }
      }
      if (this.parent) {
        return this.parent.trigger(name, target, extraArg);
      }
      return true;
    },
    reset: function reset() {
      if ("ParsleyForm" !== this.__class__) {
        this._resetUI();
        return this._trigger("reset");
      }
      for (var i = 0; i < this.fields.length; i++) this.fields[i].reset();
      this._trigger("reset");
    },
    destroy: function destroy() {
      this._destroyUI();
      if ("ParsleyForm" !== this.__class__) {
        this.$element.removeData("Parsley");
        this.$element.removeData("ParsleyFieldMultiple");
        this._trigger("destroy");
        return;
      }
      for (var i = 0; i < this.fields.length; i++) this.fields[i].destroy();
      this.$element.removeData("Parsley");
      this._trigger("destroy");
    },
    asyncIsValid: function asyncIsValid(group, force) {
      ParsleyUtils__default.warnOnce(
        "asyncIsValid is deprecated; please use whenValid instead"
      );
      return this.whenValid({ group: group, force: force });
    },
    _findRelated: function _findRelated() {
      return this.options.multiple
        ? this.parent.$element.find(
            "[" +
              this.options.namespace +
              'multiple="' +
              this.options.multiple +
              '"]'
          )
        : this.$element;
    },
  };
  var requirementConverters = {
    string: function string(_string) {
      return _string;
    },
    integer: function integer(string) {
      if (isNaN(string))
        throw 'Requirement is not an integer: "' + string + '"';
      return parseInt(string, 10);
    },
    number: function number(string) {
      if (isNaN(string)) throw 'Requirement is not a number: "' + string + '"';
      return parseFloat(string);
    },
    reference: function reference(string) {
      var result = $(string);
      if (result.length === 0) throw 'No such reference: "' + string + '"';
      return result;
    },
    boolean: function boolean(string) {
      return string !== "false";
    },
    object: function object(string) {
      return ParsleyUtils__default.deserializeValue(string);
    },
    regexp: function regexp(_regexp) {
      var flags = "";
      if (/^\/.*\/(?:[gimy]*)$/.test(_regexp)) {
        flags = _regexp.replace(/.*\/([gimy]*)$/, "$1");
        _regexp = _regexp.replace(new RegExp("^/(.*?)/" + flags + "$"), "$1");
      } else {
        _regexp = "^" + _regexp + "$";
      }
      return new RegExp(_regexp, flags);
    },
  };
  var convertArrayRequirement = function convertArrayRequirement(
    string,
    length
  ) {
    var m = string.match(/^\s*\[(.*)\]\s*$/);
    if (!m) throw 'Requirement is not an array: "' + string + '"';
    var values = m[1].split(",").map(ParsleyUtils__default.trimString);
    if (values.length !== length)
      throw (
        "Requirement has " +
        values.length +
        " values when " +
        length +
        " are needed"
      );
    return values;
  };
  var convertRequirement = function convertRequirement(
    requirementType,
    string
  ) {
    var converter = requirementConverters[requirementType || "string"];
    if (!converter)
      throw 'Unknown requirement specification: "' + requirementType + '"';
    return converter(string);
  };
  var convertExtraOptionRequirement = function convertExtraOptionRequirement(
    requirementSpec,
    string,
    extraOptionReader
  ) {
    var main = null;
    var extra = {};
    for (var key in requirementSpec) {
      if (key) {
        var value = extraOptionReader(key);
        if ("string" === typeof value)
          value = convertRequirement(requirementSpec[key], value);
        extra[key] = value;
      } else {
        main = convertRequirement(requirementSpec[key], string);
      }
    }
    return [main, extra];
  };
  var ParsleyValidator = function ParsleyValidator(spec) {
    $.extend(true, this, spec);
  };
  ParsleyValidator.prototype = {
    validate: function validate(value, requirementFirstArg) {
      if (this.fn) {
        if (arguments.length > 3)
          requirementFirstArg = [].slice.call(arguments, 1, -1);
        return this.fn.call(this, value, requirementFirstArg);
      }
      if ($.isArray(value)) {
        if (!this.validateMultiple)
          throw "Validator `" + this.name + "` does not handle multiple values";
        return this.validateMultiple.apply(this, arguments);
      } else {
        if (this.validateNumber) {
          if (isNaN(value)) return false;
          arguments[0] = parseFloat(arguments[0]);
          return this.validateNumber.apply(this, arguments);
        }
        if (this.validateString) {
          return this.validateString.apply(this, arguments);
        }
        throw "Validator `" + this.name + "` only handles multiple values";
      }
    },
    parseRequirements: function parseRequirements(
      requirements,
      extraOptionReader
    ) {
      if ("string" !== typeof requirements) {
        return $.isArray(requirements) ? requirements : [requirements];
      }
      var type = this.requirementType;
      if ($.isArray(type)) {
        var values = convertArrayRequirement(requirements, type.length);
        for (var i = 0; i < values.length; i++)
          values[i] = convertRequirement(type[i], values[i]);
        return values;
      } else if ($.isPlainObject(type)) {
        return convertExtraOptionRequirement(
          type,
          requirements,
          extraOptionReader
        );
      } else {
        return [convertRequirement(type, requirements)];
      }
    },
    requirementType: "string",
    priority: 2,
  };
  var ParsleyValidatorRegistry = function ParsleyValidatorRegistry(
    validators,
    catalog
  ) {
    this.__class__ = "ParsleyValidatorRegistry";
    this.locale = "en";
    this.init(validators || {}, catalog || {});
  };
  var typeRegexes = {
    email:
      /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,
    number: /^-?(\d*\.)?\d+(e[-+]?\d+)?$/i,
    integer: /^-?\d+$/,
    digits: /^\d+$/,
    alphanum: /^\w+$/i,
    url: new RegExp(
      "^" +
        "(?:(?:https?|ftp)://)?" +
        "(?:\\S+(?::\\S*)?@)?" +
        "(?:" +
        "(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])" +
        "(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}" +
        "(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))" +
        "|" +
        "(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)" +
        "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*" +
        "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))" +
        ")" +
        "(?::\\d{2,5})?" +
        "(?:/\\S*)?" +
        "$",
      "i"
    ),
  };
  typeRegexes.range = typeRegexes.number;
  var decimalPlaces = function decimalPlaces(num) {
    var match = ("" + num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
    if (!match) {
      return 0;
    }
    return Math.max(
      0,
      (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0)
    );
  };
  ParsleyValidatorRegistry.prototype = {
    init: function init(validators, catalog) {
      this.catalog = catalog;
      this.validators = $.extend({}, this.validators);
      for (var name in validators)
        this.addValidator(name, validators[name].fn, validators[name].priority);
      window.Parsley.trigger("parsley:validator:init");
    },
    setLocale: function setLocale(locale) {
      if ("undefined" === typeof this.catalog[locale])
        throw new Error(locale + " is not available in the catalog");
      this.locale = locale;
      return this;
    },
    addCatalog: function addCatalog(locale, messages, set) {
      if ("object" === typeof messages) this.catalog[locale] = messages;
      if (true === set) return this.setLocale(locale);
      return this;
    },
    addMessage: function addMessage(locale, name, message) {
      if ("undefined" === typeof this.catalog[locale])
        this.catalog[locale] = {};
      this.catalog[locale][name] = message;
      return this;
    },
    addMessages: function addMessages(locale, nameMessageObject) {
      for (var name in nameMessageObject)
        this.addMessage(locale, name, nameMessageObject[name]);
      return this;
    },
    addValidator: function addValidator(name, arg1, arg2) {
      if (this.validators[name])
        ParsleyUtils__default.warn(
          'Validator "' + name + '" is already defined.'
        );
      else if (ParsleyDefaults.hasOwnProperty(name)) {
        ParsleyUtils__default.warn(
          '"' +
            name +
            '" is a restricted keyword and is not a valid validator name.'
        );
        return;
      }
      return this._setValidator.apply(this, arguments);
    },
    updateValidator: function updateValidator(name, arg1, arg2) {
      if (!this.validators[name]) {
        ParsleyUtils__default.warn(
          'Validator "' + name + '" is not already defined.'
        );
        return this.addValidator.apply(this, arguments);
      }
      return this._setValidator(this, arguments);
    },
    removeValidator: function removeValidator(name) {
      if (!this.validators[name])
        ParsleyUtils__default.warn('Validator "' + name + '" is not defined.');
      delete this.validators[name];
      return this;
    },
    _setValidator: function _setValidator(name, validator, priority) {
      if ("object" !== typeof validator) {
        validator = { fn: validator, priority: priority };
      }
      if (!validator.validate) {
        validator = new ParsleyValidator(validator);
      }
      this.validators[name] = validator;
      for (var locale in validator.messages || {})
        this.addMessage(locale, name, validator.messages[locale]);
      return this;
    },
    getErrorMessage: function getErrorMessage(constraint) {
      var message;
      if ("type" === constraint.name) {
        var typeMessages = this.catalog[this.locale][constraint.name] || {};
        message = typeMessages[constraint.requirements];
      } else
        message = this.formatMessage(
          this.catalog[this.locale][constraint.name],
          constraint.requirements
        );
      return (
        message ||
        this.catalog[this.locale].defaultMessage ||
        this.catalog.en.defaultMessage
      );
    },
    formatMessage: function formatMessage(string, parameters) {
      if ("object" === typeof parameters) {
        for (var i in parameters)
          string = this.formatMessage(string, parameters[i]);
        return string;
      }
      return "string" === typeof string
        ? string.replace(/%s/i, parameters)
        : "";
    },
    validators: {
      notblank: {
        validateString: function validateString(value) {
          return /\S/.test(value);
        },
        priority: 2,
      },
      required: {
        validateMultiple: function validateMultiple(values) {
          return values.length > 0;
        },
        validateString: function validateString(value) {
          return /\S/.test(value);
        },
        priority: 512,
      },
      type: {
        validateString: function validateString(value, type) {
          var _ref =
            arguments.length <= 2 || arguments[2] === undefined
              ? {}
              : arguments[2];
          var _ref$step = _ref.step;
          var step = _ref$step === undefined ? "1" : _ref$step;
          var _ref$base = _ref.base;
          var base = _ref$base === undefined ? 0 : _ref$base;
          var regex = typeRegexes[type];
          if (!regex) {
            throw new Error("validator type `" + type + "` is not supported");
          }
          if (!regex.test(value)) return false;
          if ("number" === type) {
            if (!/^any$/i.test(step || "")) {
              var nb = Number(value);
              var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));
              if (decimalPlaces(nb) > decimals) return false;
              var toInt = function toInt(f) {
                return Math.round(f * Math.pow(10, decimals));
              };
              if ((toInt(nb) - toInt(base)) % toInt(step) != 0) return false;
            }
          }
          return true;
        },
        requirementType: { "": "string", step: "string", base: "number" },
        priority: 256,
      },
      pattern: {
        validateString: function validateString(value, regexp) {
          return regexp.test(value);
        },
        requirementType: "regexp",
        priority: 64,
      },
      minlength: {
        validateString: function validateString(value, requirement) {
          return value.length >= requirement;
        },
        requirementType: "integer",
        priority: 30,
      },
      maxlength: {
        validateString: function validateString(value, requirement) {
          return value.length <= requirement;
        },
        requirementType: "integer",
        priority: 30,
      },
      length: {
        validateString: function validateString(value, min, max) {
          return value.length >= min && value.length <= max;
        },
        requirementType: ["integer", "integer"],
        priority: 30,
      },
      mincheck: {
        validateMultiple: function validateMultiple(values, requirement) {
          return values.length >= requirement;
        },
        requirementType: "integer",
        priority: 30,
      },
      maxcheck: {
        validateMultiple: function validateMultiple(values, requirement) {
          return values.length <= requirement;
        },
        requirementType: "integer",
        priority: 30,
      },
      check: {
        validateMultiple: function validateMultiple(values, min, max) {
          return values.length >= min && values.length <= max;
        },
        requirementType: ["integer", "integer"],
        priority: 30,
      },
      min: {
        validateNumber: function validateNumber(value, requirement) {
          return value >= requirement;
        },
        requirementType: "number",
        priority: 30,
      },
      max: {
        validateNumber: function validateNumber(value, requirement) {
          return value <= requirement;
        },
        requirementType: "number",
        priority: 30,
      },
      range: {
        validateNumber: function validateNumber(value, min, max) {
          return value >= min && value <= max;
        },
        requirementType: ["number", "number"],
        priority: 30,
      },
      equalto: {
        validateString: function validateString(value, refOrValue) {
          var $reference = $(refOrValue);
          if ($reference.length) return value === $reference.val();
          else return value === refOrValue;
        },
        priority: 256,
      },
    },
  };
  var ParsleyUI = {};
  var diffResults = function diffResults(newResult, oldResult, deep) {
    var added = [];
    var kept = [];
    for (var i = 0; i < newResult.length; i++) {
      var found = false;
      for (var j = 0; j < oldResult.length; j++)
        if (newResult[i].assert.name === oldResult[j].assert.name) {
          found = true;
          break;
        }
      if (found) kept.push(newResult[i]);
      else added.push(newResult[i]);
    }
    return {
      kept: kept,
      added: added,
      removed: !deep ? diffResults(oldResult, newResult, true).added : [],
    };
  };
  ParsleyUI.Form = {
    _actualizeTriggers: function _actualizeTriggers() {
      var _this = this;
      this.$element.on("submit.Parsley", function (evt) {
        _this.onSubmitValidate(evt);
      });
      this.$element.on(
        "click.Parsley",
        'input[type="submit"], button[type="submit"]',
        function (evt) {
          _this.onSubmitButton(evt);
        }
      );
      if (false === this.options.uiEnabled) return;
      this.$element.attr("novalidate", "");
    },
    focus: function focus() {
      this._focusedField = null;
      if (true === this.validationResult || "none" === this.options.focus)
        return null;
      for (var i = 0; i < this.fields.length; i++) {
        var field = this.fields[i];
        if (
          true !== field.validationResult &&
          field.validationResult.length > 0 &&
          "undefined" === typeof field.options.noFocus
        ) {
          this._focusedField = field.$element;
          if ("first" === this.options.focus) break;
        }
      }
      if (null === this._focusedField) return null;
      return this._focusedField.focus();
    },
    _destroyUI: function _destroyUI() {
      this.$element.off(".Parsley");
    },
  };
  ParsleyUI.Field = {
    _reflowUI: function _reflowUI() {
      this._buildUI();
      if (!this._ui) return;
      var diff = diffResults(
        this.validationResult,
        this._ui.lastValidationResult
      );
      this._ui.lastValidationResult = this.validationResult;
      this._manageStatusClass();
      this._manageErrorsMessages(diff);
      this._actualizeTriggers();
      if ((diff.kept.length || diff.added.length) && !this._failedOnce) {
        this._failedOnce = true;
        this._actualizeTriggers();
      }
    },
    getErrorsMessages: function getErrorsMessages() {
      if (true === this.validationResult) return [];
      var messages = [];
      for (var i = 0; i < this.validationResult.length; i++)
        messages.push(
          this.validationResult[i].errorMessage ||
            this._getErrorMessage(this.validationResult[i].assert)
        );
      return messages;
    },
    addError: function addError(name) {
      var _ref2 =
        arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var message = _ref2.message;
      var assert = _ref2.assert;
      var _ref2$updateClass = _ref2.updateClass;
      var updateClass =
        _ref2$updateClass === undefined ? true : _ref2$updateClass;
      this._buildUI();
      this._addError(name, { message: message, assert: assert });
      if (updateClass) this._errorClass();
    },
    updateError: function updateError(name) {
      var _ref3 =
        arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var message = _ref3.message;
      var assert = _ref3.assert;
      var _ref3$updateClass = _ref3.updateClass;
      var updateClass =
        _ref3$updateClass === undefined ? true : _ref3$updateClass;
      this._buildUI();
      this._updateError(name, { message: message, assert: assert });
      if (updateClass) this._errorClass();
    },
    removeError: function removeError(name) {
      var _ref4 =
        arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var _ref4$updateClass = _ref4.updateClass;
      var updateClass =
        _ref4$updateClass === undefined ? true : _ref4$updateClass;
      this._buildUI();
      this._removeError(name);
      if (updateClass) this._manageStatusClass();
    },
    _manageStatusClass: function _manageStatusClass() {
      if (
        this.hasConstraints() &&
        this.needsValidation() &&
        true === this.validationResult
      )
        this._successClass();
      else if (this.validationResult.length > 0) this._errorClass();
      else this._resetClass();
    },
    _manageErrorsMessages: function _manageErrorsMessages(diff) {
      if ("undefined" !== typeof this.options.errorsMessagesDisabled) return;
      if ("undefined" !== typeof this.options.errorMessage) {
        if (diff.added.length || diff.kept.length) {
          this._insertErrorWrapper();
          if (
            0 ===
            this._ui.$errorsWrapper.find(".parsley-custom-error-message").length
          )
            this._ui.$errorsWrapper.append(
              $(this.options.errorTemplate).addClass(
                "parsley-custom-error-message"
              )
            );
          return this._ui.$errorsWrapper
            .addClass("filled")
            .find(".parsley-custom-error-message")
            .html(this.options.errorMessage);
        }
        return this._ui.$errorsWrapper
          .removeClass("filled")
          .find(".parsley-custom-error-message")
          .remove();
      }
      for (var i = 0; i < diff.removed.length; i++)
        this._removeError(diff.removed[i].assert.name);
      for (i = 0; i < diff.added.length; i++)
        this._addError(diff.added[i].assert.name, {
          message: diff.added[i].errorMessage,
          assert: diff.added[i].assert,
        });
      for (i = 0; i < diff.kept.length; i++)
        this._updateError(diff.kept[i].assert.name, {
          message: diff.kept[i].errorMessage,
          assert: diff.kept[i].assert,
        });
    },
    _addError: function _addError(name, _ref5) {
      var message = _ref5.message;
      var assert = _ref5.assert;
      this._insertErrorWrapper();
      this._ui.$errorsWrapper.addClass("filled").append(
        $(this.options.errorTemplate)
          .attr("data-parsley-field-name", name)
          .html(message || this._getErrorMessage(assert))
      );
    },
    _updateError: function _updateError(name, _ref6) {
      var message = _ref6.message;
      var assert = _ref6.assert;
      this._ui.$errorsWrapper
        .addClass("filled")
        .find('[data-parsley-field-name="' + name + '"]')
        .html(message || this._getErrorMessage(assert));
    },
    _removeError: function _removeError(name) {
      this._ui.$errorsWrapper
        .removeClass("filled")
        .find('[data-parsley-field-name="' + name + '"]')
        .remove();
    },
    _getErrorMessage: function _getErrorMessage(constraint) {
      var customConstraintErrorMessage = constraint.name + "Message";
      if ("undefined" !== typeof this.options[customConstraintErrorMessage])
        return window.Parsley.formatMessage(
          this.options[customConstraintErrorMessage],
          constraint.requirements
        );
      return window.Parsley.getErrorMessage(constraint);
    },
    _buildUI: function _buildUI() {
      if (this._ui || false === this.options.uiEnabled) return;
      var _ui = {};
      this.$element.attr(this.options.namespace + "id", this.__id__);
      _ui.$errorClassHandler = this._manageClassHandler();
      _ui.errorsWrapperId =
        "parsley-id-" +
        (this.options.multiple
          ? "multiple-" + this.options.multiple
          : this.__id__);
      _ui.$errorsWrapper = $(this.options.errorsWrapper).attr(
        "id",
        _ui.errorsWrapperId
      );
      _ui.lastValidationResult = [];
      _ui.validationInformationVisible = false;
      this._ui = _ui;
    },
    _manageClassHandler: function _manageClassHandler() {
      if (
        "string" === typeof this.options.classHandler &&
        $(this.options.classHandler).length
      )
        return $(this.options.classHandler);
      var $handler = this.options.classHandler.call(this, this);
      if ("undefined" !== typeof $handler && $handler.length) return $handler;
      if (!this.options.multiple || this.$element.is("select"))
        return this.$element;
      return this.$element.parent();
    },
    _insertErrorWrapper: function _insertErrorWrapper() {
      var $errorsContainer;
      if (0 !== this._ui.$errorsWrapper.parent().length)
        return this._ui.$errorsWrapper.parent();
      if ("string" === typeof this.options.errorsContainer) {
        if ($(this.options.errorsContainer).length)
          return $(this.options.errorsContainer).append(
            this._ui.$errorsWrapper
          );
        else
          ParsleyUtils__default.warn(
            "The errors container `" +
              this.options.errorsContainer +
              "` does not exist in DOM"
          );
      } else if ("function" === typeof this.options.errorsContainer)
        $errorsContainer = this.options.errorsContainer.call(this, this);
      if ("undefined" !== typeof $errorsContainer && $errorsContainer.length)
        return $errorsContainer.append(this._ui.$errorsWrapper);
      var $from = this.$element;
      if (this.options.multiple) $from = $from.parent();
      return $from.after(this._ui.$errorsWrapper);
    },
    _actualizeTriggers: function _actualizeTriggers() {
      var _this2 = this;
      var $toBind = this._findRelated();
      $toBind.off(".Parsley");
      if (this._failedOnce)
        $toBind.on(
          ParsleyUtils__default.namespaceEvents(
            this.options.triggerAfterFailure,
            "Parsley"
          ),
          function () {
            _this2.validate();
          }
        );
      else {
        $toBind.on(
          ParsleyUtils__default.namespaceEvents(
            this.options.trigger,
            "Parsley"
          ),
          function (event) {
            _this2._eventValidate(event);
          }
        );
      }
    },
    _eventValidate: function _eventValidate(event) {
      if (/key|input/.test(event.type))
        if (
          !(this._ui && this._ui.validationInformationVisible) &&
          this.getValue().length <= this.options.validationThreshold
        )
          return;
      this.validate();
    },
    _resetUI: function _resetUI() {
      this._failedOnce = false;
      this._actualizeTriggers();
      if ("undefined" === typeof this._ui) return;
      this._ui.$errorsWrapper.removeClass("filled").children().remove();
      this._resetClass();
      this._ui.lastValidationResult = [];
      this._ui.validationInformationVisible = false;
    },
    _destroyUI: function _destroyUI() {
      this._resetUI();
      if ("undefined" !== typeof this._ui) this._ui.$errorsWrapper.remove();
      delete this._ui;
    },
    _successClass: function _successClass() {
      this._ui.validationInformationVisible = true;
      this._ui.$errorClassHandler
        .removeClass(this.options.errorClass)
        .addClass(this.options.successClass);
    },
    _errorClass: function _errorClass() {
      this._ui.validationInformationVisible = true;
      this._ui.$errorClassHandler
        .removeClass(this.options.successClass)
        .addClass(this.options.errorClass);
    },
    _resetClass: function _resetClass() {
      this._ui.$errorClassHandler
        .removeClass(this.options.successClass)
        .removeClass(this.options.errorClass);
    },
  };
  var ParsleyForm = function ParsleyForm(element, domOptions, options) {
    this.__class__ = "ParsleyForm";
    this.__id__ = ParsleyUtils__default.generateID();
    this.$element = $(element);
    this.domOptions = domOptions;
    this.options = options;
    this.parent = window.Parsley;
    this.fields = [];
    this.validationResult = null;
  };
  var ParsleyForm__statusMapping = {
    pending: null,
    resolved: true,
    rejected: false,
  };
  ParsleyForm.prototype = {
    onSubmitValidate: function onSubmitValidate(event) {
      var _this3 = this;
      if (true === event.parsley) return;
      var $submitSource =
        this._$submitSource ||
        this.$element
          .find('input[type="submit"], button[type="submit"]')
          .first();
      this._$submitSource = null;
      this.$element
        .find(".parsley-synthetic-submit-button")
        .prop("disabled", true);
      if ($submitSource.is("[formnovalidate]")) return;
      var promise = this.whenValidate({ event: event });
      if ("resolved" === promise.state() && false !== this._trigger("submit")) {
      } else {
        event.stopImmediatePropagation();
        event.preventDefault();
        if ("pending" === promise.state())
          promise.done(function () {
            _this3._submit($submitSource);
          });
      }
    },
    onSubmitButton: function onSubmitButton(event) {
      this._$submitSource = $(event.target);
    },
    _submit: function _submit($submitSource) {
      if (false === this._trigger("submit")) return;
      if ($submitSource) {
        var $synthetic = this.$element
          .find(".parsley-synthetic-submit-button")
          .prop("disabled", false);
        if (0 === $synthetic.length)
          $synthetic = $(
            '<input class="parsley-synthetic-submit-button" type="hidden">'
          ).appendTo(this.$element);
        $synthetic.attr({
          name: $submitSource.attr("name"),
          value: $submitSource.attr("value"),
        });
      }
      this.$element.trigger($.extend($.Event("submit"), { parsley: true }));
    },
    validate: function validate(options) {
      if (arguments.length >= 1 && !$.isPlainObject(options)) {
        ParsleyUtils__default.warnOnce(
          "Calling validate on a parsley form without passing arguments as an object is deprecated."
        );
        var _arguments = _slice.call(arguments);
        var group = _arguments[0];
        var force = _arguments[1];
        var event = _arguments[2];
        options = { group: group, force: force, event: event };
      }
      return ParsleyForm__statusMapping[this.whenValidate(options).state()];
    },
    whenValidate: function whenValidate() {
      var _this4 = this;
      var _ref7 =
        arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var group = _ref7.group;
      var force = _ref7.force;
      var event = _ref7.event;
      this.submitEvent = event;
      if (event) {
        this.submitEvent = $.extend({}, event, {
          preventDefault: function preventDefault() {
            ParsleyUtils__default.warnOnce(
              "Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`"
            );
            _this4.validationResult = false;
          },
        });
      }
      this.validationResult = true;
      this._trigger("validate");
      this._refreshFields();
      var promises = this._withoutReactualizingFormOptions(function () {
        return $.map(_this4.fields, function (field) {
          return field.whenValidate({ force: force, group: group });
        });
      });
      var promiseBasedOnValidationResult =
        function promiseBasedOnValidationResult() {
          var r = $.Deferred();
          if (false === _this4.validationResult) r.reject();
          return r.resolve().promise();
        };
      return $.when
        .apply($, _toConsumableArray(promises))
        .done(function () {
          _this4._trigger("success");
        })
        .fail(function () {
          _this4.validationResult = false;
          _this4.focus();
          _this4._trigger("error");
        })
        .always(function () {
          _this4._trigger("validated");
        })
        .pipe(promiseBasedOnValidationResult, promiseBasedOnValidationResult);
    },
    isValid: function isValid(options) {
      if (arguments.length >= 1 && !$.isPlainObject(options)) {
        ParsleyUtils__default.warnOnce(
          "Calling isValid on a parsley form without passing arguments as an object is deprecated."
        );
        var _arguments2 = _slice.call(arguments);
        var group = _arguments2[0];
        var force = _arguments2[1];
        options = { group: group, force: force };
      }
      return ParsleyForm__statusMapping[this.whenValid(options).state()];
    },
    whenValid: function whenValid() {
      var _this5 = this;
      var _ref8 =
        arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var group = _ref8.group;
      var force = _ref8.force;
      this._refreshFields();
      var promises = this._withoutReactualizingFormOptions(function () {
        return $.map(_this5.fields, function (field) {
          return field.whenValid({ group: group, force: force });
        });
      });
      return $.when.apply($, _toConsumableArray(promises));
    },
    _refreshFields: function _refreshFields() {
      return this.actualizeOptions()._bindFields();
    },
    _bindFields: function _bindFields() {
      var _this6 = this;
      var oldFields = this.fields;
      this.fields = [];
      this.fieldsMappedById = {};
      this._withoutReactualizingFormOptions(function () {
        _this6.$element
          .find(_this6.options.inputs)
          .not(_this6.options.excluded)
          .each(function (_, element) {
            var fieldInstance = new window.Parsley.Factory(element, {}, _this6);
            if (
              ("ParsleyField" === fieldInstance.__class__ ||
                "ParsleyFieldMultiple" === fieldInstance.__class__) &&
              true !== fieldInstance.options.excluded
            )
              if (
                "undefined" ===
                typeof _this6.fieldsMappedById[
                  fieldInstance.__class__ + "-" + fieldInstance.__id__
                ]
              ) {
                _this6.fieldsMappedById[
                  fieldInstance.__class__ + "-" + fieldInstance.__id__
                ] = fieldInstance;
                _this6.fields.push(fieldInstance);
              }
          });
        $(oldFields)
          .not(_this6.fields)
          .each(function (_, field) {
            field._trigger("reset");
          });
      });
      return this;
    },
    _withoutReactualizingFormOptions: function _withoutReactualizingFormOptions(
      fn
    ) {
      var oldActualizeOptions = this.actualizeOptions;
      this.actualizeOptions = function () {
        return this;
      };
      var result = fn();
      this.actualizeOptions = oldActualizeOptions;
      return result;
    },
    _trigger: function _trigger(eventName) {
      return this.trigger("form:" + eventName);
    },
  };
  var ConstraintFactory = function ConstraintFactory(
    parsleyField,
    name,
    requirements,
    priority,
    isDomConstraint
  ) {
    if (!/ParsleyField/.test(parsleyField.__class__))
      throw new Error("ParsleyField or ParsleyFieldMultiple instance expected");
    var validatorSpec = window.Parsley._validatorRegistry.validators[name];
    var validator = new ParsleyValidator(validatorSpec);
    $.extend(this, {
      validator: validator,
      name: name,
      requirements: requirements,
      priority:
        priority ||
        parsleyField.options[name + "Priority"] ||
        validator.priority,
      isDomConstraint: true === isDomConstraint,
    });
    this._parseRequirements(parsleyField.options);
  };
  var capitalize = function capitalize(str) {
    var cap = str[0].toUpperCase();
    return cap + str.slice(1);
  };
  ConstraintFactory.prototype = {
    validate: function validate(value, instance) {
      var args = this.requirementList.slice(0);
      args.unshift(value);
      args.push(instance);
      return this.validator.validate.apply(this.validator, args);
    },
    _parseRequirements: function _parseRequirements(options) {
      var _this7 = this;
      this.requirementList = this.validator.parseRequirements(
        this.requirements,
        function (key) {
          return options[_this7.name + capitalize(key)];
        }
      );
    },
  };
  var ParsleyField = function ParsleyField(
    field,
    domOptions,
    options,
    parsleyFormInstance
  ) {
    this.__class__ = "ParsleyField";
    this.__id__ = ParsleyUtils__default.generateID();
    this.$element = $(field);
    if ("undefined" !== typeof parsleyFormInstance) {
      this.parent = parsleyFormInstance;
    }
    this.options = options;
    this.domOptions = domOptions;
    this.constraints = [];
    this.constraintsByName = {};
    this.validationResult = [];
    this._bindConstraints();
  };
  var parsley_field__statusMapping = {
    pending: null,
    resolved: true,
    rejected: false,
  };
  ParsleyField.prototype = {
    validate: function validate(options) {
      if (arguments.length >= 1 && !$.isPlainObject(options)) {
        ParsleyUtils__default.warnOnce(
          "Calling validate on a parsley field without passing arguments as an object is deprecated."
        );
        options = { options: options };
      }
      var promise = this.whenValidate(options);
      if (!promise) return true;
      switch (promise.state()) {
        case "pending":
          return null;
        case "resolved":
          return true;
        case "rejected":
          return this.validationResult;
      }
    },
    whenValidate: function whenValidate() {
      var _this8 = this;
      var _ref9 =
        arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var force = _ref9.force;
      var group = _ref9.group;
      this.refreshConstraints();
      if (group && !this._isInGroup(group)) return;
      this.value = this.getValue();
      this._trigger("validate");
      return this.whenValid({
        force: force,
        value: this.value,
        _refreshed: true,
      })
        .always(function () {
          _this8._reflowUI();
        })
        .done(function () {
          _this8._trigger("success");
        })
        .fail(function () {
          _this8._trigger("error");
        })
        .always(function () {
          _this8._trigger("validated");
        });
    },
    hasConstraints: function hasConstraints() {
      return 0 !== this.constraints.length;
    },
    needsValidation: function needsValidation(value) {
      if ("undefined" === typeof value) value = this.getValue();
      if (
        !value.length &&
        !this._isRequired() &&
        "undefined" === typeof this.options.validateIfEmpty
      )
        return false;
      return true;
    },
    _isInGroup: function _isInGroup(group) {
      if ($.isArray(this.options.group))
        return -1 !== $.inArray(group, this.options.group);
      return this.options.group === group;
    },
    isValid: function isValid(options) {
      if (arguments.length >= 1 && !$.isPlainObject(options)) {
        ParsleyUtils__default.warnOnce(
          "Calling isValid on a parsley field without passing arguments as an object is deprecated."
        );
        var _arguments3 = _slice.call(arguments);
        var force = _arguments3[0];
        var value = _arguments3[1];
        options = { force: force, value: value };
      }
      var promise = this.whenValid(options);
      if (!promise) return true;
      return parsley_field__statusMapping[promise.state()];
    },
    whenValid: function whenValid() {
      var _this9 = this;
      var _ref10 =
        arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var _ref10$force = _ref10.force;
      var force = _ref10$force === undefined ? false : _ref10$force;
      var value = _ref10.value;
      var group = _ref10.group;
      var _refreshed = _ref10._refreshed;
      if (!_refreshed) this.refreshConstraints();
      if (group && !this._isInGroup(group)) return;
      this.validationResult = true;
      if (!this.hasConstraints()) return $.when();
      if ("undefined" === typeof value || null === value)
        value = this.getValue();
      if (!this.needsValidation(value) && true !== force) return $.when();
      var groupedConstraints = this._getGroupedConstraints();
      var promises = [];
      $.each(groupedConstraints, function (_, constraints) {
        var promise = $.when.apply(
          $,
          _toConsumableArray(
            $.map(constraints, function (constraint) {
              return _this9._validateConstraint(value, constraint);
            })
          )
        );
        promises.push(promise);
        if (promise.state() === "rejected") return false;
      });
      return $.when.apply($, promises);
    },
    _validateConstraint: function _validateConstraint(value, constraint) {
      var _this10 = this;
      var result = constraint.validate(value, this);
      if (false === result) result = $.Deferred().reject();
      return $.when(result).fail(function (errorMessage) {
        if (true === _this10.validationResult) _this10.validationResult = [];
        _this10.validationResult.push({
          assert: constraint,
          errorMessage: "string" === typeof errorMessage && errorMessage,
        });
      });
    },
    getValue: function getValue() {
      var value;
      if ("function" === typeof this.options.value)
        value = this.options.value(this);
      else if ("undefined" !== typeof this.options.value)
        value = this.options.value;
      else value = this.$element.val();
      if ("undefined" === typeof value || null === value) return "";
      return this._handleWhitespace(value);
    },
    refreshConstraints: function refreshConstraints() {
      return this.actualizeOptions()._bindConstraints();
    },
    addConstraint: function addConstraint(
      name,
      requirements,
      priority,
      isDomConstraint
    ) {
      if (window.Parsley._validatorRegistry.validators[name]) {
        var constraint = new ConstraintFactory(
          this,
          name,
          requirements,
          priority,
          isDomConstraint
        );
        if ("undefined" !== this.constraintsByName[constraint.name])
          this.removeConstraint(constraint.name);
        this.constraints.push(constraint);
        this.constraintsByName[constraint.name] = constraint;
      }
      return this;
    },
    removeConstraint: function removeConstraint(name) {
      for (var i = 0; i < this.constraints.length; i++)
        if (name === this.constraints[i].name) {
          this.constraints.splice(i, 1);
          break;
        }
      delete this.constraintsByName[name];
      return this;
    },
    updateConstraint: function updateConstraint(name, parameters, priority) {
      return this.removeConstraint(name).addConstraint(
        name,
        parameters,
        priority
      );
    },
    _bindConstraints: function _bindConstraints() {
      var constraints = [];
      var constraintsByName = {};
      for (var i = 0; i < this.constraints.length; i++)
        if (false === this.constraints[i].isDomConstraint) {
          constraints.push(this.constraints[i]);
          constraintsByName[this.constraints[i].name] = this.constraints[i];
        }
      this.constraints = constraints;
      this.constraintsByName = constraintsByName;
      for (var name in this.options)
        this.addConstraint(name, this.options[name], undefined, true);
      return this._bindHtml5Constraints();
    },
    _bindHtml5Constraints: function _bindHtml5Constraints() {
      if (this.$element.hasClass("required") || this.$element.attr("required"))
        this.addConstraint("required", true, undefined, true);
      if ("string" === typeof this.$element.attr("pattern"))
        this.addConstraint(
          "pattern",
          this.$element.attr("pattern"),
          undefined,
          true
        );
      if (
        "undefined" !== typeof this.$element.attr("min") &&
        "undefined" !== typeof this.$element.attr("max")
      )
        this.addConstraint(
          "range",
          [this.$element.attr("min"), this.$element.attr("max")],
          undefined,
          true
        );
      else if ("undefined" !== typeof this.$element.attr("min"))
        this.addConstraint("min", this.$element.attr("min"), undefined, true);
      else if ("undefined" !== typeof this.$element.attr("max"))
        this.addConstraint("max", this.$element.attr("max"), undefined, true);
      if (
        "undefined" !== typeof this.$element.attr("minlength") &&
        "undefined" !== typeof this.$element.attr("maxlength")
      )
        this.addConstraint(
          "length",
          [this.$element.attr("minlength"), this.$element.attr("maxlength")],
          undefined,
          true
        );
      else if ("undefined" !== typeof this.$element.attr("minlength"))
        this.addConstraint(
          "minlength",
          this.$element.attr("minlength"),
          undefined,
          true
        );
      else if ("undefined" !== typeof this.$element.attr("maxlength"))
        this.addConstraint(
          "maxlength",
          this.$element.attr("maxlength"),
          undefined,
          true
        );
      var type = this.$element.attr("type");
      if ("undefined" === typeof type) return this;
      if ("number" === type) {
        return this.addConstraint(
          "type",
          [
            "number",
            {
              step: this.$element.attr("step"),
              base: this.$element.attr("min") || this.$element.attr("value"),
            },
          ],
          undefined,
          true
        );
      } else if (/^(email|url|range)$/i.test(type)) {
        return this.addConstraint("type", type, undefined, true);
      }
      return this;
    },
    _isRequired: function _isRequired() {
      if ("undefined" === typeof this.constraintsByName.required) return false;
      return false !== this.constraintsByName.required.requirements;
    },
    _trigger: function _trigger(eventName) {
      return this.trigger("field:" + eventName);
    },
    _handleWhitespace: function _handleWhitespace(value) {
      if (true === this.options.trimValue)
        ParsleyUtils__default.warnOnce(
          'data-parsley-trim-value="true" is deprecated, please use data-parsley-whitespace="trim"'
        );
      if ("squish" === this.options.whitespace)
        value = value.replace(/\s{2,}/g, " ");
      if (
        "trim" === this.options.whitespace ||
        "squish" === this.options.whitespace ||
        true === this.options.trimValue
      )
        value = ParsleyUtils__default.trimString(value);
      return value;
    },
    _getGroupedConstraints: function _getGroupedConstraints() {
      if (false === this.options.priorityEnabled) return [this.constraints];
      var groupedConstraints = [];
      var index = {};
      for (var i = 0; i < this.constraints.length; i++) {
        var p = this.constraints[i].priority;
        if (!index[p]) groupedConstraints.push((index[p] = []));
        index[p].push(this.constraints[i]);
      }
      groupedConstraints.sort(function (a, b) {
        return b[0].priority - a[0].priority;
      });
      return groupedConstraints;
    },
  };
  var parsley_field = ParsleyField;
  var ParsleyMultiple = function ParsleyMultiple() {
    this.__class__ = "ParsleyFieldMultiple";
  };
  ParsleyMultiple.prototype = {
    addElement: function addElement($element) {
      this.$elements.push($element);
      return this;
    },
    refreshConstraints: function refreshConstraints() {
      var fieldConstraints;
      this.constraints = [];
      if (this.$element.is("select")) {
        this.actualizeOptions()._bindConstraints();
        return this;
      }
      for (var i = 0; i < this.$elements.length; i++) {
        if (!$("html").has(this.$elements[i]).length) {
          this.$elements.splice(i, 1);
          continue;
        }
        fieldConstraints = this.$elements[i]
          .data("ParsleyFieldMultiple")
          .refreshConstraints().constraints;
        for (var j = 0; j < fieldConstraints.length; j++)
          this.addConstraint(
            fieldConstraints[j].name,
            fieldConstraints[j].requirements,
            fieldConstraints[j].priority,
            fieldConstraints[j].isDomConstraint
          );
      }
      return this;
    },
    getValue: function getValue() {
      if ("function" === typeof this.options.value)
        value = this.options.value(this);
      else if ("undefined" !== typeof this.options.value)
        return this.options.value;
      if (this.$element.is("input[type=radio]"))
        return this._findRelated().filter(":checked").val() || "";
      if (this.$element.is("input[type=checkbox]")) {
        var values = [];
        this._findRelated()
          .filter(":checked")
          .each(function () {
            values.push($(this).val());
          });
        return values;
      }
      if (this.$element.is("select") && null === this.$element.val()) return [];
      return this.$element.val();
    },
    _init: function _init() {
      this.$elements = [this.$element];
      return this;
    },
  };
  var ParsleyFactory = function ParsleyFactory(
    element,
    options,
    parsleyFormInstance
  ) {
    this.$element = $(element);
    var savedparsleyFormInstance = this.$element.data("Parsley");
    if (savedparsleyFormInstance) {
      if (
        "undefined" !== typeof parsleyFormInstance &&
        savedparsleyFormInstance.parent === window.Parsley
      ) {
        savedparsleyFormInstance.parent = parsleyFormInstance;
        savedparsleyFormInstance._resetOptions(
          savedparsleyFormInstance.options
        );
      }
      return savedparsleyFormInstance;
    }
    if (!this.$element.length)
      throw new Error("You must bind Parsley on an existing element.");
    if (
      "undefined" !== typeof parsleyFormInstance &&
      "ParsleyForm" !== parsleyFormInstance.__class__
    )
      throw new Error("Parent instance must be a ParsleyForm instance");
    this.parent = parsleyFormInstance || window.Parsley;
    return this.init(options);
  };
  ParsleyFactory.prototype = {
    init: function init(options) {
      this.__class__ = "Parsley";
      this.__version__ = "2.3.5";
      this.__id__ = ParsleyUtils__default.generateID();
      this._resetOptions(options);
      if (
        this.$element.is("form") ||
        (ParsleyUtils__default.checkAttr(
          this.$element,
          this.options.namespace,
          "validate"
        ) &&
          !this.$element.is(this.options.inputs))
      )
        return this.bind("parsleyForm");
      return this.isMultiple()
        ? this.handleMultiple()
        : this.bind("parsleyField");
    },
    isMultiple: function isMultiple() {
      return (
        this.$element.is("input[type=radio], input[type=checkbox]") ||
        (this.$element.is("select") &&
          "undefined" !== typeof this.$element.attr("multiple"))
      );
    },
    handleMultiple: function handleMultiple() {
      var _this11 = this;
      var name;
      var multiple;
      var parsleyMultipleInstance;
      if (this.options.multiple);
      else if (
        "undefined" !== typeof this.$element.attr("name") &&
        this.$element.attr("name").length
      )
        this.options.multiple = name = this.$element.attr("name");
      else if (
        "undefined" !== typeof this.$element.attr("id") &&
        this.$element.attr("id").length
      )
        this.options.multiple = this.$element.attr("id");
      if (
        this.$element.is("select") &&
        "undefined" !== typeof this.$element.attr("multiple")
      ) {
        this.options.multiple = this.options.multiple || this.__id__;
        return this.bind("parsleyFieldMultiple");
      } else if (!this.options.multiple) {
        ParsleyUtils__default.warn(
          "To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.",
          this.$element
        );
        return this;
      }
      this.options.multiple = this.options.multiple.replace(
        /(:|\.|\[|\]|\{|\}|\$)/g,
        ""
      );
      if ("undefined" !== typeof name) {
        $('input[name="' + name + '"]').each(function (i, input) {
          if ($(input).is("input[type=radio], input[type=checkbox]"))
            $(input).attr(
              _this11.options.namespace + "multiple",
              _this11.options.multiple
            );
        });
      }
      var $previouslyRelated = this._findRelated();
      for (var i = 0; i < $previouslyRelated.length; i++) {
        parsleyMultipleInstance = $($previouslyRelated.get(i)).data("Parsley");
        if ("undefined" !== typeof parsleyMultipleInstance) {
          if (!this.$element.data("ParsleyFieldMultiple")) {
            parsleyMultipleInstance.addElement(this.$element);
          }
          break;
        }
      }
      this.bind("parsleyField", true);
      return parsleyMultipleInstance || this.bind("parsleyFieldMultiple");
    },
    bind: function bind(type, doNotStore) {
      var parsleyInstance;
      switch (type) {
        case "parsleyForm":
          parsleyInstance = $.extend(
            new ParsleyForm(this.$element, this.domOptions, this.options),
            window.ParsleyExtend
          )._bindFields();
          break;
        case "parsleyField":
          parsleyInstance = $.extend(
            new parsley_field(
              this.$element,
              this.domOptions,
              this.options,
              this.parent
            ),
            window.ParsleyExtend
          );
          break;
        case "parsleyFieldMultiple":
          parsleyInstance = $.extend(
            new parsley_field(
              this.$element,
              this.domOptions,
              this.options,
              this.parent
            ),
            new ParsleyMultiple(),
            window.ParsleyExtend
          )._init();
          break;
        default:
          throw new Error(type + "is not a supported Parsley type");
      }
      if (this.options.multiple)
        ParsleyUtils__default.setAttr(
          this.$element,
          this.options.namespace,
          "multiple",
          this.options.multiple
        );
      if ("undefined" !== typeof doNotStore) {
        this.$element.data("ParsleyFieldMultiple", parsleyInstance);
        return parsleyInstance;
      }
      this.$element.data("Parsley", parsleyInstance);
      parsleyInstance._actualizeTriggers();
      parsleyInstance._trigger("init");
      return parsleyInstance;
    },
  };
  var vernums = $.fn.jquery.split(".");
  if (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {
    throw "The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.";
  }
  if (!vernums.forEach) {
    ParsleyUtils__default.warn(
      "Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim"
    );
  }
  var Parsley = $.extend(new ParsleyAbstract(), {
    $element: $(document),
    actualizeOptions: null,
    _resetOptions: null,
    Factory: ParsleyFactory,
    version: "2.3.5",
  });
  $.extend(parsley_field.prototype, ParsleyUI.Field, ParsleyAbstract.prototype);
  $.extend(ParsleyForm.prototype, ParsleyUI.Form, ParsleyAbstract.prototype);
  $.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);
  $.fn.parsley = $.fn.psly = function (options) {
    if (this.length > 1) {
      var instances = [];
      this.each(function () {
        instances.push($(this).parsley(options));
      });
      return instances;
    }
    if (!$(this).length) {
      ParsleyUtils__default.warn(
        "You must bind Parsley on an existing element."
      );
      return;
    }
    return new ParsleyFactory(this, options);
  };
  if ("undefined" === typeof window.ParsleyExtend) window.ParsleyExtend = {};
  Parsley.options = $.extend(
    ParsleyUtils__default.objectCreate(ParsleyDefaults),
    window.ParsleyConfig
  );
  window.ParsleyConfig = Parsley.options;
  window.Parsley = window.psly = Parsley;
  window.ParsleyUtils = ParsleyUtils__default;
  var registry = (window.Parsley._validatorRegistry =
    new ParsleyValidatorRegistry(
      window.ParsleyConfig.validators,
      window.ParsleyConfig.i18n
    ));
  window.ParsleyValidator = {};
  $.each(
    "setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator".split(
      " "
    ),
    function (i, method) {
      window.Parsley[method] = $.proxy(registry, method);
      window.ParsleyValidator[method] = function () {
        var _window$Parsley;
        ParsleyUtils__default.warnOnce(
          "Accessing the method '" +
            method +
            "' through ParsleyValidator is deprecated. Simply call 'window.Parsley." +
            method +
            "(...)'"
        );
        return (_window$Parsley = window.Parsley)[method].apply(
          _window$Parsley,
          arguments
        );
      };
    }
  );
  window.Parsley.UI = ParsleyUI;
  window.ParsleyUI = {
    removeError: function removeError(instance, name, doNotUpdateClass) {
      var updateClass = true !== doNotUpdateClass;
      ParsleyUtils__default.warnOnce(
        "Accessing ParsleyUI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method."
      );
      return instance.removeError(name, { updateClass: updateClass });
    },
    getErrorsMessages: function getErrorsMessages(instance) {
      ParsleyUtils__default.warnOnce(
        "Accessing ParsleyUI is deprecated. Call 'getErrorsMessages' on the instance directly."
      );
      return instance.getErrorsMessages();
    },
  };
  $.each("addError updateError".split(" "), function (i, method) {
    window.ParsleyUI[method] = function (
      instance,
      name,
      message,
      assert,
      doNotUpdateClass
    ) {
      var updateClass = true !== doNotUpdateClass;
      ParsleyUtils__default.warnOnce(
        "Accessing ParsleyUI is deprecated. Call '" +
          method +
          "' on the instance directly. Please comment in issue 1073 as to your need to call this method."
      );
      return instance[method](name, {
        message: message,
        assert: assert,
        updateClass: updateClass,
      });
    };
  });
  if (/firefox/i.test(navigator.userAgent)) {
    $(document).on("change", "select", function (evt) {
      $(evt.target).trigger("input");
    });
  }
  if (false !== window.ParsleyConfig.autoBind) {
    $(function () {
      if ($("[data-parsley-validate]").length)
        $("[data-parsley-validate]").parsley();
    });
  }
  var o = $({});
  var deprecated = function deprecated() {
    ParsleyUtils__default.warnOnce(
      "Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley"
    );
  };
  function adapt(fn, context) {
    if (!fn.parsleyAdaptedCallback) {
      fn.parsleyAdaptedCallback = function () {
        var args = Array.prototype.slice.call(arguments, 0);
        args.unshift(this);
        fn.apply(context || o, args);
      };
    }
    return fn.parsleyAdaptedCallback;
  }
  var eventPrefix = "parsley:";
  function eventName(name) {
    if (name.lastIndexOf(eventPrefix, 0) === 0)
      return name.substr(eventPrefix.length);
    return name;
  }
  $.listen = function (name, callback) {
    var context;
    deprecated();
    if (
      "object" === typeof arguments[1] &&
      "function" === typeof arguments[2]
    ) {
      context = arguments[1];
      callback = arguments[2];
    }
    if ("function" !== typeof callback) throw new Error("Wrong parameters");
    window.Parsley.on(eventName(name), adapt(callback, context));
  };
  $.listenTo = function (instance, name, fn) {
    deprecated();
    if (
      !(instance instanceof parsley_field) &&
      !(instance instanceof ParsleyForm)
    )
      throw new Error("Must give Parsley instance");
    if ("string" !== typeof name || "function" !== typeof fn)
      throw new Error("Wrong parameters");
    instance.on(eventName(name), adapt(fn));
  };
  $.unsubscribe = function (name, fn) {
    deprecated();
    if ("string" !== typeof name || "function" !== typeof fn)
      throw new Error("Wrong arguments");
    window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);
  };
  $.unsubscribeTo = function (instance, name) {
    deprecated();
    if (
      !(instance instanceof parsley_field) &&
      !(instance instanceof ParsleyForm)
    )
      throw new Error("Must give Parsley instance");
    instance.off(eventName(name));
  };
  $.unsubscribeAll = function (name) {
    deprecated();
    window.Parsley.off(eventName(name));
    $("form,input,textarea,select").each(function () {
      var instance = $(this).data("Parsley");
      if (instance) {
        instance.off(eventName(name));
      }
    });
  };
  $.emit = function (name, instance) {
    var _instance;
    deprecated();
    var instanceGiven =
      instance instanceof parsley_field || instance instanceof ParsleyForm;
    var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);
    args.unshift(eventName(name));
    if (!instanceGiven) {
      instance = window.Parsley;
    }
    (_instance = instance).trigger.apply(_instance, _toConsumableArray(args));
  };
  var pubsub = {};
  $.extend(true, Parsley, {
    asyncValidators: {
      default: {
        fn: function fn(xhr) {
          return xhr.status >= 200 && xhr.status < 300;
        },
        url: false,
      },
      reverse: {
        fn: function fn(xhr) {
          return xhr.status < 200 || xhr.status >= 300;
        },
        url: false,
      },
    },
    addAsyncValidator: function addAsyncValidator(name, fn, url, options) {
      Parsley.asyncValidators[name] = {
        fn: fn,
        url: url || false,
        options: options || {},
      };
      return this;
    },
  });
  Parsley.addValidator("remote", {
    requirementType: {
      "": "string",
      validator: "string",
      reverse: "boolean",
      options: "object",
    },
    validateString: function validateString(value, url, options, instance) {
      var data = {};
      var ajaxOptions;
      var csr;
      var validator =
        options.validator || (true === options.reverse ? "reverse" : "default");
      if ("undefined" === typeof Parsley.asyncValidators[validator])
        throw new Error(
          "Calling an undefined async validator: `" + validator + "`"
        );
      url = Parsley.asyncValidators[validator].url || url;
      if (url.indexOf("{value}") > -1) {
        url = url.replace("{value}", encodeURIComponent(value));
      } else {
        data[instance.$element.attr("name") || instance.$element.attr("id")] =
          value;
      }
      var remoteOptions = $.extend(
        true,
        options.options || {},
        Parsley.asyncValidators[validator].options
      );
      ajaxOptions = $.extend(
        true,
        {},
        { url: url, data: data, type: "GET" },
        remoteOptions
      );
      instance.trigger("field:ajaxoptions", instance, ajaxOptions);
      csr = $.param(ajaxOptions);
      if ("undefined" === typeof Parsley._remoteCache)
        Parsley._remoteCache = {};
      var xhr = (Parsley._remoteCache[csr] =
        Parsley._remoteCache[csr] || $.ajax(ajaxOptions));
      var handleXhr = function handleXhr() {
        var result = Parsley.asyncValidators[validator].fn.call(
          instance,
          xhr,
          url,
          options
        );
        if (!result) result = $.Deferred().reject();
        return $.when(result);
      };
      return xhr.then(handleXhr, handleXhr);
    },
    priority: -1,
  });
  Parsley.on("form:submit", function () {
    Parsley._remoteCache = {};
  });
  window.ParsleyExtend.addAsyncValidator = function () {
    ParsleyUtils.warnOnce(
      "Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`"
    );
    return Parsley.addAsyncValidator.apply(Parsley, arguments);
  };
  Parsley.addMessages("en", {
    defaultMessage: "This value seems to be invalid.",
    type: {
      email: "This value should be a valid email.",
      url: "This value should be a valid url.",
      number: "This value should be a valid number.",
      integer: "This value should be a valid integer.",
      digits: "This value should be digits.",
      alphanum: "This value should be alphanumeric.",
    },
    notblank: "This value should not be blank.",
    required: "This value is required.",
    pattern: "This value seems to be invalid.",
    min: "This value should be greater than or equal to %s.",
    max: "This value should be lower than or equal to %s.",
    range: "This value should be between %s and %s.",
    minlength: "This value is too short. It should have %s characters or more.",
    maxlength: "This value is too long. It should have %s characters or fewer.",
    length:
      "This value length is invalid. It should be between %s and %s characters long.",
    mincheck: "You must select at least %s choices.",
    maxcheck: "You must select %s choices or fewer.",
    check: "You must select between %s and %s choices.",
    equalto: "This value should be the same.",
  });
  Parsley.setLocale("en");
  var parsley = Parsley;
  return parsley;
});
Parsley.addMessages("ru", {
  defaultMessage: "ÐÐµÐºÐ¾Ñ€Ñ€ÐµÐºÑ‚Ð½Ð¾Ðµ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ.",
  type: {
    email:
      "Ð’Ð²ÐµÐ´Ð¸Ñ‚Ðµ ÐºÐ¾Ñ€Ñ€ÐµÐºÑ‚Ð½Ñ‹Ð¹ Ð°Ð´Ñ€ÐµÑ ÑÐ»ÐµÐºÑ‚Ñ€Ð¾Ð½Ð½Ð¾Ð¹ Ð¿Ð¾Ñ‡Ñ‚Ñ‹.",
    url: "Ð’Ð²ÐµÐ´Ð¸Ñ‚Ðµ URL Ð°Ð´Ñ€ÐµÑ.",
    number: "Ð’Ð²ÐµÐ´Ð¸Ñ‚Ðµ Ñ‡Ð¸ÑÐ»Ð¾.",
    integer: "Ð’Ð²ÐµÐ´Ð¸Ñ‚Ðµ Ñ†ÐµÐ»Ð¾Ðµ Ñ‡Ð¸ÑÐ»Ð¾.",
    digits: "Ð’Ð²ÐµÐ´Ð¸Ñ‚Ðµ Ñ‚Ð¾Ð»ÑŒÐºÐ¾ Ñ†Ð¸Ñ„Ñ€Ñ‹.",
    alphanum:
      "Ð’Ð²ÐµÐ´Ð¸Ñ‚Ðµ Ð±ÑƒÐºÐ²ÐµÐ½Ð½Ð¾-Ñ†Ð¸Ñ„Ñ€Ð¾Ð²Ð¾Ðµ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ.",
  },
  notblank: "Ð­Ñ‚Ð¾ Ð¿Ð¾Ð»Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð¾ Ð±Ñ‹Ñ‚ÑŒ Ð·Ð°Ð¿Ð¾Ð»Ð½ÐµÐ½Ð¾.",
  required: "ÐžÐ±ÑÐ·Ð°Ñ‚ÐµÐ»ÑŒÐ½Ð¾Ðµ Ð¿Ð¾Ð»Ðµ.",
  pattern: "Ð­Ñ‚Ð¾ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ Ð½ÐµÐºÐ¾Ñ€Ñ€ÐµÐºÑ‚Ð½Ð¾.",
  min: "Ð­Ñ‚Ð¾ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð¾ Ð±Ñ‹Ñ‚ÑŒ Ð½Ðµ Ð¼ÐµÐ½ÐµÐµ Ñ‡ÐµÐ¼ %s.",
  max: "Ð­Ñ‚Ð¾ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð¾ Ð±Ñ‹Ñ‚ÑŒ Ð½Ðµ Ð±Ð¾Ð»ÐµÐµ Ñ‡ÐµÐ¼ %s.",
  range: "Ð­Ñ‚Ð¾ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð¾ Ð±Ñ‹Ñ‚ÑŒ Ð¾Ñ‚ %s Ð´Ð¾ %s.",
  minlength:
    "Ð­Ñ‚Ð¾ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð¾ ÑÐ¾Ð´ÐµÑ€Ð¶Ð°Ñ‚ÑŒ Ð½Ðµ Ð¼ÐµÐ½ÐµÐµ %s ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð².",
  maxlength:
    "Ð­Ñ‚Ð¾ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð¾ ÑÐ¾Ð´ÐµÑ€Ð¶Ð°Ñ‚ÑŒ Ð½Ðµ Ð±Ð¾Ð»ÐµÐµ %s ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð².",
  length:
    "Ð­Ñ‚Ð¾ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð¾ ÑÐ¾Ð´ÐµÑ€Ð¶Ð°Ñ‚ÑŒ Ð¾Ñ‚ %s Ð´Ð¾ %s ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð².",
  mincheck: "Ð’Ñ‹Ð±ÐµÑ€Ð¸Ñ‚Ðµ Ð½Ðµ Ð¼ÐµÐ½ÐµÐµ %s Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ð¹.",
  maxcheck: "Ð’Ñ‹Ð±ÐµÑ€Ð¸Ñ‚Ðµ Ð½Ðµ Ð±Ð¾Ð»ÐµÐµ %s Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ð¹.",
  check: "Ð’Ñ‹Ð±ÐµÑ€Ð¸Ñ‚Ðµ Ð¾Ñ‚ %s Ð´Ð¾ %s Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ð¹.",
  equalto: "Ð­Ñ‚Ð¾ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð¾ ÑÐ¾Ð²Ð¿Ð°Ð´Ð°Ñ‚ÑŒ.",
});
Parsley.setLocale("ru");
(function (root, factory) {
  "use strict";
  var moment;
  if (typeof exports === "object") {
    try {
      moment = require("moment");
    } catch (e) {}
    module.exports = factory(moment);
  } else if (typeof define === "function" && define.amd) {
    define(function (req) {
      var id = "moment";
      try {
        moment = req(id);
      } catch (e) {}
      return factory(moment);
    });
  } else {
    root.Pikaday = factory(root.moment);
  }
})(this, function (moment) {
  "use strict";
  var hasMoment = typeof moment === "function",
    hasEventListeners = !!window.addEventListener,
    document = window.document,
    sto = window.setTimeout,
    addEvent = function (el, e, callback, capture) {
      if (hasEventListeners) {
        el.addEventListener(e, callback, !!capture);
      } else {
        el.attachEvent("on" + e, callback);
      }
    },
    removeEvent = function (el, e, callback, capture) {
      if (hasEventListeners) {
        el.removeEventListener(e, callback, !!capture);
      } else {
        el.detachEvent("on" + e, callback);
      }
    },
    trim = function (str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    },
    hasClass = function (el, cn) {
      return (" " + el.className + " ").indexOf(" " + cn + " ") !== -1;
    },
    addClass = function (el, cn) {
      if (!hasClass(el, cn)) {
        el.className = el.className === "" ? cn : el.className + " " + cn;
      }
    },
    removeClass = function (el, cn) {
      el.className = trim(
        (" " + el.className + " ").replace(" " + cn + " ", " ")
      );
    },
    isArray = function (obj) {
      return /Array/.test(Object.prototype.toString.call(obj));
    },
    isDate = function (obj) {
      return (
        /Date/.test(Object.prototype.toString.call(obj)) &&
        !isNaN(obj.getTime())
      );
    },
    isWeekend = function (date) {
      var day = date.getDay();
      return day === 0 || day === 6;
    },
    isLeapYear = function (year) {
      return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    },
    getDaysInMonth = function (year, month) {
      return [
        31,
        isLeapYear(year) ? 29 : 28,
        31,
        30,
        31,
        30,
        31,
        31,
        30,
        31,
        30,
        31,
      ][month];
    },
    setToStartOfDay = function (date) {
      if (isDate(date)) date.setHours(0, 0, 0, 0);
    },
    compareDates = function (a, b) {
      return a.getTime() === b.getTime();
    },
    extend = function (to, from, overwrite) {
      var prop, hasProp;
      for (prop in from) {
        hasProp = to[prop] !== undefined;
        if (
          hasProp &&
          typeof from[prop] === "object" &&
          from[prop] !== null &&
          from[prop].nodeName === undefined
        ) {
          if (isDate(from[prop])) {
            if (overwrite) {
              to[prop] = new Date(from[prop].getTime());
            }
          } else if (isArray(from[prop])) {
            if (overwrite) {
              to[prop] = from[prop].slice(0);
            }
          } else {
            to[prop] = extend({}, from[prop], overwrite);
          }
        } else if (overwrite || !hasProp) {
          to[prop] = from[prop];
        }
      }
      return to;
    },
    fireEvent = function (el, eventName, data) {
      var ev;
      if (document.createEvent) {
        ev = document.createEvent("HTMLEvents");
        ev.initEvent(eventName, true, false);
        ev = extend(ev, data);
        el.dispatchEvent(ev);
      } else if (document.createEventObject) {
        ev = document.createEventObject();
        ev = extend(ev, data);
        el.fireEvent("on" + eventName, ev);
      }
    },
    adjustCalendar = function (calendar) {
      if (calendar.month < 0) {
        calendar.year -= Math.ceil(Math.abs(calendar.month) / 12);
        calendar.month += 12;
      }
      if (calendar.month > 11) {
        calendar.year += Math.floor(Math.abs(calendar.month) / 12);
        calendar.month -= 12;
      }
      return calendar;
    },
    defaults = {
      field: null,
      bound: undefined,
      ariaLabel: "Use the arrow keys to pick a date",
      position: "bottom left",
      reposition: true,
      format: "YYYY-MM-DD",
      toString: null,
      parse: null,
      defaultDate: null,
      setDefaultDate: false,
      firstDay: 0,
      firstWeekOfYearMinDays: 4,
      formatStrict: false,
      minDate: null,
      maxDate: null,
      yearRange: 10,
      showWeekNumber: false,
      pickWholeWeek: false,
      minYear: 0,
      maxYear: 9999,
      minMonth: undefined,
      maxMonth: undefined,
      startRange: null,
      endRange: null,
      isRTL: false,
      yearSuffix: "",
      showMonthAfterYear: false,
      showDaysInNextAndPreviousMonths: false,
      enableSelectionDaysInNextAndPreviousMonths: false,
      numberOfMonths: 1,
      mainCalendar: "left",
      container: undefined,
      blurFieldOnSelect: true,
      i18n: {
        previousMonth: "Previous Month",
        nextMonth: "Next Month",
        months: [
          "January",
          "February",
          "March",
          "April",
          "May",
          "June",
          "July",
          "August",
          "September",
          "October",
          "November",
          "December",
        ],
        weekdays: [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
        ],
        weekdaysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      },
      theme: null,
      events: [],
      onSelect: null,
      onOpen: null,
      onClose: null,
      onDraw: null,
      keyboardInput: true,
    },
    renderDayName = function (opts, day, abbr) {
      day += opts.firstDay;
      while (day >= 7) {
        day -= 7;
      }
      return abbr ? opts.i18n.weekdaysShort[day] : opts.i18n.weekdays[day];
    },
    renderDay = function (opts) {
      var arr = [];
      var ariaSelected = "false";
      if (opts.isEmpty) {
        if (opts.showDaysInNextAndPreviousMonths) {
          arr.push("is-outside-current-month");
          if (!opts.enableSelectionDaysInNextAndPreviousMonths) {
            arr.push("is-selection-disabled");
          }
        } else {
          return '<td class="is-empty"></td>';
        }
      }
      if (opts.isDisabled) {
        arr.push("is-disabled");
      }
      if (opts.isToday) {
        arr.push("is-today");
      }
      if (opts.isSelected) {
        arr.push("is-selected");
        ariaSelected = "true";
      }
      if (opts.hasEvent) {
        arr.push("has-event");
      }
      if (opts.isInRange) {
        arr.push("is-inrange");
      }
      if (opts.isStartRange) {
        arr.push("is-startrange");
      }
      if (opts.isEndRange) {
        arr.push("is-endrange");
      }
      return (
        '<td data-day="' +
        opts.day +
        '" class="' +
        arr.join(" ") +
        '" aria-selected="' +
        ariaSelected +
        '">' +
        '<button class="pika-button pika-day" type="button" ' +
        'data-pika-year="' +
        opts.year +
        '" data-pika-month="' +
        opts.month +
        '" data-pika-day="' +
        opts.day +
        '">' +
        opts.day +
        "</button>" +
        "</td>"
      );
    },
    isoWeek = function (date, firstWeekOfYearMinDays) {
      date.setHours(0, 0, 0, 0);
      var yearDay = date.getDate(),
        weekDay = date.getDay(),
        dayInFirstWeek = firstWeekOfYearMinDays,
        dayShift = dayInFirstWeek - 1,
        daysPerWeek = 7,
        prevWeekDay = function (day) {
          return (day + daysPerWeek - 1) % daysPerWeek;
        };
      date.setDate(yearDay + dayShift - prevWeekDay(weekDay));
      var jan4th = new Date(date.getFullYear(), 0, dayInFirstWeek),
        msPerDay = 24 * 60 * 60 * 1000,
        daysBetween = (date.getTime() - jan4th.getTime()) / msPerDay,
        weekNum =
          1 +
          Math.round(
            (daysBetween - dayShift + prevWeekDay(jan4th.getDay())) /
              daysPerWeek
          );
      return weekNum;
    },
    renderWeek = function (d, m, y, firstWeekOfYearMinDays) {
      var date = new Date(y, m, d),
        week = hasMoment
          ? moment(date).isoWeek()
          : isoWeek(date, firstWeekOfYearMinDays);
      return '<td class="pika-week">' + week + "</td>";
    },
    renderRow = function (days, isRTL, pickWholeWeek, isRowSelected) {
      return (
        '<tr class="pika-row' +
        (pickWholeWeek ? " pick-whole-week" : "") +
        (isRowSelected ? " is-selected" : "") +
        '">' +
        (isRTL ? days.reverse() : days).join("") +
        "</tr>"
      );
    },
    renderBody = function (rows) {
      return "<tbody>" + rows.join("") + "</tbody>";
    },
    renderHead = function (opts) {
      var i,
        arr = [];
      if (opts.showWeekNumber) {
        arr.push("<th></th>");
      }
      for (i = 0; i < 7; i++) {
        arr.push(
          '<th scope="col"><abbr title="' +
            renderDayName(opts, i) +
            '">' +
            renderDayName(opts, i, true) +
            "</abbr></th>"
        );
      }
      return (
        "<thead><tr>" +
        (opts.isRTL ? arr.reverse() : arr).join("") +
        "</tr></thead>"
      );
    },
    renderTitle = function (instance, c, year, month, refYear, randId) {
      var i,
        j,
        arr,
        opts = instance._o,
        isMinYear = year === opts.minYear,
        isMaxYear = year === opts.maxYear,
        html =
          '<div id="' +
          randId +
          '" class="pika-title" role="heading" aria-live="assertive">',
        monthHtml,
        yearHtml,
        prev = true,
        next = true;
      for (arr = [], i = 0; i < 12; i++) {
        arr.push(
          '<option value="' +
            (year === refYear ? i - c : 12 + i - c) +
            '"' +
            (i === month ? ' selected="selected"' : "") +
            ((isMinYear && i < opts.minMonth) ||
            (isMaxYear && i > opts.maxMonth)
              ? ' disabled="disabled"'
              : "") +
            ">" +
            opts.i18n.months[i] +
            "</option>"
        );
      }
      monthHtml =
        '<div class="pika-label">' +
        opts.i18n.months[month] +
        '<select class="pika-select pika-select-month" tabindex="-1">' +
        arr.join("") +
        "</select></div>";
      if (isArray(opts.yearRange)) {
        i = opts.yearRange[0];
        j = opts.yearRange[1] + 1;
      } else {
        i = year - opts.yearRange;
        j = 1 + year + opts.yearRange;
      }
      for (arr = []; i < j && i <= opts.maxYear; i++) {
        if (i >= opts.minYear) {
          arr.push(
            '<option value="' +
              i +
              '"' +
              (i === year ? ' selected="selected"' : "") +
              ">" +
              i +
              "</option>"
          );
        }
      }
      yearHtml =
        '<div class="pika-label">' +
        year +
        opts.yearSuffix +
        '<select class="pika-select pika-select-year" tabindex="-1">' +
        arr.join("") +
        "</select></div>";
      if (opts.showMonthAfterYear) {
        html += yearHtml + monthHtml;
      } else {
        html += monthHtml + yearHtml;
      }
      if (isMinYear && (month === 0 || opts.minMonth >= month)) {
        prev = false;
      }
      if (isMaxYear && (month === 11 || opts.maxMonth <= month)) {
        next = false;
      }
      if (c === 0) {
        html +=
          '<button class="pika-prev' +
          (prev ? "" : " is-disabled") +
          '" type="button">' +
          opts.i18n.previousMonth +
          "</button>";
      }
      if (c === instance._o.numberOfMonths - 1) {
        html +=
          '<button class="pika-next' +
          (next ? "" : " is-disabled") +
          '" type="button">' +
          opts.i18n.nextMonth +
          "</button>";
      }
      return (html += "</div>");
    },
    renderTable = function (opts, data, randId) {
      return (
        '<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="' +
        randId +
        '">' +
        renderHead(opts) +
        renderBody(data) +
        "</table>"
      );
    },
    Pikaday = function (options) {
      var self = this,
        opts = self.config(options);
      self._onMouseDown = function (e) {
        if (!self._v) {
          return;
        }
        e = e || window.event;
        var target = e.target || e.srcElement;
        if (!target) {
          return;
        }
        if (!hasClass(target, "is-disabled")) {
          if (
            hasClass(target, "pika-button") &&
            !hasClass(target, "is-empty") &&
            !hasClass(target.parentNode, "is-disabled")
          ) {
            self.setDate(
              new Date(
                target.getAttribute("data-pika-year"),
                target.getAttribute("data-pika-month"),
                target.getAttribute("data-pika-day")
              )
            );
            if (opts.bound) {
              sto(function () {
                self.hide();
                if (opts.blurFieldOnSelect && opts.field) {
                  opts.field.blur();
                }
              }, 100);
            }
          } else if (hasClass(target, "pika-prev")) {
            self.prevMonth();
          } else if (hasClass(target, "pika-next")) {
            self.nextMonth();
          }
        }
        if (!hasClass(target, "pika-select")) {
          if (e.preventDefault) {
            e.preventDefault();
          } else {
            e.returnValue = false;
            return false;
          }
        } else {
          self._c = true;
        }
      };
      self._onChange = function (e) {
        e = e || window.event;
        var target = e.target || e.srcElement;
        if (!target) {
          return;
        }
        if (hasClass(target, "pika-select-month")) {
          self.gotoMonth(target.value);
        } else if (hasClass(target, "pika-select-year")) {
          self.gotoYear(target.value);
        }
      };
      self._onKeyChange = function (e) {
        e = e || window.event;
        if (self.isVisible()) {
          switch (e.keyCode) {
            case 13:
            case 27:
              if (opts.field) {
                opts.field.blur();
              }
              break;
            case 37:
              self.adjustDate("subtract", 1);
              break;
            case 38:
              self.adjustDate("subtract", 7);
              break;
            case 39:
              self.adjustDate("add", 1);
              break;
            case 40:
              self.adjustDate("add", 7);
              break;
            case 8:
            case 46:
              self.setDate(null);
              break;
          }
        }
      };
      self._parseFieldValue = function () {
        if (opts.parse) {
          return opts.parse(opts.field.value, opts.format);
        } else if (hasMoment) {
          var date = moment(opts.field.value, opts.format, opts.formatStrict);
          return date && date.isValid() ? date.toDate() : null;
        } else {
          return new Date(Date.parse(opts.field.value));
        }
      };
      self._onInputChange = function (e) {
        var date;
        if (e.firedBy === self) {
          return;
        }
        date = self._parseFieldValue();
        if (isDate(date)) {
          self.setDate(date);
        }
        if (!self._v) {
          self.show();
        }
      };
      self._onInputFocus = function () {
        self.show();
      };
      self._onInputClick = function () {
        self.show();
      };
      self._onInputBlur = function () {
        var pEl = document.activeElement;
        do {
          if (hasClass(pEl, "pika-single")) {
            return;
          }
        } while ((pEl = pEl.parentNode));
        if (!self._c) {
          self._b = sto(function () {
            self.hide();
          }, 50);
        }
        self._c = false;
      };
      self._onClick = function (e) {
        e = e || window.event;
        var target = e.target || e.srcElement,
          pEl = target;
        if (!target) {
          return;
        }
        if (!hasEventListeners && hasClass(target, "pika-select")) {
          if (!target.onchange) {
            target.setAttribute("onchange", "return;");
            addEvent(target, "change", self._onChange);
          }
        }
        do {
          if (hasClass(pEl, "pika-single") || pEl === opts.trigger) {
            return;
          }
        } while ((pEl = pEl.parentNode));
        if (self._v && target !== opts.trigger && pEl !== opts.trigger) {
          self.hide();
        }
      };
      self.el = document.createElement("div");
      self.el.className =
        "pika-single" +
        (opts.isRTL ? " is-rtl" : "") +
        (opts.theme ? " " + opts.theme : "");
      addEvent(self.el, "mousedown", self._onMouseDown, true);
      addEvent(self.el, "touchend", self._onMouseDown, true);
      addEvent(self.el, "change", self._onChange);
      if (opts.keyboardInput) {
        addEvent(document, "keydown", self._onKeyChange);
      }
      if (opts.field) {
        if (opts.container) {
          opts.container.appendChild(self.el);
        } else if (opts.bound) {
          document.body.appendChild(self.el);
        } else {
          opts.field.parentNode.insertBefore(self.el, opts.field.nextSibling);
        }
        addEvent(opts.field, "change", self._onInputChange);
        if (!opts.defaultDate) {
          opts.defaultDate = self._parseFieldValue();
          opts.setDefaultDate = true;
        }
      }
      var defDate = opts.defaultDate;
      if (isDate(defDate)) {
        if (opts.setDefaultDate) {
          self.setDate(defDate, true);
        } else {
          self.gotoDate(defDate);
        }
      } else {
        self.gotoDate(new Date());
      }
      if (opts.bound) {
        this.hide();
        self.el.className += " is-bound";
        addEvent(opts.trigger, "click", self._onInputClick);
        addEvent(opts.trigger, "focus", self._onInputFocus);
        addEvent(opts.trigger, "blur", self._onInputBlur);
      } else {
        this.show();
      }
    };
  Pikaday.prototype = {
    config: function (options) {
      if (!this._o) {
        this._o = extend({}, defaults, true);
      }
      var opts = extend(this._o, options, true);
      opts.isRTL = !!opts.isRTL;
      opts.field = opts.field && opts.field.nodeName ? opts.field : null;
      opts.theme =
        typeof opts.theme === "string" && opts.theme ? opts.theme : null;
      opts.bound = !!(opts.bound !== undefined
        ? opts.field && opts.bound
        : opts.field);
      opts.trigger =
        opts.trigger && opts.trigger.nodeName ? opts.trigger : opts.field;
      opts.disableWeekends = !!opts.disableWeekends;
      opts.disableDayFn =
        typeof opts.disableDayFn === "function" ? opts.disableDayFn : null;
      var nom = parseInt(opts.numberOfMonths, 10) || 1;
      opts.numberOfMonths = nom > 4 ? 4 : nom;
      if (!isDate(opts.minDate)) {
        opts.minDate = false;
      }
      if (!isDate(opts.maxDate)) {
        opts.maxDate = false;
      }
      if (opts.minDate && opts.maxDate && opts.maxDate < opts.minDate) {
        opts.maxDate = opts.minDate = false;
      }
      if (opts.minDate) {
        this.setMinDate(opts.minDate);
      }
      if (opts.maxDate) {
        this.setMaxDate(opts.maxDate);
      }
      if (isArray(opts.yearRange)) {
        var fallback = new Date().getFullYear() - 10;
        opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || fallback;
        opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || fallback;
      } else {
        opts.yearRange =
          Math.abs(parseInt(opts.yearRange, 10)) || defaults.yearRange;
        if (opts.yearRange > 100) {
          opts.yearRange = 100;
        }
      }
      return opts;
    },
    toString: function (format) {
      format = format || this._o.format;
      if (!isDate(this._d)) {
        return "";
      }
      if (this._o.toString) {
        return this._o.toString(this._d, format);
      }
      if (hasMoment) {
        return moment(this._d).format(format);
      }
      return this._d.toDateString();
    },
    getMoment: function () {
      return hasMoment ? moment(this._d) : null;
    },
    setMoment: function (date, preventOnSelect) {
      if (hasMoment && moment.isMoment(date)) {
        this.setDate(date.toDate(), preventOnSelect);
      }
    },
    getDate: function () {
      return isDate(this._d) ? new Date(this._d.getTime()) : null;
    },
    setDate: function (date, preventOnSelect) {
      if (!date) {
        this._d = null;
        if (this._o.field) {
          this._o.field.value = "";
          fireEvent(this._o.field, "change", { firedBy: this });
        }
        return this.draw();
      }
      if (typeof date === "string") {
        date = new Date(Date.parse(date));
      }
      if (!isDate(date)) {
        return;
      }
      var min = this._o.minDate,
        max = this._o.maxDate;
      if (isDate(min) && date < min) {
        date = min;
      } else if (isDate(max) && date > max) {
        date = max;
      }
      this._d = new Date(date.getTime());
      setToStartOfDay(this._d);
      this.gotoDate(this._d);
      if (this._o.field) {
        this._o.field.value = this.toString();
        fireEvent(this._o.field, "change", { firedBy: this });
      }
      if (!preventOnSelect && typeof this._o.onSelect === "function") {
        this._o.onSelect.call(this, this.getDate());
      }
    },
    clear: function () {
      this.setDate(null);
    },
    gotoDate: function (date) {
      var newCalendar = true;
      if (!isDate(date)) {
        return;
      }
      if (this.calendars) {
        var firstVisibleDate = new Date(
            this.calendars[0].year,
            this.calendars[0].month,
            1
          ),
          lastVisibleDate = new Date(
            this.calendars[this.calendars.length - 1].year,
            this.calendars[this.calendars.length - 1].month,
            1
          ),
          visibleDate = date.getTime();
        lastVisibleDate.setMonth(lastVisibleDate.getMonth() + 1);
        lastVisibleDate.setDate(lastVisibleDate.getDate() - 1);
        newCalendar =
          visibleDate < firstVisibleDate.getTime() ||
          lastVisibleDate.getTime() < visibleDate;
      }
      if (newCalendar) {
        this.calendars = [{ month: date.getMonth(), year: date.getFullYear() }];
        if (this._o.mainCalendar === "right") {
          this.calendars[0].month += 1 - this._o.numberOfMonths;
        }
      }
      this.adjustCalendars();
    },
    adjustDate: function (sign, days) {
      var day = this.getDate() || new Date();
      var difference = parseInt(days) * 24 * 60 * 60 * 1000;
      var newDay;
      if (sign === "add") {
        newDay = new Date(day.valueOf() + difference);
      } else if (sign === "subtract") {
        newDay = new Date(day.valueOf() - difference);
      }
      this.setDate(newDay);
    },
    adjustCalendars: function () {
      this.calendars[0] = adjustCalendar(this.calendars[0]);
      for (var c = 1; c < this._o.numberOfMonths; c++) {
        this.calendars[c] = adjustCalendar({
          month: this.calendars[0].month + c,
          year: this.calendars[0].year,
        });
      }
      this.draw();
    },
    gotoToday: function () {
      this.gotoDate(new Date());
    },
    gotoMonth: function (month) {
      if (!isNaN(month)) {
        this.calendars[0].month = parseInt(month, 10);
        this.adjustCalendars();
      }
    },
    nextMonth: function () {
      this.calendars[0].month++;
      this.adjustCalendars();
    },
    prevMonth: function () {
      this.calendars[0].month--;
      this.adjustCalendars();
    },
    gotoYear: function (year) {
      if (!isNaN(year)) {
        this.calendars[0].year = parseInt(year, 10);
        this.adjustCalendars();
      }
    },
    setMinDate: function (value) {
      if (value instanceof Date) {
        setToStartOfDay(value);
        this._o.minDate = value;
        this._o.minYear = value.getFullYear();
        this._o.minMonth = value.getMonth();
      } else {
        this._o.minDate = defaults.minDate;
        this._o.minYear = defaults.minYear;
        this._o.minMonth = defaults.minMonth;
        this._o.startRange = defaults.startRange;
      }
      this.draw();
    },
    setMaxDate: function (value) {
      if (value instanceof Date) {
        setToStartOfDay(value);
        this._o.maxDate = value;
        this._o.maxYear = value.getFullYear();
        this._o.maxMonth = value.getMonth();
      } else {
        this._o.maxDate = defaults.maxDate;
        this._o.maxYear = defaults.maxYear;
        this._o.maxMonth = defaults.maxMonth;
        this._o.endRange = defaults.endRange;
      }
      this.draw();
    },
    setStartRange: function (value) {
      this._o.startRange = value;
    },
    setEndRange: function (value) {
      this._o.endRange = value;
    },
    draw: function (force) {
      if (!this._v && !force) {
        return;
      }
      var opts = this._o,
        minYear = opts.minYear,
        maxYear = opts.maxYear,
        minMonth = opts.minMonth,
        maxMonth = opts.maxMonth,
        html = "",
        randId;
      if (this._y <= minYear) {
        this._y = minYear;
        if (!isNaN(minMonth) && this._m < minMonth) {
          this._m = minMonth;
        }
      }
      if (this._y >= maxYear) {
        this._y = maxYear;
        if (!isNaN(maxMonth) && this._m > maxMonth) {
          this._m = maxMonth;
        }
      }
      for (var c = 0; c < opts.numberOfMonths; c++) {
        randId =
          "pika-title-" +
          Math.random()
            .toString(36)
            .replace(/[^a-z]+/g, "")
            .substr(0, 2);
        html +=
          '<div class="pika-lendar">' +
          renderTitle(
            this,
            c,
            this.calendars[c].year,
            this.calendars[c].month,
            this.calendars[0].year,
            randId
          ) +
          this.render(this.calendars[c].year, this.calendars[c].month, randId) +
          "</div>";
      }
      this.el.innerHTML = html;
      if (opts.bound) {
        if (opts.field.type !== "hidden") {
          sto(function () {
            opts.trigger.focus();
          }, 1);
        }
      }
      if (typeof this._o.onDraw === "function") {
        this._o.onDraw(this);
      }
      if (opts.bound) {
        opts.field.setAttribute("aria-label", opts.ariaLabel);
      }
    },
    adjustPosition: function () {
      var field,
        pEl,
        width,
        height,
        viewportWidth,
        viewportHeight,
        scrollTop,
        left,
        top,
        clientRect,
        leftAligned,
        bottomAligned;
      if (this._o.container) return;
      this.el.style.position = "absolute";
      field = this._o.trigger;
      pEl = field;
      width = this.el.offsetWidth;
      height = this.el.offsetHeight;
      viewportWidth = window.innerWidth || document.documentElement.clientWidth;
      viewportHeight =
        window.innerHeight || document.documentElement.clientHeight;
      scrollTop =
        window.pageYOffset ||
        document.body.scrollTop ||
        document.documentElement.scrollTop;
      leftAligned = true;
      bottomAligned = true;
      if (typeof field.getBoundingClientRect === "function") {
        clientRect = field.getBoundingClientRect();
        left = clientRect.left + window.pageXOffset;
        top = clientRect.bottom + window.pageYOffset;
      } else {
        left = pEl.offsetLeft;
        top = pEl.offsetTop + pEl.offsetHeight;
        while ((pEl = pEl.offsetParent)) {
          left += pEl.offsetLeft;
          top += pEl.offsetTop;
        }
      }
      if (
        (this._o.reposition && left + width > viewportWidth) ||
        (this._o.position.indexOf("right") > -1 &&
          left - width + field.offsetWidth > 0)
      ) {
        left = left - width + field.offsetWidth;
        leftAligned = false;
      }
      if (
        (this._o.reposition && top + height > viewportHeight + scrollTop) ||
        (this._o.position.indexOf("top") > -1 &&
          top - height - field.offsetHeight > 0)
      ) {
        top = top - height - field.offsetHeight;
        bottomAligned = false;
      }
      this.el.style.left = left + "px";
      this.el.style.top = top + "px";
      addClass(this.el, leftAligned ? "left-aligned" : "right-aligned");
      addClass(this.el, bottomAligned ? "bottom-aligned" : "top-aligned");
      removeClass(this.el, !leftAligned ? "left-aligned" : "right-aligned");
      removeClass(this.el, !bottomAligned ? "bottom-aligned" : "top-aligned");
    },
    render: function (year, month, randId) {
      var opts = this._o,
        now = new Date(),
        days = getDaysInMonth(year, month),
        before = new Date(year, month, 1).getDay(),
        data = [],
        row = [];
      setToStartOfDay(now);
      if (opts.firstDay > 0) {
        before -= opts.firstDay;
        if (before < 0) {
          before += 7;
        }
      }
      var previousMonth = month === 0 ? 11 : month - 1,
        nextMonth = month === 11 ? 0 : month + 1,
        yearOfPreviousMonth = month === 0 ? year - 1 : year,
        yearOfNextMonth = month === 11 ? year + 1 : year,
        daysInPreviousMonth = getDaysInMonth(
          yearOfPreviousMonth,
          previousMonth
        );
      var cells = days + before,
        after = cells;
      while (after > 7) {
        after -= 7;
      }
      cells += 7 - after;
      var isWeekSelected = false;
      for (var i = 0, r = 0; i < cells; i++) {
        var day = new Date(year, month, 1 + (i - before)),
          isSelected = isDate(this._d) ? compareDates(day, this._d) : false,
          isToday = compareDates(day, now),
          hasEvent =
            opts.events.indexOf(day.toDateString()) !== -1 ? true : false,
          isEmpty = i < before || i >= days + before,
          dayNumber = 1 + (i - before),
          monthNumber = month,
          yearNumber = year,
          isStartRange = opts.startRange && compareDates(opts.startRange, day),
          isEndRange = opts.endRange && compareDates(opts.endRange, day),
          isInRange =
            opts.startRange &&
            opts.endRange &&
            opts.startRange < day &&
            day < opts.endRange,
          isDisabled =
            (opts.minDate && day < opts.minDate) ||
            (opts.maxDate && day > opts.maxDate) ||
            (opts.disableWeekends && isWeekend(day)) ||
            (opts.disableDayFn && opts.disableDayFn(day));
        if (isEmpty) {
          if (i < before) {
            dayNumber = daysInPreviousMonth + dayNumber;
            monthNumber = previousMonth;
            yearNumber = yearOfPreviousMonth;
          } else {
            dayNumber = dayNumber - days;
            monthNumber = nextMonth;
            yearNumber = yearOfNextMonth;
          }
        }
        var dayConfig = {
          day: dayNumber,
          month: monthNumber,
          year: yearNumber,
          hasEvent: hasEvent,
          isSelected: isSelected,
          isToday: isToday,
          isDisabled: isDisabled,
          isEmpty: isEmpty,
          isStartRange: isStartRange,
          isEndRange: isEndRange,
          isInRange: isInRange,
          showDaysInNextAndPreviousMonths: opts.showDaysInNextAndPreviousMonths,
          enableSelectionDaysInNextAndPreviousMonths:
            opts.enableSelectionDaysInNextAndPreviousMonths,
        };
        if (opts.pickWholeWeek && isSelected) {
          isWeekSelected = true;
        }
        row.push(renderDay(dayConfig));
        if (++r === 7) {
          if (opts.showWeekNumber) {
            row.unshift(
              renderWeek(i - before, month, year, opts.firstWeekOfYearMinDays)
            );
          }
          data.push(
            renderRow(row, opts.isRTL, opts.pickWholeWeek, isWeekSelected)
          );
          row = [];
          r = 0;
          isWeekSelected = false;
        }
      }
      return renderTable(opts, data, randId);
    },
    isVisible: function () {
      return this._v;
    },
    show: function () {
      if (!this.isVisible()) {
        this._v = true;
        this.draw();
        removeClass(this.el, "is-hidden");
        if (this._o.bound) {
          addEvent(document, "click", this._onClick);
          this.adjustPosition();
        }
        if (typeof this._o.onOpen === "function") {
          this._o.onOpen.call(this);
        }
      }
    },
    hide: function () {
      var v = this._v;
      if (v !== false) {
        if (this._o.bound) {
          removeEvent(document, "click", this._onClick);
        }
        if (!this._o.container) {
          this.el.style.position = "static";
          this.el.style.left = "auto";
          this.el.style.top = "auto";
        }
        addClass(this.el, "is-hidden");
        this._v = false;
        if (v !== undefined && typeof this._o.onClose === "function") {
          this._o.onClose.call(this);
        }
      }
    },
    destroy: function () {
      var opts = this._o;
      this.hide();
      removeEvent(this.el, "mousedown", this._onMouseDown, true);
      removeEvent(this.el, "touchend", this._onMouseDown, true);
      removeEvent(this.el, "change", this._onChange);
      if (opts.keyboardInput) {
        removeEvent(document, "keydown", this._onKeyChange);
      }
      if (opts.field) {
        removeEvent(opts.field, "change", this._onInputChange);
        if (opts.bound) {
          removeEvent(opts.trigger, "click", this._onInputClick);
          removeEvent(opts.trigger, "focus", this._onInputFocus);
          removeEvent(opts.trigger, "blur", this._onInputBlur);
        }
      }
      if (this.el.parentNode) {
        this.el.parentNode.removeChild(this.el);
      }
    },
  };
  return Pikaday;
});
(function (root, factory) {
  "use strict";
  if (typeof exports === "object") {
    factory(require("jquery"), require("../pikaday"));
  } else if (typeof define === "function" && define.amd) {
    define(["jquery", "pikaday"], factory);
  } else {
    factory(root.jQuery, root.Pikaday);
  }
})(this, function ($, Pikaday) {
  "use strict";
  $.fn.pikaday = function () {
    var args = arguments;
    if (!args || !args.length) {
      args = [{}];
    }
    return this.each(function () {
      var self = $(this),
        plugin = self.data("pikaday");
      if (!(plugin instanceof Pikaday)) {
        if (typeof args[0] === "object") {
          var options = $.extend({}, args[0]);
          options.field = self[0];
          self.data("pikaday", new Pikaday(options));
        }
      } else {
        if (
          typeof args[0] === "string" &&
          typeof plugin[args[0]] === "function"
        ) {
          plugin[args[0]].apply(plugin, Array.prototype.slice.call(args, 1));
        }
      }
    });
  };
});
(function (factory) {
  if (
    typeof exports === "object" &&
    exports &&
    typeof module === "object" &&
    module &&
    module.exports === exports
  ) {
    factory(require("jquery"));
  } else if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else {
    factory(jQuery);
  }
})(function ($) {
  var _ONE_DAY = 86400;
  var _lang = {
    am: "am",
    pm: "pm",
    AM: "AM",
    PM: "PM",
    decimal: ".",
    mins: "mins",
    hr: "hr",
    hrs: "hrs",
  };
  var methods = {
    init: function (options) {
      return this.each(function () {
        var self = $(this);
        var attributeOptions = [];
        for (var key in $.fn.timepicker.defaults) {
          if (self.data(key)) {
            attributeOptions[key] = self.data(key);
          }
        }
        var settings = $.extend(
          {},
          $.fn.timepicker.defaults,
          options,
          attributeOptions
        );
        if (settings.lang) {
          _lang = $.extend(_lang, settings.lang);
        }
        settings = _parseSettings(settings);
        self.data("timepicker-settings", settings);
        self.addClass("ui-timepicker-input");
        if (settings.useSelect) {
          _render(self);
        } else {
          self.prop("autocomplete", "off");
          if (settings.showOn) {
            for (var i in settings.showOn) {
              self.on(settings.showOn[i] + ".timepicker", methods.show);
            }
          }
          self.on("change.timepicker", _formatValue);
          self.on("keydown.timepicker", _keydownhandler);
          self.on("keyup.timepicker", _keyuphandler);
          if (settings.disableTextInput) {
            self.on("keydown.timepicker", _disableTextInputHandler);
          }
          _formatValue.call(self.get(0), null, "initial");
        }
      });
    },
    show: function (e) {
      var self = $(this);
      var settings = self.data("timepicker-settings");
      if (e) {
        e.preventDefault();
      }
      if (settings.useSelect) {
        self.data("timepicker-list").focus();
        return;
      }
      if (_hideKeyboard(self)) {
        self.blur();
      }
      var list = self.data("timepicker-list");
      if (self.prop("readonly")) {
        return;
      }
      if (
        !list ||
        list.length === 0 ||
        typeof settings.durationTime === "function"
      ) {
        _render(self);
        list = self.data("timepicker-list");
      }
      if (_isVisible(list)) {
        return;
      }
      self.data("ui-timepicker-value", self.val());
      _setSelected(self, list);
      methods.hide();
      list.show();
      var listOffset = {};
      if (settings.orientation.match(/r/)) {
        listOffset.left =
          self.offset().left +
          self.outerWidth() -
          list.outerWidth() +
          parseInt(list.css("marginLeft").replace("px", ""), 10);
      } else {
        listOffset.left =
          self.offset().left +
          parseInt(list.css("marginLeft").replace("px", ""), 10);
      }
      var verticalOrientation;
      if (settings.orientation.match(/t/)) {
        verticalOrientation = "t";
      } else if (settings.orientation.match(/b/)) {
        verticalOrientation = "b";
      } else if (
        self.offset().top + self.outerHeight(true) + list.outerHeight() >
        $(window).height() + $(window).scrollTop()
      ) {
        verticalOrientation = "t";
      } else {
        verticalOrientation = "b";
      }
      if (verticalOrientation == "t") {
        list.addClass("ui-timepicker-positioned-top");
        listOffset.top =
          self.offset().top -
          list.outerHeight() +
          parseInt(list.css("marginTop").replace("px", ""), 10);
      } else {
        list.removeClass("ui-timepicker-positioned-top");
        listOffset.top =
          self.offset().top +
          self.outerHeight() +
          parseInt(list.css("marginTop").replace("px", ""), 10);
      }
      list.offset(listOffset);
      var selected = list.find(".ui-timepicker-selected");
      if (!selected.length) {
        var timeInt = _time2int(_getTimeValue(self));
        if (timeInt !== null) {
          selected = _findRow(self, list, timeInt);
        } else if (settings.scrollDefault) {
          selected = _findRow(self, list, settings.scrollDefault());
        }
      }
      if (selected && selected.length) {
        var topOffset =
          list.scrollTop() + selected.position().top - selected.outerHeight();
        list.scrollTop(topOffset);
      } else {
        list.scrollTop(0);
      }
      if (settings.stopScrollPropagation) {
        $(document).on(
          "wheel.ui-timepicker",
          ".ui-timepicker-wrapper",
          function (e) {
            e.preventDefault();
            var currentScroll = $(this).scrollTop();
            $(this).scrollTop(currentScroll + e.originalEvent.deltaY);
          }
        );
      }
      $(document).on(
        "touchstart.ui-timepicker mousedown.ui-timepicker",
        _closeHandler
      );
      $(window).on("resize.ui-timepicker", _closeHandler);
      if (settings.closeOnWindowScroll) {
        $(document).on("scroll.ui-timepicker", _closeHandler);
      }
      self.trigger("showTimepicker");
      return this;
    },
    hide: function (e) {
      var self = $(this);
      var settings = self.data("timepicker-settings");
      if (settings && settings.useSelect) {
        self.blur();
      }
      $(".ui-timepicker-wrapper").each(function () {
        var list = $(this);
        if (!_isVisible(list)) {
          return;
        }
        var self = list.data("timepicker-input");
        var settings = self.data("timepicker-settings");
        if (settings && settings.selectOnBlur) {
          _selectValue(self);
        }
        list.hide();
        self.trigger("hideTimepicker");
      });
      return this;
    },
    option: function (key, value) {
      if (typeof key == "string" && typeof value == "undefined") {
        return $(this).data("timepicker-settings")[key];
      }
      return this.each(function () {
        var self = $(this);
        var settings = self.data("timepicker-settings");
        var list = self.data("timepicker-list");
        if (typeof key == "object") {
          settings = $.extend(settings, key);
        } else if (typeof key == "string") {
          settings[key] = value;
        }
        settings = _parseSettings(settings);
        self.data("timepicker-settings", settings);
        _formatValue.call(self.get(0), { type: "change" }, "initial");
        if (list) {
          list.remove();
          self.data("timepicker-list", false);
        }
        if (settings.useSelect) {
          _render(self);
        }
      });
    },
    getSecondsFromMidnight: function () {
      return _time2int(_getTimeValue(this));
    },
    getTime: function (relative_date) {
      var self = this;
      var time_string = _getTimeValue(self);
      if (!time_string) {
        return null;
      }
      var offset = _time2int(time_string);
      if (offset === null) {
        return null;
      }
      if (!relative_date) {
        relative_date = new Date();
      }
      var time = new Date(relative_date);
      time.setHours(offset / 3600);
      time.setMinutes((offset % 3600) / 60);
      time.setSeconds(offset % 60);
      time.setMilliseconds(0);
      return time;
    },
    isVisible: function () {
      var self = this;
      var list = self.data("timepicker-list");
      return !!(list && _isVisible(list));
    },
    setTime: function (value) {
      var self = this;
      var settings = self.data("timepicker-settings");
      if (settings.forceRoundTime) {
        var prettyTime = _roundAndFormatTime(_time2int(value), settings);
      } else {
        var prettyTime = _int2time(_time2int(value), settings);
      }
      if (value && prettyTime === null && settings.noneOption) {
        prettyTime = value;
      }
      _setTimeValue(self, prettyTime);
      if (self.data("timepicker-list")) {
        _setSelected(self, self.data("timepicker-list"));
      }
      return this;
    },
    remove: function () {
      var self = this;
      if (!self.hasClass("ui-timepicker-input")) {
        return;
      }
      var settings = self.data("timepicker-settings");
      self.removeAttr("autocomplete", "off");
      self.removeClass("ui-timepicker-input");
      self.removeData("timepicker-settings");
      self.off(".timepicker");
      if (self.data("timepicker-list")) {
        self.data("timepicker-list").remove();
      }
      if (settings.useSelect) {
        self.show();
      }
      self.removeData("timepicker-list");
      return this;
    },
  };
  function _isVisible(elem) {
    var el = elem[0];
    return el.offsetWidth > 0 && el.offsetHeight > 0;
  }
  function _parseSettings(settings) {
    if (settings.minTime) {
      settings.minTime = _time2int(settings.minTime);
    }
    if (settings.maxTime) {
      settings.maxTime = _time2int(settings.maxTime);
    }
    if (settings.durationTime && typeof settings.durationTime !== "function") {
      settings.durationTime = _time2int(settings.durationTime);
    }
    if (settings.scrollDefault == "now") {
      settings.scrollDefault = function () {
        return settings.roundingFunction(_time2int(new Date()), settings);
      };
    } else if (
      settings.scrollDefault &&
      typeof settings.scrollDefault != "function"
    ) {
      var val = settings.scrollDefault;
      settings.scrollDefault = function () {
        return settings.roundingFunction(_time2int(val), settings);
      };
    } else if (settings.minTime) {
      settings.scrollDefault = function () {
        return settings.roundingFunction(settings.minTime, settings);
      };
    }
    if (
      $.type(settings.timeFormat) === "string" &&
      settings.timeFormat.match(/[gh]/)
    ) {
      settings._twelveHourTime = true;
    }
    if (
      settings.showOnFocus === false &&
      settings.showOn.indexOf("focus") != -1
    ) {
      settings.showOn.splice(settings.showOn.indexOf("focus"), 1);
    }
    if (settings.disableTimeRanges.length > 0) {
      for (var i in settings.disableTimeRanges) {
        settings.disableTimeRanges[i] = [
          _time2int(settings.disableTimeRanges[i][0]),
          _time2int(settings.disableTimeRanges[i][1]),
        ];
      }
      settings.disableTimeRanges = settings.disableTimeRanges.sort(function (
        a,
        b
      ) {
        return a[0] - b[0];
      });
      for (var i = settings.disableTimeRanges.length - 1; i > 0; i--) {
        if (
          settings.disableTimeRanges[i][0] <=
          settings.disableTimeRanges[i - 1][1]
        ) {
          settings.disableTimeRanges[i - 1] = [
            Math.min(
              settings.disableTimeRanges[i][0],
              settings.disableTimeRanges[i - 1][0]
            ),
            Math.max(
              settings.disableTimeRanges[i][1],
              settings.disableTimeRanges[i - 1][1]
            ),
          ];
          settings.disableTimeRanges.splice(i, 1);
        }
      }
    }
    return settings;
  }
  function _render(self) {
    var settings = self.data("timepicker-settings");
    var list = self.data("timepicker-list");
    if (list && list.length) {
      list.remove();
      self.data("timepicker-list", false);
    }
    if (settings.useSelect) {
      list = $("<select />", { class: "ui-timepicker-select" });
      var wrapped_list = list;
    } else {
      list = $("<ul />", { class: "ui-timepicker-list" });
      var wrapped_list = $("<div />", {
        class: "ui-timepicker-wrapper",
        tabindex: -1,
      });
      wrapped_list.css({ display: "none", position: "absolute" }).append(list);
    }
    if (settings.noneOption) {
      if (settings.noneOption === true) {
        settings.noneOption = settings.useSelect ? "Time..." : "None";
      }
      if ($.isArray(settings.noneOption)) {
        for (var i in settings.noneOption) {
          if (parseInt(i, 10) == i) {
            var noneElement = _generateNoneElement(
              settings.noneOption[i],
              settings.useSelect
            );
            list.append(noneElement);
          }
        }
      } else {
        var noneElement = _generateNoneElement(
          settings.noneOption,
          settings.useSelect
        );
        list.append(noneElement);
      }
    }
    if (settings.className) {
      wrapped_list.addClass(settings.className);
    }
    if (
      (settings.minTime !== null || settings.durationTime !== null) &&
      settings.showDuration
    ) {
      var stepval =
        typeof settings.step == "function" ? "function" : settings.step;
      wrapped_list.addClass("ui-timepicker-with-duration");
      wrapped_list.addClass("ui-timepicker-step-" + settings.step);
    }
    var durStart = settings.minTime;
    if (typeof settings.durationTime === "function") {
      durStart = _time2int(settings.durationTime());
    } else if (settings.durationTime !== null) {
      durStart = settings.durationTime;
    }
    var start = settings.minTime !== null ? settings.minTime : 0;
    var end =
      settings.maxTime !== null ? settings.maxTime : start + _ONE_DAY - 1;
    if (end < start) {
      end += _ONE_DAY;
    }
    if (
      end === _ONE_DAY - 1 &&
      $.type(settings.timeFormat) === "string" &&
      settings.show2400
    ) {
      end = _ONE_DAY;
    }
    var dr = settings.disableTimeRanges;
    var drCur = 0;
    var drLen = dr.length;
    var stepFunc = settings.step;
    if (typeof stepFunc != "function") {
      stepFunc = function () {
        return settings.step;
      };
    }
    for (var i = start, j = 0; i <= end; j++, i += stepFunc(j) * 60) {
      var timeInt = i;
      var timeString = _int2time(timeInt, settings);
      if (settings.useSelect) {
        var row = $("<option />", { value: timeString });
        row.text(timeString);
      } else {
        var row = $("<li />");
        row.addClass(
          timeInt % _ONE_DAY < _ONE_DAY / 2
            ? "ui-timepicker-am"
            : "ui-timepicker-pm"
        );
        row.data("time", _moduloSeconds(timeInt, settings));
        row.text(timeString);
      }
      if (
        (settings.minTime !== null || settings.durationTime !== null) &&
        settings.showDuration
      ) {
        var durationString = _int2duration(i - durStart, settings.step);
        if (settings.useSelect) {
          row.text(row.text() + " (" + durationString + ")");
        } else {
          var duration = $("<span />", { class: "ui-timepicker-duration" });
          duration.text(" (" + durationString + ")");
          row.append(duration);
        }
      }
      if (drCur < drLen) {
        if (timeInt >= dr[drCur][1]) {
          drCur += 1;
        }
        if (dr[drCur] && timeInt >= dr[drCur][0] && timeInt < dr[drCur][1]) {
          if (settings.useSelect) {
            row.prop("disabled", true);
          } else {
            row.addClass("ui-timepicker-disabled");
          }
        }
      }
      list.append(row);
    }
    wrapped_list.data("timepicker-input", self);
    self.data("timepicker-list", wrapped_list);
    if (settings.useSelect) {
      if (self.val()) {
        list.val(_roundAndFormatTime(_time2int(self.val()), settings));
      }
      list.on("focus", function () {
        $(this).data("timepicker-input").trigger("showTimepicker");
      });
      list.on("blur", function () {
        $(this).data("timepicker-input").trigger("hideTimepicker");
      });
      list.on("change", function () {
        _setTimeValue(self, $(this).val(), "select");
      });
      _setTimeValue(self, list.val(), "initial");
      self.hide().after(list);
    } else {
      var appendTo = settings.appendTo;
      if (typeof appendTo === "string") {
        appendTo = $(appendTo);
      } else if (typeof appendTo === "function") {
        appendTo = appendTo(self);
      }
      appendTo.append(wrapped_list);
      _setSelected(self, list);
      list.on("mousedown click", "li", function (e) {
        self.off("focus.timepicker");
        self.on("focus.timepicker-ie-hack", function () {
          self.off("focus.timepicker-ie-hack");
          self.on("focus.timepicker", methods.show);
        });
        if (!_hideKeyboard(self)) {
          self[0].focus();
        }
        list.find("li").removeClass("ui-timepicker-selected");
        $(this).addClass("ui-timepicker-selected");
        if (_selectValue(self)) {
          self.trigger("hideTimepicker");
          list.on("mouseup.timepicker click.timepicker", "li", function (e) {
            list.off("mouseup.timepicker click.timepicker");
            wrapped_list.hide();
          });
        }
      });
    }
  }
  function _generateNoneElement(optionValue, useSelect) {
    var label, className, value;
    if (typeof optionValue == "object") {
      label = optionValue.label;
      className = optionValue.className;
      value = optionValue.value;
    } else if (typeof optionValue == "string") {
      label = optionValue;
    } else {
      $.error("Invalid noneOption value");
    }
    if (useSelect) {
      return $("<option />", { value: value, class: className, text: label });
    } else {
      return $("<li />", { class: className, text: label }).data(
        "time",
        String(value)
      );
    }
  }
  function _roundAndFormatTime(seconds, settings) {
    seconds = settings.roundingFunction(seconds, settings);
    if (seconds !== null) {
      return _int2time(seconds, settings);
    }
  }
  function _closeHandler(e) {
    if (e.target == window) {
      return;
    }
    var target = $(e.target);
    if (
      target.closest(".ui-timepicker-input").length ||
      target.closest(".ui-timepicker-wrapper").length
    ) {
      return;
    }
    methods.hide();
    $(document).unbind(".ui-timepicker");
    $(window).unbind(".ui-timepicker");
  }
  function _hideKeyboard(self) {
    var settings = self.data("timepicker-settings");
    return (
      (window.navigator.msMaxTouchPoints || "ontouchstart" in document) &&
      settings.disableTouchKeyboard
    );
  }
  function _findRow(self, list, value) {
    if (!value && value !== 0) {
      return false;
    }
    var settings = self.data("timepicker-settings");
    var out = false;
    var value = settings.roundingFunction(value, settings);
    list.find("li").each(function (i, obj) {
      var jObj = $(obj);
      if (typeof jObj.data("time") != "number") {
        return;
      }
      if (jObj.data("time") == value) {
        out = jObj;
        return false;
      }
    });
    return out;
  }
  function _setSelected(self, list) {
    list.find("li").removeClass("ui-timepicker-selected");
    var timeValue = _time2int(
      _getTimeValue(self),
      self.data("timepicker-settings")
    );
    if (timeValue === null) {
      return;
    }
    var selected = _findRow(self, list, timeValue);
    if (selected) {
      var topDelta = selected.offset().top - list.offset().top;
      if (
        topDelta + selected.outerHeight() > list.outerHeight() ||
        topDelta < 0
      ) {
        list.scrollTop(
          list.scrollTop() + selected.position().top - selected.outerHeight()
        );
      }
      selected.addClass("ui-timepicker-selected");
    }
  }
  function _formatValue(e, origin) {
    if (this.value === "" || origin == "timepicker") {
      return;
    }
    var self = $(this);
    if (self.is(":focus") && (!e || e.type != "change")) {
      return;
    }
    var settings = self.data("timepicker-settings");
    var seconds = _time2int(this.value, settings);
    if (seconds === null) {
      self.trigger("timeFormatError");
      return;
    }
    var rangeError = false;
    if (
      settings.minTime !== null &&
      settings.maxTime !== null &&
      (seconds < settings.minTime || seconds > settings.maxTime)
    ) {
      rangeError = true;
    }
    $.each(settings.disableTimeRanges, function () {
      if (seconds >= this[0] && seconds < this[1]) {
        rangeError = true;
        return false;
      }
    });
    if (settings.forceRoundTime) {
      var roundSeconds = settings.roundingFunction(seconds, settings);
      if (roundSeconds != seconds) {
        seconds = roundSeconds;
        origin = null;
      }
    }
    var prettyTime = _int2time(seconds, settings);
    if (rangeError) {
      if (
        _setTimeValue(self, prettyTime, "error") ||
        (e && e.type == "change")
      ) {
        self.trigger("timeRangeError");
      }
    } else {
      _setTimeValue(self, prettyTime, origin);
    }
  }
  function _getTimeValue(self) {
    if (self.is("input")) {
      return self.val();
    } else {
      return self.data("ui-timepicker-value");
    }
  }
  function _setTimeValue(self, value, source) {
    if (self.is("input")) {
      self.val(value);
      var settings = self.data("timepicker-settings");
      if (settings.useSelect && source != "select" && source != "initial") {
        self
          .data("timepicker-list")
          .val(_roundAndFormatTime(_time2int(value), settings));
      }
    }
    if (self.data("ui-timepicker-value") != value) {
      self.data("ui-timepicker-value", value);
      if (source == "select") {
        self
          .trigger("selectTime")
          .trigger("changeTime")
          .trigger("change", "timepicker");
      } else if (["error", "initial"].indexOf(source) == -1) {
        self.trigger("changeTime");
      }
      return true;
    } else {
      self.trigger("selectTime");
      return false;
    }
  }
  function _disableTextInputHandler(e) {
    switch (e.keyCode) {
      case 13:
      case 9:
        return;
      default:
        e.preventDefault();
    }
  }
  function _keydownhandler(e) {
    var self = $(this);
    var list = self.data("timepicker-list");
    if (!list || !_isVisible(list)) {
      if (e.keyCode == 40) {
        methods.show.call(self.get(0));
        list = self.data("timepicker-list");
        if (!_hideKeyboard(self)) {
          self.focus();
        }
      } else {
        return true;
      }
    }
    switch (e.keyCode) {
      case 13:
        if (_selectValue(self)) {
          _formatValue.call(self.get(0), { type: "change" });
          methods.hide.apply(this);
        }
        e.preventDefault();
        return false;
      case 38:
        var selected = list.find(".ui-timepicker-selected");
        if (!selected.length) {
          list.find("li").each(function (i, obj) {
            if ($(obj).position().top > 0) {
              selected = $(obj);
              return false;
            }
          });
          selected.addClass("ui-timepicker-selected");
        } else if (!selected.is(":first-child")) {
          selected.removeClass("ui-timepicker-selected");
          selected.prev().addClass("ui-timepicker-selected");
          if (selected.prev().position().top < selected.outerHeight()) {
            list.scrollTop(list.scrollTop() - selected.outerHeight());
          }
        }
        return false;
      case 40:
        selected = list.find(".ui-timepicker-selected");
        if (selected.length === 0) {
          list.find("li").each(function (i, obj) {
            if ($(obj).position().top > 0) {
              selected = $(obj);
              return false;
            }
          });
          selected.addClass("ui-timepicker-selected");
        } else if (!selected.is(":last-child")) {
          selected.removeClass("ui-timepicker-selected");
          selected.next().addClass("ui-timepicker-selected");
          if (
            selected.next().position().top + 2 * selected.outerHeight() >
            list.outerHeight()
          ) {
            list.scrollTop(list.scrollTop() + selected.outerHeight());
          }
        }
        return false;
      case 27:
        list.find("li").removeClass("ui-timepicker-selected");
        methods.hide();
        break;
      case 9:
        methods.hide();
        break;
      default:
        return true;
    }
  }
  function _keyuphandler(e) {
    var self = $(this);
    var list = self.data("timepicker-list");
    var settings = self.data("timepicker-settings");
    if (!list || !_isVisible(list) || settings.disableTextInput) {
      return true;
    }
    switch (e.keyCode) {
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 65:
      case 77:
      case 80:
      case 186:
      case 8:
      case 46:
        if (settings.typeaheadHighlight) {
          _setSelected(self, list);
        } else {
          list.hide();
        }
        break;
    }
  }
  function _selectValue(self) {
    var settings = self.data("timepicker-settings");
    var list = self.data("timepicker-list");
    var timeValue = null;
    var cursor = list.find(".ui-timepicker-selected");
    if (cursor.hasClass("ui-timepicker-disabled")) {
      return false;
    }
    if (cursor.length) {
      timeValue = cursor.data("time");
    }
    if (timeValue !== null) {
      if (typeof timeValue != "string") {
        timeValue = _int2time(timeValue, settings);
      }
      _setTimeValue(self, timeValue, "select");
    }
    return true;
  }
  function _int2duration(seconds, step) {
    seconds = Math.abs(seconds);
    var minutes = Math.round(seconds / 60),
      duration = [],
      hours,
      mins;
    if (minutes < 60) {
      duration = [minutes, _lang.mins];
    } else {
      hours = Math.floor(minutes / 60);
      mins = minutes % 60;
      if (step == 30 && mins == 30) {
        hours += _lang.decimal + 5;
      }
      duration.push(hours);
      duration.push(hours == 1 ? _lang.hr : _lang.hrs);
      if (step != 30 && mins) {
        duration.push(mins);
        duration.push(_lang.mins);
      }
    }
    return duration.join(" ");
  }
  function _int2time(timeInt, settings) {
    if (typeof timeInt != "number") {
      return null;
    }
    var seconds = parseInt(timeInt % 60),
      minutes = parseInt((timeInt / 60) % 60),
      hours = parseInt((timeInt / (60 * 60)) % 24);
    var time = new Date(1970, 0, 2, hours, minutes, seconds, 0);
    if (isNaN(time.getTime())) {
      return null;
    }
    if ($.type(settings.timeFormat) === "function") {
      return settings.timeFormat(time);
    }
    var output = "";
    var hour, code;
    for (var i = 0; i < settings.timeFormat.length; i++) {
      code = settings.timeFormat.charAt(i);
      switch (code) {
        case "a":
          output += time.getHours() > 11 ? _lang.pm : _lang.am;
          break;
        case "A":
          output += time.getHours() > 11 ? _lang.PM : _lang.AM;
          break;
        case "g":
          hour = time.getHours() % 12;
          output += hour === 0 ? "12" : hour;
          break;
        case "G":
          hour = time.getHours();
          if (timeInt === _ONE_DAY) hour = settings.show2400 ? 24 : 0;
          output += hour;
          break;
        case "h":
          hour = time.getHours() % 12;
          if (hour !== 0 && hour < 10) {
            hour = "0" + hour;
          }
          output += hour === 0 ? "12" : hour;
          break;
        case "H":
          hour = time.getHours();
          if (timeInt === _ONE_DAY) hour = settings.show2400 ? 24 : 0;
          output += hour > 9 ? hour : "0" + hour;
          break;
        case "i":
          var minutes = time.getMinutes();
          output += minutes > 9 ? minutes : "0" + minutes;
          break;
        case "s":
          seconds = time.getSeconds();
          output += seconds > 9 ? seconds : "0" + seconds;
          break;
        case "\\":
          i++;
          output += settings.timeFormat.charAt(i);
          break;
        default:
          output += code;
      }
    }
    return output;
  }
  function _time2int(timeString, settings) {
    if (timeString === "" || timeString === null) return null;
    if (typeof timeString == "object") {
      return (
        timeString.getHours() * 3600 +
        timeString.getMinutes() * 60 +
        timeString.getSeconds()
      );
    }
    if (typeof timeString != "string") {
      return timeString;
    }
    timeString = timeString.toLowerCase().replace(/[\s\.]/g, "");
    if (timeString.slice(-1) == "a" || timeString.slice(-1) == "p") {
      timeString += "m";
    }
    var ampmRegex =
      "(" +
      _lang.am.replace(".", "") +
      "|" +
      _lang.pm.replace(".", "") +
      "|" +
      _lang.AM.replace(".", "") +
      "|" +
      _lang.PM.replace(".", "") +
      ")?";
    var pattern = new RegExp(
      "^" +
        ampmRegex +
        "([0-9]?[0-9])\\W?([0-5][0-9])?\\W?([0-5][0-9])?" +
        ampmRegex +
        "$"
    );
    var time = timeString.match(pattern);
    if (!time) {
      return null;
    }
    var hour = parseInt(time[2] * 1, 10);
    if (hour > 24) {
      if (settings && settings.wrapHours === false) {
        return null;
      } else {
        hour = hour % 24;
      }
    }
    var ampm = time[1] || time[5];
    var hours = hour;
    if (hour <= 12 && ampm) {
      var isPm = ampm == _lang.pm || ampm == _lang.PM;
      if (hour == 12) {
        hours = isPm ? 12 : 0;
      } else {
        hours = hour + (isPm ? 12 : 0);
      }
    }
    var minutes = time[3] * 1 || 0;
    var seconds = time[4] * 1 || 0;
    var timeInt = hours * 3600 + minutes * 60 + seconds;
    if (
      hour < 12 &&
      !ampm &&
      settings &&
      settings._twelveHourTime &&
      settings.scrollDefault
    ) {
      var delta = timeInt - settings.scrollDefault();
      if (delta < 0 && delta >= _ONE_DAY / -2) {
        timeInt = (timeInt + _ONE_DAY / 2) % _ONE_DAY;
      }
    }
    return timeInt;
  }
  function _pad2(n) {
    return ("0" + n).slice(-2);
  }
  function _moduloSeconds(seconds, settings) {
    if (seconds == _ONE_DAY && settings.show2400) {
      return seconds;
    }
    return seconds % _ONE_DAY;
  }
  $.fn.timepicker = function (method) {
    if (!this.length) return this;
    if (methods[method]) {
      if (!this.hasClass("ui-timepicker-input")) {
        return this;
      }
      return methods[method].apply(
        this,
        Array.prototype.slice.call(arguments, 1)
      );
    } else if (typeof method === "object" || !method) {
      return methods.init.apply(this, arguments);
    } else {
      $.error("Method " + method + " does not exist on jQuery.timepicker");
    }
  };
  $.fn.timepicker.defaults = {
    appendTo: "body",
    className: null,
    closeOnWindowScroll: false,
    disableTextInput: false,
    disableTimeRanges: [],
    disableTouchKeyboard: false,
    durationTime: null,
    forceRoundTime: false,
    maxTime: null,
    minTime: null,
    noneOption: false,
    orientation: "l",
    roundingFunction: function (seconds, settings) {
      if (seconds === null) {
        return null;
      } else if (typeof settings.step !== "number") {
        return seconds;
      } else {
        var offset = seconds % (settings.step * 60);
        var start = settings.minTime || 0;
        offset -= start % (settings.step * 60);
        if (offset >= settings.step * 30) {
          seconds += settings.step * 60 - offset;
        } else {
          seconds -= offset;
        }
        return _moduloSeconds(seconds, settings);
      }
    },
    scrollDefault: null,
    selectOnBlur: false,
    show2400: false,
    showDuration: false,
    showOn: ["click", "focus"],
    showOnFocus: true,
    step: 30,
    stopScrollPropagation: false,
    timeFormat: "g:ia",
    typeaheadHighlight: true,
    useSelect: false,
    wrapHours: true,
  };
});
window.Parsley.addAsyncValidator("livestreet", function (xhr) {
  this._remoteCache = {};
  xhr.done(
    function (response) {
      if ("undefined" !== typeof response.errors) {
        var name = this.$element.attr("name") || this.$element.attr("id");
        var msg = response.errors[name].join("<br>");
        window.ParsleyUI.updateError(this, "remote", msg);
        return false;
      }
    }.bind(this)
  );
  return "undefined" === typeof xhr.responseJSON.errors;
});
jQuery(function ($) {
  Parsley.addValidator("rangetags", {
    requirementType: ["integer", "integer"],
    validateString: function (value, min, max) {
      var tag_count = value.replace(/ /g, "").match(/[^\s,]+(,|)/gi);
      return tag_count && tag_count.length >= min && tag_count.length <= max;
    },
    messages: {
      ru: ls.lang.get("validate.tags.count", {
        field: "",
        min: "%s",
        max: "%s",
      }),
    },
  });
});
(function ($) {
  "use strict";
  $.widget("livestreet.lsAutocomplete", {
    options: {
      multiple: false,
      urls: { load: null },
      onSelect: function () {},
      responseName: "aItems",
      params: {},
    },
    _create: function () {
      this.element.autocomplete({
        serviceUrl: this.option("urls.load"),
        type: "POST",
        dataType: "json",
        paramName: "value",
        delimiter: this.option("multiple") ? "," : null,
        onSelect: this.option("onSelect").bind(this.element),
        transformResult: function (response) {
          return { suggestions: response[this.option("responseName")] };
        }.bind(this),
        params: $.extend(
          {},
          { security_ls_key: LIVESTREET_SECURITY_KEY },
          this.option("params")
        ),
      });
    },
    destroy: function () {
      $.Widget.prototype.destroy.call(this);
      this.element.autocomplete("dispose");
    },
  });
})(jQuery);
window.PikadayConfig = window.PikadayConfig || {};
window.PikadayConfig.i18n = window.PikadayConfig.i18n || {};
window.PikadayConfig.i18n.ru = {
  previousMonth: "ÐŸÑ€ÐµÐ´. Ð¼ÐµÑÑÑ†",
  nextMonth: "Ð¡Ð»ÐµÐ´. Ð¼ÐµÑÑÑ†",
  months: [
    "Ð¯Ð½Ð²Ð°Ñ€ÑŒ",
    "Ð¤ÐµÐ²Ñ€Ð°Ð»ÑŒ",
    "ÐœÐ°Ñ€Ñ‚",
    "ÐÐ¿Ñ€ÐµÐ»ÑŒ",
    "ÐœÐ°Ð¹",
    "Ð˜ÑŽÐ½ÑŒ",
    "Ð˜ÑŽÐ»ÑŒ",
    "ÐÐ²Ð³ÑƒÑÑ‚",
    "Ð¡ÐµÐ½Ñ‚ÑÐ±Ñ€ÑŒ",
    "ÐžÐºÑ‚ÑÐ±Ñ€ÑŒ",
    "ÐÐ¾ÑÐ±Ñ€ÑŒ",
    "Ð”ÐµÐºÐ°Ð±Ñ€ÑŒ",
  ],
  weekdays: [
    "Ð’Ð¾ÑÐºÑ€ÐµÑÐµÐ½ÑŒÐµ",
    "ÐŸÐ¾Ð½ÐµÐ´ÐµÐ»ÑŒÐ½Ð¸Ðº",
    "Ð’Ñ‚Ð¾Ñ€Ð½Ð¸Ðº",
    "Ð¡Ñ€ÐµÐ´Ð°",
    "Ð§ÐµÑ‚Ð²ÐµÑ€Ð³",
    "ÐŸÑÑ‚Ð½Ð¸Ñ†Ð°",
    "Ð¡ÑƒÐ±Ð±Ð¾Ñ‚Ð°",
  ],
  weekdaysShort: ["Ð’Ñ", "ÐŸÐ½", "Ð’Ñ‚", "Ð¡Ñ€", "Ð§Ñ‚", "ÐŸÑ‚", "Ð¡Ð±"],
};
(function ($) {
  "use strict";
  $.widget("livestreet.lsDate", $.livestreet.lsComponent, {
    options: {
      format: "DD.MM.YYYY",
      yearRange: 100,
      firstDay: 1,
      language: null,
      i18n: {
        previousMonth: "Previous Month",
        nextMonth: "Next Month",
        months: [
          "January",
          "February",
          "March",
          "April",
          "May",
          "June",
          "July",
          "August",
          "September",
          "October",
          "November",
          "December",
        ],
        weekdays: [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
        ],
        weekdaysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      },
      toString(date, format) {
        const year = date.getFullYear(),
          month = date.getMonth() + 1,
          day = date.getDate(),
          formattedDate = [
            day < 10 ? "0" + day : day,
            month < 10 ? "0" + month : month,
            year,
          ].join(".");
        return formattedDate;
      },
      parse(dateString, format) {
        const parts = dateString.split(".");
        const day = parseInt(parts[0], 10);
        const month = parseInt(parts[1], 10) - 1;
        const year = parseInt(parts[2], 10);
        return new Date(year, month, day);
      },
    },
    _create: function () {
      this._super();
      this.option(
        "i18n",
        window.PikadayConfig.i18n[this.option("language")] ||
          this.option("i18n")
      );
      this.element.pikaday(this.options);
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsTime", $.livestreet.lsComponent, {
    options: { timeFormat: "H:i" },
    _create: function () {
      this._super();
      this.element.timepicker(this.options);
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsFieldAutocomplete", {
    options: {
      max_selected_options: 3,
      width: "100%",
      urls: { load: null },
      response: { value: "value", text: "label" },
      params: {},
    },
    _create: function () {
      if (this.option("urls.load")) {
        this._initAjax();
      } else {
        this.element.chosen(this.options);
      }
    },
    _initAjax: function () {
      this.element.ajaxChosen(
        {
          type: "POST",
          url: this.option("urls.load"),
          jsonTermKey: "value",
          data: $.extend(
            {},
            { security_ls_key: LIVESTREET_SECURITY_KEY },
            this.option("params")
          ),
          dataType: "json",
        },
        function (data) {
          var results = [];
          $.each(
            data.aItems,
            function (i, data) {
              results.push(
                $.isArray(data)
                  ? { value: data, text: data }
                  : {
                      value: data[this.options.response.value],
                      text: data[this.options.response.text],
                    }
              );
            }.bind(this)
          );
          return results;
        }.bind(this),
        this.options
      );
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsFieldGeo", $.livestreet.lsComponent, {
    options: {
      urls: { regions: null, cities: null },
      selectors: {
        country: ".js-field-geo-country",
        region: ".js-field-geo-region",
        city: ".js-field-geo-city",
      },
      params: {},
      i18n: {
        select_region: "@field.geo.select_region",
        select_city: "@field.geo.select_city",
      },
    },
    _create: function () {
      this._super();
      this.type = this.element.data("type");
      this.option("params.type", this.type);
      this.elements.country.on(
        "change" + this.eventNamespace,
        this._loadRegions.bind(this)
      );
      this.elements.region.on(
        "change" + this.eventNamespace,
        this._loadCities.bind(this)
      );
    },
    _loadRegions: function () {
      this.elements.city.empty().hide();
      if (!this.elements.country.val()) {
        this.elements.region.empty().hide().change();
        return;
      }
      this._load(
        "regions",
        { country: this.elements.country.val(), target_type: this.type },
        function (response) {
          this.append(
            this.elements.region,
            response.aRegions,
            this._i18n("select_region")
          );
        }.bind(this)
      );
    },
    _loadCities: function () {
      if (!this.elements.region.val()) {
        this.elements.city.empty().hide().change();
        return;
      }
      this._load(
        "cities",
        { region: this.elements.region.val(), target_type: this.type },
        function (response) {
          this.append(
            this.elements.city,
            response.aCities,
            this._i18n("select_city")
          );
        }.bind(this)
      );
    },
    append: function (element, items, addText) {
      element
        .empty()
        .show()
        .append('<option value="">' + addText + "</option>");
      $(
        $.map(items, function (value, index) {
          return '<option value="' + value.id + '">' + value.name + "</option>";
        }).join("")
      ).appendTo(element);
    },
    getCountry: function () {
      return this.elements.country.val();
    },
    getRegion: function () {
      return this.elements.region.val();
    },
    getCity: function () {
      return this.elements.city.val();
    },
    getElement: function (name) {
      return this.elements[name];
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsFieldImageAjax", $.livestreet.lsComponent, {
    options: {
      urls: {
        create: aRouter["ajax"] + "media/create-preview-file/",
        remove: aRouter["ajax"] + "media/remove-preview-file/",
        load: aRouter["ajax"] + "media/load-preview-items/",
      },
      selectors: {
        show_modal: ".js-field-image-ajax-show-modal",
        remove: ".js-field-image-ajax-remove",
        image: ".js-field-image-ajax-image",
        modal: ".js-field-image-ajax-modal",
        uploader: ".js-field-image-ajax-modal .js-uploader-modal",
        choose: ".js-field-image-ajax-modal .js-uploader-modal-choose",
      },
      classes: { loading: "ls-loading" },
      params: {},
    },
    _create: function () {
      var _this = this;
      this._super();
      this.elements.modal.lsModal({
        aftershow: function () {
          _this.elements.uploader
            .lsUploader("getElement", "list")
            .lsUploaderFileList("load");
          _this._setParam(
            "target_tmp",
            _this.elements.uploader.lsUploader("option", "params.target_tmp")
          );
        },
      });
      this.elements.uploader.lsUploader({
        autoload: false,
        params: $.extend(
          {},
          { security_ls_key: LIVESTREET_SECURITY_KEY },
          this.options.params
        ),
      });
      this.elements.show_modal.on("click" + this.eventNamespace, function () {
        _this.elements.modal.lsModal("show");
      });
      this.elements.remove.on(
        "click" + this.eventNamespace,
        this.remove.bind(this)
      );
      this.elements.choose.on(
        "click" + this.eventNamespace,
        this.createPreview.bind(this)
      );
    },
    createPreview: function () {
      var id = this.elements.uploader
        .lsUploader("getElement", "list")
        .lsUploaderFileList("getSelectedFiles")
        .eq(0)
        .lsUploaderFile("getProperty", "id");
      if (!id) return;
      this.elements.image.show().addClass(this.option("classes.loading"));
      this.elements.modal.lsModal("hide");
      this._load("create", { id: id }, function (response) {
        this.load();
        this.elements.show_modal.hide();
        this.elements.remove.show();
        this.options.params["id"] = id;
      });
    },
    remove: function () {
      this._load("remove", function (response) {
        this.elements.image.empty().hide();
        this.elements.remove.hide();
        this.elements.show_modal.show();
      });
    },
    load: function () {
      this._load("load", function (response) {
        this.elements.image
          .removeClass(this.option("classes.loading"))
          .show()
          .html($.trim(response.sTemplatePreview));
      });
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsUploaderFileList", $.livestreet.lsComponent, {
    options: {
      multiselect: true,
      multiselect_ctrl: true,
      max_height: 113 * 3 + 15,
      urls: { load: null, remove: null },
      selectors: { file: ".js-uploader-file" },
      classes: { loading: "ls-loading" },
      html: {
        file:
          '<li class="ls-uploader-file js-uploader-file">' +
          '<div class="progress">' +
          '<div class="progress-value js-uploader-file-progress-value"></div>' +
          '<span class="progress-info js-uploader-file-progress-label">0%</span>' +
          "</div>" +
          "</li>",
      },
      params: {},
    },
    _create: function () {
      this._super();
    },
    load: function () {
      this._trigger("beforeload", null, this);
      this.unselectAll();
      this.empty();
      this._addClass("loading");
      this._load("load", "onLoad");
    },
    empty: function () {
      this.getFiles().lsUploaderFile("destroy").remove();
      this.element.empty();
    },
    isEmpty: function () {
      return !this.getFiles().length;
    },
    onLoad: function (response) {
      this._removeClass("loading");
      this.element.html($.trim(response.html));
      this.initFiles(this.getFiles());
      this._trigger("afterload", null, { context: this, response: response });
    },
    addFile: function (data) {
      data.context = $(this.option("html.file"));
      this.initFiles(data.context).lsUploaderFile("uploading");
      this.element.prepend(data.context);
      this._trigger("afterfileadd", null, { context: this, data: data });
    },
    initFiles: function (files) {
      return files.lsUploaderFile({
        urls: { remove: this.option("urls.remove") },
        beforeactivate: this._onFileBeforeActivate.bind(this),
        afteractivate: this._onFileAfterActivate.bind(this),
        afterdeactivate: this._onFileAfterDeactivate.bind(this),
        afterunselect: this._onFileAfterUnselect.bind(this),
        afterremove: this._onFileAfterRemove.bind(this),
        beforeclick: this._onFileBeforeClick.bind(this),
      });
    },
    reinitFiles: function () {
      this.initFiles(
        this.getFiles().not(":data( 'livestreet-lsUploaderFile' )")
      );
    },
    getActiveFile: function () {
      return this.getFiles().filter("." + ls.options.classes.states.active);
    },
    getSelectedFiles: function () {
      return this.getFiles().filter(function () {
        return $(this).lsUploaderFile("getState", "selected");
      });
    },
    getFileById: function (id) {
      return this.getFiles().filter(function () {
        return $(this).lsUploaderFile("getProperty", "id") === id;
      });
    },
    getFiles: function () {
      return this.element.find(this.option("selectors.file"));
    },
    unselectAll: function () {
      this.getFiles().lsUploaderFile("unselect");
    },
    filterFilesByType: function (types) {
      this.unselectAll();
      this.getFiles().each(function () {
        var file = $(this);
        if (!~types.indexOf(file.lsUploaderFile("getProperty", "type"))) {
          file.hide();
        }
      });
    },
    resetFilter: function () {
      this.getFiles().show();
    },
    _activateNextFile: function () {
      this.getSelectedFiles().last().lsUploaderFile("activate");
    },
    _onFileBeforeClick: function (event, data) {
      var multiselect = this.option("multiselect"),
        multiselect_ctrl = this.option("multiselect_ctrl");
      if (
        !multiselect ||
        (multiselect && multiselect_ctrl && !(event.ctrlKey || event.metaKey))
      ) {
        this.unselectAll();
      }
    },
    _onFileBeforeActivate: function (event, data) {
      this.getActiveFile().lsUploaderFile("deactivate");
    },
    _onFileAfterActivate: function (event, data) {
      this._trigger("filebeforeactivate", event, data);
      this._trigger("fileactivate", event, data);
    },
    _onFileAfterDeactivate: function (event, data) {
      this._trigger("filebeforedeactivate", event, data);
      this._trigger("filedeactivate", event, data);
    },
    _onFileAfterUnselect: function (event, data) {
      this._activateNextFile();
    },
    _onFileAfterRemove: function (event, data) {
      this._trigger("filebeforeremove", event, data);
      data.element.lsUploaderFile("destroy");
      data.element.remove();
      this._trigger("fileafterremove", event, data);
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsUploaderFile", $.livestreet.lsComponent, {
    options: {
      urls: { remove: aRouter["ajax"] + "media/remove-file/" },
      selectors: {
        progress_value: ".js-uploader-file-progress-value",
        progress_label: ".js-uploader-file-progress-label",
      },
      classes: {
        active: "active",
        error: "is-error",
        uploading: "is-uploading",
        selected: "is-selected",
      },
      params: {},
    },
    _create: function () {
      this._super();
      this._info = this.getInfo();
      this._states = {
        active: false,
        selected: false,
        uploading: false,
        error: false,
      };
      this._on({ click: "onClick" });
    },
    onClick: function (event) {
      this._trigger("beforeclick", event, this);
      this.toggleActive();
      this._trigger("afterclick", event, this);
    },
    toggleActive: function () {
      this[this.getState("active") ? "unselect" : "activate"]();
    },
    getInfo: function () {
      var result = {};
      $.each(this.element[0].attributes, function (index, attr) {
        if (~attr.name.indexOf("data-media")) {
          result[attr.name.slice(11)] = attr.value;
        }
      });
      return result;
    },
    setProperty: function (name, value) {
      this._info[name] = value;
    },
    getProperty: function (name) {
      return this._info[name];
    },
    remove: function () {
      this.unselect();
      this._load("remove", { id: this._info.id }, "removeDom");
    },
    removeDom: function () {
      this.element.fadeOut(500, this.onRemoveDom.bind(this));
    },
    onRemoveDom: function () {
      this._trigger("afterremove", null, this);
    },
    activate: function () {
      if (
        this.getState("active") ||
        this.getState("error") ||
        this.getState("uploading")
      )
        return;
      this._trigger("beforeactivate", null, this);
      this.select();
      this.setState("active", true);
      this._addClass("active");
      this._trigger("afteractivate", null, this);
    },
    deactivate: function () {
      if (!this.getState("active")) return;
      this._trigger("beforedeactivate", null, this);
      this.setState("active", false);
      this.element.removeClass(this.option("classes.active"));
      this._trigger("afterdeactivate", null, this);
    },
    select: function () {
      if (this.getState("selected")) return;
      this._trigger("beforeselect", null, this);
      this.setState("selected", true);
      this._addClass("selected");
      this._trigger("afterselect", null, this);
    },
    unselect: function () {
      if (!this.getState("selected")) return;
      this._trigger("beforeunselect", null, this);
      this.setState("selected", false);
      this.element.removeClass(this.option("classes.selected"));
      if (this.getState("active")) this.deactivate();
      this._trigger("afterunselect", null, this);
    },
    error: function () {
      this.setState("error", true);
      this._addClass("error");
      this.getElement("progress_value").height(0);
      this.getElement("progress_label").text("ERROR");
    },
    uploading: function () {
      this.setState("uploading", true);
      this._addClass("uploading");
    },
    uploaded: function () {
      this.setState("uploading", false);
      this.element.removeClass(this.option("classes.uploading"));
    },
    setProgress: function (percent) {
      this.getElement("progress_value").height(percent + "%");
      this.getElement("progress_label").text(
        percent == 100 ? "ÐžÐ±Ñ€Ð°Ð±Ð¾Ñ‚ÐºÐ°.." : percent + "%"
      );
    },
    getState: function (state) {
      return this._states[state];
    },
    setState: function (state, value) {
      this._states[state] = value;
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsUploader", $.livestreet.lsComponent, {
    options: {
      urls: {
        upload: aRouter["ajax"] + "media/upload/",
        load: aRouter["ajax"] + "media/load-gallery/",
        remove: aRouter["ajax"] + "media/remove-file/",
        update_property: aRouter["ajax"] + "media/save-data-file/",
        generate_target_tmp: aRouter["ajax"] + "media/generate-target-tmp/",
      },
      selectors: {
        list: ".js-uploader-list",
        info: ".js-uploader-info",
        aside: ".js-uploader-aside",
        blocks: ".js-uploader-blocks",
        empty: ".js-uploader-aside-empty",
        content: ".js-uploader-content",
        upload_zone: ".js-uploader-area",
        upload_input: ".js-uploader-file",
        filter: ".js-uploader-filter",
        filter_item: ".js-uploader-filter-item",
        list_blankslate: ".js-uploader-list-blankslate",
        list_pagination: ".js-uploader-list-pagination",
      },
      classes: { empty: "is-empty" },
      fileupload: {
        url: null,
        sequentialUploads: false,
        singleFileUploads: true,
        limitConcurrentUploads: 3,
      },
      params: {},
      autoload: true,
      info_options: {},
      list_options: {},
    },
    _create: function () {
      this._super();
      this.option("target_type", this.option("params.target_type"));
      if (!this.option("params.target_id")) {
        this.option(
          "params.target_tmp",
          this.element.data("tmp") ||
            $.cookie("media_target_tmp_" + this.option("params.target_type"))
        );
        if (!this.option("params.target_tmp")) {
          this.generateTargetTmp();
        }
      }
      this.elements.info.lsUploaderInfo(
        $.extend({}, this.option("info_options"), {
          urls: { update_property: this.option("urls.update_property") },
          uploader: this.element,
        })
      );
      this.elements.list.lsUploaderFileList(
        $.extend({}, this.option("list_options"), {
          urls: {
            load: this.option("urls.load"),
            remove: this.option("urls.remove"),
          },
          params: this.option("params"),
          beforeload: this._onFileListBeforeLoad.bind(this),
          afterload: this._onFileListLoaded.bind(this),
          filebeforeactivate: this._onFileBeforeActivate.bind(this),
          fileactivate: this._onFileActivate.bind(this),
          filedeactivate: this._onFileDeactivate.bind(this),
          filebeforedeactivate: this._onFileBeforeDeactivate.bind(this),
          fileafterremove: this._onFileAfterRemove.bind(this),
        })
      );
      this.elements.list_pagination.lsPaginationAjax({
        pagechanged: this._onPageChanged.bind(this),
      });
      this._initFileUploader();
      this._activeFilter = "uploaded";
      this._on(this.elements.filter_item, {
        click: function (event) {
          this.setTargetTypeFilter($(event.target).data("filter"));
        },
      });
      this.option("autoload") && this.elements.list.lsUploaderFileList("load");
    },
    setTargetTypeFilter: function (filter) {
      var targetType = filter === "all" ? null : this.option("target_type");
      this._activeFilter = filter;
      this.elements.filter_item.removeClass("active");
      this.elements.filter_item
        .filter("[data-filter=" + filter + "]")
        .addClass("active");
      this.elements.list.lsUploaderFileList(
        "option",
        "params.target_type",
        targetType
      );
      this.elements.list.lsUploaderFileList("option", "params.page", 1);
      this.elements.list_pagination.hide();
      this.reload();
    },
    _initFileUploader: function () {
      $.extend(this.option("fileupload"), {
        url: this.option("urls.upload"),
        dropZone: this.elements.upload_zone,
      });
      this.elements.upload_input.fileupload(this.option("fileupload"));
      this.element.on({
        fileuploadadd: this.onUploadAdd.bind(this),
        fileuploaddone: function (event, data) {
          this[data.result.bStateError ? "onUploadError" : "onUploadDone"](
            data.context,
            data.result
          );
        }.bind(this),
        fileuploadprogress: function (event, data) {
          this.onUploadProgress(
            data.context,
            parseInt((data.loaded / data.total) * 100, 10)
          );
        }.bind(this),
      });
    },
    _resizeFileList: function () {
      var asideHeight = this.getElement("aside").outerHeight();
      var maxHeight = this.getElement("list").lsUploaderFileList(
        "option",
        "max_height"
      );
      if (
        !this.getElement("aside").hasClass("is-empty") &&
        asideHeight > maxHeight
      ) {
        this.getElement("list").css("max-height", asideHeight);
      } else {
        this.getElement("list").css("max-height", maxHeight);
      }
    },
    _onPageChanged: function (event, page) {
      this.getElement("list").lsUploaderFileList("option", "params.page", page);
      this.reload();
    },
    _onFileAfterRemove: function (event, data) {
      this.checkEmpty();
    },
    _onFileBeforeDeactivate: function (event, data) {
      this.hideBlocks();
      this.getElement("info").lsUploaderInfo("empty");
    },
    _onFileBeforeActivate: function (event, data) {
      this.showBlocks();
      this.getElement("info").lsUploaderInfo("setFile", data.element);
      this._trigger("filebeforeactivate", event, data);
    },
    _onFileDeactivate: function (event, data) {
      this._resizeFileList();
      this._trigger("fileafteractivate", event, data);
    },
    _onFileActivate: function (event, data) {
      this._resizeFileList();
      this._trigger("fileafteractivate", event, data);
    },
    _onFileListBeforeLoad: function (event, data) {
      this.elements.list_blankslate.hide();
    },
    _onFileListLoaded: function (event, data) {
      if (data.response.pagination) {
        this.elements.list_pagination
          .lsPaginationAjax(
            "setTotalPages",
            data.response.pagination.iCountPage
          )
          .lsPaginationAjax(
            "setCurrentPage",
            data.response.pagination.iCurrentPage
          )
          .show();
      } else {
        this.elements.list_pagination.hide();
      }
      this.checkEmpty();
      this._resizeFileList();
    },
    onUploadProgress: function (file, percent) {
      file.lsUploaderFile("setProgress", percent);
    },
    onUploadAdd: function (event, file) {
      $.each(
        this.option("params"),
        function (key, value) {
          value === null && this.option("params." + key, "");
        }.bind(this)
      );
      $(event.target).fileupload("option", "formData", this.option("params"));
      this.elements.list.lsUploaderFileList("addFile", file);
      this.elements.list_blankslate.hide();
    },
    onUploadDone: function (file, response) {
      if (!this.elements.list.lsUploaderFileList("option", "multiselect")) {
        this.elements.list.lsUploaderFileList("unselectAll");
      }
      file.lsUploaderFile("destroy");
      file.replaceWith(
        this.elements.list
          .lsUploaderFileList("initFiles", $($.trim(response.sTemplateFile)))
          .lsUploaderFile("uploaded")
      );
      file = null;
    },
    onUploadError: function (file, response) {
      ls.msg.error(response.sMsgTitle, response.sMsg);
      file.lsUploaderFile("error");
      setTimeout(
        function () {
          file.lsUploaderFile("removeDom");
          file = null;
        }.bind(this),
        500
      );
    },
    generateTargetTmp: function () {
      var key =
        "ls.media.target_tmp_create_request_" +
        this.option("params.target_type");
      if (ls.registry.get(key)) {
        this.window.bind(
          key,
          function (e, sTmpKey) {
            this.option("params.target_tmp", sTmpKey || null);
          }.bind(this)
        );
      } else {
        ls.registry.set(key, true);
        this._load(
          "generate_target_tmp",
          { type: this.option("params.target_type") },
          function (response) {
            this.window.trigger(key, [response.sTmpKey]);
            this.option("params.target_tmp", response.sTmpKey || null);
          },
          { async: false }
        );
      }
    },
    hideBlocks: function () {
      this._addClass(this.getElement("aside"), "empty");
    },
    showBlocks: function () {
      this._removeClass(this.getElement("aside"), "empty");
    },
    checkEmpty: function () {
      this.elements.list_blankslate[
        this.getElement("list").lsUploaderFileList("isEmpty") ? "show" : "hide"
      ]();
    },
    getElement: function (name) {
      return this.elements[name];
    },
    reload: function () {
      this.getElement("list").lsUploaderFileList("load");
    },
    getActiveFile: function () {
      return this.getElement("list").lsUploaderFileList("getActiveFile");
    },
    getSelectedFiles: function () {
      return this.getElement("list").lsUploaderFileList("getSelectedFiles");
    },
    getFiles: function () {
      return this.getElement("list").lsUploaderFileList("getFiles");
    },
    unselectAll: function () {
      this.getElement("list").lsUploaderFileList("unselectAll");
    },
    filterFilesByType: function (types) {
      this.getElement("list").lsUploaderFileList("filterFilesByType", types);
    },
    resetFilter: function () {
      this.getElement("list").lsUploaderFileList("resetFilter");
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsUploaderInfo", $.livestreet.lsComponent, {
    options: {
      urls: { update_property: aRouter["ajax"] + "media/save-data-file/" },
      selectors: {
        group: ".js-uploader-info-group",
        property: ".js-uploader-info-property",
        remove: ".js-uploader-info-remove",
      },
    },
    _create: function () {
      this._super();
      var _this = this;
      this.elements = {
        groups: this.element.find(this.option("selectors.group")),
        info: this.element.find(this.option("selectors.info")),
        properties: {
          image: this.element.find(
            this.option("selectors.property") + "[data-name=image]"
          ),
          name: this.element.find(
            this.option("selectors.property") + "[data-name=name]"
          ),
          filesize: this.element.find(
            this.option("selectors.property") + "[data-name=size]"
          ),
          date: this.element.find(
            this.option("selectors.property") + "[data-name=date]"
          ),
        },
      };
      this.file = $();
      this.element.on(
        "click" + this.eventNamespace,
        this.option("selectors.remove"),
        function (event) {
          this.file.lsUploaderFile("remove");
          event.preventDefault();
        }.bind(this)
      );
      this.element.on(
        "blur" + this.eventNamespace,
        ".js-uploader-info-property[type=text]",
        function () {
          var input = $(this);
          _this._updateProperty(input.attr("name"), input.val());
        }
      );
    },
    setFile: function (file) {
      this.file = file;
      var group = this._getGroupByType(
        this.file.lsUploaderFile("getProperty", "type")
      );
      this._setProperty(
        this.elements.properties.image,
        this.file.lsUploaderFile("getProperty", "preview")
      );
      this._setProperty(
        this.elements.properties.name,
        this.file.lsUploaderFile("getProperty", "file-name")
      );
      this._setProperty(
        this.elements.properties.filesize,
        Math.floor(
          this.file.lsUploaderFile("getProperty", "file-size") / 1024
        ) + " KB"
      );
      this._setProperty(
        this.elements.properties.date,
        this.file.lsUploaderFile("getProperty", "date-add")
      );
      this._activateGroup(group);
      this._getPropertiesByGroup(group).each(
        function (index, property) {
          var property = $(property);
          this._setProperty(
            property,
            this.getFile().lsUploaderFile("getProperty", property.data("name"))
          );
        }.bind(this)
      );
    },
    getFile: function () {
      return this.file;
    },
    empty: function () {
      this.file = $();
    },
    update: function () {
      this.setFile(this.file);
    },
    _setProperty: function (element, value) {
      switch (element.prop("tagName").toLowerCase()) {
        case "img":
          element.attr("src", value);
          break;
        case "input":
        case "textarea":
          element.val(value);
          break;
        default:
          element.text(value);
      }
    },
    _updateProperty: function (name, value) {
      var file = this.getFile();
      this._load(
        "update_property",
        {
          name: name,
          value: value,
          id: file.lsUploaderFile("getProperty", "id"),
        },
        function (response) {
          file.lsUploaderFile("setProperty", name, value);
        }
      );
    },
    _activateGroup: function (group) {
      this.elements.groups.hide();
      group.show();
    },
    _getGroupByType: function (type) {
      return this.elements.groups.filter("[data-type=" + type + "]");
    },
    _getPropertiesByGroup: function (group) {
      return group.find(this.option("selectors.property"));
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsUploaderAttach", $.livestreet.lsComponent, {
    options: {
      urls: {
        upload: null,
        load: null,
        remove: null,
        update_property: null,
        count: null,
        generate_target_tmp: null,
      },
      selectors: {
        modal: ".js-uploader-attach-modal",
        button: ".js-uploader-attach-button",
        counter: ".js-uploader-attach-file-counter",
        uploader: ".js-uploader-modal",
      },
      i18n: {
        empty: "@uploader.attach.empty",
        count: "@uploader.attach.count",
      },
    },
    _create: function () {
      this._super();
      this.elements.button.on("click", this.showUploader.bind(this));
      this.elements.modal.lsModal({
        aftershow: this.onUploaderShow.bind(this),
        afterhide: this.onUploaderHide.bind(this),
      });
      this.elements.uploader.lsUploader({
        autoload: false,
        urls: this.option("urls"),
        params: this.option("params"),
      });
    },
    showUploader: function () {
      this.elements.modal.lsModal("show");
    },
    onUploaderShow: function () {
      this.elements.uploader
        .lsUploader("getElement", "list")
        .lsUploaderFileList("load");
      this._setParam(
        "target_tmp",
        this.elements.uploader.lsUploader("option", "params.target_tmp")
      );
    },
    onUploaderHide: function () {
      this.updateCounter();
      this._trigger("afterhide", null, this);
    },
    updateCounter: function () {
      this.elements.counter.text("...");
      this._load(
        "count",
        function (response) {
          this.setCounter(response.count);
        }.bind(this)
      );
    },
    setCounter: function (count) {
      if (count <= 0) {
        this.elements.counter.text(this._i18n("empty"));
      } else {
        this.elements.counter.text(this._i18n("count", count));
      }
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsPagination", $.livestreet.lsComponent, {
    options: {
      keys: { next: "ctrl+right", prev: "ctrl+left" },
      hash: { next: "", prev: "" },
      i18n: {
        last: "@pagination.notices.last",
        first: "@pagination.notices.first",
      },
    },
    _create: function () {
      this.document.bind(
        "keydown" + this.eventNamespace,
        this.options.keys.next,
        this.next.bind(this, false)
      );
      this.document.bind(
        "keydown" + this.eventNamespace,
        this.options.keys.prev,
        this.prev.bind(this, false)
      );
    },
    _go: function (name) {
      return function (useHash) {
        var url = this.element.data("pagination-" + name);
        if (url) {
          window.location =
            url +
            (this.options.hash[name] && useHash
              ? "#" + this.options.hash[name]
              : "");
        } else {
          ls.msg.error(null, this._i18n(name == "next" ? "last" : "first"));
        }
      };
    },
    next: function (useHash) {
      return this._go("next").apply(this, arguments);
    },
    prev: function (useHash) {
      return this._go("prev").apply(this, arguments);
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsPaginationAjax", $.livestreet.lsComponent, {
    options: {
      selectors: { page: ".js-pagination-item" },
      classes: { active: "active" },
      html: {
        page: function (pageNumber) {
          return (
            '<div class="ls-pagination-item js-pagination-item" data-page="' +
            pageNumber +
            '">' +
            '<span class="ls-pagination-item-link ls-pagination-item-inner">' +
            pageNumber +
            "</span>" +
            "</div>"
          );
        },
        separator: function () {
          return '<div class="ls-pagination-item"><span class="ls-pagination-item-inner">...</span></div>';
        },
      },
      padding: 1,
      total_pages: 10,
      hide_one_page: false,
    },
    _create: function () {
      this._super();
      this.MIN_PAGE = 1;
      this._currentPage = 0;
      this._totalPages = 0;
      this.setTotalPages(this.option("total_pages"));
      this.setCurrentPage(this.MIN_PAGE);
      this.element.on(
        "click",
        this.option("selectors.page"),
        this._onClick.bind(this)
      );
    },
    _onClick: function (event) {
      this.go(+$(event.currentTarget).data("page"));
    },
    _build: function () {
      var isVisible = this.element.is(":visible");
      var current = this.getCurrentPage();
      var total = this.getTotalPages();
      var padding = this.option("padding");
      var result = "";
      var start = this.MIN_PAGE;
      var end = total;
      if (total === 1 && this.option("hide_one_page")) {
        this.element.empty().hide();
        return;
      }
      if (total > padding * 2 + 1) {
        start = current - padding < 4 ? 1 : current - padding;
        end = current + padding > total - 3 ? total : current + padding;
      }
      if (start > 2) {
        result += this.option("html.page")(1) + this.option("html.separator")();
      }
      for (var i = start; i <= end; i++) {
        result += this.option("html.page")(i);
      }
      if (end < total - 1) {
        result +=
          this.option("html.separator")() + this.option("html.page")(total);
      }
      this.element.html(result);
      if (isVisible) this.element.show();
    },
    getCurrentPage: function () {
      return this._currentPage;
    },
    setCurrentPage: function (pageNumber) {
      if (pageNumber < 1 || pageNumber > this.getTotalPages()) return;
      this._currentPage = pageNumber;
      this._build();
      this.element
        .find(this.option("selectors.page"))
        .removeClass(this.option("classes.active"))
        .filter("[data-page=" + pageNumber + "]")
        .addClass(this.option("classes.active"));
      this._trigger("pageset", null, pageNumber);
    },
    getTotalPages: function () {
      return this._totalPages;
    },
    setTotalPages: function (totalPages) {
      if (totalPages < this.MIN_PAGE) {
        throw new RangeError(
          "Parameter totalPages must be greater than " + this.MIN_PAGE
        );
      }
      this._totalPages = totalPages;
    },
    go: function (pageNumber) {
      this.setCurrentPage(pageNumber);
      this._trigger("pagechanged", null, pageNumber);
    },
    next: function () {
      if (this.getCurrentPage() === this.getTotalPages()) return;
      this.go(this.getCurrentPage() + 1);
    },
    prev: function () {
      if (this.getCurrentPage() === this.MIN_PAGE) return;
      this.go(this.getCurrentPage() - 1);
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsMore", $.livestreet.lsComponent, {
    options: {
      urls: { load: null },
      selectors: { text: ".js-more-text" },
      classes: { loading: "ls-more--loading", locked: "ls-more--locked" },
      target: null,
      append: true,
      params: {},
      proxy: ["next_page"],
      i18n: {
        text: "@more.text",
        text_count: "@more.text_count",
        empty: "@more.empty",
      },
    },
    _create: function () {
      this._super();
      this.target = $(this.options.target);
      this._on({ click: "onClick" });
      this.element.bind(
        "keydown" + this.eventNamespace,
        "return",
        this.onClick.bind(this)
      );
    },
    onClick: function (event) {
      if (!this.isLocked()) this.load();
      event.preventDefault();
    },
    lock: function () {
      this._isLocked = true;
      this._addClass("loading locked");
    },
    unlock: function () {
      this._isLocked = false;
      this._removeClass("loading locked");
    },
    isLocked: function () {
      return this._isLocked;
    },
    getCount: function () {
      return parseInt(this.element.data("lsmore-count"), 10);
    },
    setCount: function (number) {
      this.element.data("lsmore-count", number);
      this.elements.text.text(this._i18n("text_count", number));
    },
    load: function () {
      this._trigger("beforeload", null, this);
      this.lock();
      this._load("load", function (response) {
        if (response.count_loaded > 0) {
          this.target[this.options.append ? "append" : "prepend"](
            $.trim(response.html)
          );
          var countLeft = this.getCount() - response.count_loaded;
          if ("undefined" !== typeof response.count_left) {
            countLeft = response.count_left;
          }
          if (countLeft <= 0) {
            response.hide = true;
          } else {
            this.setCount(countLeft || 0);
          }
          $.each(
            this.options.proxy,
            function (k, v) {
              if (response[v]) this._setParam(v, response[v]);
            }.bind(this)
          );
        } else {
          ls.msg.notice(null, this._i18n("empty"));
          response.hide = true;
        }
        if (response.hide) {
          this.element.hide();
        } else {
          this.element.show();
        }
        this.unlock();
        this._trigger("afterload", null, { context: this, response: response });
      });
    },
  });
})(jQuery);
(function (factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else if (typeof exports === "object") {
    factory(require("jquery"));
  } else {
    factory(jQuery);
  }
})(function ($) {
  "use strict";
  var $window = $(window);
  var $document = $(document);
  var location = window.location;
  var navigator = window.navigator;
  var ArrayBuffer = window.ArrayBuffer;
  var Uint8Array = window.Uint8Array;
  var DataView = window.DataView;
  var btoa = window.btoa;
  var NAMESPACE = "cropper";
  var CLASS_MODAL = "cropper-modal";
  var CLASS_HIDE = "cropper-hide";
  var CLASS_HIDDEN = "cropper-hidden";
  var CLASS_INVISIBLE = "cropper-invisible";
  var CLASS_MOVE = "cropper-move";
  var CLASS_CROP = "cropper-crop";
  var CLASS_DISABLED = "cropper-disabled";
  var CLASS_BG = "cropper-bg";
  var EVENT_MOUSE_DOWN = "mousedown touchstart pointerdown MSPointerDown";
  var EVENT_MOUSE_MOVE = "mousemove touchmove pointermove MSPointerMove";
  var EVENT_MOUSE_UP =
    "mouseup touchend touchcancel pointerup pointercancel MSPointerUp MSPointerCancel";
  var EVENT_WHEEL = "wheel mousewheel DOMMouseScroll";
  var EVENT_DBLCLICK = "dblclick";
  var EVENT_LOAD = "load." + NAMESPACE;
  var EVENT_ERROR = "error." + NAMESPACE;
  var EVENT_RESIZE = "resize." + NAMESPACE;
  var EVENT_BUILD = "build." + NAMESPACE;
  var EVENT_BUILT = "built." + NAMESPACE;
  var EVENT_CROP_START = "cropstart." + NAMESPACE;
  var EVENT_CROP_MOVE = "cropmove." + NAMESPACE;
  var EVENT_CROP_END = "cropend." + NAMESPACE;
  var EVENT_CROP = "crop." + NAMESPACE;
  var EVENT_ZOOM = "zoom." + NAMESPACE;
  var REGEXP_ACTIONS = /e|w|s|n|se|sw|ne|nw|all|crop|move|zoom/;
  var REGEXP_DATA_URL = /^data\:/;
  var REGEXP_DATA_URL_HEAD = /^data\:([^\;]+)\;base64,/;
  var REGEXP_DATA_URL_JPEG = /^data\:image\/jpeg.*;base64,/;
  var DATA_PREVIEW = "preview";
  var DATA_ACTION = "action";
  var ACTION_EAST = "e";
  var ACTION_WEST = "w";
  var ACTION_SOUTH = "s";
  var ACTION_NORTH = "n";
  var ACTION_SOUTH_EAST = "se";
  var ACTION_SOUTH_WEST = "sw";
  var ACTION_NORTH_EAST = "ne";
  var ACTION_NORTH_WEST = "nw";
  var ACTION_ALL = "all";
  var ACTION_CROP = "crop";
  var ACTION_MOVE = "move";
  var ACTION_ZOOM = "zoom";
  var ACTION_NONE = "none";
  var SUPPORT_CANVAS = $.isFunction($("<canvas>")[0].getContext);
  var IS_SAFARI =
    navigator &&
    /safari/i.test(navigator.userAgent) &&
    /apple computer/i.test(navigator.vendor);
  var num = Number;
  var min = Math.min;
  var max = Math.max;
  var abs = Math.abs;
  var sin = Math.sin;
  var cos = Math.cos;
  var sqrt = Math.sqrt;
  var round = Math.round;
  var floor = Math.floor;
  var fromCharCode = String.fromCharCode;
  function isNumber(n) {
    return typeof n === "number" && !isNaN(n);
  }
  function isUndefined(n) {
    return typeof n === "undefined";
  }
  function toArray(obj, offset) {
    var args = [];
    if (isNumber(offset)) {
      args.push(offset);
    }
    return args.slice.apply(obj, args);
  }
  function proxy(fn, context) {
    var args = toArray(arguments, 2);
    return function () {
      return fn.apply(context, args.concat(toArray(arguments)));
    };
  }
  function isCrossOriginURL(url) {
    var parts = url.match(/^(https?:)\/\/([^\:\/\?#]+):?(\d*)/i);
    return (
      parts &&
      (parts[1] !== location.protocol ||
        parts[2] !== location.hostname ||
        parts[3] !== location.port)
    );
  }
  function addTimestamp(url) {
    var timestamp = "timestamp=" + new Date().getTime();
    return url + (url.indexOf("?") === -1 ? "?" : "&") + timestamp;
  }
  function getCrossOrigin(crossOrigin) {
    return crossOrigin ? ' crossOrigin="' + crossOrigin + '"' : "";
  }
  function getImageSize(image, callback) {
    var newImage;
    if (image.naturalWidth && !IS_SAFARI) {
      return callback(image.naturalWidth, image.naturalHeight);
    }
    newImage = document.createElement("img");
    newImage.onload = function () {
      callback(this.width, this.height);
    };
    newImage.src = image.src;
  }
  function getTransform(options) {
    var transforms = [];
    var rotate = options.rotate;
    var scaleX = options.scaleX;
    var scaleY = options.scaleY;
    if (isNumber(rotate)) {
      transforms.push("rotate(" + rotate + "deg)");
    }
    if (isNumber(scaleX) && isNumber(scaleY)) {
      transforms.push("scale(" + scaleX + "," + scaleY + ")");
    }
    return transforms.length ? transforms.join(" ") : "none";
  }
  function getRotatedSizes(data, isReversed) {
    var deg = abs(data.degree) % 180;
    var arc = ((deg > 90 ? 180 - deg : deg) * Math.PI) / 180;
    var sinArc = sin(arc);
    var cosArc = cos(arc);
    var width = data.width;
    var height = data.height;
    var aspectRatio = data.aspectRatio;
    var newWidth;
    var newHeight;
    if (!isReversed) {
      newWidth = width * cosArc + height * sinArc;
      newHeight = width * sinArc + height * cosArc;
    } else {
      newWidth = width / (cosArc + sinArc / aspectRatio);
      newHeight = newWidth / aspectRatio;
    }
    return { width: newWidth, height: newHeight };
  }
  function getSourceCanvas(image, data) {
    var canvas = $("<canvas>")[0];
    var context = canvas.getContext("2d");
    var dstX = 0;
    var dstY = 0;
    var dstWidth = data.naturalWidth;
    var dstHeight = data.naturalHeight;
    var rotate = data.rotate;
    var scaleX = data.scaleX;
    var scaleY = data.scaleY;
    var scalable =
      isNumber(scaleX) && isNumber(scaleY) && (scaleX !== 1 || scaleY !== 1);
    var rotatable = isNumber(rotate) && rotate !== 0;
    var advanced = rotatable || scalable;
    var canvasWidth = dstWidth * abs(scaleX || 1);
    var canvasHeight = dstHeight * abs(scaleY || 1);
    var translateX;
    var translateY;
    var rotated;
    if (scalable) {
      translateX = canvasWidth / 2;
      translateY = canvasHeight / 2;
    }
    if (rotatable) {
      rotated = getRotatedSizes({
        width: canvasWidth,
        height: canvasHeight,
        degree: rotate,
      });
      canvasWidth = rotated.width;
      canvasHeight = rotated.height;
      translateX = canvasWidth / 2;
      translateY = canvasHeight / 2;
    }
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
    if (advanced) {
      dstX = -dstWidth / 2;
      dstY = -dstHeight / 2;
      context.save();
      context.translate(translateX, translateY);
    }
    if (rotatable) {
      context.rotate((rotate * Math.PI) / 180);
    }
    if (scalable) {
      context.scale(scaleX, scaleY);
    }
    context.drawImage(
      image,
      floor(dstX),
      floor(dstY),
      floor(dstWidth),
      floor(dstHeight)
    );
    if (advanced) {
      context.restore();
    }
    return canvas;
  }
  function getTouchesCenter(touches) {
    var length = touches.length;
    var pageX = 0;
    var pageY = 0;
    if (length) {
      $.each(touches, function (i, touch) {
        pageX += touch.pageX;
        pageY += touch.pageY;
      });
      pageX /= length;
      pageY /= length;
    }
    return { pageX: pageX, pageY: pageY };
  }
  function getStringFromCharCode(dataView, start, length) {
    var str = "";
    var i;
    for (i = start, length += start; i < length; i++) {
      str += fromCharCode(dataView.getUint8(i));
    }
    return str;
  }
  function getOrientation(arrayBuffer) {
    var dataView = new DataView(arrayBuffer);
    var length = dataView.byteLength;
    var orientation;
    var exifIDCode;
    var tiffOffset;
    var firstIFDOffset;
    var littleEndian;
    var endianness;
    var app1Start;
    var ifdStart;
    var offset;
    var i;
    if (dataView.getUint8(0) === 0xff && dataView.getUint8(1) === 0xd8) {
      offset = 2;
      while (offset < length) {
        if (
          dataView.getUint8(offset) === 0xff &&
          dataView.getUint8(offset + 1) === 0xe1
        ) {
          app1Start = offset;
          break;
        }
        offset++;
      }
    }
    if (app1Start) {
      exifIDCode = app1Start + 4;
      tiffOffset = app1Start + 10;
      if (getStringFromCharCode(dataView, exifIDCode, 4) === "Exif") {
        endianness = dataView.getUint16(tiffOffset);
        littleEndian = endianness === 0x4949;
        if (littleEndian || endianness === 0x4d4d) {
          if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002a) {
            firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);
            if (firstIFDOffset >= 0x00000008) {
              ifdStart = tiffOffset + firstIFDOffset;
            }
          }
        }
      }
    }
    if (ifdStart) {
      length = dataView.getUint16(ifdStart, littleEndian);
      for (i = 0; i < length; i++) {
        offset = ifdStart + i * 12 + 2;
        if (dataView.getUint16(offset, littleEndian) === 0x0112) {
          offset += 8;
          orientation = dataView.getUint16(offset, littleEndian);
          if (IS_SAFARI) {
            dataView.setUint16(offset, 1, littleEndian);
          }
          break;
        }
      }
    }
    return orientation;
  }
  function dataURLToArrayBuffer(dataURL) {
    var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, "");
    var binary = atob(base64);
    var length = binary.length;
    var arrayBuffer = new ArrayBuffer(length);
    var dataView = new Uint8Array(arrayBuffer);
    var i;
    for (i = 0; i < length; i++) {
      dataView[i] = binary.charCodeAt(i);
    }
    return arrayBuffer;
  }
  function arrayBufferToDataURL(arrayBuffer) {
    var dataView = new Uint8Array(arrayBuffer);
    var length = dataView.length;
    var base64 = "";
    var i;
    for (i = 0; i < length; i++) {
      base64 += fromCharCode(dataView[i]);
    }
    return "data:image/jpeg;base64," + btoa(base64);
  }
  function Cropper(element, options) {
    this.$element = $(element);
    this.options = $.extend(
      {},
      Cropper.DEFAULTS,
      $.isPlainObject(options) && options
    );
    this.isLoaded = false;
    this.isBuilt = false;
    this.isCompleted = false;
    this.isRotated = false;
    this.isCropped = false;
    this.isDisabled = false;
    this.isReplaced = false;
    this.isLimited = false;
    this.wheeling = false;
    this.isImg = false;
    this.originalUrl = "";
    this.canvas = null;
    this.cropBox = null;
    this.init();
  }
  Cropper.prototype = {
    constructor: Cropper,
    init: function () {
      var $this = this.$element;
      var url;
      if ($this.is("img")) {
        this.isImg = true;
        this.originalUrl = url = $this.attr("src");
        if (!url) {
          return;
        }
        url = $this.prop("src");
      } else if ($this.is("canvas") && SUPPORT_CANVAS) {
        url = $this[0].toDataURL();
      }
      this.load(url);
    },
    trigger: function (type, data) {
      var e = $.Event(type, data);
      this.$element.trigger(e);
      return e;
    },
    load: function (url) {
      var options = this.options;
      var $this = this.$element;
      var read;
      var xhr;
      if (!url) {
        return;
      }
      $this.one(EVENT_BUILD, options.build);
      if (this.trigger(EVENT_BUILD).isDefaultPrevented()) {
        return;
      }
      this.url = url;
      this.image = {};
      if (!options.checkOrientation || !ArrayBuffer) {
        return this.clone();
      }
      read = $.proxy(this.read, this);
      if (REGEXP_DATA_URL.test(url)) {
        return REGEXP_DATA_URL_JPEG.test(url)
          ? read(dataURLToArrayBuffer(url))
          : this.clone();
      }
      xhr = new XMLHttpRequest();
      xhr.onerror = xhr.onabort = $.proxy(function () {
        this.clone();
      }, this);
      xhr.onload = function () {
        read(this.response);
      };
      xhr.open("get", url);
      xhr.responseType = "arraybuffer";
      xhr.send();
    },
    read: function (arrayBuffer) {
      var options = this.options;
      var orientation = getOrientation(arrayBuffer);
      var image = this.image;
      var rotate;
      var scaleX;
      var scaleY;
      if (orientation > 1) {
        this.url = arrayBufferToDataURL(arrayBuffer);
        switch (orientation) {
          case 2:
            scaleX = -1;
            break;
          case 3:
            rotate = -180;
            break;
          case 4:
            scaleY = -1;
            break;
          case 5:
            rotate = 90;
            scaleY = -1;
            break;
          case 6:
            rotate = 90;
            break;
          case 7:
            rotate = 90;
            scaleX = -1;
            break;
          case 8:
            rotate = -90;
            break;
        }
      }
      if (options.rotatable) {
        image.rotate = rotate;
      }
      if (options.scalable) {
        image.scaleX = scaleX;
        image.scaleY = scaleY;
      }
      this.clone();
    },
    clone: function () {
      var options = this.options;
      var $this = this.$element;
      var url = this.url;
      var crossOrigin = "";
      var crossOriginUrl;
      var $clone;
      if (options.checkCrossOrigin && isCrossOriginURL(url)) {
        crossOrigin = $this.prop("crossOrigin");
        if (crossOrigin) {
          crossOriginUrl = url;
        } else {
          crossOrigin = "anonymous";
          crossOriginUrl = addTimestamp(url);
        }
      }
      this.crossOrigin = crossOrigin;
      this.crossOriginUrl = crossOriginUrl;
      this.$clone = $clone = $(
        "<img" +
          getCrossOrigin(crossOrigin) +
          ' src="' +
          (crossOriginUrl || url) +
          '">'
      );
      if (this.isImg) {
        if ($this[0].complete) {
          this.start();
        } else {
          $this.one(EVENT_LOAD, $.proxy(this.start, this));
        }
      } else {
        $clone
          .one(EVENT_LOAD, $.proxy(this.start, this))
          .one(EVENT_ERROR, $.proxy(this.stop, this))
          .addClass(CLASS_HIDE)
          .insertAfter($this);
      }
    },
    start: function () {
      var $image = this.$element;
      var $clone = this.$clone;
      if (!this.isImg) {
        $clone.off(EVENT_ERROR, this.stop);
        $image = $clone;
      }
      getImageSize(
        $image[0],
        $.proxy(function (naturalWidth, naturalHeight) {
          $.extend(this.image, {
            naturalWidth: naturalWidth,
            naturalHeight: naturalHeight,
            aspectRatio: naturalWidth / naturalHeight,
          });
          this.isLoaded = true;
          this.build();
        }, this)
      );
    },
    stop: function () {
      this.$clone.remove();
      this.$clone = null;
    },
    build: function () {
      var options = this.options;
      var $this = this.$element;
      var $clone = this.$clone;
      var $cropper;
      var $cropBox;
      var $face;
      if (!this.isLoaded) {
        return;
      }
      if (this.isBuilt) {
        this.unbuild();
      }
      this.$container = $this.parent();
      this.$cropper = $cropper = $(Cropper.TEMPLATE);
      this.$canvas = $cropper.find(".cropper-canvas").append($clone);
      this.$dragBox = $cropper.find(".cropper-drag-box");
      this.$cropBox = $cropBox = $cropper.find(".cropper-crop-box");
      this.$viewBox = $cropper.find(".cropper-view-box");
      this.$face = $face = $cropBox.find(".cropper-face");
      $this.addClass(CLASS_HIDDEN).after($cropper);
      if (!this.isImg) {
        $clone.removeClass(CLASS_HIDE);
      }
      this.initPreview();
      this.bind();
      options.aspectRatio = max(0, options.aspectRatio) || NaN;
      options.viewMode = max(0, min(3, round(options.viewMode))) || 0;
      if (options.autoCrop) {
        this.isCropped = true;
        if (options.modal) {
          this.$dragBox.addClass(CLASS_MODAL);
        }
      } else {
        $cropBox.addClass(CLASS_HIDDEN);
      }
      if (!options.guides) {
        $cropBox.find(".cropper-dashed").addClass(CLASS_HIDDEN);
      }
      if (!options.center) {
        $cropBox.find(".cropper-center").addClass(CLASS_HIDDEN);
      }
      if (options.cropBoxMovable) {
        $face.addClass(CLASS_MOVE).data(DATA_ACTION, ACTION_ALL);
      }
      if (!options.highlight) {
        $face.addClass(CLASS_INVISIBLE);
      }
      if (options.background) {
        $cropper.addClass(CLASS_BG);
      }
      if (!options.cropBoxResizable) {
        $cropBox.find(".cropper-line, .cropper-point").addClass(CLASS_HIDDEN);
      }
      this.setDragMode(options.dragMode);
      this.render();
      this.isBuilt = true;
      this.setData(options.data);
      $this.one(EVENT_BUILT, options.built);
      setTimeout(
        $.proxy(function () {
          this.trigger(EVENT_BUILT);
          this.isCompleted = true;
        }, this),
        0
      );
    },
    unbuild: function () {
      if (!this.isBuilt) {
        return;
      }
      this.isBuilt = false;
      this.isCompleted = false;
      this.initialImage = null;
      this.initialCanvas = null;
      this.initialCropBox = null;
      this.container = null;
      this.canvas = null;
      this.cropBox = null;
      this.unbind();
      this.resetPreview();
      this.$preview = null;
      this.$viewBox = null;
      this.$cropBox = null;
      this.$dragBox = null;
      this.$canvas = null;
      this.$container = null;
      this.$cropper.remove();
      this.$cropper = null;
    },
    render: function () {
      this.initContainer();
      this.initCanvas();
      this.initCropBox();
      this.renderCanvas();
      if (this.isCropped) {
        this.renderCropBox();
      }
    },
    initContainer: function () {
      var options = this.options;
      var $this = this.$element;
      var $container = this.$container;
      var $cropper = this.$cropper;
      $cropper.addClass(CLASS_HIDDEN);
      $this.removeClass(CLASS_HIDDEN);
      $cropper.css(
        (this.container = {
          width: max($container.width(), num(options.minContainerWidth) || 200),
          height: max(
            $container.height(),
            num(options.minContainerHeight) || 100
          ),
        })
      );
      $this.addClass(CLASS_HIDDEN);
      $cropper.removeClass(CLASS_HIDDEN);
    },
    initCanvas: function () {
      var viewMode = this.options.viewMode;
      var container = this.container;
      var containerWidth = container.width;
      var containerHeight = container.height;
      var image = this.image;
      var imageNaturalWidth = image.naturalWidth;
      var imageNaturalHeight = image.naturalHeight;
      var is90Degree = abs(image.rotate) === 90;
      var naturalWidth = is90Degree ? imageNaturalHeight : imageNaturalWidth;
      var naturalHeight = is90Degree ? imageNaturalWidth : imageNaturalHeight;
      var aspectRatio = naturalWidth / naturalHeight;
      var canvasWidth = containerWidth;
      var canvasHeight = containerHeight;
      var canvas;
      if (containerHeight * aspectRatio > containerWidth) {
        if (viewMode === 3) {
          canvasWidth = containerHeight * aspectRatio;
        } else {
          canvasHeight = containerWidth / aspectRatio;
        }
      } else {
        if (viewMode === 3) {
          canvasHeight = containerWidth / aspectRatio;
        } else {
          canvasWidth = containerHeight * aspectRatio;
        }
      }
      canvas = {
        naturalWidth: naturalWidth,
        naturalHeight: naturalHeight,
        aspectRatio: aspectRatio,
        width: canvasWidth,
        height: canvasHeight,
      };
      canvas.oldLeft = canvas.left = (containerWidth - canvasWidth) / 2;
      canvas.oldTop = canvas.top = (containerHeight - canvasHeight) / 2;
      this.canvas = canvas;
      this.isLimited = viewMode === 1 || viewMode === 2;
      this.limitCanvas(true, true);
      this.initialImage = $.extend({}, image);
      this.initialCanvas = $.extend({}, canvas);
    },
    limitCanvas: function (isSizeLimited, isPositionLimited) {
      var options = this.options;
      var viewMode = options.viewMode;
      var container = this.container;
      var containerWidth = container.width;
      var containerHeight = container.height;
      var canvas = this.canvas;
      var aspectRatio = canvas.aspectRatio;
      var cropBox = this.cropBox;
      var isCropped = this.isCropped && cropBox;
      var minCanvasWidth;
      var minCanvasHeight;
      var newCanvasLeft;
      var newCanvasTop;
      if (isSizeLimited) {
        minCanvasWidth = num(options.minCanvasWidth) || 0;
        minCanvasHeight = num(options.minCanvasHeight) || 0;
        if (viewMode) {
          if (viewMode > 1) {
            minCanvasWidth = max(minCanvasWidth, containerWidth);
            minCanvasHeight = max(minCanvasHeight, containerHeight);
            if (viewMode === 3) {
              if (minCanvasHeight * aspectRatio > minCanvasWidth) {
                minCanvasWidth = minCanvasHeight * aspectRatio;
              } else {
                minCanvasHeight = minCanvasWidth / aspectRatio;
              }
            }
          } else {
            if (minCanvasWidth) {
              minCanvasWidth = max(
                minCanvasWidth,
                isCropped ? cropBox.width : 0
              );
            } else if (minCanvasHeight) {
              minCanvasHeight = max(
                minCanvasHeight,
                isCropped ? cropBox.height : 0
              );
            } else if (isCropped) {
              minCanvasWidth = cropBox.width;
              minCanvasHeight = cropBox.height;
              if (minCanvasHeight * aspectRatio > minCanvasWidth) {
                minCanvasWidth = minCanvasHeight * aspectRatio;
              } else {
                minCanvasHeight = minCanvasWidth / aspectRatio;
              }
            }
          }
        }
        if (minCanvasWidth && minCanvasHeight) {
          if (minCanvasHeight * aspectRatio > minCanvasWidth) {
            minCanvasHeight = minCanvasWidth / aspectRatio;
          } else {
            minCanvasWidth = minCanvasHeight * aspectRatio;
          }
        } else if (minCanvasWidth) {
          minCanvasHeight = minCanvasWidth / aspectRatio;
        } else if (minCanvasHeight) {
          minCanvasWidth = minCanvasHeight * aspectRatio;
        }
        canvas.minWidth = minCanvasWidth;
        canvas.minHeight = minCanvasHeight;
        canvas.maxWidth = Infinity;
        canvas.maxHeight = Infinity;
      }
      if (isPositionLimited) {
        if (viewMode) {
          newCanvasLeft = containerWidth - canvas.width;
          newCanvasTop = containerHeight - canvas.height;
          canvas.minLeft = min(0, newCanvasLeft);
          canvas.minTop = min(0, newCanvasTop);
          canvas.maxLeft = max(0, newCanvasLeft);
          canvas.maxTop = max(0, newCanvasTop);
          if (isCropped && this.isLimited) {
            canvas.minLeft = min(
              cropBox.left,
              cropBox.left + cropBox.width - canvas.width
            );
            canvas.minTop = min(
              cropBox.top,
              cropBox.top + cropBox.height - canvas.height
            );
            canvas.maxLeft = cropBox.left;
            canvas.maxTop = cropBox.top;
            if (viewMode === 2) {
              if (canvas.width >= containerWidth) {
                canvas.minLeft = min(0, newCanvasLeft);
                canvas.maxLeft = max(0, newCanvasLeft);
              }
              if (canvas.height >= containerHeight) {
                canvas.minTop = min(0, newCanvasTop);
                canvas.maxTop = max(0, newCanvasTop);
              }
            }
          }
        } else {
          canvas.minLeft = -canvas.width;
          canvas.minTop = -canvas.height;
          canvas.maxLeft = containerWidth;
          canvas.maxTop = containerHeight;
        }
      }
    },
    renderCanvas: function (isChanged) {
      var canvas = this.canvas;
      var image = this.image;
      var rotate = image.rotate;
      var naturalWidth = image.naturalWidth;
      var naturalHeight = image.naturalHeight;
      var aspectRatio;
      var rotated;
      if (this.isRotated) {
        this.isRotated = false;
        rotated = getRotatedSizes({
          width: image.width,
          height: image.height,
          degree: rotate,
        });
        aspectRatio = rotated.width / rotated.height;
        if (aspectRatio !== canvas.aspectRatio) {
          canvas.left -= (rotated.width - canvas.width) / 2;
          canvas.top -= (rotated.height - canvas.height) / 2;
          canvas.width = rotated.width;
          canvas.height = rotated.height;
          canvas.aspectRatio = aspectRatio;
          canvas.naturalWidth = naturalWidth;
          canvas.naturalHeight = naturalHeight;
          if (rotate % 180) {
            rotated = getRotatedSizes({
              width: naturalWidth,
              height: naturalHeight,
              degree: rotate,
            });
            canvas.naturalWidth = rotated.width;
            canvas.naturalHeight = rotated.height;
          }
          this.limitCanvas(true, false);
        }
      }
      if (canvas.width > canvas.maxWidth || canvas.width < canvas.minWidth) {
        canvas.left = canvas.oldLeft;
      }
      if (
        canvas.height > canvas.maxHeight ||
        canvas.height < canvas.minHeight
      ) {
        canvas.top = canvas.oldTop;
      }
      canvas.width = min(max(canvas.width, canvas.minWidth), canvas.maxWidth);
      canvas.height = min(
        max(canvas.height, canvas.minHeight),
        canvas.maxHeight
      );
      this.limitCanvas(false, true);
      canvas.oldLeft = canvas.left = min(
        max(canvas.left, canvas.minLeft),
        canvas.maxLeft
      );
      canvas.oldTop = canvas.top = min(
        max(canvas.top, canvas.minTop),
        canvas.maxTop
      );
      this.$canvas.css({
        width: canvas.width,
        height: canvas.height,
        left: canvas.left,
        top: canvas.top,
      });
      this.renderImage();
      if (this.isCropped && this.isLimited) {
        this.limitCropBox(true, true);
      }
      if (isChanged) {
        this.output();
      }
    },
    renderImage: function (isChanged) {
      var canvas = this.canvas;
      var image = this.image;
      var reversed;
      if (image.rotate) {
        reversed = getRotatedSizes(
          {
            width: canvas.width,
            height: canvas.height,
            degree: image.rotate,
            aspectRatio: image.aspectRatio,
          },
          true
        );
      }
      $.extend(
        image,
        reversed
          ? {
              width: reversed.width,
              height: reversed.height,
              left: (canvas.width - reversed.width) / 2,
              top: (canvas.height - reversed.height) / 2,
            }
          : { width: canvas.width, height: canvas.height, left: 0, top: 0 }
      );
      this.$clone.css({
        width: image.width,
        height: image.height,
        marginLeft: image.left,
        marginTop: image.top,
        transform: getTransform(image),
      });
      if (isChanged) {
        this.output();
      }
    },
    initCropBox: function () {
      var options = this.options;
      var canvas = this.canvas;
      var aspectRatio = options.aspectRatio;
      var autoCropArea = num(options.autoCropArea) || 0.8;
      var cropBox = { width: canvas.width, height: canvas.height };
      if (aspectRatio) {
        if (canvas.height * aspectRatio > canvas.width) {
          cropBox.height = cropBox.width / aspectRatio;
        } else {
          cropBox.width = cropBox.height * aspectRatio;
        }
      }
      this.cropBox = cropBox;
      this.limitCropBox(true, true);
      cropBox.width = min(
        max(cropBox.width, cropBox.minWidth),
        cropBox.maxWidth
      );
      cropBox.height = min(
        max(cropBox.height, cropBox.minHeight),
        cropBox.maxHeight
      );
      cropBox.width = max(cropBox.minWidth, cropBox.width * autoCropArea);
      cropBox.height = max(cropBox.minHeight, cropBox.height * autoCropArea);
      cropBox.oldLeft = cropBox.left =
        canvas.left + (canvas.width - cropBox.width) / 2;
      cropBox.oldTop = cropBox.top =
        canvas.top + (canvas.height - cropBox.height) / 2;
      this.initialCropBox = $.extend({}, cropBox);
    },
    limitCropBox: function (isSizeLimited, isPositionLimited) {
      var options = this.options;
      var aspectRatio = options.aspectRatio;
      var container = this.container;
      var containerWidth = container.width;
      var containerHeight = container.height;
      var canvas = this.canvas;
      var cropBox = this.cropBox;
      var isLimited = this.isLimited;
      var minCropBoxWidth;
      var minCropBoxHeight;
      var maxCropBoxWidth;
      var maxCropBoxHeight;
      if (isSizeLimited) {
        minCropBoxWidth = num(options.minCropBoxWidth) || 0;
        minCropBoxHeight = num(options.minCropBoxHeight) || 0;
        minCropBoxWidth = min(minCropBoxWidth, containerWidth);
        minCropBoxHeight = min(minCropBoxHeight, containerHeight);
        maxCropBoxWidth = min(
          containerWidth,
          isLimited ? canvas.width : containerWidth
        );
        maxCropBoxHeight = min(
          containerHeight,
          isLimited ? canvas.height : containerHeight
        );
        if (aspectRatio) {
          if (minCropBoxWidth && minCropBoxHeight) {
            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {
              minCropBoxHeight = minCropBoxWidth / aspectRatio;
            } else {
              minCropBoxWidth = minCropBoxHeight * aspectRatio;
            }
          } else if (minCropBoxWidth) {
            minCropBoxHeight = minCropBoxWidth / aspectRatio;
          } else if (minCropBoxHeight) {
            minCropBoxWidth = minCropBoxHeight * aspectRatio;
          }
          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {
            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;
          } else {
            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;
          }
        }
        cropBox.minWidth = min(minCropBoxWidth, maxCropBoxWidth);
        cropBox.minHeight = min(minCropBoxHeight, maxCropBoxHeight);
        cropBox.maxWidth = maxCropBoxWidth;
        cropBox.maxHeight = maxCropBoxHeight;
      }
      if (isPositionLimited) {
        if (isLimited) {
          cropBox.minLeft = max(0, canvas.left);
          cropBox.minTop = max(0, canvas.top);
          cropBox.maxLeft =
            min(containerWidth, canvas.left + canvas.width) - cropBox.width;
          cropBox.maxTop =
            min(containerHeight, canvas.top + canvas.height) - cropBox.height;
        } else {
          cropBox.minLeft = 0;
          cropBox.minTop = 0;
          cropBox.maxLeft = containerWidth - cropBox.width;
          cropBox.maxTop = containerHeight - cropBox.height;
        }
      }
    },
    renderCropBox: function () {
      var options = this.options;
      var container = this.container;
      var containerWidth = container.width;
      var containerHeight = container.height;
      var cropBox = this.cropBox;
      if (
        cropBox.width > cropBox.maxWidth ||
        cropBox.width < cropBox.minWidth
      ) {
        cropBox.left = cropBox.oldLeft;
      }
      if (
        cropBox.height > cropBox.maxHeight ||
        cropBox.height < cropBox.minHeight
      ) {
        cropBox.top = cropBox.oldTop;
      }
      cropBox.width = min(
        max(cropBox.width, cropBox.minWidth),
        cropBox.maxWidth
      );
      cropBox.height = min(
        max(cropBox.height, cropBox.minHeight),
        cropBox.maxHeight
      );
      this.limitCropBox(false, true);
      cropBox.oldLeft = cropBox.left = min(
        max(cropBox.left, cropBox.minLeft),
        cropBox.maxLeft
      );
      cropBox.oldTop = cropBox.top = min(
        max(cropBox.top, cropBox.minTop),
        cropBox.maxTop
      );
      if (options.movable && options.cropBoxMovable) {
        this.$face.data(
          DATA_ACTION,
          cropBox.width === containerWidth && cropBox.height === containerHeight
            ? ACTION_MOVE
            : ACTION_ALL
        );
      }
      this.$cropBox.css({
        width: cropBox.width,
        height: cropBox.height,
        left: cropBox.left,
        top: cropBox.top,
      });
      if (this.isCropped && this.isLimited) {
        this.limitCanvas(true, true);
      }
      if (!this.isDisabled) {
        this.output();
      }
    },
    output: function () {
      this.preview();
      if (this.isCompleted) {
        this.trigger(EVENT_CROP, this.getData());
      } else if (!this.isBuilt) {
        this.$element.one(
          EVENT_BUILT,
          $.proxy(function () {
            this.trigger(EVENT_CROP, this.getData());
          }, this)
        );
      }
    },
    initPreview: function () {
      var crossOrigin = getCrossOrigin(this.crossOrigin);
      var url = crossOrigin ? this.crossOriginUrl : this.url;
      var $clone2;
      this.$preview = $(this.options.preview);
      this.$clone2 = $clone2 = $("<img" + crossOrigin + ' src="' + url + '">');
      this.$viewBox.html($clone2);
      this.$preview.each(function () {
        var $this = $(this);
        $this.data(DATA_PREVIEW, {
          width: $this.width(),
          height: $this.height(),
          html: $this.html(),
        });
        $this.html(
          "<img" +
            crossOrigin +
            ' src="' +
            url +
            '" style="' +
            "display:block;width:100%;height:auto;" +
            "min-width:0!important;min-height:0!important;" +
            "max-width:none!important;max-height:none!important;" +
            'image-orientation:0deg!important;">'
        );
      });
    },
    resetPreview: function () {
      this.$preview.each(function () {
        var $this = $(this);
        var data = $this.data(DATA_PREVIEW);
        $this
          .css({ width: data.width, height: data.height })
          .html(data.html)
          .removeData(DATA_PREVIEW);
      });
    },
    preview: function () {
      var image = this.image;
      var canvas = this.canvas;
      var cropBox = this.cropBox;
      var cropBoxWidth = cropBox.width;
      var cropBoxHeight = cropBox.height;
      var width = image.width;
      var height = image.height;
      var left = cropBox.left - canvas.left - image.left;
      var top = cropBox.top - canvas.top - image.top;
      if (!this.isCropped || this.isDisabled) {
        return;
      }
      this.$clone2.css({
        width: width,
        height: height,
        marginLeft: -left,
        marginTop: -top,
        transform: getTransform(image),
      });
      this.$preview.each(function () {
        var $this = $(this);
        var data = $this.data(DATA_PREVIEW);
        var originalWidth = data.width;
        var originalHeight = data.height;
        var newWidth = originalWidth;
        var newHeight = originalHeight;
        var ratio = 1;
        if (cropBoxWidth) {
          ratio = originalWidth / cropBoxWidth;
          newHeight = cropBoxHeight * ratio;
        }
        if (cropBoxHeight && newHeight > originalHeight) {
          ratio = originalHeight / cropBoxHeight;
          newWidth = cropBoxWidth * ratio;
          newHeight = originalHeight;
        }
        $this
          .css({ width: newWidth, height: newHeight })
          .find("img")
          .css({
            width: width * ratio,
            height: height * ratio,
            marginLeft: -left * ratio,
            marginTop: -top * ratio,
            transform: getTransform(image),
          });
      });
    },
    bind: function () {
      var options = this.options;
      var $this = this.$element;
      var $cropper = this.$cropper;
      if ($.isFunction(options.cropstart)) {
        $this.on(EVENT_CROP_START, options.cropstart);
      }
      if ($.isFunction(options.cropmove)) {
        $this.on(EVENT_CROP_MOVE, options.cropmove);
      }
      if ($.isFunction(options.cropend)) {
        $this.on(EVENT_CROP_END, options.cropend);
      }
      if ($.isFunction(options.crop)) {
        $this.on(EVENT_CROP, options.crop);
      }
      if ($.isFunction(options.zoom)) {
        $this.on(EVENT_ZOOM, options.zoom);
      }
      $cropper.on(EVENT_MOUSE_DOWN, $.proxy(this.cropStart, this));
      if (options.zoomable && options.zoomOnWheel) {
        $cropper.on(EVENT_WHEEL, $.proxy(this.wheel, this));
      }
      if (options.toggleDragModeOnDblclick) {
        $cropper.on(EVENT_DBLCLICK, $.proxy(this.dblclick, this));
      }
      $document
        .on(EVENT_MOUSE_MOVE, (this._cropMove = proxy(this.cropMove, this)))
        .on(EVENT_MOUSE_UP, (this._cropEnd = proxy(this.cropEnd, this)));
      if (options.responsive) {
        $window.on(EVENT_RESIZE, (this._resize = proxy(this.resize, this)));
      }
    },
    unbind: function () {
      var options = this.options;
      var $this = this.$element;
      var $cropper = this.$cropper;
      if ($.isFunction(options.cropstart)) {
        $this.off(EVENT_CROP_START, options.cropstart);
      }
      if ($.isFunction(options.cropmove)) {
        $this.off(EVENT_CROP_MOVE, options.cropmove);
      }
      if ($.isFunction(options.cropend)) {
        $this.off(EVENT_CROP_END, options.cropend);
      }
      if ($.isFunction(options.crop)) {
        $this.off(EVENT_CROP, options.crop);
      }
      if ($.isFunction(options.zoom)) {
        $this.off(EVENT_ZOOM, options.zoom);
      }
      $cropper.off(EVENT_MOUSE_DOWN, this.cropStart);
      if (options.zoomable && options.zoomOnWheel) {
        $cropper.off(EVENT_WHEEL, this.wheel);
      }
      if (options.toggleDragModeOnDblclick) {
        $cropper.off(EVENT_DBLCLICK, this.dblclick);
      }
      $document
        .off(EVENT_MOUSE_MOVE, this._cropMove)
        .off(EVENT_MOUSE_UP, this._cropEnd);
      if (options.responsive) {
        $window.off(EVENT_RESIZE, this._resize);
      }
    },
    resize: function () {
      var restore = this.options.restore;
      var $container = this.$container;
      var container = this.container;
      var canvasData;
      var cropBoxData;
      var ratio;
      if (this.isDisabled || !container) {
        return;
      }
      ratio = $container.width() / container.width;
      if (ratio !== 1 || $container.height() !== container.height) {
        if (restore) {
          canvasData = this.getCanvasData();
          cropBoxData = this.getCropBoxData();
        }
        this.render();
        if (restore) {
          this.setCanvasData(
            $.each(canvasData, function (i, n) {
              canvasData[i] = n * ratio;
            })
          );
          this.setCropBoxData(
            $.each(cropBoxData, function (i, n) {
              cropBoxData[i] = n * ratio;
            })
          );
        }
      }
    },
    dblclick: function () {
      if (this.isDisabled) {
        return;
      }
      if (this.$dragBox.hasClass(CLASS_CROP)) {
        this.setDragMode(ACTION_MOVE);
      } else {
        this.setDragMode(ACTION_CROP);
      }
    },
    wheel: function (event) {
      var e = event.originalEvent || event;
      var ratio = num(this.options.wheelZoomRatio) || 0.1;
      var delta = 1;
      if (this.isDisabled) {
        return;
      }
      event.preventDefault();
      if (this.wheeling) {
        return;
      }
      this.wheeling = true;
      setTimeout(
        $.proxy(function () {
          this.wheeling = false;
        }, this),
        50
      );
      if (e.deltaY) {
        delta = e.deltaY > 0 ? 1 : -1;
      } else if (e.wheelDelta) {
        delta = -e.wheelDelta / 120;
      } else if (e.detail) {
        delta = e.detail > 0 ? 1 : -1;
      }
      this.zoom(-delta * ratio, event);
    },
    cropStart: function (event) {
      var options = this.options;
      var originalEvent = event.originalEvent;
      var touches = originalEvent && originalEvent.touches;
      var e = event;
      var touchesLength;
      var action;
      if (this.isDisabled) {
        return;
      }
      if (touches) {
        touchesLength = touches.length;
        if (touchesLength > 1) {
          if (options.zoomable && options.zoomOnTouch && touchesLength === 2) {
            e = touches[1];
            this.startX2 = e.pageX;
            this.startY2 = e.pageY;
            action = ACTION_ZOOM;
          } else {
            return;
          }
        }
        e = touches[0];
      }
      action = action || $(e.target).data(DATA_ACTION);
      if (REGEXP_ACTIONS.test(action)) {
        if (
          this.trigger(EVENT_CROP_START, {
            originalEvent: originalEvent,
            action: action,
          }).isDefaultPrevented()
        ) {
          return;
        }
        event.preventDefault();
        this.action = action;
        this.cropping = false;
        this.startX = e.pageX || (originalEvent && originalEvent.pageX);
        this.startY = e.pageY || (originalEvent && originalEvent.pageY);
        if (action === ACTION_CROP) {
          this.cropping = true;
          this.$dragBox.addClass(CLASS_MODAL);
        }
      }
    },
    cropMove: function (event) {
      var options = this.options;
      var originalEvent = event.originalEvent;
      var touches = originalEvent && originalEvent.touches;
      var e = event;
      var action = this.action;
      var touchesLength;
      if (this.isDisabled) {
        return;
      }
      if (touches) {
        touchesLength = touches.length;
        if (touchesLength > 1) {
          if (options.zoomable && options.zoomOnTouch && touchesLength === 2) {
            e = touches[1];
            this.endX2 = e.pageX;
            this.endY2 = e.pageY;
          } else {
            return;
          }
        }
        e = touches[0];
      }
      if (action) {
        if (
          this.trigger(EVENT_CROP_MOVE, {
            originalEvent: originalEvent,
            action: action,
          }).isDefaultPrevented()
        ) {
          return;
        }
        event.preventDefault();
        this.endX = e.pageX || (originalEvent && originalEvent.pageX);
        this.endY = e.pageY || (originalEvent && originalEvent.pageY);
        this.change(e.shiftKey, action === ACTION_ZOOM ? event : null);
      }
    },
    cropEnd: function (event) {
      var originalEvent = event.originalEvent;
      var action = this.action;
      if (this.isDisabled) {
        return;
      }
      if (action) {
        event.preventDefault();
        if (this.cropping) {
          this.cropping = false;
          this.$dragBox.toggleClass(
            CLASS_MODAL,
            this.isCropped && this.options.modal
          );
        }
        this.action = "";
        this.trigger(EVENT_CROP_END, {
          originalEvent: originalEvent,
          action: action,
        });
      }
    },
    change: function (shiftKey, event) {
      var options = this.options;
      var aspectRatio = options.aspectRatio;
      var action = this.action;
      var container = this.container;
      var canvas = this.canvas;
      var cropBox = this.cropBox;
      var width = cropBox.width;
      var height = cropBox.height;
      var left = cropBox.left;
      var top = cropBox.top;
      var right = left + width;
      var bottom = top + height;
      var minLeft = 0;
      var minTop = 0;
      var maxWidth = container.width;
      var maxHeight = container.height;
      var renderable = true;
      var offset;
      var range;
      if (!aspectRatio && shiftKey) {
        aspectRatio = width && height ? width / height : 1;
      }
      if (this.limited) {
        minLeft = cropBox.minLeft;
        minTop = cropBox.minTop;
        maxWidth = minLeft + min(container.width, canvas.left + canvas.width);
        maxHeight = minTop + min(container.height, canvas.top + canvas.height);
      }
      range = { x: this.endX - this.startX, y: this.endY - this.startY };
      if (aspectRatio) {
        range.X = range.y * aspectRatio;
        range.Y = range.x / aspectRatio;
      }
      switch (action) {
        case ACTION_ALL:
          left += range.x;
          top += range.y;
          break;
        case ACTION_EAST:
          if (
            range.x >= 0 &&
            (right >= maxWidth ||
              (aspectRatio && (top <= minTop || bottom >= maxHeight)))
          ) {
            renderable = false;
            break;
          }
          width += range.x;
          if (aspectRatio) {
            height = width / aspectRatio;
            top -= range.Y / 2;
          }
          if (width < 0) {
            action = ACTION_WEST;
            width = 0;
          }
          break;
        case ACTION_NORTH:
          if (
            range.y <= 0 &&
            (top <= minTop ||
              (aspectRatio && (left <= minLeft || right >= maxWidth)))
          ) {
            renderable = false;
            break;
          }
          height -= range.y;
          top += range.y;
          if (aspectRatio) {
            width = height * aspectRatio;
            left += range.X / 2;
          }
          if (height < 0) {
            action = ACTION_SOUTH;
            height = 0;
          }
          break;
        case ACTION_WEST:
          if (
            range.x <= 0 &&
            (left <= minLeft ||
              (aspectRatio && (top <= minTop || bottom >= maxHeight)))
          ) {
            renderable = false;
            break;
          }
          width -= range.x;
          left += range.x;
          if (aspectRatio) {
            height = width / aspectRatio;
            top += range.Y / 2;
          }
          if (width < 0) {
            action = ACTION_EAST;
            width = 0;
          }
          break;
        case ACTION_SOUTH:
          if (
            range.y >= 0 &&
            (bottom >= maxHeight ||
              (aspectRatio && (left <= minLeft || right >= maxWidth)))
          ) {
            renderable = false;
            break;
          }
          height += range.y;
          if (aspectRatio) {
            width = height * aspectRatio;
            left -= range.X / 2;
          }
          if (height < 0) {
            action = ACTION_NORTH;
            height = 0;
          }
          break;
        case ACTION_NORTH_EAST:
          if (aspectRatio) {
            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {
              renderable = false;
              break;
            }
            height -= range.y;
            top += range.y;
            width = height * aspectRatio;
          } else {
            if (range.x >= 0) {
              if (right < maxWidth) {
                width += range.x;
              } else if (range.y <= 0 && top <= minTop) {
                renderable = false;
              }
            } else {
              width += range.x;
            }
            if (range.y <= 0) {
              if (top > minTop) {
                height -= range.y;
                top += range.y;
              }
            } else {
              height -= range.y;
              top += range.y;
            }
          }
          if (width < 0 && height < 0) {
            action = ACTION_SOUTH_WEST;
            height = 0;
            width = 0;
          } else if (width < 0) {
            action = ACTION_NORTH_WEST;
            width = 0;
          } else if (height < 0) {
            action = ACTION_SOUTH_EAST;
            height = 0;
          }
          break;
        case ACTION_NORTH_WEST:
          if (aspectRatio) {
            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {
              renderable = false;
              break;
            }
            height -= range.y;
            top += range.y;
            width = height * aspectRatio;
            left += range.X;
          } else {
            if (range.x <= 0) {
              if (left > minLeft) {
                width -= range.x;
                left += range.x;
              } else if (range.y <= 0 && top <= minTop) {
                renderable = false;
              }
            } else {
              width -= range.x;
              left += range.x;
            }
            if (range.y <= 0) {
              if (top > minTop) {
                height -= range.y;
                top += range.y;
              }
            } else {
              height -= range.y;
              top += range.y;
            }
          }
          if (width < 0 && height < 0) {
            action = ACTION_SOUTH_EAST;
            height = 0;
            width = 0;
          } else if (width < 0) {
            action = ACTION_NORTH_EAST;
            width = 0;
          } else if (height < 0) {
            action = ACTION_SOUTH_WEST;
            height = 0;
          }
          break;
        case ACTION_SOUTH_WEST:
          if (aspectRatio) {
            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {
              renderable = false;
              break;
            }
            width -= range.x;
            left += range.x;
            height = width / aspectRatio;
          } else {
            if (range.x <= 0) {
              if (left > minLeft) {
                width -= range.x;
                left += range.x;
              } else if (range.y >= 0 && bottom >= maxHeight) {
                renderable = false;
              }
            } else {
              width -= range.x;
              left += range.x;
            }
            if (range.y >= 0) {
              if (bottom < maxHeight) {
                height += range.y;
              }
            } else {
              height += range.y;
            }
          }
          if (width < 0 && height < 0) {
            action = ACTION_NORTH_EAST;
            height = 0;
            width = 0;
          } else if (width < 0) {
            action = ACTION_SOUTH_EAST;
            width = 0;
          } else if (height < 0) {
            action = ACTION_NORTH_WEST;
            height = 0;
          }
          break;
        case ACTION_SOUTH_EAST:
          if (aspectRatio) {
            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {
              renderable = false;
              break;
            }
            width += range.x;
            height = width / aspectRatio;
          } else {
            if (range.x >= 0) {
              if (right < maxWidth) {
                width += range.x;
              } else if (range.y >= 0 && bottom >= maxHeight) {
                renderable = false;
              }
            } else {
              width += range.x;
            }
            if (range.y >= 0) {
              if (bottom < maxHeight) {
                height += range.y;
              }
            } else {
              height += range.y;
            }
          }
          if (width < 0 && height < 0) {
            action = ACTION_NORTH_WEST;
            height = 0;
            width = 0;
          } else if (width < 0) {
            action = ACTION_SOUTH_WEST;
            width = 0;
          } else if (height < 0) {
            action = ACTION_NORTH_EAST;
            height = 0;
          }
          break;
        case ACTION_MOVE:
          this.move(range.x, range.y);
          renderable = false;
          break;
        case ACTION_ZOOM:
          this.zoom(
            (function (x1, y1, x2, y2) {
              var z1 = sqrt(x1 * x1 + y1 * y1);
              var z2 = sqrt(x2 * x2 + y2 * y2);
              return (z2 - z1) / z1;
            })(
              abs(this.startX - this.startX2),
              abs(this.startY - this.startY2),
              abs(this.endX - this.endX2),
              abs(this.endY - this.endY2)
            ),
            event
          );
          this.startX2 = this.endX2;
          this.startY2 = this.endY2;
          renderable = false;
          break;
        case ACTION_CROP:
          if (!range.x || !range.y) {
            renderable = false;
            break;
          }
          offset = this.$cropper.offset();
          left = this.startX - offset.left;
          top = this.startY - offset.top;
          width = cropBox.minWidth;
          height = cropBox.minHeight;
          if (range.x > 0) {
            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;
          } else if (range.x < 0) {
            left -= width;
            action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;
          }
          if (range.y < 0) {
            top -= height;
          }
          if (!this.isCropped) {
            this.$cropBox.removeClass(CLASS_HIDDEN);
            this.isCropped = true;
            if (this.limited) {
              this.limitCropBox(true, true);
            }
          }
          break;
      }
      if (renderable) {
        cropBox.width = width;
        cropBox.height = height;
        cropBox.left = left;
        cropBox.top = top;
        this.action = action;
        this.renderCropBox();
      }
      this.startX = this.endX;
      this.startY = this.endY;
    },
    crop: function () {
      if (!this.isBuilt || this.isDisabled) {
        return;
      }
      if (!this.isCropped) {
        this.isCropped = true;
        this.limitCropBox(true, true);
        if (this.options.modal) {
          this.$dragBox.addClass(CLASS_MODAL);
        }
        this.$cropBox.removeClass(CLASS_HIDDEN);
      }
      this.setCropBoxData(this.initialCropBox);
    },
    reset: function () {
      if (!this.isBuilt || this.isDisabled) {
        return;
      }
      this.image = $.extend({}, this.initialImage);
      this.canvas = $.extend({}, this.initialCanvas);
      this.cropBox = $.extend({}, this.initialCropBox);
      this.renderCanvas();
      if (this.isCropped) {
        this.renderCropBox();
      }
    },
    clear: function () {
      if (!this.isCropped || this.isDisabled) {
        return;
      }
      $.extend(this.cropBox, { left: 0, top: 0, width: 0, height: 0 });
      this.isCropped = false;
      this.renderCropBox();
      this.limitCanvas(true, true);
      this.renderCanvas();
      this.$dragBox.removeClass(CLASS_MODAL);
      this.$cropBox.addClass(CLASS_HIDDEN);
    },
    replace: function (url, onlyColorChanged) {
      if (!this.isDisabled && url) {
        if (this.isImg) {
          this.$element.attr("src", url);
        }
        if (onlyColorChanged) {
          this.url = url;
          this.$clone.attr("src", url);
          if (this.isBuilt) {
            this.$preview.find("img").add(this.$clone2).attr("src", url);
          }
        } else {
          if (this.isImg) {
            this.isReplaced = true;
          }
          this.options.data = null;
          this.load(url);
        }
      }
    },
    enable: function () {
      if (this.isBuilt) {
        this.isDisabled = false;
        this.$cropper.removeClass(CLASS_DISABLED);
      }
    },
    disable: function () {
      if (this.isBuilt) {
        this.isDisabled = true;
        this.$cropper.addClass(CLASS_DISABLED);
      }
    },
    destroy: function () {
      var $this = this.$element;
      if (this.isLoaded) {
        if (this.isImg && this.isReplaced) {
          $this.attr("src", this.originalUrl);
        }
        this.unbuild();
        $this.removeClass(CLASS_HIDDEN);
      } else {
        if (this.isImg) {
          $this.off(EVENT_LOAD, this.start);
        } else if (this.$clone) {
          this.$clone.remove();
        }
      }
      $this.removeData(NAMESPACE);
    },
    move: function (offsetX, offsetY) {
      var canvas = this.canvas;
      this.moveTo(
        isUndefined(offsetX) ? offsetX : canvas.left + num(offsetX),
        isUndefined(offsetY) ? offsetY : canvas.top + num(offsetY)
      );
    },
    moveTo: function (x, y) {
      var canvas = this.canvas;
      var isChanged = false;
      if (isUndefined(y)) {
        y = x;
      }
      x = num(x);
      y = num(y);
      if (this.isBuilt && !this.isDisabled && this.options.movable) {
        if (isNumber(x)) {
          canvas.left = x;
          isChanged = true;
        }
        if (isNumber(y)) {
          canvas.top = y;
          isChanged = true;
        }
        if (isChanged) {
          this.renderCanvas(true);
        }
      }
    },
    zoom: function (ratio, _event) {
      var canvas = this.canvas;
      ratio = num(ratio);
      if (ratio < 0) {
        ratio = 1 / (1 - ratio);
      } else {
        ratio = 1 + ratio;
      }
      this.zoomTo((canvas.width * ratio) / canvas.naturalWidth, _event);
    },
    zoomTo: function (ratio, _event) {
      var options = this.options;
      var canvas = this.canvas;
      var width = canvas.width;
      var height = canvas.height;
      var naturalWidth = canvas.naturalWidth;
      var naturalHeight = canvas.naturalHeight;
      var originalEvent;
      var newWidth;
      var newHeight;
      var offset;
      var center;
      ratio = num(ratio);
      if (ratio >= 0 && this.isBuilt && !this.isDisabled && options.zoomable) {
        newWidth = naturalWidth * ratio;
        newHeight = naturalHeight * ratio;
        if (_event) {
          originalEvent = _event.originalEvent;
        }
        if (
          this.trigger(EVENT_ZOOM, {
            originalEvent: originalEvent,
            oldRatio: width / naturalWidth,
            ratio: newWidth / naturalWidth,
          }).isDefaultPrevented()
        ) {
          return;
        }
        if (originalEvent) {
          offset = this.$cropper.offset();
          center = originalEvent.touches
            ? getTouchesCenter(originalEvent.touches)
            : {
                pageX: _event.pageX || originalEvent.pageX || 0,
                pageY: _event.pageY || originalEvent.pageY || 0,
              };
          canvas.left -=
            (newWidth - width) *
            ((center.pageX - offset.left - canvas.left) / width);
          canvas.top -=
            (newHeight - height) *
            ((center.pageY - offset.top - canvas.top) / height);
        } else {
          canvas.left -= (newWidth - width) / 2;
          canvas.top -= (newHeight - height) / 2;
        }
        canvas.width = newWidth;
        canvas.height = newHeight;
        this.renderCanvas(true);
      }
    },
    rotate: function (degree) {
      this.rotateTo((this.image.rotate || 0) + num(degree));
    },
    rotateTo: function (degree) {
      degree = num(degree);
      if (
        isNumber(degree) &&
        this.isBuilt &&
        !this.isDisabled &&
        this.options.rotatable
      ) {
        this.image.rotate = degree % 360;
        this.isRotated = true;
        this.renderCanvas(true);
      }
    },
    scale: function (scaleX, scaleY) {
      var image = this.image;
      var isChanged = false;
      if (isUndefined(scaleY)) {
        scaleY = scaleX;
      }
      scaleX = num(scaleX);
      scaleY = num(scaleY);
      if (this.isBuilt && !this.isDisabled && this.options.scalable) {
        if (isNumber(scaleX)) {
          image.scaleX = scaleX;
          isChanged = true;
        }
        if (isNumber(scaleY)) {
          image.scaleY = scaleY;
          isChanged = true;
        }
        if (isChanged) {
          this.renderImage(true);
        }
      }
    },
    scaleX: function (scaleX) {
      var scaleY = this.image.scaleY;
      this.scale(scaleX, isNumber(scaleY) ? scaleY : 1);
    },
    scaleY: function (scaleY) {
      var scaleX = this.image.scaleX;
      this.scale(isNumber(scaleX) ? scaleX : 1, scaleY);
    },
    getData: function (isRounded) {
      var options = this.options;
      var image = this.image;
      var canvas = this.canvas;
      var cropBox = this.cropBox;
      var ratio;
      var data;
      if (this.isBuilt && this.isCropped) {
        data = {
          x: cropBox.left - canvas.left,
          y: cropBox.top - canvas.top,
          width: cropBox.width,
          height: cropBox.height,
        };
        ratio = image.width / image.naturalWidth;
        $.each(data, function (i, n) {
          n = n / ratio;
          data[i] = isRounded ? round(n) : n;
        });
      } else {
        data = { x: 0, y: 0, width: 0, height: 0 };
      }
      if (options.rotatable) {
        data.rotate = image.rotate || 0;
      }
      if (options.scalable) {
        data.scaleX = image.scaleX || 1;
        data.scaleY = image.scaleY || 1;
      }
      return data;
    },
    setData: function (data) {
      var options = this.options;
      var image = this.image;
      var canvas = this.canvas;
      var cropBoxData = {};
      var isRotated;
      var isScaled;
      var ratio;
      if ($.isFunction(data)) {
        data = data.call(this.element);
      }
      if (this.isBuilt && !this.isDisabled && $.isPlainObject(data)) {
        if (options.rotatable) {
          if (isNumber(data.rotate) && data.rotate !== image.rotate) {
            image.rotate = data.rotate;
            this.isRotated = isRotated = true;
          }
        }
        if (options.scalable) {
          if (isNumber(data.scaleX) && data.scaleX !== image.scaleX) {
            image.scaleX = data.scaleX;
            isScaled = true;
          }
          if (isNumber(data.scaleY) && data.scaleY !== image.scaleY) {
            image.scaleY = data.scaleY;
            isScaled = true;
          }
        }
        if (isRotated) {
          this.renderCanvas();
        } else if (isScaled) {
          this.renderImage();
        }
        ratio = image.width / image.naturalWidth;
        if (isNumber(data.x)) {
          cropBoxData.left = data.x * ratio + canvas.left;
        }
        if (isNumber(data.y)) {
          cropBoxData.top = data.y * ratio + canvas.top;
        }
        if (isNumber(data.width)) {
          cropBoxData.width = data.width * ratio;
        }
        if (isNumber(data.height)) {
          cropBoxData.height = data.height * ratio;
        }
        this.setCropBoxData(cropBoxData);
      }
    },
    getContainerData: function () {
      return this.isBuilt ? this.container : {};
    },
    getImageData: function () {
      return this.isLoaded ? this.image : {};
    },
    getCanvasData: function () {
      var canvas = this.canvas;
      var data = {};
      if (this.isBuilt) {
        $.each(
          ["left", "top", "width", "height", "naturalWidth", "naturalHeight"],
          function (i, n) {
            data[n] = canvas[n];
          }
        );
      }
      return data;
    },
    setCanvasData: function (data) {
      var canvas = this.canvas;
      var aspectRatio = canvas.aspectRatio;
      if ($.isFunction(data)) {
        data = data.call(this.$element);
      }
      if (this.isBuilt && !this.isDisabled && $.isPlainObject(data)) {
        if (isNumber(data.left)) {
          canvas.left = data.left;
        }
        if (isNumber(data.top)) {
          canvas.top = data.top;
        }
        if (isNumber(data.width)) {
          canvas.width = data.width;
          canvas.height = data.width / aspectRatio;
        } else if (isNumber(data.height)) {
          canvas.height = data.height;
          canvas.width = data.height * aspectRatio;
        }
        this.renderCanvas(true);
      }
    },
    getCropBoxData: function () {
      var cropBox = this.cropBox;
      var data;
      if (this.isBuilt && this.isCropped) {
        data = {
          left: cropBox.left,
          top: cropBox.top,
          width: cropBox.width,
          height: cropBox.height,
        };
      }
      return data || {};
    },
    setCropBoxData: function (data) {
      var cropBox = this.cropBox;
      var aspectRatio = this.options.aspectRatio;
      var isWidthChanged;
      var isHeightChanged;
      if ($.isFunction(data)) {
        data = data.call(this.$element);
      }
      if (
        this.isBuilt &&
        this.isCropped &&
        !this.isDisabled &&
        $.isPlainObject(data)
      ) {
        if (isNumber(data.left)) {
          cropBox.left = data.left;
        }
        if (isNumber(data.top)) {
          cropBox.top = data.top;
        }
        if (isNumber(data.width)) {
          isWidthChanged = true;
          cropBox.width = data.width;
        }
        if (isNumber(data.height)) {
          isHeightChanged = true;
          cropBox.height = data.height;
        }
        if (aspectRatio) {
          if (isWidthChanged) {
            cropBox.height = cropBox.width / aspectRatio;
          } else if (isHeightChanged) {
            cropBox.width = cropBox.height * aspectRatio;
          }
        }
        this.renderCropBox();
      }
    },
    getCroppedCanvas: function (options) {
      var originalWidth;
      var originalHeight;
      var canvasWidth;
      var canvasHeight;
      var scaledWidth;
      var scaledHeight;
      var scaledRatio;
      var aspectRatio;
      var canvas;
      var context;
      var data;
      if (!this.isBuilt || !this.isCropped || !SUPPORT_CANVAS) {
        return;
      }
      if (!$.isPlainObject(options)) {
        options = {};
      }
      data = this.getData();
      originalWidth = data.width;
      originalHeight = data.height;
      aspectRatio = originalWidth / originalHeight;
      if ($.isPlainObject(options)) {
        scaledWidth = options.width;
        scaledHeight = options.height;
        if (scaledWidth) {
          scaledHeight = scaledWidth / aspectRatio;
          scaledRatio = scaledWidth / originalWidth;
        } else if (scaledHeight) {
          scaledWidth = scaledHeight * aspectRatio;
          scaledRatio = scaledHeight / originalHeight;
        }
      }
      canvasWidth = floor(scaledWidth || originalWidth);
      canvasHeight = floor(scaledHeight || originalHeight);
      canvas = $("<canvas>")[0];
      canvas.width = canvasWidth;
      canvas.height = canvasHeight;
      context = canvas.getContext("2d");
      if (options.fillColor) {
        context.fillStyle = options.fillColor;
        context.fillRect(0, 0, canvasWidth, canvasHeight);
      }
      context.drawImage.apply(
        context,
        function () {
          var source = getSourceCanvas(this.$clone[0], this.image);
          var sourceWidth = source.width;
          var sourceHeight = source.height;
          var canvas = this.canvas;
          var params = [source];
          var srcX =
            data.x + (canvas.naturalWidth * (abs(data.scaleX || 1) - 1)) / 2;
          var srcY =
            data.y + (canvas.naturalHeight * (abs(data.scaleY || 1) - 1)) / 2;
          var srcWidth;
          var srcHeight;
          var dstX;
          var dstY;
          var dstWidth;
          var dstHeight;
          if (srcX <= -originalWidth || srcX > sourceWidth) {
            srcX = srcWidth = dstX = dstWidth = 0;
          } else if (srcX <= 0) {
            dstX = -srcX;
            srcX = 0;
            srcWidth = dstWidth = min(sourceWidth, originalWidth + srcX);
          } else if (srcX <= sourceWidth) {
            dstX = 0;
            srcWidth = dstWidth = min(originalWidth, sourceWidth - srcX);
          }
          if (srcWidth <= 0 || srcY <= -originalHeight || srcY > sourceHeight) {
            srcY = srcHeight = dstY = dstHeight = 0;
          } else if (srcY <= 0) {
            dstY = -srcY;
            srcY = 0;
            srcHeight = dstHeight = min(sourceHeight, originalHeight + srcY);
          } else if (srcY <= sourceHeight) {
            dstY = 0;
            srcHeight = dstHeight = min(originalHeight, sourceHeight - srcY);
          }
          params.push(
            floor(srcX),
            floor(srcY),
            floor(srcWidth),
            floor(srcHeight)
          );
          if (scaledRatio) {
            dstX *= scaledRatio;
            dstY *= scaledRatio;
            dstWidth *= scaledRatio;
            dstHeight *= scaledRatio;
          }
          if (dstWidth > 0 && dstHeight > 0) {
            params.push(
              floor(dstX),
              floor(dstY),
              floor(dstWidth),
              floor(dstHeight)
            );
          }
          return params;
        }.call(this)
      );
      return canvas;
    },
    setAspectRatio: function (aspectRatio) {
      var options = this.options;
      if (!this.isDisabled && !isUndefined(aspectRatio)) {
        options.aspectRatio = max(0, aspectRatio) || NaN;
        if (this.isBuilt) {
          this.initCropBox();
          if (this.isCropped) {
            this.renderCropBox();
          }
        }
      }
    },
    setDragMode: function (mode) {
      var options = this.options;
      var croppable;
      var movable;
      if (this.isLoaded && !this.isDisabled) {
        croppable = mode === ACTION_CROP;
        movable = options.movable && mode === ACTION_MOVE;
        mode = croppable || movable ? mode : ACTION_NONE;
        this.$dragBox
          .data(DATA_ACTION, mode)
          .toggleClass(CLASS_CROP, croppable)
          .toggleClass(CLASS_MOVE, movable);
        if (!options.cropBoxMovable) {
          this.$face
            .data(DATA_ACTION, mode)
            .toggleClass(CLASS_CROP, croppable)
            .toggleClass(CLASS_MOVE, movable);
        }
      }
    },
  };
  Cropper.DEFAULTS = {
    viewMode: 0,
    dragMode: "crop",
    aspectRatio: NaN,
    data: null,
    preview: "",
    responsive: true,
    restore: true,
    checkCrossOrigin: true,
    checkOrientation: true,
    modal: true,
    guides: true,
    center: true,
    highlight: true,
    background: true,
    autoCrop: true,
    autoCropArea: 0.8,
    movable: true,
    rotatable: true,
    scalable: true,
    zoomable: true,
    zoomOnTouch: true,
    zoomOnWheel: true,
    wheelZoomRatio: 0.1,
    cropBoxMovable: true,
    cropBoxResizable: true,
    toggleDragModeOnDblclick: true,
    minCanvasWidth: 0,
    minCanvasHeight: 0,
    minCropBoxWidth: 0,
    minCropBoxHeight: 0,
    minContainerWidth: 200,
    minContainerHeight: 100,
    build: null,
    built: null,
    cropstart: null,
    cropmove: null,
    cropend: null,
    crop: null,
    zoom: null,
  };
  Cropper.setDefaults = function (options) {
    $.extend(Cropper.DEFAULTS, options);
  };
  Cropper.TEMPLATE =
    '<div class="cropper-container">' +
    '<div class="cropper-wrap-box">' +
    '<div class="cropper-canvas"></div>' +
    "</div>" +
    '<div class="cropper-drag-box"></div>' +
    '<div class="cropper-crop-box">' +
    '<span class="cropper-view-box"></span>' +
    '<span class="cropper-dashed dashed-h"></span>' +
    '<span class="cropper-dashed dashed-v"></span>' +
    '<span class="cropper-center"></span>' +
    '<span class="cropper-face"></span>' +
    '<span class="cropper-line line-e" data-action="e"></span>' +
    '<span class="cropper-line line-n" data-action="n"></span>' +
    '<span class="cropper-line line-w" data-action="w"></span>' +
    '<span class="cropper-line line-s" data-action="s"></span>' +
    '<span class="cropper-point point-e" data-action="e"></span>' +
    '<span class="cropper-point point-n" data-action="n"></span>' +
    '<span class="cropper-point point-w" data-action="w"></span>' +
    '<span class="cropper-point point-s" data-action="s"></span>' +
    '<span class="cropper-point point-ne" data-action="ne"></span>' +
    '<span class="cropper-point point-nw" data-action="nw"></span>' +
    '<span class="cropper-point point-sw" data-action="sw"></span>' +
    '<span class="cropper-point point-se" data-action="se"></span>' +
    "</div>" +
    "</div>";
  Cropper.other = $.fn.cropper;
  $.fn.cropper = function (option) {
    var args = toArray(arguments, 1);
    var result;
    this.each(function () {
      var $this = $(this);
      var data = $this.data(NAMESPACE);
      var options;
      var fn;
      if (!data) {
        if (/destroy/.test(option)) {
          return;
        }
        options = $.extend({}, $this.data(), $.isPlainObject(option) && option);
        $this.data(NAMESPACE, (data = new Cropper(this, options)));
      }
      if (typeof option === "string" && $.isFunction((fn = data[option]))) {
        result = fn.apply(data, args);
      }
    });
    return isUndefined(result) ? this : result;
  };
  $.fn.cropper.Constructor = Cropper;
  $.fn.cropper.setDefaults = Cropper.setDefaults;
  $.fn.cropper.noConflict = function () {
    $.fn.cropper = Cropper.other;
    return this;
  };
});
(function ($) {
  "use strict";
  $.widget("livestreet.lsCropModal", $.livestreet.lsComponent, {
    options: {
      urls: { submit: null },
      selectors: { crop: ".js-crop", submit: ".js-crop-submit" },
      cropOptions: {},
      submitted: null,
    },
    _create: function () {
      this._super();
      this.elements.crop.lsCrop(this.option("cropOptions"));
      this._on(this.elements.submit, { click: "onSubmit" });
    },
    onSubmit: function () {
      var params = {
        size: this.elements.crop.lsCrop("getSelection"),
        canvas_width: this.elements.crop.lsCrop("getImageData").naturalWidth,
      };
      this._load("submit", params, "onSubmitSuccess");
    },
    onSubmitSuccess: function (response) {
      this._trigger("submitted", null, {
        element: this.element,
        response: response,
      });
      this.element.lsModal("hide");
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsCrop", $.livestreet.lsComponent, {
    options: {
      viewMode: 2,
      autoCropArea: 0.5,
      guides: false,
      center: false,
      background: false,
      rotatable: false,
      zoomable: false,
      scalable: false,
    },
    _create: function () {
      this._super();
      this.element.cropper(this.options);
    },
    getImage: function () {
      return this.element;
    },
    getImageData: function () {
      return this.element.cropper("getImageData");
    },
    getCanvasData: function () {
      return this.element.cropper("getCanvasData");
    },
    getSelection: function () {
      var data = this.element.cropper("getData");
      return {
        x: data.x,
        y: data.y,
        x2: data.x + data.width,
        y2: data.y + data.height,
      };
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsActionbarItemSelect", {
    options: {
      selectors: { target_item: ".js-actionbar-select-target-item" },
      classes: { target_selected: "selected" },
    },
    _create: function () {
      var _this = this;
      this.element.lsDropdown();
      this.elements = {
        target_items: $(this.option("selectors.target_item")),
        select_menu_items: this.element
          .lsDropdown("getMenu")
          .find("a[data-select-item]"),
      };
      this.elements.select_menu_items.on(
        "click" + this.eventNamespace,
        function (event) {
          var items = _this.elements.target_items.filter(
            $(this).data("select-filter") || "*"
          );
          _this.elements.target_items
            .removeClass(_this.option("classes.target_selected"))
            .find("input[type=checkbox]")
            .prop("checked", false);
          items
            .addClass(_this.option("classes.target_selected"))
            .find("input[type=checkbox]")
            .prop("checked", true);
          event.preventDefault();
        }
      );
      $(this.option("selectors.target_item") + " input[type=checkbox]").on(
        "click" + this.eventNamespace,
        function (event) {
          $(this)
            .closest(_this.option("selectors.target_item"))
            .toggleClass(_this.option("classes.target_selected"));
        }
      );
    },
  });
})(jQuery);
(function ($) {
  $.extend({
    notifier: {
      options: {
        core: "notifier",
        box_class: "n-box",
        notice_class: "n-notice",
        error_class: "n-error",
        close_class: "n-close",
        duration: 4000,
      },
      notices: {},
      broadcast: function (title, message, type) {
        this.core();
        var id = "notice-" + this.timestamp();
        this.notices[id] = { id: id };
        notice = { id: id, ttl: title, msg: message };
        $("#" + this.options.core).append(this.box(notice).addClass(type));
      },
      notice: function (title, message) {
        this.broadcast(title, message, this.options.notice_class);
      },
      error: function (title, message) {
        this.broadcast(title, message, this.options.error_class);
      },
      core: function () {
        var core = this.options.core;
        return $("#" + core).length == 0
          ? $("body").append('<div id="' + core + '"></div>')
          : $("#" + core);
      },
      box: function (notice) {
        var box = $(
          '<div id="' +
            notice.id +
            '" class="' +
            this.options.box_class +
            '"></div>'
        );
        if (notice.ttl != null) box.append($("<h3></h3>").append(notice.ttl));
        if (notice.msg) box.append($("<p></p>").append(notice.msg));
        box.hide().show();
        this.life(box, notice.id);
        this.events(box, notice.id);
        return box;
      },
      events: function (box, seed) {
        $(box).bind("click", function () {
          var seed = $(this).attr("id");
          $.notifier.destroy(seed, true);
        });
        $(box).bind("mouseover", function () {
          if ($.notifier.notices[$(this).attr("id")].interval) {
            var seed = $(this).attr("id");
            $.notifier.destroy(seed);
          }
        });
        $(box).bind("mouseout", function () {
          $.notifier.life(this, $(this).attr("id"));
        });
      },
      life: function (box, seed) {
        if (!this.notices[seed].duration) {
          this.notices[seed].duration = this.options.duration;
        }
        this.notices[seed].interval = {};
        this.notices[seed].interval = setInterval(function () {
          (function (seed) {
            $.notifier.destroy(seed, true);
          })(seed);
        }, this.notices[seed].duration);
      },
      destroy: function (seed, remove) {
        clearInterval($.notifier.notices[seed].interval);
        delete $.notifier.notices[seed].interval;
        if (remove == true) {
          $("#" + seed).slideUp(250, function () {
            $(this).remove();
          });
        }
      },
      timestamp: function () {
        return new Date().getTime();
      },
    },
  });
})(jQuery);
var ls = ls || {};
ls.msg = ls.notification = function ($) {
  this.options = {
    container_id: "ls-notifier",
    classes: {
      notification: "ls-notification",
      notice: "ls-notification--success",
      info: "ls-notification--info",
      error: "ls-notification--error",
    },
    duration: 3000,
  };
  this.init = function (options) {
    $.extend(this.options, options || {});
    $.extend($.notifier.options, {
      core: this.options.container_id,
      box_class: this.options.classes.notification,
      notice_class: this.options.classes.success,
      error_class: this.options.classes.error,
      duration: this.options.duration,
    });
  };
  this.show = function (title, message, type) {
    if (!title && !message) {
      ls.dev.log(
        "ÐÐµÐ¾Ð±Ñ…Ð¾Ð´Ð¸Ð¼Ð¾ ÑƒÐºÐ°Ð·Ð°Ñ‚ÑŒ Ð·Ð°Ð³Ð¾Ð»Ð¾Ð²Ð¾Ðº Ð¸Ð»Ð¸ Ñ‚ÐµÐºÑÑ‚ ÑƒÐ²ÐµÐ´Ð¾Ð¼Ð»ÐµÐ½Ð¸Ñ"
      );
      return;
    }
    type = typeof type === "undefined" ? "notice" : type;
    $.notifier.broadcast(title, message, this.options.classes[type]);
  };
  this.notice = this.success = function (title, message) {
    this.show(title, message, "notice");
  };
  this.error = function (title, message) {
    this.show(title, message, "error");
  };
  this.info = function (title, message) {
    this.show(title, message, "info");
  };
  return this;
}.call(ls.notification || {}, jQuery);
$.widget("livestreet.lsConfirm", $.livestreet.lsComponent, {
  options: { message: null, onconfirm: null, oncancel: null },
  _create: function () {
    this._super();
    this._on({ click: "_onClick" });
  },
  _onClick: function (event) {
    if (window.confirm(this.option("message"))) {
      if ($.isFunction(this.option("onconfirm"))) {
        this.option("onconfirm").call(this, event);
        event.preventDefault();
      }
    } else {
      if ($.isFunction(this.option("oncancel"))) {
        this.option("oncancel").call(this, event);
      }
      event.preventDefault();
    }
  },
});
(function ($) {
  "use strict";
  $.widget("livestreet.lsFavourite", $.livestreet.lsComponent, {
    options: {
      urls: { toggle: null },
      selectors: {
        toggle: ".js-favourite-toggle",
        count: ".js-favourite-count",
      },
      classes: {
        added: "ls-favourite--added",
        has_counter: "ls-favourite--has-counter",
      },
      params: {},
      i18n: { remove: "@favourite.remove", add: "@favourite.add" },
    },
    _create: function () {
      this._super();
      this._on({ click: "toggle" });
    },
    toggle: function (event) {
      this.options.params.type = !this._hasClass("added");
      this._load("toggle", this.onToggleSuccess);
      event.stopPropagation();
    },
    onToggleSuccess: function (response) {
      var globalCounter = $(
        '.ls-favourite[data-type="' +
          this.element.attr("data-type") +
          '"][data-param-i-target-id="' +
          this.element.attr("data-param-i-target-id") +
          '"]'
      );
      this._removeClass("added");
      globalCounter.removeClass("ls-favourite--added");
      if (response.bState) {
        this._addClass("added");
        globalCounter.addClass("ls-favourite--added");
        this.element.attr("title", this._i18n("remove"));
      } else {
        this.element.attr("title", this._i18n("add"));
      }
      if (this.elements.count) {
        if (response.iCount > 0) {
          this._addClass("has_counter");
          this.elements.count.show().text(response.iCount);
          globalCounter.addClass("has_counter");
          $(".counter-number", globalCounter).text(response.iCount);
        } else {
          this._removeClass("has_counter");
          globalCounter.removeClass("has_counter");
          this.elements.count.show().text("");
        }
      }
      this._trigger("aftertogglesuccess", null, {
        context: this,
        response: response,
      });
    },
  });
})(jQuery);
$.widget("livestreet.lsTooltip", {
  options: {
    target: null,
    position: {
      my: "center bottom-15",
      at: "center top",
      collision: "flipfit flip",
    },
    show: { effect: "fadeIn", duration: 200 },
    hide: { effect: "fadeOut", duration: 200 },
    trigger: "hover",
    classes: null,
    template:
      '<div class="ls-tooltip">' +
      '<div class="ls-tooltip-title js-tooltip-title"></div>' +
      '<div class="ls-tooltip-content js-tooltip-content"></div>' +
      "</div>",
    reposition: null,
    selectors: { title: ".js-tooltip-title", content: ".js-tooltip-content" },
    useAttrTitle: true,
    ajax: { url: null, result: "sText", params: null },
  },
  _create: function () {
    this.options.target =
      this.element.data("tooltip-target") || this.options.target;
    this._target = this.options.target
      ? $(this.options.target)
      : $(this.options.template);
    this._targetTitle = this._target.find(this.options.selectors.title);
    this._targetContent = this._target.find(this.options.selectors.content);
    this.loading = false;
    this.state = this._state.HIDDEN;
    this.options.ajax.url =
      this.options.ajax.url || this.element.data("tooltip-url");
    if (this.options.classes) this._target.addClass(this.options.classes);
    if (this._targetTitle.length) {
      this.setTitle(this.element.data("tooltip-title"));
    }
    var attrTitle = this.element.attr("title");
    if (attrTitle && this.options.useAttrTitle) {
      this.setContent(attrTitle);
      this.element.removeAttr("title").data("tooltip-content", attrTitle);
    } else {
      this.setContent(this.element.data("tooltip-content"));
    }
    this.options.position.of = this.options.position.of || this.element;
    this.options.position.using =
      this.options.position.using ||
      function (position, feedback) {
        ls.utils.removeClassByPrefix(this._target, "position-");
        this._target
          .addClass(
            "position-y-" +
              feedback.vertical +
              " " +
              "position-x-" +
              feedback.horizontal
          )
          .css(position);
      }.bind(this);
    this._on(
      this.options.trigger == "click"
        ? {
            click: function (event) {
              this.toggle();
              event.preventDefault();
            },
          }
        : { mouseenter: "show", mouseleave: "hide" }
    );
    this.window.on(
      "resize scroll",
      function () {
        this._reposition(false);
      }.bind(this)
    );
    if (this.options.trigger == "click") {
      this.document.on(
        "click" + this.eventNamespace,
        function (event) {
          if (
            !this._target.is(event.target) &&
            this._target.has(event.target).length === 0 &&
            !this.element.is(event.target) &&
            this.element.has(event.target).length === 0
          )
            this.hide();
        }.bind(this)
      );
    }
  },
  toggle: function () {
    this[this._target.is(":visible") ? "hide" : "show"]();
  },
  show: function () {
    if (
      this.state == this._state.OPEN ||
      this.state == this._state.OPENING ||
      this.state == this._state.HIDING
    )
      return false;
    this._target.appendTo("body");
    if (this.options.ajax.url && !this.loading)
      this._targetContent.empty().addClass(ls.options.classes.states.loading);
    this.element.addClass(ls.options.classes.states.open);
    this.state = this._state.OPENING;
    this._reposition();
    this._show(
      this._target,
      this.options.show,
      function () {
        if (this.state == this._state.OPENING) this.state = this._state.OPEN;
      }.bind(this)
    );
    if (this.options.ajax.url && !this.loading) {
      this.__load();
    }
    this._trigger("show", null, this);
  },
  hide: function () {
    if (this.state == this._state.HIDDEN || this.state == this._state.HIDING)
      return false;
    if (this.state == this._state.OPENING) {
      this._target.stop();
      if (this.options.show.delay) {
        this._target.hide();
        this._onHide();
        return true;
      }
    }
    this.state = this._state.HIDING;
    this._hide(
      this._target,
      this.options.hide,
      function () {
        this._onHide();
      }.bind(this)
    );
  },
  _onHide: function () {
    this._target.detach();
    this.state = this._state.HIDDEN;
    this.element.removeClass(ls.options.classes.states.open);
    this._trigger("hide", null, this);
  },
  setTitle: function (title) {
    if (!title) {
      this._targetTitle.hide();
      return false;
    }
    this._targetTitle.html(title);
  },
  setContent: function (content) {
    this._target.find(this.options.selectors.content).html(content);
  },
  _reposition: function (hidden) {
    hidden = typeof hidden === "undefined" ? true : hidden;
    if (this.state == this._state.HIDDEN && !hidden) return;
    var isVisible = this._target.is(":visible");
    this._target
      .css(!isVisible ? { display: "block", visibility: "hidden" } : {})
      .position(this.options.position)
      .css(!isVisible ? { display: "none", visibility: "visible" } : {});
    this._trigger("reposition", null, this);
  },
  __load: function () {
    var params =
      $.extend(
        {},
        this.options.ajax.params,
        ls.utils.getDataOptions(this.element, "param")
      ) || {};
    this._targetContent.empty().addClass(ls.options.classes.states.loading);
    ls.ajax.load(
      this.options.ajax.url,
      params,
      function (data) {
        this._targetContent
          .removeClass(ls.options.classes.states.loading)
          .html(data.bStateError ? "Error" : data["sText"]);
        this._reposition();
        this.loading = false;
      }.bind(this),
      {
        error: function (data) {
          this._targetContent
            .removeClass(ls.options.classes.states.loading)
            .html("Error");
          this._reposition();
          this.loading = false;
        }.bind(this),
      }
    );
  },
  _state: {
    OPEN: "OPEN",
    OPENING: "OPENING",
    HIDDEN: "HIDDEN",
    HIDING: "HIDING",
  },
});
(function ($) {
  "use strict";
  $.widget("livestreet.lsVote", $.livestreet.lsComponent, {
    options: {
      urls: { vote: null, info: null },
      selectors: {
        item: ".js-vote-item",
        rating: ".js-vote-rating",
        rating_up: ".js-vote-rating-up",
        rating_down: ".js-vote-rating-down",
      },
      classes: {
        voted: "ls-vote--voted",
        not_voted: "ls-vote--not-voted",
        voted_up: "ls-vote--voted-up",
        voted_down: "ls-vote--voted-down",
        voted_zero: "ls-vote--voted-abstain",
        count_positive: "ls-vote--count-positive",
        count_negative: "ls-vote--count-negative",
        count_zero: "ls-vote--count-zero",
        rating_hidden: "ls-vote--rating-hidden",
      },
      params: {},
      tooltip_options: {},
    },
    _create: function () {
      this._super();
      this._on(this.elements.item, {
        click: function (event) {
          this.vote($(event.currentTarget).data("vote-value"));
          event.preventDefault();
        },
      });
    },
    vote: function (value) {
      var globalCounter = $(
        '.ls-vote[data-type="' +
          this.element.attr("data-type") +
          '"][data-param-i-target-id="' +
          this.element.attr("data-param-i-target-id") +
          '"]'
      );
      this.option("params.value", value);
      this._load("vote", function (response) {
        if (isNaN(response.iRating)) {
          return;
        }
        response.iRating = parseFloat(response.iRating);
        this._removeClass(
          "count_negative count_positive count_zero rating_hidden not_voted ls-vote--voted ls-vote--voted-up ls-vote--voted-down"
        );
        globalCounter.removeClass(
          "ls-vote--count-negative ls-vote--count-positive ls-vote--count-zero ls-vote--rating-hidden ls-vote--not-voted ls-vote--voted  ls-vote--voted-up ls-vote--voted-down"
        );
        if (!response.iRemoved) {
          this._addClass("voted");
          this._addClass(
            value > 0 ? "voted_up" : value < 0 ? "voted_down" : "voted_zero"
          );
          this._addClass(
            response.iRating > 0
              ? "count_positive"
              : response.iRating < 0
              ? "count_negative"
              : "count_zero"
          );
          globalCounter.addClass("ls-vote--voted");
          globalCounter.addClass(
            value > 0
              ? "ls-vote--voted-up"
              : value < 0
              ? "ls-vote--voted-down"
              : "ls-vote--voted-zero"
          );
          globalCounter.addClass(
            response.iRating > 0
              ? "ls-vote--count-positive"
              : response.iRating < 0
              ? "ls-vote--count-negative"
              : "ls-vote--count-zero"
          );
        }
        this.elements.item.removeAttr("title");
        this.elements.rating_up.text(response.iRatingUp);
        this.elements.rating_down.text(response.iRatingDown);
        globalCounter.removeAttr("title");
        $(".js-vote-rating-up", globalCounter).text(response.iRatingUp);
        $(".js-vote-rating-down", globalCounter).text(response.iRatingDown);
      });
    },
  });
})(jQuery);
var ls = ls || {};
ls.auth = function ($) {
  "use strict";
  this.init = function () {
    $(".js-auth-login-form").on("submit", function (e) {
      if (jQuery._data(this[0], "events")["submit"]) return;
      ls.ajax.submit(aRouter.auth + "ajax-login", $(this), function (response) {
        response.sUrlRedirect && (window.location = response.sUrlRedirect);
      });
      e.preventDefault();
    });
    $(".js-auth-registration-form").on("submit", function (e) {
      var form = $(this);
      grecaptcha.ready(function () {
        var reCaptchaSiteKey = ls.registry.get("recaptcha.site_key");
        if (reCaptchaSiteKey != "") {
          grecaptcha
            .execute(reCaptchaSiteKey, { action: "registration" })
            .then(function (token) {
              form.append(
                '<input type="hidden" name="recaptcha-token" value="' +
                  token +
                  '">'
              );
              ls.ajax.submit(
                aRouter.auth + "ajax-register",
                form,
                function (response) {
                  response.sUrlRedirect &&
                    (window.location = response.sUrlRedirect);
                }
              );
            });
        } else {
          throw new Error("Pls, setup the recaptcha site_key.");
        }
      });
      e.preventDefault();
    });
    $(".js-auth-reset-form").on("submit", function (e) {
      ls.ajax.submit(
        aRouter.auth + "ajax-password-reset",
        $(this),
        function (response) {
          response.sUrlRedirect && (window.location = response.sUrlRedirect);
        }
      );
      e.preventDefault();
    });
    ls.ajax.form(
      aRouter.auth + "ajax-reactivation",
      ".js-form-reactivation",
      function (result, status, xhr, form) {
        form.find("input").val("");
        ls.hook.run("ls_user_reactivation_after", [form, result]);
      }
    );
    $(".js-modal-toggle-registration").on("click", function (e) {
      $(".js-auth-tab-reg").lsTab("activate");
      $("#modal-login").lsModal("show");
      e.preventDefault();
    });
    $(".js-modal-toggle-login").on("click", function (e) {
      $(".js-auth-tab-login").lsTab("activate");
      $("#modal-login").lsModal("show");
      e.preventDefault();
    });
  };
  return this;
}.call(ls.auth || {}, jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsMedia", $.livestreet.lsComponent, {
    options: {
      editor: $(),
      urls: {
        insert: aRouter.ajax + "media/submit-insert/",
        photoset: aRouter.ajax + "media/submit-create-photoset",
        url_upload: aRouter.ajax + "media/upload-link/",
        url_insert: aRouter.ajax + "media/upload-insert/",
      },
      selectors: {
        nav: ".js-media-nav",
        uploader: ".js-media-uploader",
        block: ".js-media-info-block",
        blocks: ".js-media-uploader .js-media-info-block",
        insert_submit: ".js-media-insert-submit",
        photoset_submit: ".js-media-photoset-submit",
        url: {
          form: ".js-media-url-form",
          url: ".js-media-url-form-url",
          block_container: ".js-media-url-settings-blocks",
          blocks: ".js-media-url-settings-blocks .js-media-info-block",
          submit_upload: ".js-media-url-submit-upload",
          submit_insert: ".js-media-url-submit-insert",
          image_preview: ".js-media-url-image-preview",
        },
      },
      uploader_options: {},
      params: {},
    },
    _create: function () {
      this._super();
      !this.option("editor").length &&
        this.option("editor", $("#" + this.element.data("media-editor")));
      this.elements.uploader.lsUploader(
        $.extend({}, this.option("uploader_options"), {
          autoload: false,
          params: { security_ls_key: LIVESTREET_SECURITY_KEY },
          filebeforeactivate: this._onFileBeforeActivate.bind(this),
        })
      );
      this._list = this.elements.uploader.lsUploader("getElement", "list");
      this._originalTargetType = this.elements.uploader.lsUploader(
        "option",
        "params.target_type"
      );
      this.elements.nav.lsTabs({ tabactivate: this._onTabActivate.bind(this) });
      this.element.lsModal({ aftershow: this.reload.bind(this) });
      this._on(this.elements.insert_submit, { click: "_onInsertSubmit" });
      this._on(this.elements.photoset_submit, { click: "_onPhotosetSubmit" });
      this._on(this.elements.url.type, { click: "onUrlTypeChange" });
      this._on(this.elements.url.url, {
        keyup: "onUrlChange",
        change: "onUrlChange",
      });
      this._on(this.elements.url.submit_upload, {
        click: this.urlInsert.bind(this, true),
      });
      this._on(this.elements.url.submit_insert, {
        click: this.urlInsert.bind(this, false),
      });
    },
    _onInsertSubmit: function (event) {
      this.insertSelectedFiles("insert", this.getSettings());
    },
    _onPhotosetSubmit: function (event) {
      this.insertSelectedFiles("photoset", this.getSettings());
    },
    _onFileBeforeActivate: function (event, data) {
      this.activateInfoBlock(data.element);
    },
    _onTabActivate: function (event, data) {
      var type = data.element.data("media-name");
      this.moveUploader(data);
      if (type === "photoset") {
        this._list.lsUploaderFileList("option", "multiselect_ctrl", false);
        this.elements.uploader.lsUploader("filterFilesByType", ["1"]);
      }
      if (type === "url") {
        this.disableUrlButtons(!this.elements.url.url.val());
      }
    },
    moveUploader: function (tab) {
      this.resetUploader();
      if (tab.element.hasClass("js-tab-show-gallery")) {
        this.elements.uploader
          .lsUploader("resetFilter")
          .lsUploader("unselectAll")
          .lsUploader("setTargetTypeFilter", "uploaded")
          .appendTo(this.getPaneContent(tab));
      }
    },
    resetUploader: function () {
      this._list.lsUploaderFileList(
        "option",
        "params.target_type",
        this._originalTargetType
      );
      this._list.lsUploaderFileList("option", "multiselect_ctrl", true);
    },
    getPaneContent: function (tab) {
      return tab.getPane().find(".js-media-pane-content");
    },
    show: function () {
      this.element.lsModal("show");
    },
    hide: function () {
      this.element.lsModal("hide");
    },
    getSettings: function () {
      return this.elements.blocks
        .filter(":visible")
        .find("form")
        .serializeJSON();
    },
    insertSelectedFiles: function (url, params) {
      this.insertFiles(
        url,
        params,
        this.elements.uploader.lsUploader("getSelectedFiles")
      );
    },
    insertFiles: function (url, params, files) {
      if (!files.length) return;
      var ids = $.map(files, function (file) {
        return $(file).lsUploaderFile("getProperty", "id");
      });
      this._load(
        url,
        $.extend(true, {}, { ids: ids }, params || {}),
        function (response) {
          this.option("editor").lsEditor("insert", response.sTextResult);
          this.element.lsModal("hide");
        }
      );
    },
    activateInfoBlock: function (file) {
      this.elements.blocks.hide();
      this.elements.blocks
        .filter("[data-type=" + this.getActiveTabName() + "]")
        .filter(
          "[data-filetype=" + file.lsUploaderFile("getProperty", "type") + "]"
        )
        .show();
      if (
        this.getActiveTabName() == "insert" &&
        file.lsUploaderFile("getProperty", "type") == "1"
      ) {
        var block = this.elements.blocks.filter(
          ".js-media-info-block-image-options"
        );
        var sizes = block.find("select[name=size]");
        sizes.find("option:not([value=original])").remove();
        sizes.append(
          $.map(file.data("mediaImageSizes"), function (v, k) {
            var height =
              v.h ||
              parseInt(
                (v.w * file.lsUploaderFile("getProperty", "height")) /
                  file.lsUploaderFile("getProperty", "width")
              );
            return (
              '<option value="' +
              v.w +
              "x" +
              (v.h ? v.h : "") +
              (v.crop ? "crop" : "") +
              '">' +
              v.w +
              " Ã— " +
              height +
              "</option>"
            );
          }).join("")
        );
      }
    },
    reload: function () {
      this.elements.uploader.lsUploader("reload");
    },
    getActiveTab: function () {
      return this.elements.nav.lsTabs("getActiveTab");
    },
    getActiveTabName: function () {
      return this.getActiveTab().data("media-name");
    },
    onUrlTypeChange: function (event) {
      this.elements.url.blocks.hide();
      this.elements.url.blocks
        .filter("[data-filetype=" + this.elements.url.type.val() + "]")
        .show();
      this.elements.url.url.val("");
      this.elements.url.image_preview.hide().empty();
    },
    onUrlChange: function (event) {
      var _this = this,
        url = this.elements.url.url.val();
      this.disableUrlButtons(!url);
      $("<img />", {
        src: url,
        style: "max-width: 50%",
        error: function () {
          _this.elements.url.image_preview.hide().empty();
        },
        load: function () {
          _this.elements.url.image_preview.show().html($(this));
        },
      });
    },
    disableUrlButtons: function (disable) {
      this.elements.url.submit_insert.prop("disabled", disable);
      this.elements.url.submit_upload.prop("disabled", disable);
    },
    urlInsert: function (upload) {
      var upload = upload || false,
        params = $.extend(
          {},
          { upload: upload },
          this.elements.url.form.serializeJSON(),
          this.elements.url.blocks
            .filter(":visible")
            .find("form")
            .serializeJSON(),
          this.elements.uploader.lsUploader("option", "params")
        );
      this.disableUrlButtons(true);
      this._load(
        "url_upload",
        params,
        function (response) {
          this.option("editor").lsEditor("insert", response.sText);
          this.element.lsModal("hide");
          this.reload();
        },
        {
          validate: false,
          submitButton:
            this.elements.url[upload ? "submit_upload" : "submit_insert"],
          onComplete: function () {
            this.disableUrlButtons(false);
          }.bind(this),
        }
      );
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsNote", $.livestreet.lsComponent, {
    options: {
      urls: { save: null, remove: null },
      selectors: {
        body: ".js-note-body",
        text: ".js-note-text",
        add: ".js-note-add",
        actions: ".js-note-actions",
        actions_edit: ".js-note-actions-edit",
        actions_remove: ".js-note-actions-remove",
        form: ".js-note-form",
        form_text: ".js-note-form-text",
        form_cancel: ".js-note-form-cancel",
      },
      params: {},
    },
    _create: function () {
      this._super();
      this._on(this.elements.add, { click: "onShowFormClick" });
      this._on(this.elements.actions_edit, { click: "onShowFormClick" });
      this._on(this.elements.form_cancel, { click: "hideForm" });
      this.elements.actions_remove.on(
        "click" + this.eventNamespace,
        function (e) {
          this.remove();
          e.preventDefault();
        }.bind(this)
      );
      this.elements.form.on(
        "submit" + this.eventNamespace,
        function (e) {
          this.save();
          e.preventDefault();
        }.bind(this)
      );
    },
    onShowFormClick: function (event) {
      event.preventDefault();
      this.showForm();
    },
    showForm: function (event) {
      this.elements.body.hide();
      this.elements.form.show();
      this.elements.form_text.val($.trim(this.elements.text.html())).select();
    },
    hideForm: function () {
      this.elements.body.show();
      this.elements.form.hide();
    },
    save: function () {
      this._setParam("text", this.elements.form_text.val());
      this._submit("save", this.elements.form, function (response) {
        this.elements.text.html(response.sText).show();
        this.elements.add.hide();
        this.elements.actions.show();
        this.hideForm();
      });
    },
    remove: function () {
      this._load("remove", function () {
        this.elements.text.empty().hide();
        this.elements.add.show();
        this.elements.actions.hide();
      });
    },
  });
})(jQuery);
$.widget("livestreet.lsEditor", {
  options: {
    type: null,
    media: null,
    media_options: {},
    set: "default",
    submitted: null,
  },
  _create: function () {
    this.strategy =
      this.element.data("editor-type") == "visual"
        ? "lsEditorVisual"
        : "lsEditorMarkup";
    this.option("set", this.element.data("editor-set") || this.option("set"));
    this.option(
      "media",
      $("#" + this.element.data("editor-media") || this.option("media"))
    );
    this.options.media_options.editor = this.element;
    this.option("media").lsMedia(this.option("media_options"));
    this.element[this.strategy](this.options);
  },
  onShow: function () {
    this.element[this.strategy]("onShow");
  },
  insert: function (text) {
    this.element[this.strategy]("insert", text);
  },
  getText: function () {
    return this.element[this.strategy]("getText");
  },
  setText: function (text) {
    this.element[this.strategy]("setText", text);
  },
  focus: function () {
    this.element[this.strategy]("focus");
  },
  showMedia: function () {
    this.element[this.strategy]("showMedia");
  },
});
$.widget("livestreet.lsEditorMarkup", {
  options: {
    media: null,
    sets: {
      default: {
        onShiftEnter: { keepDefault: false, replaceWith: "<br />\n" },
        onCtrlEnter: {
          keepDefault: false,
          openWith: "\n<p>",
          closeWith: "</p>",
        },
        onTab: { keepDefault: false, replaceWith: "    " },
        markupSet: [
          {
            name: "H4",
            className: "editor-h4",
            openWith: "<h4>",
            closeWith: "</h4>",
          },
          {
            name: "H5",
            className: "editor-h5",
            openWith: "<h5>",
            closeWith: "</h5>",
          },
          {
            name: "H6",
            className: "editor-h6",
            openWith: "<h6>",
            closeWith: "</h6>",
          },
          { separator: "---------------" },
          {
            name: ls.lang.get("editor.markup.toolbar.b"),
            className: "editor-bold",
            key: "B",
            openWith: "(!(<strong>|!|<b>)!)",
            closeWith: "(!(</strong>|!|</b>)!)",
          },
          {
            name: ls.lang.get("editor.markup.toolbar.i"),
            className: "editor-italic",
            key: "I",
            openWith: "(!(<em>|!|<i>)!)",
            closeWith: "(!(</em>|!|</i>)!)",
          },
          {
            name: ls.lang.get("editor.markup.toolbar.s"),
            className: "editor-stroke",
            key: "S",
            openWith: "<s>",
            closeWith: "</s>",
          },
          {
            name: ls.lang.get("editor.markup.toolbar.u"),
            className: "editor-underline",
            key: "U",
            openWith: "<u>",
            closeWith: "</u>",
          },
          {
            name: ls.lang.get("editor.markup.toolbar.quote"),
            className: "editor-quote",
            key: "Q",
            replaceWith: function (m) {
              if (m.selectionOuter)
                return "<blockquote>" + m.selectionOuter + "</blockquote>";
              else if (m.selection)
                return "<blockquote>" + m.selection + "</blockquote>";
              else return "<blockquote></blockquote>";
            },
          },
          {
            name: ls.lang.get("editor.markup.toolbar.code"),
            className: "editor-code",
            openWith: "<(!(code|!|codeline)!)>",
            closeWith: "</(!(code|!|codeline)!)>",
          },
          { separator: "---------------" },
          {
            name: ls.lang.get("editor.markup.toolbar.list_ul"),
            className: "editor-ul",
            openWith: "    <li>",
            closeWith: "</li>",
            multiline: true,
            openBlockWith: "<ul>\n",
            closeBlockWith: "\n</ul>",
          },
          {
            name: ls.lang.get("editor.markup.toolbar.list_ol"),
            className: "editor-ol",
            openWith: "    <li>",
            closeWith: "</li>",
            multiline: true,
            openBlockWith: "<ol>\n",
            closeBlockWith: "\n</ol>",
          },
          {
            name: ls.lang.get("editor.markup.toolbar.list_li"),
            className: "editor-li",
            openWith: "<li>",
            closeWith: "</li>",
          },
          { separator: "---------------" },
          {
            name: ls.lang.get("editor.markup.toolbar.image"),
            className: "editor-picture",
            key: "P",
            beforeInsert: function (markitup) {
              $(markitup.textarea).lsEditor("showMedia");
            },
          },
          {
            name: ls.lang.get("editor.markup.toolbar.video"),
            className: "editor-video",
            replaceWith:
              "<video>[![" +
              ls.lang.get("editor.markup.toolbar.video_promt") +
              ":!:http://]!]</video>",
          },
          {
            name: ls.lang.get("editor.markup.toolbar.url"),
            className: "editor-link",
            key: "L",
            openWith:
              '<a href="[![' +
              ls.lang.get("editor.markup.toolbar.url_promt") +
              ':!:http://]!]"(!( title="[![Title]!]")!)>',
            closeWith: "</a>",
            placeHolder: "Your text to link...",
          },
          {
            name: ls.lang.get("editor.markup.toolbar.user"),
            className: "editor-user",
            replaceWith:
              '<ls user="[![' +
              ls.lang.get("editor.markup.toolbar.user_promt") +
              ']!]" />',
          },
          { separator: "---------------" },
          {
            name: ls.lang.get("editor.markup.toolbar.clear_tags"),
            className: "editor-clean",
            replaceWith: function (markitup) {
              return markitup.selection.replace(/<(.*?)>/g, "");
            },
          },
          {
            name: ls.lang.get("editor.markup.toolbar.cut"),
            className: "editor-cut",
            replaceWith: function (markitup) {
              if (markitup.selection)
                return '<cut name="' + markitup.selection + '">';
              else return "<cut>";
            },
          },
        ],
      },
      light: {
        onShiftEnter: { keepDefault: false, replaceWith: "<br />\n" },
        onTab: { keepDefault: false, replaceWith: "    " },
        markupSet: [
          {
            name: ls.lang.get("editor.markup.toolbar.b"),
            className: "editor-bold",
            key: "B",
            openWith: "(!(<strong>|!|<b>)!)",
            closeWith: "(!(</strong>|!|</b>)!)",
          },
          {
            name: ls.lang.get("editor.markup.toolbar.i"),
            className: "editor-italic",
            key: "I",
            openWith: "(!(<em>|!|<i>)!)",
            closeWith: "(!(</em>|!|</i>)!)",
          },
          {
            name: ls.lang.get("editor.markup.toolbar.s"),
            className: "editor-stroke",
            key: "S",
            openWith: "<s>",
            closeWith: "</s>",
          },
          {
            name: ls.lang.get("editor.markup.toolbar.u"),
            className: "editor-underline",
            key: "U",
            openWith: "<u>",
            closeWith: "</u>",
          },
          { separator: "---------------" },
          {
            name: ls.lang.get("editor.markup.toolbar.quote"),
            className: "editor-quote",
            key: "Q",
            replaceWith: function (m) {
              if (m.selectionOuter)
                return "<blockquote>" + m.selectionOuter + "</blockquote>";
              else if (m.selection)
                return "<blockquote>" + m.selection + "</blockquote>";
              else return "<blockquote></blockquote>";
            },
          },
          {
            name: ls.lang.get("editor.markup.toolbar.code"),
            className: "editor-code",
            openWith: "<(!(code|!|codeline)!)>",
            closeWith: "</(!(code|!|codeline)!)>",
          },
          {
            name: ls.lang.get("editor.markup.toolbar.image"),
            className: "editor-picture",
            key: "P",
            beforeInsert: function (markitup) {
              $(markitup.textarea).lsEditor("showMedia");
            },
          },
          {
            name: ls.lang.get("editor.markup.toolbar.url"),
            className: "editor-link",
            key: "L",
            openWith:
              '<a href="[![' +
              ls.lang.get("editor.markup.toolbar.url_promt") +
              ':!:http://]!]"(!( title="[![Title]!]")!)>',
            closeWith: "</a>",
            placeHolder: "Your text to link...",
          },
          {
            name: ls.lang.get("editor.markup.toolbar.user"),
            className: "editor-user",
            replaceWith:
              '<ls user="[![' +
              ls.lang.get("editor.markup.toolbar.user_promt") +
              ']!]" />',
          },
          { separator: "---------------" },
          {
            name: ls.lang.get("editor.markup.toolbar.clear_tags"),
            className: "editor-clean",
            replaceWith: function (markitup) {
              return markitup.selection.replace(/<(.*?)>/g, "");
            },
          },
        ],
      },
      empty: {
        onShiftEnter: { keepDefault: false, replaceWith: "<br />\n" },
        onTab: { keepDefault: false, replaceWith: "    " },
        markupSet: [],
      },
    },
  },
  _create: function () {
    var _this = this;
    this.element.markItUp(this.option("sets." + this.option("set")));
    var help = $(
        ".js-editor-help[data-form-id=" + this.element.attr("id") + "]"
      ),
      toggle = help.find(".js-editor-help-toggle"),
      content = help.find(".js-editor-help-body");
    toggle.on("click" + this.eventNamespace, function (event) {
      content.toggle();
      event.preventDefault();
    });
    $(".js-tags-help-link").click(function () {
      var tag = $(this);
      _this.insert(tag.data("insert") || tag.text());
      return false;
    });
    this.element.on(
      "keyup",
      null,
      "ctrl+return",
      function () {
        this._trigger("submitted");
      }.bind(this)
    );
  },
  onShow: function () {
    return;
  },
  insert: function (text) {
    $.markItUp({ target: this.element, replaceWith: text });
  },
  getText: function () {
    return this.element.val();
  },
  setText: function (text) {
    return this.element.val(text);
  },
  focus: function () {
    this.element.focus();
  },
  showMedia: function (text) {
    this.option("media").lsMedia("show");
  },
});
(function ($) {
  "use strict";
  $.widget("livestreet.lsEditorVisual", {
    options: {
      set: "default",
      sets: {
        common: {
          language: LANGUAGE,
          plugins:
            "media table fullscreen autolink link pagebreak code autoresize livestreet paste spoiler",
          paste_as_text: true,
          skin: "livestreet",
          menubar: false,
          statusbar: false,
          pagebreak_separator: "<cut>",
          forced_root_block: false,
          extended_valid_elements: "ls[user]",
          custom_elements: "~ls",
          short_ended_elements: "ls img br hr param",
          relative_urls: false,
          remove_script_host: false,
          autoresize_max_height: 500,
          style_formats: [
            {
              title: "Headings",
              items: [
                { title: "Heading 4", format: "h4" },
                { title: "Heading 5", format: "h5" },
                { title: "Heading 6", format: "h6" },
              ],
            },
            {
              title: "Inline",
              items: [
                { title: "Bold", icon: "bold", format: "bold" },
                { title: "Italic", icon: "italic", format: "italic" },
                { title: "Underline", icon: "underline", format: "underline" },
                {
                  title: "Strikethrough",
                  icon: "strikethrough",
                  format: "strikethrough",
                },
                {
                  title: "Superscript",
                  icon: "superscript",
                  format: "superscript",
                },
                { title: "Subscript", icon: "subscript", format: "subscript" },
              ],
            },
            {
              title: "Blocks",
              items: [
                { title: "Paragraph", format: "p" },
                { title: "Blockquote", format: "blockquote" },
                { title: "Code", format: "code" },
                { title: "Pre", format: "pre" },
              ],
            },
            {
              title: "Alignment",
              items: [
                { title: "Left", icon: "alignleft", format: "alignleft" },
                { title: "Center", icon: "aligncenter", format: "aligncenter" },
                { title: "Right", icon: "alignright", format: "alignright" },
                {
                  title: "Justify",
                  icon: "alignjustify",
                  format: "alignjustify",
                },
              ],
            },
          ],
        },
        default: {
          toolbar:
            "styleselect ls-pre ls-code | bold italic strikethrough underline blockquote table | bullist numlist | link media ls-media ls-user | lsuser removeformat pagebreak code fullscreen | spoiler",
        },
        light: {
          toolbar:
            "styleselect ls-pre ls-code | bold italic strikethrough underline blockquote | bullist numlist | removeformat code | spoiler",
        },
      },
    },
    _create: function () {
      this.__init();
    },
    __init: function () {
      this.element.tinymce(
        $.extend(
          {
            setup: function (editor) {
              editor.on(
                "keydown",
                function (event) {
                  if (event.ctrlKey && event.keyCode == 13) {
                    this._trigger("submitted");
                    event.preventDefault();
                  }
                }.bind(this)
              );
              editor.on(
                "init",
                function (event) {
                  if ($("body").hasClass("theme-night")) {
                    $(".mce-tinymce iframe")
                      .contents()
                      .find("body")
                      .addClass("theme-night");
                  }
                }.bind(this)
              );
            }.bind(this),
          },
          this.option("sets.common"),
          this.option("sets." + this.option("set"))
        )
      );
    },
    onShow: function () {
      this.element.tinymce().destroy();
      this.__init();
    },
    insert: function (text) {
      this.element.tinymce().insertContent(text);
    },
    getText: function () {
      this.element.tinymce().getContent();
    },
    setText: function (text) {
      this.element.tinymce().setContent(text);
    },
    focus: function () {
      this.element.tinymce().focus();
    },
    showMedia: function (text) {
      this.option("media").lsMedia("show");
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsCommentsToolbar", $.livestreet.lsComponent, {
    options: {
      comments: ".js-comments",
      selectors: {
        update: ".js-toolbar-comments-update",
        counter: ".js-toolbar-comments-count",
        icon: ".js-toolbar-comments-update .fa",
      },
      classes: { active: "active", "fa-spin": "fa-spin" },
    },
    _create: function () {
      this._super();
      this.options.comments =
        typeof target === "string"
          ? $(this.options.comments)
          : this.options.comments;
      this.updateCounter();
      this._on(this.elements.update, { click: "update" });
      this._on(this.elements.counter, { click: "scroll" });
    },
    updateCounter: function (count) {
      count =
        typeof count === "undefined"
          ? this.options.comments.lsComments("getCommentsNew").length
          : count;
      if (count) {
        this.showCounter();
        this.elements.counter.text(count);
      } else {
        this.hideCounter();
      }
    },
    update: function () {
      this._addClass(this.elements.update, "active");
      this._addClass(this.elements.icon, "fa-spin");
      this.options.comments.lsComments(
        "load",
        false,
        false,
        function () {
          this.updateCounter();
          this._removeClass(this.elements.update, "active");
          this._removeClass(this.elements.icon, "fa-spin");
        }.bind(this)
      );
    },
    showCounter: function () {
      if (this.elements.counter.is(":visible")) return;
      this.elements.counter.show();
    },
    hideCounter: function () {
      this.elements.counter.hide();
    },
    scroll: function () {
      var commentsNew = this.options.comments.lsComments("getCommentsNew"),
        comment = commentsNew.eq(0);
      if (!commentsNew.length) return;
      if (!comment.is(":visible"))
        this.options.comments.lsComments("unfoldAll");
      this.updateCounter(commentsNew.length - 1);
      comment.lsComment("notNew");
      this.options.comments.lsComments("scrollToComment", comment);
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsCommentForm", $.livestreet.lsComponent, {
    options: {
      comments: $(),
      urls: { text: null, add: null, update: null },
      selectors: {
        text: ".js-comment-form-text",
        submit: ".js-comment-form-submit",
        show_preview: ".js-comment-form-preview",
        update_submit: ".js-comment-form-update-submit",
        cancel: ".js-comment-form-update-cancel",
        comment_id: ".js-comment-form-id",
        spoiler: ".js-comment-form-spoiler",
      },
      classes: { locked: "ls-comment-form--locked" },
      html: { preview: '<div class="ls-comment-preview ls-text"></div>' },
      params: {},
    },
    _create: function () {
      this._super();
      this._targetId = 0;
      this._locked = false;
      this.setModeAdd();
      this._on({ submit: "submit" });
      this._on(this.elements.cancel, { click: "hide" });
      this._on(this.elements.show_preview, { click: "previewShow" });
      this._on(this.elements.spoiler, { click: "insertSpoiler" });
    },
    submit: function (event) {
      event.preventDefault();
      var data = this.element.serializeJSON();
      this.lock();
      this[this.getMode() === this.MODE.ADD ? "add" : "update"](data);
    },
    add: function (data) {
      this._load("add", data, "onAdd", { onComplete: this.unlock.bind(this) });
    },
    update: function (data) {
      this.emptyText();
      this._load("update", data, "onUpdate", {
        onComplete: this.unlock.bind(this),
      });
    },
    onAdd: function (response) {
      this.emptyText();
      this.option("comments").lsComments("load", response.sCommentId, false);
      $(".js-comment-reply-root").show();
      $(".js-comments .ls-comment-preview").remove();
    },
    onUpdate: function (response) {
      var comment = this.option("comments").lsComments(
          "getCommentById",
          this.getTargetId()
        ),
        commentNew = this.option("comments").lsComments(
          "initComments",
          $($.trim(response.html))
        );
      this.option("comments")
        .lsComments("removeCommentById", this.getTargetId())
        .lsComments("addComments", commentNew);
      comment.replaceWith(commentNew);
      this.hide();
      this.emptyText();
      this.option("comments").lsComments("scrollToComment", commentNew);
    },
    loadCommentText: function () {
      this._load(
        "text",
        { comment_id: this.getTargetId() },
        function (response) {
          this.setText(response.text);
          this.unlock();
          this.elements.text.focus();
        }
      );
    },
    emptyText: function () {
      this.setText("");
    },
    getText: function () {
      return this.elements.text.val();
    },
    setText: function (text) {
      this.elements.text.val(text);
    },
    toggle: function (commentId, edit, focus) {
      if (this.getTargetId() === commentId && this.element.is(":visible")) {
        if (
          (edit && this.getMode() === this.MODE.ADD) ||
          (!edit && this.getMode() === this.MODE.EDIT)
        ) {
          this[edit ? "setModeEdit" : "setModeAdd"]();
        } else if (!this.isLocked()) {
          this.hide();
        }
      } else {
        this.show(commentId, edit, focus);
      }
    },
    show: function (commentId, edit, focus) {
      this.setTargetId(commentId);
      this[edit ? "setModeEdit" : "setModeAdd"]();
      var element = commentId
        ? this.option("comments").lsComments("getCommentById", commentId)
        : this.option("comments").lsComments("getElement", "reply_root");
      this.element.insertAfter(element).show();
      if (focus) this.elements.text.focus();
    },
    hide: function () {
      if (this.getMode() === this.MODE.EDIT) {
        this.emptyText();
      }
      this.element.hide();
      this.previewHide();
    },
    lock: function () {
      this._locked = true;
      this._addClass("locked");
      ls.utils.formLock(this.element);
    },
    unlock: function () {
      this._locked = false;
      this._removeClass("locked");
      ls.utils.formUnlock(this.element);
    },
    isLocked: function () {
      return this._locked;
    },
    previewShow: function () {
      if (!this.elements.text.val()) return;
      this.previewHide();
      this._preview = $(this.option("html.preview"));
      this.element.before(this._preview);
      ls.utils.textPreview(this.elements.text, this._preview, false);
    },
    insertSpoiler: function (event) {
      event.preventDefault();
      var textarea = this.elements.text[0];
      var cursorPosition = textarea.selectionStart;
      var endPos = textarea.selectionEnd;
      var selectedText = textarea.value.substring(cursorPosition, endPos);
      if (selectedText.length > 0) {
        if (
          selectedText.indexOf("<spoiler>") !== -1 ||
          selectedText.indexOf("</spoiler>") !== -1
        )
          return;
        const wrappedText = `<spoiler>${selectedText}</spoiler>`;
        textarea.value =
          textarea.value.substring(0, cursorPosition) +
          wrappedText +
          textarea.value.substring(endPos);
        const newPos = cursorPosition + wrappedText.length;
        textarea.setSelectionRange(newPos, newPos);
      } else {
        if (
          this.elements.text
            .val()
            .substring(cursorPosition - 9, cursorPosition) !== "<spoiler>"
        ) {
          this.elements.text.val(
            this.elements.text.val().substring(0, cursorPosition) +
              "<spoiler></spoiler>" +
              this.elements.text.val().substring(cursorPosition)
          );
          var cursorPosition = this.elements.text.val().length - 10;
          textarea.setSelectionRange(cursorPosition, cursorPosition);
          this.elements.text.focus();
        }
      }
    },
    previewHide: function () {
      if (!this._preview) return;
      this._preview.remove();
      this._preview = null;
    },
    setModeAdd: function () {
      if (this.getMode() === this.MODE.EDIT) this.emptyText();
      this.setMode(this.MODE.ADD);
      this.elements.update_submit.hide();
      this.elements.submit.show();
    },
    setModeEdit: function () {
      this.setMode(this.MODE.EDIT);
      this.elements.text.height(20);
      $(this.elements.text)
        .closest("form")
        .find($(".js-comment-form-preview"))
        .show();
      this.elements.update_submit.show();
      this.elements.submit.hide();
      this.lock();
      this.loadCommentText();
      setTimeout(function () {
        $(".js-comment-form .js-comment-form-text").height(
          $(".js-comment-form .js-comment-form-text")[0].scrollHeight
        );
      }, 500);
    },
    getMode: function () {
      return this._mode;
    },
    setMode: function (mode) {
      this._mode = mode;
    },
    getTargetId: function () {
      return this._targetId;
    },
    setTargetId: function (id) {
      this.elements.comment_id.val(id);
      this._targetId = id;
    },
    MODE: { EDIT: "EDIT", ADD: "ADD" },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsComment", $.livestreet.lsComponent, {
    options: {
      comments: $(),
      form: $(),
      folding: true,
      urls: {
        vote: aRouter.ajax + "vote/comment/",
        favourite: aRouter.ajax + "favourite/comment/",
        toggle: aRouter.ajax + "comment/delete/",
        pin: aRouter.ajax + "comment/pin/",
      },
      selectors: {
        wrapper: ".js-comment-wrapper",
        vote: ".js-vote-comment",
        favourite: ".js-favourite-comment",
        reply: ".js-comment-reply",
        fold: ".js-comment-fold",
        remove: ".js-comment-remove",
        edit: ".js-comment-update",
        update_timer: ".js-comment-update-timer",
        scroll_to_child: ".js-comment-scroll-to-child",
        scroll_to_parent: ".js-comment-scroll-to-parent",
        more: ".js-comment-more",
        pin: ".js-comment-pin",
      },
      classes: {
        folded: "ls-comment--folded",
        current: "ls-comment--current",
        new: "ls-comment--new",
        deleted: "ls-comment--deleted",
        self: "ls-comment--self",
        pinned: "ls-comment--pinned",
      },
      params: {},
      i18n: {
        fold: "@comments.folding.fold",
        unfold: "@comments.folding.unfold",
      },
    },
    _create: function () {
      this._super();
      this._id = this.element.data("id");
      this._parentId = this.element.data("parent-id");
      this._parent = null;
      this._scrollChild = null;
      this._countdown = this.elements.update_timer.data("seconds");
      this.elements.vote.lsVote({ urls: { vote: this.option("urls.vote") } });
      this.elements.favourite.lsFavourite({
        urls: { toggle: this.option("urls.favourite") },
      });
      if (this.options.folding) {
        if (this.hasChildren()) this.elements.fold.show();
        this.elements.fold.on(
          "click" + this.eventNamespace,
          this.foldToggle.bind(this)
        );
      }
      this.elements.scroll_to_parent.on(
        "click" + this.eventNamespace,
        this.scrollToParent.bind(this)
      );
      this.elements.reply.on(
        "click" + this.eventNamespace,
        this.reply.bind(this)
      );
      this.elements.remove.on(
        "click" + this.eventNamespace,
        this.toggle.bind(this)
      );
      this.elements.edit.on(
        "click" + this.eventNamespace,
        this.edit.bind(this)
      );
      this.elements.more.on(
        "click" + this.eventNamespace,
        this.more.bind(this)
      );
      if (this._countdown) {
        this.updateTimer();
        this.elements.update_timer.everyTime(1000, this.updateTimer.bind(this));
      }
    },
    updateTimer: function () {
      if (this._countdown--) {
        this.elements.update_timer.text(
          ls.utils.timeRemaining(this._countdown)
        );
      } else {
        this.elements.update_timer.stopTime();
        this.elements.edit.remove();
      }
    },
    scrollToParent: function () {
      this.getParent().lsComment("setScrollChild", this.element);
      this.option("comments").lsComments("scrollToComment", this.getParent());
    },
    scrollToChild: function () {
      this.option("comments").lsComments(
        "scrollToComment",
        this.getScrollChild()
      );
      this.setScrollChild(null);
    },
    edit: function (event) {
      event.preventDefault();
      this.option("comments")
        .lsComments("getForm")
        .lsCommentForm("toggle", this.getId(), true, true);
      $(".js-comment-reply-root").show();
    },
    reply: function (event) {
      event.preventDefault();
      this.option("comments")
        .lsComments("getForm")
        .lsCommentForm("toggle", this.getId(), false, true);
      $(".js-comment-form .text-area").focus();
      $(".js-comment-reply-root").show();
      $(".js-comment-form .text-area").attr(
        "placeholder",
        "Ð’Ð°Ñˆ Ð¾Ñ‚Ð²ÐµÑ‚..."
      );
    },
    toggle: function (event) {
      event.preventDefault();
      this._load("toggle", { comment_id: this.getId() }, function (response) {
        this._removeClass("self new deleted current");
        if (response.state) {
          this._addClass("deleted");
        }
        this.elements.remove.text(response.toggle_text);
      });
    },
    markAsCurrent: function () {
      this._addClass("current");
    },
    notCurrent: function () {
      this._removeClass("current");
      this.setScrollChild(null);
    },
    isCurrent: function () {
      return this._hasClass("current");
    },
    markAsNew: function () {
      this._addClass("new");
    },
    notNew: function () {
      this._removeClass("new");
    },
    isNew: function () {
      return this._hasClass("new");
    },
    foldToggle: function (event) {
      event.preventDefault();
      this[this._hasClass("folded") ? "unfold" : "fold"]();
    },
    fold: function () {
      this._addClass("folded");
      this.element.nextAll(this.options.selectors.wrapper).hide();
      this.onFold();
    },
    unfold: function () {
      this._removeClass("folded");
      this.element.nextAll(this.options.selectors.wrapper).show();
      this.onUnfold();
    },
    onFold: function () {
      this.elements.fold.text(this._i18n("unfold"));
    },
    onUnfold: function () {
      this.elements.fold.text(this._i18n("fold"));
    },
    hasChildren: function () {
      return this.element.next(this.options.selectors.wrapper).length;
    },
    getId: function () {
      return this._id;
    },
    getParent: function () {
      return (
        this._parent ||
        (this._parent = this.option("comments").lsComments(
          "getCommentById",
          this._parentId
        ))
      );
    },
    getScrollChild: function () {
      return this._scrollChild;
    },
    setScrollChild: function (comment) {
      this._scrollChild = comment;
      this.elements.scroll_to_child.off();
      if (comment) {
        this.elements.scroll_to_child
          .show()
          .one("click" + this.eventNamespace, this.scrollToChild.bind(this));
      } else {
        this.elements.scroll_to_child.hide();
      }
    },
    more: function (e) {
      e.stopPropagation();
      e.stopImmediatePropagation();
      e.preventDefault();
      $(".ls-comment-more").not(this.elements.more).removeClass("open");
      this.elements.more.toggleClass("open");
      var comment = $(".js-comment[data-id=" + this._id + "]");
      if (
        this.elements.more.hasClass("open") &&
        !this.elements.more.find(".ls-comment-more-buttons").length
      ) {
        this.elements.more.append($(".ls-comment-more-buttons"));
        var fav = $(".js-favourite-comment", this.elements.more);
        fav.attr("data-param-i-target-id", this._id);
        if (comment.data("favourite") == 1) {
          fav.addClass("ls-favourite--added");
          $("span", fav).text("Ð’ Ð¸Ð·Ð±Ñ€Ð°Ð½Ð½Ð¾Ð¼");
        } else {
          fav.removeClass("ls-favourite--added");
          $("span", fav).text("Ð’ Ð¸Ð·Ð±Ñ€Ð°Ð½Ð½Ð¾Ðµ");
        }
        fav.lsFavourite({
          urls: { toggle: aRouter.ajax + "favourite/comment/" },
          params: { iTargetId: this._id },
        });
        fav.off().on("click", function (event) {
          if ($(this).hasClass("ls-favourite--added")) {
            comment.data("favourite", 0);
            $("span", this).text("Ð’ Ð¸Ð·Ð±Ñ€Ð°Ð½Ð½Ð¾Ðµ");
          } else {
            comment.data("favourite", 1);
            $("span", this).text("Ð’ Ð¸Ð·Ð±Ñ€Ð°Ð½Ð½Ð¾Ð¼");
          }
          $(this).lsFavourite("toggle", event);
        });
        $(".js-user-report").lsReport({
          urls: {
            modal: aRouter.comments + "ajax-modal-complaint",
            add: aRouter.comments + "ajax-complaint-add",
          },
          params: { target_id: this._id },
        });
        $(".js-comment-remove", this.elements.more).attr("data-id", this._id);
        $(".js-comment-remove", this.elements.more)
          .off()
          .on("click", function (e) {
            comment.lsComment("toggle", e);
            $("span", this).text(
              comment.hasClass("ls-comment--deleted")
                ? "Ð£Ð´Ð°Ð»Ð¸Ñ‚ÑŒ"
                : "Ð’Ð¾ÑÑÑ‚Ð°Ð½Ð¾Ð²Ð¸Ñ‚ÑŒ"
            );
          });
        if (
          $(".js-comment-pin", this.elements.more).length &&
          !this._parentId &&
          !comment.hasClass("ls-comment--deleted")
        ) {
          $(".js-comment-pin", this.elements.more).removeClass("hidden");
          $(".js-comment-pin", this.elements.more)
            .off()
            .on("click", function (e) {
              comment.lsComment("pin", e);
            });
        } else {
          $(".js-comment-pin", this.elements.more).addClass("hidden");
        }
      }
      comment.hasClass("ls-comment--deleted")
        ? $(".js-comment-remove span", this.elements.more).text(
            "Ð’Ð¾ÑÑÑ‚Ð°Ð½Ð¾Ð²Ð¸Ñ‚ÑŒ"
          )
        : $(".js-comment-remove span", this.elements.more).text(
            "Ð£Ð´Ð°Ð»Ð¸Ñ‚ÑŒ"
          );
      comment.hasClass("ls-comment--pinned")
        ? $(".js-comment-pin span", this.elements.more).text(
            "ÐžÑ‚ÐºÑ€ÐµÐ¿Ð¸Ñ‚ÑŒ"
          )
        : $(".js-comment-pin span", this.elements.more).text(
            "Ð—Ð°ÐºÑ€ÐµÐ¿Ð¸Ñ‚ÑŒ"
          );
    },
    pin: function (event) {
      event.preventDefault();
      this._load("pin", { comment_id: this.getId() }, function (response) {
        $(".js-pin-text").remove();
        $(".js-comment").removeClass("ls-comment--pinned");
        $(".js-comment-wrapper").attr("data-pin", 0);
        var sortType = $(".js-sort-comments.comment--active").attr("data-type");
        if (response.pin_state == 1) {
          var pin_text =
            '<div class="js-pin-text pinned-message"><svg class="icon icon-pin" xmlns="http://www.w3.org/2000/svg"><use xlink:href="#pin-icon"></use></svg> ÐšÐ¾Ð¼Ð¼ÐµÐ½Ñ‚Ð°Ñ€Ð¸Ð¹ Ð·Ð°ÐºÑ€ÐµÐ¿Ð»Ñ‘Ð½</div>';
          this.element.find(".comments__block--item-content").prepend(pin_text);
          this._addClass("pinned");
          this.element.closest(".js-comment-wrapper").attr("data-pin", 1);
          sortComments(sortType);
          scrollToComment("?comment" + this.getId());
        } else {
          sortComments(sortType);
        }
      });
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsComments", $.livestreet.lsComponent, {
    options: {
      urls: {
        add: null,
        load: null,
        hide: aRouter.ajax + "comment/delete/",
        text: aRouter.ajax + "comment/load/",
        update: aRouter.ajax + "comment/update/",
      },
      selectors: {
        comment: ".js-comment",
        comment_wrapper: ".js-comment-wrapper",
        form: ".js-comment-form",
        form_top: ".js-comment-form-top",
        preview: ".js-comment-preview",
        fold_all_toggle: ".js-comments-fold-all-toggle",
        title: ".js-comments-title",
        reply_root: ".js-comment-reply-root",
        comment_list: ".js-comment-list",
        subscribe: ".js-comments-subscribe",
        empty: ".js-comments-empty",
      },
      wysiwyg: null,
      folding: true,
      show_form: false,
      use_paging: false,
      params: {},
      i18n: {
        fold_all: "@comments.folding.fold_all",
        unfold_all: "@comments.folding.unfold_all",
        subscribe: "@comments.subscribe",
        unsubscribe: "@comments.unsubscribe",
        comments: "@comments.comments_declension",
      },
    },
    _create: function () {
      var _this = this;
      this._super();
      this.initComments(this.getComments());
      this.getForm().lsCommentForm({
        urls: {
          text: this.option("urls.text"),
          add: this.option("urls.add"),
          update: this.option("urls.update"),
        },
        comments: this.element,
      });
      this.getFormTop().lsCommentForm({
        urls: {
          text: this.option("urls.text"),
          add: this.option("urls.add"),
          update: this.option("urls.update"),
        },
        comments: this.element,
      });
      this._currentComment = $();
      this._targetId = this.element.data("target-id");
      this._targetType = this.element.data("target-type");
      this.setLastCommentId(this.element.data("comment-last-id"));
      this.elements.reply_root.on(
        "click" + this.eventNamespace,
        function (event) {
          event.preventDefault();
          _this.getForm().lsCommentForm("show", 0);
          $(".js-comment-form .text-area").focus();
          $(".js-comment-form .text-area").attr(
            "placeholder",
            "Ð’Ð°Ñˆ ÐºÐ¾Ð¼Ð¼ÐµÐ½Ñ‚Ð°Ñ€Ð¸Ð¹..."
          );
        }
      );
      if (this.options.folding) {
        this.elements.fold_all_toggle.on(
          "click" + this.eventNamespace,
          this.foldAllToggle.bind(this)
        );
      }
      this.elements.subscribe.on(
        "click" + this.eventNamespace,
        this.subscribeToggle.bind(this)
      );
    },
    subscribeToggle: function () {
      var isActive = this.elements.subscribe.hasClass("active");
      ls.subscribe.toggle(
        this._targetType + "_new_comment",
        this._targetId,
        "",
        !isActive
      );
      if (isActive) {
        this.elements.subscribe.removeClass("active");
        $("span", this.elements.subscribe).text(this._i18n("subscribe"));
      } else {
        this.elements.subscribe.addClass("active");
        $("span", this.elements.subscribe).text(this._i18n("unsubscribe"));
      }
    },
    foldAllToggle: function () {
      this[
        this.elements.fold_all_toggle.hasClass("active")
          ? "unfoldAll"
          : "foldAll"
      ]();
    },
    foldAll: function () {
      this.getComments().lsComment("fold");
      this.elements.fold_all_toggle
        .addClass("active")
        .text(this._i18n("unfold_all"));
    },
    unfoldAll: function () {
      this.getComments().lsComment("unfold");
      this.elements.fold_all_toggle
        .removeClass("active")
        .text(this._i18n("fold_all"));
    },
    load: function (commentSelfId, flush, callback) {
      flush = typeof flush === "undefined" ? true : flush;
      var params = {
        target_id: this._targetId,
        target_type: this._targetType,
        last_comment_id: this.getLastCommentId(),
        self_comment_id: commentSelfId || undefined,
        use_paging: this.option("use_paging"),
      };
      this._load("load", params, function (response) {
        var commentsLoaded = response.comments,
          countLoaded = commentsLoaded.length;
        if (flush) this.getCommentsNew().lsComment("notNew");
        if (~this.getComments().length && countLoaded)
          this.elements.empty.hide();
        $.each(
          commentsLoaded,
          function (index, item) {
            var comment = this.initComments($($.trim(item.html)));
            this.elements.comment = this.elements.comment.add(comment);
            this.insert(comment, item.id, item.parent_id);
          }.bind(this)
        );
        if (countLoaded && response.last_comment_id) {
          this.setLastCommentId(response.last_comment_id);
          this.elements.title.text(
            this._i18n("comments", this.getComments().length)
          );
        }
        if (
          this.options.folding &&
          ((!commentSelfId && countLoaded) ||
            (commentSelfId && countLoaded - 1 > 0))
        ) {
          this.unfoldAll();
        }
        if (commentSelfId) {
          this.getForm().lsCommentForm("hide");
          this.scrollToComment(this.getCommentById(commentSelfId));
        } else {
          newCommentsFadeInit();
        }
        if ($.isFunction(callback)) callback.call(this);
      });
      this._trigger("loaded");
    },
    insert: function (comment, commentId, commentParentId) {
      var commentWrapper = $(
        '<div class="comments__block--item js-comment-wrapper" data-id="' +
          commentId +
          '" data-rating="0"></div>'
      ).append(comment);
      this.elements.comment_list.show();
      if (commentParentId) {
        var wrapper = $(
          this.options.selectors.comment_wrapper +
            "[data-id=" +
            commentParentId +
            "]"
        );
        if (
          wrapper.parentsUntil(this.elements.comment_list).length ==
          ls.registry.get("comment_max_tree")
        ) {
          commentWrapper = $(
            '<div class="comments__block--item js-comment-wrapper avatar--small" data-id="' +
              commentId +
              '"></div>'
          ).append(comment);
          wrapper = wrapper.parent(this.options.selectors.comment_wrapper);
        }
        wrapper.append(commentWrapper);
      } else {
        if ($(".js-sort-comments.comment--active").attr("data-type") == 3) {
          this.elements.comment_list.prepend(commentWrapper);
        } else {
          this.elements.comment_list.append(commentWrapper);
        }
      }
    },
    resetCommentCurrent: function () {
      if (this._currentComment.length)
        this._currentComment.lsComment("notCurrent");
      this._currentComment = $();
    },
    getCommentCurrent: function () {
      return this._currentComment;
    },
    setCommentCurrent: function (comment) {
      if (this.getCommentCurrent().is(comment)) return;
      if (this.getCommentCurrent().length) {
        this.getCommentCurrent().lsComment("notCurrent");
      }
      comment.lsComment("markAsCurrent");
      this._currentComment = comment;
    },
    scrollToComment: function (comment) {
      this.setCommentCurrent(comment);
      $.scrollTo(comment, 1000, { offset: -$(".header__main").height() - 25 });
    },
    getForm: function () {
      return this.elements.form;
    },
    getFormTop: function () {
      return this.elements.form_top;
    },
    getComments: function () {
      return this.elements.comment;
    },
    addComments: function (comments) {
      this.elements.comment = this.elements.comment.add(comments);
    },
    getCommentById: function (commentId) {
      if (!commentId) return;
      for (var i = 0, len = this.getComments().length; i < len; i++) {
        if ($(this.getComments()[i]).lsComment("getId") == commentId) {
          return $(this.getComments()[i]);
        }
      }
      return $();
    },
    removeCommentById: function (commentId) {
      var _this = this;
      this.elements.comment = this.getComments().filter(function () {
        var comment = $(this);
        if (comment.lsComment("getId") == commentId) {
          if (comment.lsComment("isCurrent")) _this.resetCommentCurrent();
          comment.lsComment("destroy");
          return false;
        }
        return true;
      });
    },
    getCommentsNew: function () {
      return this.getComments().filter(function () {
        return $(this).lsComment("isNew");
      });
    },
    initComments: function (comments) {
      return comments.lsComment({
        comments: this.element,
        folding: this.options.folding,
      });
    },
    getLastCommentId: function () {
      return this._commentLastId;
    },
    setLastCommentId: function (id) {
      this._commentLastId = id;
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsUserFields", $.livestreet.lsComponent, {
    options: {
      selectors: {
        template: "#user-field-template",
        list: ".js-user-field-list",
        field: ".js-user-field-item",
        field_remove: ".js-user-field-item-remove",
        empty: ".js-user-fields-empty",
        submit: ".js-user-fields-submit",
      },
      max: 3,
      i18n: {
        error_max_userfields:
          "@user.settings.profile.notices.error_max_userfields",
        remove_confirm: "@common.remove_confirm",
      },
    },
    _create: function () {
      this._super();
      this.elements = {
        template: $(this.option("selectors.template")),
        empty: this.element.find(this.option("selectors.empty")),
        list: this.element.find(this.option("selectors.list")),
        submit: this.element.find(this.option("selectors.submit")),
      };
      this.elements.submit.on(
        "click" + this.eventNamespace,
        this.add.bind(this)
      );
      this.element.on(
        "click" + this.eventNamespace,
        this.option("selectors.field_remove"),
        this.remove.bind(this)
      );
      this.element.on(
        "change" + this.eventNamespace,
        "select",
        this.change.bind(this)
      );
    },
    add: function (event) {
      var typeId,
        template = this.getTemplate();
      template.find("option").each(
        function (key, value) {
          var id = $(value).val();
          if (this.getCountByTypeId(id) < this.option("max")) {
            typeId = id;
            return false;
          }
        }.bind(this)
      );
      if (typeId) {
        template.find("select").val(typeId);
        this.elements.list.append(template);
      } else {
        template = null;
        ls.msg.error(
          null,
          this._i18n("error_max_userfields", { count: this.option("max") })
        );
      }
      this.elements.empty.hide();
    },
    remove: function (event) {
      if (!confirm(this._i18n("remove_confirm"))) return;
      $(event.target).off().closest(this.option("selectors.field")).remove();
      if (this.getCount() === 0) {
        this.elements.empty.show();
      }
    },
    change: function (event) {
      if (this.getCountByTypeId($(event.target).val()) > this.option("max")) {
        ls.msg.error(
          null,
          this._i18n("error_max_userfields", { count: this.option("max") })
        );
      }
    },
    getTemplate: function () {
      return this.elements.template.clone().show();
    },
    getCount: function () {
      return this.elements.list.find(this.option("selectors.field")).length;
    },
    getCountByTypeId: function (id) {
      return this.elements.list.find("select").filter(function () {
        return $(this).val() == id;
      }).length;
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsUserFollow", $.livestreet.lsComponent, {
    options: {
      urls: { follow: null, unfollow: null },
      selectors: { item: "> a" },
      classes: { active: "active" },
      params: {},
      i18n: {
        follow: "@user.actions.follow",
        unfollow: "@user.actions.unfollow",
      },
    },
    _create: function () {
      this._super();
      this._on({ click: "onClick" });
      if (!this.elements.item.length) {
        this.elements.item = this.element;
      }
    },
    onClick: function (event) {
      this[this._hasClass("active") ? "unfollow" : "follow"]();
      event.preventDefault();
    },
    follow: function () {
      this._load("follow", { users: [this.element.data("id")] }, "onFollow");
    },
    onFollow: function (response) {
      this.elements.item.text(this._i18n("unfollow"));
      this._addClass("active");
    },
    unfollow: function () {
      this._load(
        "unfollow",
        { user_id: this.element.data("id") },
        "onUnfollow"
      );
    },
    onUnfollow: function (response) {
      this.elements.item.text(this._i18n("follow"));
      this._removeClass("active");
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsUserFriend", $.livestreet.lsComponent, {
    options: {
      urls: { add: null, remove: null, accept: null, modal: null },
      selectors: { form: ".js-user-friend-form", text: ".js-user-friend-text" },
      params: {},
    },
    _create: function () {
      this._super();
      this.target = this.element.data("target");
      this._on({ click: "onClick" });
    },
    onClick: function (event) {
      var status = this.getStatus();
      if (status == "notfriends") {
        this.showForm();
      } else if (status == "pending") {
        this.accept();
      } else if (status == "added") {
        this.remove();
      } else if (status == "linked") {
        this.addLinked();
      }
      event.stopPropagation();
      event.preventDefault();
    },
    getStatus: function () {
      return this.element.attr("data-status");
    },
    setStatus: function (status) {
      var textElement = this.element.find(this.option("selectors.text")),
        textClass = this.option("selectors.text").slice(1);
      if (~["sent", "rejected"].indexOf(status)) {
        textElement.replaceWith(
          '<span class="' +
            textClass +
            '">' +
            ls.lang.get("user.friends.status." + status) +
            "</span>"
        );
      } else {
        textElement.replaceWith(
          '<a href="#" class="' +
            textClass +
            '">' +
            ls.lang.get("user.friends.status." + status) +
            "</a>"
        );
      }
      this.element.attr("data-status", status);
    },
    showForm: function () {
      var _this = this;
      ls.modal.load(
        this.option("urls.modal"),
        { target: this.target },
        {
          aftershow: function (e, modal) {
            var form = modal.element.find(_this.option("selectors.form")),
              textarea = form.find(_this.option("selectors.text"));
            textarea.focus();
            form.on(
              "submit",
              function (event) {
                var text = textarea.val();
                ls.utils.formLock(form);
                _this._load(
                  "add",
                  { idUser: _this.target, userText: text },
                  function (response) {
                    modal.hide();
                    _this.setStatus("sent");
                  },
                  {
                    onResponse: function () {
                      ls.utils.formUnlock(form);
                    },
                  }
                );
                event.preventDefault();
              }.bind(this)
            );
          },
        }
      );
    },
    addLinked: function () {
      this.accept("add");
    },
    accept: function (url) {
      this._load(url || "accept", { idUser: this.target }, function (response) {
        this.setStatus("added");
      });
    },
    remove: function () {
      this._load("remove", { idUser: this.target }, function (response) {
        this.setStatus("linked");
      });
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsUserFieldChoose", $.livestreet.lsComponent, {
    options: {
      urls: { modal: null, autocomplete: aRouter.ajax + "autocompleter/user/" },
      selectors: {
        users: ".js-user-field-choose-users",
        button: ".js-user-field-choose-button",
      },
    },
    _create: function () {
      this._super();
      this.elements.button.on(
        "click",
        function (e) {
          ls.userModalList.show(
            this.option("urls.modal"),
            true,
            this.onModalListAdd.bind(this)
          );
          e.preventDefault();
        }.bind(this)
      );
      this.elements.users.lsFieldAutocomplete({
        urls: { load: this.option("urls.autocomplete") },
        params: { extended: true },
      });
    },
    getUsers: function () {
      return this.elements.users.val();
    },
    empty: function () {
      this.elements.users.empty().trigger("chosen:updated");
    },
    onModalListAdd: function (users) {
      var currentUsers = this.elements.users.val();
      $.each(
        users,
        function (index, user) {
          if ($.inArray(user.id + "", currentUsers) !== -1) return;
          $("<option />")
            .attr("value", user.id)
            .prop("selected", true)
            .html(user.login)
            .appendTo(this.elements.users);
        }.bind(this)
      );
      this.elements.users.trigger("chosen:updated");
    },
  });
})(jQuery);
var ls = ls || {};
ls.userModalList = function ($) {
  "use strict";
  var init = function (event, modal) {
    modal.element.on("click", ".js-user-list-select-add", function (e) {
      var checkboxes = $(".js-user-list-select").find(
        ".js-user-list-small-checkbox:checked"
      );
      var users = $.map(checkboxes, function (element) {
        return {
          id: $(element).data("user-id"),
          login: $(element).data("user-login"),
        };
      });
      if ($.isFunction(modal.options.add)) {
        modal.options.add(users);
      }
      modal.hide();
    });
  };
  this.show = function (url, isSelectable, onAdd, options, params) {
    ls.modal.load(
      url,
      { selectable: isSelectable },
      { aftershow: init.bind(this), add: onAdd }
    );
  };
  return this;
}.call(ls.user || {}, jQuery);
var ls = ls || {};
ls.user = function ($) {
  "use strict";
  this.init = function () {
    return;
  };
  return this;
}.call(ls.user || {}, jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsUserListAdd", $.livestreet.lsComponent, {
    options: {
      urls: {
        add: null,
        remove: null,
        list: aRouter.ajax + "modal-friend-list",
      },
      selectors: {
        list: ".js-user-list-add-users",
        item: ".js-user-list-small-item",
        item_remove: ".js-user-list-add-user-remove",
        empty: ".js-user-list-small-empty",
        form: ".js-user-list-add-form",
        choose: ".js-user-list-add-choose",
      },
      hide: { effect: "slide", duration: 200, direction: "left" },
      params: {},
      i18n: { success_add: "@common.success.add" },
    },
    _create: function () {
      var _this = this;
      this._super();
      this.elements.list.on(
        "click" + this.eventNamespace,
        this.options.selectors.item_remove,
        function (e) {
          _this.remove($(this).data("user-id"));
          e.preventDefault();
        }
      );
      this.elements.form.on("submit" + this.eventNamespace, function (e) {
        var items = _this.elements.choose.lsUserFieldChoose("getUsers");
        if (items.length) {
          ls.utils.formLock(_this.elements.form);
          _this.add(items);
        }
        e.preventDefault();
      });
      this.elements.choose.lsUserFieldChoose({
        urls: { modal: this.option("urls.list") },
      });
    },
    add: function (users) {
      if (!users) return;
      this._load("add", { users: users }, "_onAdd");
    },
    _onAdd: function (response) {
      var users = this._getUsersAll();
      var itemsHtml = $.map(
        response.users,
        function (item) {
          if (item.bStateError) {
            ls.msg.error(null, item.sMsg);
          } else {
            ls.msg.notice(null, this._i18n("success_add"));
            this._trigger("afteruseradd", null, {
              context: this,
              item: item,
              response: response,
            });
            this._onUserAdd(item);
            return users.filter("[data-user-id=" + item.user_id + "]").length
              ? null
              : item.html;
          }
        }.bind(this)
      ).join("");
      if (itemsHtml) {
        this.elements.empty.hide();
        this.elements.list.show().prepend(itemsHtml);
      }
      ls.utils.formUnlock(this.elements.form);
      this.elements.choose.lsUserFieldChoose("empty");
      this._trigger("afteradd", null, { context: this, response: response });
    },
    _onUserAdd: function (item) {
      return;
    },
    remove: function (userId) {
      if (!this.options.urls.remove) return;
      var _this = this;
      this._load("remove", { user_id: userId }, function (response) {
        this._hide(this._getUserById(userId), this.options.hide, function () {
          $(this).remove();
          if (!_this.elements.list.find(_this.options.selectors.item).length) {
            _this.elements.list.hide();
            _this.elements.empty.show();
          }
        });
        this._trigger("afterremove", null, {
          context: this,
          response: response,
        });
      });
    },
    _getUserById: function (userId) {
      return this.elements.list.find(
        this.options.selectors.item + "[data-user-id=" + userId + "]"
      );
    },
    _getUsersAll: function () {
      return this.elements.list.find(this.options.selectors.item);
    },
  });
})(jQuery);
var ls = ls || {};
ls.subscribe = function ($) {
  this.toggle = function (targetType, targetId, mail, value) {
    var url = aRouter["subscribe"] + "ajax-subscribe-toggle/";
    var params = {
      target_type: targetType,
      target_id: targetId,
      mail: mail,
      value: value,
    };
    ls.hook.marker("toggleBefore");
    ls.ajax.load(url, params, function (response) {
      ls.hook.run("ls_subscribe_toggle_after", [
        targetType,
        targetId,
        mail,
        value,
        response,
      ]);
    });
    return false;
  };
  return this;
}.call(ls.subscribe || {}, jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsContent", $.livestreet.lsComponent, {
    options: { urls: { add: null, edit: null }, params: {} },
    _create: function () {
      this._super();
      this.action = this.element.data("content-action");
      this._on({ submit: "onSubmit" });
    },
    onSubmit: function (event) {
      this.submit();
      event.preventDefault();
    },
    submit: function (params) {
      $.extend(this.option("params"), params || {});
      this._trigger("beforesubmit", null, this);
      this._submit(this.action, this.element, function (response) {
        this._trigger("aftersubmit", null, this);
        if (response.sUrlRedirect) {
          window.location.href = response.sUrlRedirect;
        }
      });
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsReport", $.livestreet.lsComponent, {
    options: {
      params: {},
      urls: { modal: null, add: null },
      selectors: { form: "form" },
    },
    _create: function () {
      this._super();
      this.option(
        "params",
        $.extend(
          {},
          this.option("params"),
          ls.utils.getDataOptions(this.element, "param")
        )
      );
      this._on({ click: this.showModal });
    },
    showModal: function (event) {
      var _this = this,
        form;
      ls.modal.load(this.option("urls.modal"), this.option("params"), {
        aftershow: function (e, modal) {
          form = modal.element.find(_this.option("selectors.form"));
          form.on("submit", function (event) {
            _this._submit("add", form, function (response) {
              modal.hide();
            });
            event.preventDefault();
          });
        },
        afterhide: function () {
          form.off();
          form = null;
        },
        center: false,
      });
      event.preventDefault();
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsTagsFavourite", $.livestreet.lsComponent, {
    options: {
      urls: { save: null },
      extSelectors: {
        editBlock: "#favourite-form-tags",
        form: "#js-favourite-form",
        formSubmitButton: ".js-tags-form-submit",
        formTags: ".js-tags-form-input-list",
      },
      selectors: {
        tags: ".js-tags-personal-tags",
        tag: ".js-tags-personal-tag",
        edit: ".js-tags-personal-edit",
      },
      params: { target_type: null },
      html: {
        tag: function (tag) {
          return (
            '<a href="' +
            tag.url +
            '" rel="tag" class="ls-tags-item ls-tags-item--personal js-tags-personal-tag">' +
            tag.tag +
            "</a>"
          );
        },
      },
    },
    _create: function () {
      this._super();
      this.extElements = this._getElementsFromSelectors(
        this.options.extSelectors
      );
      this._on(this.elements.edit, { click: "_onEditClick" });
      this._on(this.extElements.form, { submit: "_onFormSubmit" });
    },
    _onEditClick: function (event) {
      this.editShow();
      event.preventDefault();
    },
    _onFormSubmit: function (event) {
      if (
        this.extElements.form.data("target_id") !=
        this.option("params.target_id")
      )
        return;
      this._submit("save", this.extElements.form, "_onFormSubmitSuccess", {
        submitButton: this.extElements.formSubmitButton,
      });
      event.preventDefault();
    },
    _onFormSubmitSuccess: function (response) {
      this.editHide();
      this.setPersonalTags(response.tags);
    },
    getPersonalTagsElements: function () {
      return this.elements.tags.find(this.option("selectors.tag"));
    },
    getPersonalTags: function () {
      return this.getPersonalTagsElements().map(
        function (index, tag) {
          return this.getTagInfo($(tag));
        }.bind(this)
      );
    },
    getTagInfo: function (tagElement) {
      return { tag: $.trim(tagElement.text()), url: tagElement.attr("href") };
    },
    setPersonalTags: function (tags) {
      this.removePersonalTags();
      this.elements.tags.html($.map(tags, this.option("html.tag")).join(", "));
    },
    removePersonalTags: function () {
      this.elements.tags.empty();
    },
    setEditable: function (isEditable) {
      if (isEditable) {
        this.elements.edit.show();
      } else {
        this.removePersonalTags();
        this.elements.edit.hide();
      }
    },
    editShow: function () {
      this.extElements.form.data("target_id", this.option("params.target_id"));
      this.extElements.formTags.val(this._tagsToString());
      this.extElements.editBlock.lsModal("show");
    },
    editHide: function () {
      this.extElements.editBlock.lsModal("hide");
    },
    _tagsToString: function () {
      return $.map(this.getPersonalTags(), function (tag) {
        return tag.tag;
      }).join(", ");
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsSearchAjax", $.livestreet.lsComponent, {
    options: {
      urls: { search: null },
      selectors: {
        list: ".js-search-ajax-list",
        more: ".js-search-ajax-more",
        title: null,
      },
      i18n: { title: null },
      filters: [],
      params: {},
    },
    _create: function () {
      this._super();
      var _this = this;
      $.each(this.option("filters"), function (index, value) {
        _this._initFilter(value);
      });
      this.elements.more.lsMore({
        urls: { load: _this.option("urls.search") },
        beforeload: function (event, context) {
          $.extend(context.option("params"), _this.option("params"));
        },
      });
    },
    addFilter: function (filter) {
      this.option("filters").push(filter);
      this._initFilter(filter);
    },
    _initFilter: function (filter) {
      var _this = this,
        element = $(filter.selector);
      switch (filter.type) {
        case "text":
          element.on("keyup", function () {
            ls.timer.run(_this, _this.update, null, null, 300);
          });
          break;
        case "radio":
        case "checkbox":
        case "select":
          element.on("change", function () {
            _this.update();
          });
          break;
        case "list":
        case "sort":
          element.on("click", function (event) {
            var el = $(this),
              els = el.closest("ul").find("li").not(el),
              value = el.data("value"),
              activeClass =
                filter.activeClass || ls.options.classes.states.active;
            els.removeClass(activeClass);
            el.addClass(activeClass);
            if (filter.type == "sort") {
              var order = el.attr("data-order");
              els.attr("data-order", "asc");
              el.attr(
                "data-order",
                el.attr("data-order") == "asc" ? "desc" : "asc"
              );
            }
            _this.update();
            event.preventDefault();
          });
          break;
        default:
          break;
      }
    },
    updateFilter: function (filter) {
      var _this = this,
        element = $(filter.selector),
        activeClass = filter.activeClass || ls.options.classes.states.active;
      switch (filter.type) {
        case "text":
          element.each(function () {
            _this.setParam(filter.name, $(this).val());
            _this.setParam("isPrefix", 0);
          });
          break;
        case "radio":
        case "checkbox":
        case "select":
          element.each(function () {
            var value,
              el = $(this);
            if (filter.type == "radio" && !el.is(":checked")) return;
            if (filter.type == "checkbox") {
              value = el.is(":checked") ? 1 : 0;
            } else {
              value = el.val();
            }
            _this.setParam(filter.name, value);
          });
          break;
        case "list":
        case "sort":
          element.each(function () {
            var el = $(this)
                .closest("ul")
                .find("li." + activeClass),
              value = el.data("value");
            if (filter.type == "sort") {
              _this.setParam("order", el.attr("data-order"));
            }
            _this.setParam(filter.name, value);
          });
          break;
        default:
          break;
      }
    },
    setParam: function (name, value) {
      this.option("params." + name, value);
    },
    getParam: function (name) {
      return this.option("params." + name);
    },
    update: function () {
      for (var i = 0; i < this.option("filters").length; i++) {
        this.updateFilter(this.option("filters")[i]);
      }
      this._trigger("beforeupdate", null, this);
      this._load("search", "onUpdate");
    },
    onUpdate: function (response) {
      this.elements.more[response.hide ? "hide" : "show"]();
      if (response.searchCount) {
        this.elements.list.show().html($.trim(response.html));
      } else {
        this.elements.list.hide();
      }
      if (this.option("i18n.title") && this.elements.title.length) {
        this.elements.title
          .show()
          .text(this._i18n("title", response.searchCount));
      }
      $(".js-favourite-author").lsFavourite({
        urls: { toggle: aRouter["ajax"] + "favourite/author/" },
      });
      $(".js-favourite-performer").lsFavourite({
        urls: { toggle: aRouter["ajax"] + "favourite/performer/" },
      });
      this._trigger("afterupdate", null, { context: this, response: response });
    },
    updateUrl: function () {
      window.history.pushState(
        {},
        "Search",
        window.location.origin +
          window.location.pathname +
          "?" +
          $.param(this.option("params"))
      );
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsSearchHideable", $.livestreet.lsComponent, {
    options: {
      selectors: {
        toggle: ".js-search-hideable-toggle",
        input: "input[type=text]",
      },
      classes: { open: "open" },
    },
    _create: function () {
      this._super();
      this._on(this.elements.toggle, { click: "_onToggleClick" });
      this.document.on(
        "click" + this.eventNamespace,
        function (event) {
          if (
            this.isOpen() &&
            !this.element.is(event.target) &&
            !this.element.has(event.target).length
          )
            this.hide();
        }.bind(this)
      );
    },
    _onToggleClick: function (event) {
      event.preventDefault();
      this.toggle();
    },
    toggle: function () {
      this[this.isOpen() ? "hide" : "show"]();
    },
    show: function () {
      this._addClass("open");
      this.elements.input.focus();
    },
    hide: function () {
      this._removeClass("open");
      this.elements.input.val("");
    },
    isOpen: function () {
      return this._hasClass("open");
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsUserbar", $.livestreet.lsComponent, {
    options: {
      urls: {},
      selectors: { userNav: ".js-userbar-user-nav" },
      classes: {},
    },
    _create: function () {
      this._super();
      this.elements.userNav.lsDropdown({
        selectors: {
          toggle: ".js-userbar-user-nav-toggle",
          menu: ".js-userbar-user-nav-menu",
        },
        position: {
          my: "right top",
          at: "right bottom",
          collision: "flipfit flip",
        },
      });
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsWallEntry", $.livestreet.lsComponent, {
    options: {
      wall: null,
      urls: { remove: null },
      selectors: { remove: ".js-comment-remove", reply: ".js-comment-reply" },
      params: {},
    },
    _create: function () {
      this._super();
      this.id = this.element.data("id");
      this.type = this.element.data("type");
      this.form =
        this.getType() === "post"
          ? this.option("wall").lsWall("getFormById", this.id)
          : null;
      this._on(this.elements.remove, {
        click: function (event) {
          this.remove();
          event.preventDefault();
        },
      });
      this._on(this.elements.reply, {
        click: function (event) {
          this.formToggle();
          event.preventDefault();
        },
      });
    },
    formToggle: function () {
      this.form.lsWallForm("toggle");
    },
    getType: function () {
      return this.type;
    },
    remove: function () {
      this._load(
        "remove",
        { user_id: this.option("wall").lsWall("getUserId"), id: this.id },
        "onRemove"
      );
    },
    onRemove: function (response) {
      this.element.fadeOut(
        "slow",
        function () {
          this.element.remove();
          this.option("wall").lsWall("checkEmpty");
        }.bind(this)
      );
      this.option("wall")
        .lsWall("getCommentWrapperById", this.id)
        .fadeOut("slow", function () {
          $(this).remove();
        });
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsWallForm", {
    options: {
      wall: null,
      urls: { add: null },
      selectors: {
        text: ".js-wall-form-text",
        button_submit: ".js-wall-form-submit",
      },
    },
    _create: function () {
      var _this = this;
      this.elements = {
        text: this.element.find(this.option("selectors.text")),
        submit: this.element.find(this.option("selectors.submit")),
      };
      this.id = this.element.data("id");
      this.reply = this.option("wall")
        .lsWall("getEntryById", this.id)
        .lsWallEntry("getElement", "reply");
      this._on({ submit: this.submit });
      this.elements.text.on(
        "keydown" + this.eventNamespace,
        null,
        "ctrl+return",
        this.submit.bind(this)
      );
      this._on(this.elements.text, { click: this.open });
      this.document.on(
        "mouseup" + this.eventNamespace,
        function (e) {
          if (
            e.which == 1 &&
            this.isOpened() &&
            !this.element.is(e.target) &&
            (!this.reply || (this.reply && !this.reply.is(e.target))) &&
            this.element.has(e.target).length === 0 &&
            !this.elements.text.val()
          ) {
            if (
              this.option("wall").lsWall("getCommentsByPostId", this.id)
                .length ||
              this.id === 0
            ) {
              this.close();
            } else {
              this.hide();
            }
          }
        }.bind(this)
      );
    },
    submit: function (event) {
      var text = this.elements.text.val();
      ls.utils.formLock(this.element);
      this.option("wall").lsWall("add", this.id, text);
      event.preventDefault();
    },
    open: function () {
      this.element.addClass(ls.options.classes.states.open);
    },
    close: function () {
      this.element.removeClass(ls.options.classes.states.open);
      this.elements.text.val("");
    },
    show: function () {
      this.element.show();
      this.open();
      this.elements.text.focus();
    },
    hide: function () {
      this.element.hide();
    },
    isOpened: function () {
      return this.element.hasClass(ls.options.classes.states.open);
    },
    expandToggle: function () {
      this[this.isOpened() ? "close" : "open"]();
    },
    toggle: function () {
      this[this.element.is(":visible") ? "hide" : "show"]();
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsWall", $.livestreet.lsComponent, {
    options: {
      urls: { add: null, remove: null, load: null, load_comments: null },
      selectors: {
        entry: ".js-wall-entry",
        comment: ".js-wall-comment",
        post: ".js-wall-post",
        form: ".js-wall-form",
        more: ".js-wall-more",
        more_comments: ".js-wall-more-comments",
        comment_wrapper: ".js-wall-comment-wrapper",
        container: ".js-wall-entry-container",
        empty: ".js-wall-alert-empty",
      },
      params: {},
    },
    _create: function () {
      this._super();
      var _this = this;
      this.userId = this.getUserId();
      this.elements.more.lsMore({
        urls: { load: this.option("urls.load") },
        proxy: ["last_id"],
        params: { user_id: this.getUserId() },
      });
      this.elements.more_comments.livequery(function () {
        $(this).lsMore({
          urls: { load: _this.option("urls.load_comments") },
          append: false,
          proxy: ["last_id"],
          params: { user_id: _this.getUserId() },
        });
      });
      this.elements.entry.livequery(function () {
        $(this).lsWallEntry({
          wall: _this.element,
          urls: { remove: _this.option("urls.remove") },
        });
      });
      this.elements.form.livequery(function () {
        $(this).lsWallForm({ wall: _this.element });
      });
    },
    add: function (pid, text) {
      var form = this.getFormById(pid);
      this._load(
        "add",
        { user_id: this.getUserId(), pid: pid, text: text },
        function (response) {
          if (pid === 0) this.elements.empty.hide();
          this.load(pid);
          form.lsWallForm("close");
        },
        {
          onResponse: function () {
            ls.utils.formUnlock(form);
          },
        }
      );
    },
    load: function (pid) {
      var container = this.element.find(
          this.options.selectors.container + "[data-id=" + pid + "]"
        ),
        firstId =
          container
            .find(
              ">" +
                this.option("selectors.entry") +
                ":" +
                (pid === 0 ? "first" : "last")
            )
            .data("id") || -1,
        params = {
          user_id: this.getUserId(),
          first_id: firstId,
          target_id: pid,
        };
      this._load(
        pid === 0 ? "load" : "load_comments",
        params,
        function (response) {
          if (response.count_loaded) {
            container[pid === 0 ? "prepend" : "append"](response.html);
          }
        }
      );
    },
    getPosts: function () {
      return this.element.find(this.option("selectors.post"));
    },
    getCommentsByPostId: function (pid) {
      return this.getCommentWrapperById(pid).find(
        this.option("selectors.comment")
      );
    },
    getEntryById: function (id) {
      return this.element
        .find(this.option("selectors.entry") + "[data-id=" + id + "]")
        .eq(0);
    },
    getCommentWrapperById: function (id) {
      return this.element
        .find(this.option("selectors.comment_wrapper") + "[data-id=" + id + "]")
        .eq(0);
    },
    getFormById: function (id) {
      return this.element
        .find(this.option("selectors.form") + "[data-id=" + id + "]")
        .eq(0);
    },
    getUserId: function () {
      return this.userId
        ? this.userId
        : (this.userId = this.element.data("user-id"));
    },
    getOpenedForms: function () {
      return this.element.find(
        this.option("selectors.form") + "." + ls.options.classes.states.open
      );
    },
    checkEmpty: function () {
      this.elements.empty[this.getPosts().length ? "hide" : "show"]();
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsBlogAdd", $.livestreet.lsComponent, {
    options: {
      selectors: {
        type: ".js-blog-add-type",
        type_note: ".js-blog-add-field-type .js-field-note",
      },
      i18n: {
        type_open: "@blog.add.fields.type.note_open",
        type_closed: "@blog.add.fields.type.note_closed",
      },
    },
    _create: function () {
      var _this = this;
      this._super();
      this.elements.type.on("change" + this.eventNamespace, function () {
        _this.setTypeNote($(this).val());
      });
    },
    setTypeNote: function (type) {
      this.elements.type_note.text(this._i18n("type_" + type));
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsBlogInvites", $.livestreet.lsUserListAdd, {
    options: {
      urls: {
        add: aRouter["blog"] + "ajaxaddbloginvite/",
        remove: aRouter["blog"] + "ajaxremovebloginvite/",
        reinvite: aRouter["blog"] + "ajaxrebloginvite/",
      },
      selectors: { item_reinvite: ".js-blog-invite-user-repeat" },
    },
    _create: function () {
      var _this = this;
      this._super();
      this.elements.list.on(
        "click" + this.eventNamespace,
        this.options.selectors.item_reinvite,
        function (e) {
          _this.reinvite($(this).data("user-id"));
          e.preventDefault();
        }
      );
    },
    reinvite: function (userId) {
      this._load("reinvite", { user_id: userId }, function (response) {
        this._trigger("afterreinvite", null, {
          context: this,
          response: response,
        });
      });
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsBlogJoin", $.livestreet.lsComponent, {
    options: {
      urls: { toggle: null },
      selectors: { count: ".js-blog-users-count", text: null },
      classes: { active: "ls-button--primary", loading: null },
      params: {},
      i18n: { join: "@blog.join.join", leave: "@blog.join.leave" },
    },
    _create: function () {
      this._super();
      if (!this.elements.text.length) this.elements.text = this.element;
      this.option("params.blog_id", this.element.data("blog-id"));
      this._on({ click: "onClick" });
    },
    onClick: function (event) {
      this.toggle();
      event.preventDefault();
      event.stopPropagation();
    },
    toggle: function (event) {
      this.element.addClass(this.option("classes.loading"));
      this._load(
        "toggle",
        function (response) {
          this.onToggle(response);
          this.element.removeClass(this.option("classes.loading"));
        }.bind(this)
      );
    },
    onToggle: function (response) {
      this.element.toggleClass("ls-favourite--added");
      $(
        this.option("selectors.count") +
          "[data-blog-id=" +
          this.option("params.blog_id") +
          "]"
      ).text(response.iCountUser);
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsTopicAdd", $.livestreet.lsComponent, {
    options: {
      max_blog_count: 3,
      urls: {
        add: aRouter["content"] + "ajax/add/",
        edit: aRouter["content"] + "ajax/edit/",
        add_collection: aRouter["content"] + "ajax/add_collection/",
        edit_collection: aRouter["content"] + "ajax/edit_collection/",
        edit_audio: aRouter["content"] + "ajax/edit_audio/",
        preview: aRouter["content"] + "ajax/preview/",
      },
      selectors: {
        preview: "#topic-text-preview",
        preview_content: "#topic-text-preview .js-topic-preview-content",
        image_preview: ".js-topic-add-field-image-preview",
        blogs: ".js-topic-add-blogs",
        buttons: {
          preview: ".js-topic-preview-text-button",
          preview_hide: ".js-topic-preview-text-hide-button",
          draft: ".js-topic-draft-button",
          submit: ".js-topic-submit-button",
        },
      },
    },
    _create: function () {
      this._super();
      var _this = this;
      this.elements = {
        preview: $(this.option("selectors.preview")),
        preview_content: $(this.option("selectors.preview_content")),
        image_preview: this.element.find(
          this.option("selectors.image_preview")
        ),
        blogs: this.element.find(this.option("selectors.blogs")),
        buttons: {
          preview: this.element.find(this.option("selectors.buttons.preview")),
          preview_hide: $(this.option("selectors.buttons.preview_hide")),
          draft: this.element.find(this.option("selectors.buttons.draft")),
          submit: this.element.find(this.option("selectors.buttons.submit")),
        },
      };
      this.element.lsContent({
        urls: {
          add: this.option("urls.add"),
          edit: this.option("urls.edit"),
          add_collection: this.option("urls.add_collection"),
          edit_collection: this.option("urls.edit_collection"),
          edit_audio: this.option("urls.edit_audio"),
        },
        beforesubmit: this._prepareParams.bind(this),
      });
      if (
        /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
          navigator.userAgent
        )
      ) {
        this.elements.blogs
          .removeClass("ls-hidden")
          .addClass("form-control")
          .removeAttr("multiple")
          .prepend(
            '<option value="" disabled selected>Ð’Ñ‹Ð±ÐµÑ€Ð¸Ñ‚Ðµ Ð¶Ð°Ð½Ñ€</option>'
          );
      } else {
        this.elements.blogs.lsFieldAutocomplete({
          max_selected_options: this.option("max_blog_count"),
          width: "100%",
        });
      }
      var chosenOrder = this.elements.blogs.data("chosenOrder");
      if (chosenOrder && chosenOrder.length) {
        this.elements.blogs.setSelectionOrder(chosenOrder);
      }
      this.elements.image_preview.lsFieldImageAjax({
        urls: { add: this.option("urls.add"), edit: this.option("urls.edit") },
      });
      this.elements.buttons.draft.on(
        "click" + this.eventNamespace,
        this.saveAsDraft.bind(this)
      );
      this.elements.buttons.submit.on(
        "click" + this.eventNamespace,
        this.saveAndPublish.bind(this)
      );
      this.elements.buttons.preview.on(
        "click" + this.eventNamespace,
        this.previewShow.bind(this)
      );
      this.elements.buttons.preview_hide.on(
        "click" + this.eventNamespace,
        this.previewHide.bind(this)
      );
    },
    saveAsDraft: async function () {
      if ($(".js-topic-fields").length > 0) {
        this.element.lsContent("submit", { is_draft: 1 });
        return;
      }
      if (typeof checkAudio === "function") {
        const audioFormState = await checkAudio();
        if (!audioFormState) return;
      }
      this.element.lsContent("submit", { is_draft: 1 });
    },
    saveAndPublish: async function () {
      if ($(".js-topic-fields").length > 0) {
        this.element.lsContent("submit", {});
        return;
      }
      if (typeof checkAudio === "function") {
        const audioFormState = await checkAudio();
        if (!audioFormState) return;
      }
      this.element.lsContent("submit", {});
    },
    previewShow: function () {
      this._submit(
        "preview",
        this.element,
        function (response) {
          if (response.bStateError) {
            ls.msg.error(null, response.sMsg);
          } else {
            this.elements.preview.show();
            this.elements.preview_content.html(response.sText);
          }
        }.bind(this),
        { submitButton: this.elements.buttons.preview }
      );
    },
    previewHide: function () {
      this.elements.preview.hide();
      this.elements.preview_content.empty();
    },
    _prepareParams: function () {
      if (this.elements.blogs.length) {
        var orders = this.elements.blogs.getSelectionOrder();
        if (!orders || !orders.length) {
          orders = this.elements.blogs.val();
        }
        if (orders && orders.length) {
          this.element.lsContent(
            "option",
            "params.topic[blogs_id_raw]",
            orders
          );
        }
      }
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsTopicFavourite", $.livestreet.lsFavourite, {
    options: {
      urls: { toggle: aRouter["ajax"] + "favourite/topic/" },
      tags: null,
    },
    onToggleSuccess: function (response) {
      this._super(response);
      this.option("tags").lsTagsFavourite("setEditable", response.bState);
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsTopic", $.livestreet.lsComponent, {
    options: {
      urls: { voteInfo: aRouter.ajax + "vote/get/info/topic" },
      selectors: {
        tags: ".js-tags-favourite",
        subscribe_chapters: ".js-chapters-subscribe",
      },
      i18n: {
        subscribe: "@comments.subscribe",
        unsubscribe: "@comments.unsubscribe",
      },
    },
    _create: function () {
      this._super();
      this.elements.tags.lsTagsFavourite({
        urls: { save: aRouter["ajax"] + "favourite/save-tags/" },
        params: { target_type: "topic" },
      });
      this._targetId = this.element.data("target-id");
      this.elements.subscribe_chapters.on(
        "click" + this.eventNamespace,
        this.subscribeChaptersToggle.bind(this)
      );
    },
    subscribeChaptersToggle: function () {
      var isActive = this.elements.subscribe_chapters.hasClass("active");
      console.log(this._targetType);
      ls.subscribe.toggle("topic_new_chapter", this._targetId, "", !isActive);
      if (isActive) {
        this.elements.subscribe_chapters.removeClass("active");
        $("span", this.elements.subscribe_chapters).text(
          this._i18n("subscribe")
        );
      } else {
        this.elements.subscribe_chapters.addClass("active");
        $("span", this.elements.subscribe_chapters).text(
          this._i18n("unsubscribe")
        );
      }
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsPollManage", $.livestreet.lsComponent, {
    options: {
      urls: {
        modal_add: aRouter.ajax + "poll/modal-create",
        modal_edit: aRouter.ajax + "poll/modal-update",
        add: aRouter.ajax + "poll/create/",
        update: aRouter.ajax + "poll/update/",
        remove: aRouter.ajax + "poll/remove/",
      },
      selectors: {
        list: ".js-poll-manage-list",
        item: ".js-poll-manage-item",
        item_remove: ".js-poll-manage-item-remove",
        item_edit: ".js-poll-manage-item-edit",
        add: ".js-poll-manage-add",
        form: {
          form: "#js-poll-form",
          add: ".js-poll-form-answer-add",
          list: ".js-poll-form-answer-list",
          item: ".js-poll-form-answer-item",
          item_id: ".js-poll-form-answer-item-id",
          item_text: ".js-poll-form-answer-item-text",
          item_remove: ".js-poll-form-answer-item-remove",
          submit: ".js-poll-form-submit",
        },
      },
      max: 20,
      i18n: { error_answers_max: "@poll.notices.error_answers_max" },
    },
    _create: function () {
      this._super();
      var _this = this;
      this.elements = {
        list: this.element.find(this.options.selectors.list),
        add: this.element.find(this.options.selectors.add),
        remove: this.element.find(this.options.selectors.item_remove),
        edit: this.element.find(this.options.selectors.item_edit),
      };
      this.id = this.element.data("target-id");
      this.type = this.element.data("type");
      this._on(this.elements.add, { click: this.formShowAdd });
      this.element.on(
        "click" + this.eventNamespace,
        this.options.selectors.item_edit,
        function () {
          _this.formShowEdit(
            $(this).data("poll-id"),
            $(this).data("poll-target-tmp")
          );
        }
      );
      this.element.on(
        "click" + this.eventNamespace,
        this.options.selectors.item_remove,
        function () {
          _this.remove($(this));
        }
      );
    },
    formShow: function (url, params) {
      var _this = this;
      ls.modal.load(url, params, {
        aftershow: function (e, modal) {
          var form = modal.element.find(_this.option("selectors.form.form")),
            list = form.find(_this.option("selectors.form.list"));
          form.on("submit", function (e) {
            _this[form.data("action")](form, list, modal);
            e.preventDefault();
          });
          form
            .find(_this.option("selectors.form.add"))
            .on("click", _this.answerAdd.bind(_this, list));
          form.on(
            "keydown",
            _this.option("selectors.form.item_text"),
            "ctrl+return",
            _this.answerAdd.bind(_this, list)
          );
          form.on(
            "click",
            _this.option("selectors.form.item_remove"),
            function () {
              _this.answerRemove(list, $(this));
            }
          );
        },
        center: false,
      });
    },
    formShowAdd: function () {
      this.formShow(this.option("urls.modal_add"), {
        target_type: this.type,
        target_id: this.id,
      });
    },
    formShowEdit: function (id, hash) {
      this.formShow(this.option("urls.modal_edit"), {
        id: id,
        target_tmp: hash,
      });
    },
    answerAdd: function (list) {
      var answers = list.find(this.option("selectors.form.item"));
      if (answers.length == this.option("max")) {
        ls.msg.error(
          null,
          this._i18n("error_answers_max", { count: this.option("max") })
        );
        return;
      } else if (answers.length == 2) {
        answers.find(this.option("selectors.form.item_remove")).show();
      }
      var item = $(
        this.option("selectors.form.item") + "[data-is-template=true]"
      )
        .clone()
        .removeAttr("data-is-template")
        .show();
      list.append(item);
      item.find(this.option("selectors.form.item_text")).focus();
    },
    answerRemove: function (list, button) {
      var answers = list.find(this.option("selectors.form.item"));
      if (answers.length == 3) {
        answers.find(this.option("selectors.form.item_remove")).hide();
      }
      button
        .closest(this.option("selectors.form.item"))
        .fadeOut(200, function () {
          $(this).remove();
        });
    },
    answerIndex: function (list) {
      list.find(this.option("selectors.form.item")).each(
        function (index, item) {
          var item = $(item),
            id = item.find(this.option("selectors.form.item_id")),
            text = item.find(this.option("selectors.form.item_text"));
          id.attr("name", "answers[" + index + "][id]");
          text.attr("name", "answers[" + index + "][title]");
        }.bind(this)
      );
    },
    add: function (form, list, modal) {
      this.answerIndex(list);
      this._submit(
        "add",
        form,
        function (response) {
          this.elements.list.append(response.item);
          modal.hide();
        }.bind(this),
        { submitButton: modal.element.find("button[type=submit]") }
      );
    },
    update: function (form, list, modal) {
      this.answerIndex(list);
      this._submit(
        "update",
        form,
        function (response) {
          this.elements.list
            .find(
              this.option("selectors.item") +
                "[data-poll-id=" +
                response.id +
                "]"
            )
            .replaceWith(response.item);
          modal.hide();
        }.bind(this),
        { submitButton: modal.element.find("button[type=submit]") }
      );
    },
    remove: function (button) {
      ls.ajax.load(
        this.option("urls.remove"),
        { id: button.data("poll-id"), tmp: button.data("poll-target-tmp") },
        function (response) {
          button
            .closest(this.option("selectors.item"))
            .fadeOut("slow", function () {
              $(this).remove();
            });
        }.bind(this)
      );
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsPoll", $.livestreet.lsComponent, {
    options: {
      urls: { vote: aRouter.ajax + "poll/vote/" },
      selectors: {
        form: ".js-poll-vote-form",
        vote: ".js-poll-vote",
        abstain: ".js-poll-abstain",
        result: ".js-poll-result",
        resultContainer: ".js-poll-result-container",
        item: ".js-poll-result-item",
        sort: ".js-poll-result-sort",
      },
    },
    _create: function () {
      this._super();
      !this.elements.form.length && this.initResult();
      this._on(this.elements.vote, { click: this.vote.bind(this, false) });
      this._on(this.elements.abstain, { click: this.vote.bind(this, true) });
      this.element.on(
        "click" + this.eventNamespace,
        this.option("selectors.sort"),
        this.sort.bind(this)
      );
    },
    initResult: function () {
      this.elements.sort = this.element.find(this.options.selectors.sort);
      this.elements.items = this.element.find(this.options.selectors.item);
      this.elements.result = this.element.find(this.options.selectors.result);
    },
    vote: function (abstain) {
      this._submit(
        "vote",
        this.elements.form,
        function (response) {
          this.elements.resultContainer.html($.trim(response.sText));
          this.initResult();
          this._off(this.elements.vote, "click");
          this._off(this.elements.abstain, "click");
        }.bind(this),
        {
          submitButton: this.elements.vote,
          params: { abstain: abstain ? 1 : 0 },
        }
      );
    },
    sort: function () {
      var type = this.elements.sort.hasClass(ls.options.classes.states.active)
        ? "position"
        : "count";
      this.elements.items.sort(function (a, b) {
        return $(b).data(type) - $(a).data(type);
      });
      this.elements.sort.toggleClass(ls.options.classes.states.active);
      this.elements.result.html(this.elements.items);
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsActivitySettings", $.livestreet.lsComponent, {
    options: {
      urls: { toggle_type: null },
      selectors: { type_checkbox: ".js-activity-settings-type-checkbox" },
    },
    _create: function () {
      this._super();
      this._on(this.elements.type_checkbox, { change: "toggleEventType" });
    },
    toggleEventType: function (event) {
      this.option("params.type", $(event.target).data("type"));
      this._load("toggle_type", function (response) {});
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsActivity", $.livestreet.lsComponent, {
    options: {
      urls: { more: null },
      selectors: {
        list: ".js-activity-event-list",
        event: ".js-activity-event",
        more: ".js-activity-more",
      },
    },
    _create: function () {
      this._super();
      this.elements.more.lsMore({
        urls: { load: this.option("urls.more") },
        proxy: ["last_id"],
        target: this.elements.list,
        beforeload: function (e, context) {
          context._setParam("date_last", this.getDateLast());
        }.bind(this),
      });
    },
    getDateLast: function () {
      return this.elements.list
        .find(this.option("selectors.event"))
        .last()
        .find("time")
        .data("date");
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsFeedBlogs", $.livestreet.lsComponent, {
    options: {
      urls: { subscribe: null, unsubscribe: null },
      selectors: { checkbox: ".js-feed-blogs-subscribe" },
      params: {},
    },
    _create: function () {
      this._super();
      this._on(this.getElement("checkbox"), { change: this.toggleSubscribe });
    },
    toggleSubscribe: function (event) {
      var checkbox = $(event.target);
      this._load(checkbox.is(":checked") ? "subscribe" : "unsubscribe", {
        type: "blogs",
        id: checkbox.data("id"),
      });
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsTalkUsers", $.livestreet.lsUserListAdd, {
    options: {
      urls: {
        add: aRouter["talk"] + "ajaxaddtalkuser/",
        inactivate: aRouter["talk"] + "ajaxdeletetalkuser/",
      },
      selectors: {
        item_inactivate: ".js-message-users-user-inactivate",
        item_activate: ".js-message-users-user-activate",
      },
    },
    _create: function () {
      var _this = this;
      this._super();
      this.elements.list.on(
        "click" + this.eventNamespace,
        this.options.selectors.item_inactivate,
        function (e) {
          _this.inactivate($(this));
          e.preventDefault();
        }
      );
      this.elements.list.on(
        "click" + this.eventNamespace,
        this.options.selectors.item_activate,
        function (e) {
          _this.add([$(this).data("user-id")]);
          e.preventDefault();
        }
      );
    },
    _onUserAdd: function (user) {
      this.userActivate(user.user_id);
    },
    inactivate: function (button) {
      var userId = button.data("user-id");
      this._load("inactivate", { user_id: userId }, function (response) {
        this.userInactivate(userId);
        this._trigger("afterinactivate", null, {
          context: this,
          response: response,
        });
      });
    },
    userActivate: function (userId) {
      this._getUserById(userId).removeClass("inactive");
    },
    userInactivate: function (userId) {
      this._getUserById(userId).addClass("inactive");
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsTalkList", $.livestreet.lsComponent, {
    options: {
      selectors: {
        form: "#talk-form",
        formAction: "#talk-form-action",
        button: ".js-talk-form-button",
        buttonMarkAsRead: ".js-talk-form-button[data-action=mark_as_read]",
        buttonRemove: ".js-talk-form-button[data-action=remove]",
      },
      i18n: { remove_confirm: "@common.remove_confirm" },
    },
    _create: function () {
      this._super();
      var _this = this;
      $(".js-talk-actionbar-select").lsActionbarItemSelect({
        selectors: { target_item: ".js-talk-list-item" },
      });
      this.elements.buttonMarkAsRead.on("click", function (e) {
        _this.setAction($(this).data("action"));
      });
      this.elements.buttonRemove.lsConfirm({
        message: this._i18n("remove_confirm"),
        onconfirm: function () {
          this.setAction("remove");
        }.bind(this),
      });
    },
    setAction: function (action) {
      if (!this.elements.form.find("input[type=checkbox]:checked").length)
        return;
      this.elements.formAction.val(action);
      this.elements.form.submit();
    },
  });
})(jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsRandomSettings", $.livestreet.lsComponent, {
    options: { found_ids: [] },
    _create: function () {
      this._super();
      this._on(".js-random-form-submit", { click: "_onFormSubmit" });
      var that = this;
      var onChangeSelect = function () {
        that.options.found_ids = [];
        $(".js-random-form-submit").text(
          "ÐŸÑ€Ð¸Ð¼ÐµÐ½Ð¸Ñ‚ÑŒ Ð¸ Ð¾Ð±Ð½Ð¾Ð²Ð¸Ñ‚ÑŒ"
        );
      };
      $(".js-random-setting").change(function () {
        onChangeSelect();
      });
      var munitesToText = function (minutes) {
        var hours = Math.floor(minutes / 60);
        var minutes = minutes % 60;
        var text =
          hours > 0
            ? ls.i18n.pluralize(hours, "time.hours_declension") + " "
            : "";
        text +=
          minutes > 0 || hours == 0
            ? ls.i18n.pluralize(minutes, "time.minutes_declension")
            : "";
        return text;
      };
      var min = 0,
        max = 2400,
        range = [],
        i = min,
        step = 5;
      if (min > 0 && min % 10 != 0) {
        var min_2 = min,
          min_state = false;
        range.push(min);
        do {
          min_2 += 1;
          if (min_2 % 10 == 0) {
            min_state = true;
          }
        } while (!min_state);
        i = min_2;
      }
      do {
        range.push(i);
        i += step;
        if (i >= 60 && i < 180) {
          step = 15;
        } else if (i >= 180 && i < 480) {
          step = 30;
        } else if (i >= 480) {
          step = 60;
        }
      } while (i <= max);
      if (i != max) {
        range.push(max);
      }
      var slider_min = 0,
        slider_max = range.length - 1;
      $("#random-slider-range").slider({
        range: true,
        min: slider_min,
        max: slider_max,
        step: 1,
        values: [slider_min, slider_max],
        classes: {
          "ui-slider": "",
          "ui-slider-handle": "progress__bar--pin",
          "ui-slider-range": "progress__bar--progress",
        },
        slide: function (event, ui) {
          var time_from = range[ui.values[0]];
          var time_to = range[ui.values[1]];
          $(".random__duration_from").text(munitesToText(time_from));
          $(".random__duration_to").text(
            time_to == max ? "ÐœÐ°ÐºÑÐ¸Ð¼ÑƒÐ¼" : munitesToText(time_to)
          );
          $(".random__duration_from").attr("data-val", time_from);
          $(".random__duration_to").attr("data-val", time_to);
          onChangeSelect();
        },
      });
    },
    _onFormSubmit: function (event) {
      var that = this;
      var blogId = $(".js-random-setting-blog").find(":selected").val();
      var rating = $(".js-random-setting-rating").find(":selected").val();
      var duration_from =
        $(".random__duration .random__duration_from").attr("data-val") * 60;
      var duration_to =
        $(".random__duration .random__duration_to").attr("data-val") * 60;
      $(".js-random-form-submit").text("ÐžÐ±Ð½Ð¾Ð²Ð¸Ñ‚ÑŒ");
      ls.ajax.load(
        aRouter["random"] + "get",
        {
          blogId: blogId,
          rating: rating,
          duration_from: duration_from,
          duration_to: duration_to,
          exclude_ids: that.options.found_ids,
        },
        function (result) {
          if (!result["bStateError"] && result["sTextResult"]) {
            var element = ".container__main .content__main__articles--item";
            $(element).replaceWith(result["sTextResult"]);
            pjax.refresh(document.querySelector(element));
            $(".js-favourite-topic", element).lsFavourite({
              urls: { toggle: aRouter["ajax"] + "favourite/topic/" },
            });
            that.options.found_ids.push(
              parseInt($(".content__main__articles--item").attr("data-id"))
            );
          }
        }
      );
      event.preventDefault();
    },
  });
})(jQuery);
(function () {
  var PERMISSION_DEFAULT = "default";
  var PERMISSION_GRANTED = "granted";
  var PERMISSION_DENIED = "denied";
  var PERMISSION_NOTSUPPORTED = "notsupported";
  var PERMISSIONS = [
    PERMISSION_GRANTED,
    PERMISSION_DEFAULT,
    PERMISSION_DENIED,
    PERMISSION_NOTSUPPORTED,
  ];
  var DIRESCTIONS = ["auto", "ltr", "rtl"];
  var IENotificationIndex = -1;
  var IECloseNotificationEvents = ["click", "scroll", "focus"];
  var getIco = function (icon) {
    var lastIndex = icon.lastIndexOf(".");
    return (lastIndex !== -1 ? icon.substr(0, lastIndex) : icon) + ".ico";
  };
  var _Notification =
    window.Notification ||
    (window.webkitNotifications && WebKitNotification) ||
    ("external" in window &&
      "msIsSiteMode" in window.external &&
      window.external.msIsSiteMode() !== undefined &&
      IENotification) ||
    DummyNotification;
  function DummyNotification() {
    var dummyElement = document.createElement("div");
    this.addEventListener = function (eventName, callback) {
      dummyElement.addEventListener(eventName, callback.bind(this));
    };
    this.removeEventListener = function (eventName, callback) {
      dummyElement.removeEventListener(eventName, callback.bind(this));
    };
    this.dispatchEvent = function (eventName) {
      if (typeof eventName !== "string") {
        return;
      }
      try {
        dummyElement.dispatchEvent(new Event(eventName));
      } catch (e) {
        var event = document.createEvent("Event");
        event.initEvent(eventName, false, true);
        dummyElement.dispatchEvent(event);
      }
    };
  }
  Object.defineProperty(DummyNotification, "permission", {
    enumerable: true,
    get: function () {
      return PERMISSION_NOTSUPPORTED;
    },
  });
  Object.defineProperty(DummyNotification, "requestPermission", {
    enumerable: true,
    writable: true,
    value: function (callback) {
      callback(this.permission);
    },
  });
  function IENotification(title, options) {
    DummyNotification.call(this);
    var notificationIndex = IENotificationIndex;
    Object.defineProperties(this, {
      close: {
        value: function (event) {
          if (notificationIndex === IENotificationIndex) {
            window.external.msSiteModeClearIconOverlay();
            IECloseNotificationEvents.forEach(
              function (event) {
                window.removeEventListener(event, this.close);
              }.bind(this)
            );
            this.dispatchEvent("click");
            this.dispatchEvent("close");
            notificationIndex = null;
          }
        }.bind(this),
      },
    });
    this.close();
    if (this.icon) {
      window.external.msSiteModeSetIconOverlay(
        getIco(this.icon),
        this.description || this.title
      );
    }
    window.external.msSiteModeActivate();
    this.dispatchEvent("show");
    IECloseNotificationEvents.forEach(
      function (event) {
        window.addEventListener(event, this.close);
      }.bind(this)
    );
    notificationIndex = ++IENotificationIndex;
  }
  Object.defineProperty(IENotification, "permission", {
    enumerable: true,
    get: function () {
      var isTabPinned = window.external.msIsSiteMode();
      return isTabPinned ? PERMISSION_GRANTED : PERMISSION_DENIED;
    },
  });
  Object.defineProperty(IENotification, "requestPermission", {
    enumerable: true,
    writable: true,
    value: function (callback) {
      return new Promise(
        function (resolve, reject) {
          if (this.permission === PERMISSION_DENIED) {
            alert(this.PERMISSION_REQUEST_MESSAGE);
          }
          resolve(this.permission);
        }.bind(this)
      );
    },
  });
  Object.defineProperty(IENotification, "PERMISSION_REQUEST_MESSAGE", {
    writable: true,
    value:
      "IE supports notifications in pinned mode only. Pin this page on your taskbar to receive notifications.",
  });
  function WebKitNotification() {}
  Object.defineProperty(WebKitNotification, "permission", {
    enumerable: true,
    get: function () {
      return PERMISSIONS[window.webkitNotifications.checkPermission()];
    },
  });
  Object.defineProperty(WebKitNotification, "requestPermission", {
    enumerable: true,
    writable: true,
    value: function (callback) {
      return new Promise(function (resolve, reject) {
        window.webkitNotifications.requestPermission(function (permission) {
          resolve(permission);
        });
      });
    },
  });
  if (!_Notification.permission) {
    Object.defineProperty(_Notification, "permission", {
      enumerable: true,
      get: function () {
        return _Notification.permissionLevel && _Notification.permissionLevel();
      },
    });
  }
  function Notification(title, options) {
    var dir;
    var notification;
    if (!arguments.length) {
      throw TypeError(
        'Failed to construct "Notification": 1 argument required, but only 0 present.'
      );
    }
    if (title === "") {
      title = "\b";
    }
    if (arguments.length > 1 && "object" !== typeof options) {
      throw TypeError(
        'Failed to construct "Notification": parameter 2 ("options") is not an object.'
      );
    }
    dir = Object(options).dir;
    if (dir !== undefined && DIRESCTIONS.indexOf(dir) === -1) {
      throw TypeError(
        'Failed to construct "Notification": The provided value "' +
          dir +
          '" is not a valid enum value of type NotificationDirection.'
      );
    }
    options = Object(options);
    notification = new _Notification(title, options);
    if (!notification.body) {
      Object.defineProperty(notification, "body", {
        value: String(options.body || ""),
      });
    }
    if (!notification.data) {
      Object.defineProperty(notification, "data", {
        value: options.data || null,
      });
    }
    if (!notification.dir) {
      Object.defineProperty(notification, "dir", {
        value: dir || DIRESCTIONS[0],
      });
    }
    if (!notification.icon) {
      Object.defineProperty(notification, "icon", {
        value: String(options.icon || ""),
      });
    }
    if (!notification.lang) {
      Object.defineProperty(notification, "lang", {
        value: String(options.lang || ""),
      });
    }
    if (!notification.requireInteraction) {
      Object.defineProperty(notification, "requireInteraction", {
        value: Boolean(options.requireInteraction),
      });
    }
    if (!notification.silent) {
      Object.defineProperty(notification, "silent", {
        value: Boolean(options.silent),
      });
    }
    if (!notification.tag) {
      Object.defineProperty(notification, "tag", {
        value: String(options.tag || ""),
      });
    }
    if (!notification.title) {
      Object.defineProperty(notification, "title", { value: String(title) });
    }
    if (!notification.timestamp) {
      Object.defineProperty(notification, "timestamp", {
        value: new Date().getTime(),
      });
    }
    return notification;
  }
  Object.defineProperty(Notification, "permission", {
    enumerable: true,
    get: function () {
      return _Notification.permission;
    },
  });
  Object.defineProperty(Notification, "requestPermission", {
    enumerable: true,
    value: function () {
      return new Promise(function (resolve, reject) {
        var promise = _Notification.requestPermission(function (permission) {
          resolve(permission);
        });
        if (!(promise instanceof Promise)) {
          return;
        }
        resolve(promise);
      });
    },
  });
  window.Notification = Notification;
})();
var ls = ls || {};
ls.realtime = ls.realtime || {};
ls.realtime.connection = function (faye, options) {
  this._isFayeInitialized = function () {
    return faye !== undefined;
  };
  this._hasClient = function () {
    return this.client !== undefined;
  };
  this._isSubscribed = function (channel) {
    return this.client._channels._channels[channel] !== undefined;
  };
  this.subscribe = function (channel, callback) {
    if (typeof Faye !== "undefined") {
      faye = faye || Faye;
    }
    if (!this._isFayeInitialized()) {
      ls.dev.debug("Faye did not initialized");
      return false;
    }
    if (!this._hasClient()) {
      this.client = new faye.Client(options.server_address, {
        timeout: options.client_timeout,
      });
    }
    if (!this._hasClient()) {
      ls.dev.debug("Faye client did not initialized");
      return false;
    }
    if (this._isSubscribed(channel)) {
      delete this.client._channels._channels[channel];
    }
    this.client.subscribe(channel, callback).callback(function () {});
    return true;
  };
  return this;
}.call(ls.realtime.connection || {}, undefined, REALTIME_OPTIONS || {});
var ls = ls || {};
ls.realtime = ls.realtime || {};
ls.realtime.notification = function ($, Notification, lsNotification) {
  this.soundContainerId = "realtime_notification_sound_container";
  var _objectWithoutProperties = function (obj, keys) {
    var target = {};
    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }
    return target;
  };
  this.show = function (title, options) {
    options = options === undefined ? {} : options;
    var type = options.type;
    var sound = options.sound;
    options = _objectWithoutProperties(options, ["type", "sound"]);
    lsNotification.show(title, options.body, type);
    this._showSystemNotification(title, options);
    if (typeof pjax !== "undefined") pjax.refresh();
  };
  this._showSystemNotification = function (title, options) {
    options = options === undefined ? {} : options;
    var force = options.force;
    var events = options.events === undefined ? {} : options.events;
    options = _objectWithoutProperties(options, [
      "requestPermission",
      "systemEvents",
    ]);
    if (title) {
      title = this._prepareText(title);
    }
    if (options.body !== undefined) {
      options.body = this._prepareText(options.body);
    }
    var createNotification = function (title, options, events) {
      var notification = new Notification(title, options);
      notification.onclick = events.onclick;
      notification.onerror = events.onerror;
    };
    if (force && Notification.permission === "default") {
      Notification.requestPermission().then(function (permission) {
        if (permission === "granted") {
          createNotification(title, options, events);
        }
      });
    }
    if (Notification.permission === "granted") {
      createNotification(title, options, events);
    }
  };
  this._prepareText = function (text) {
    return text.replace(/<\/?[^>]+>/gi, "").replace(/\s{2,}/g, " ");
  };
  this._play = function (mp3, ogg) {
    if (!this._hasSoundContainer()) {
      this._initSoundContainer();
    }
    this._$soundContainer().html(
      '<audio autoplay="autoplay">' +
        '<source src="' +
        mp3 +
        '" type="audio/mpeg" />' +
        '<source src="' +
        ogg +
        '" type="audio/ogg" />' +
        '<embed hidden="true" autostart="true" loop="false" src="' +
        mp3 +
        '" />' +
        "</audio>"
    );
  };
  this._initSoundContainer = function () {
    var $soundContainer = $("<div>", { id: this.soundContainerId });
    $("body").append($soundContainer);
  };
  this._hasSoundContainer = function () {
    return this._$soundContainer().length !== 0;
  };
  this._$soundContainer = function () {
    return $("#" + this.soundContainerId);
  };
  return this;
}.call(ls.realtime.notification || {}, jQuery, Notification, ls.notification);
(function ($, options) {
  "use strict";
  $.widget("livestreet.lsTalkCounter", $.livestreet.lsComponent, {
    options: {
      selectors: { counter: ".bubble" },
      current_user_realtime_channel: options.current_user_realtime_channel,
    },
    _create: function () {
      this._super();
      this.subscribeToTalkCountModel();
    },
    subscribeToTalkCountModel: function () {
      var currentUserRealtimeChannel = this.option(
        "current_user_realtime_channel"
      );
      if (!currentUserRealtimeChannel) {
        ls.dev.debug("Subscription disabled for guest");
        return false;
      }
      ls.realtime.connection.subscribe(
        "/" + currentUserRealtimeChannel,
        this.onTalkCount.bind(this)
      );
      return true;
    },
    onTalkCount: function (event) {
      if (event.type !== "talk_count") {
        return;
      }
      if (event.action !== "update") {
        return;
      }
      this.element.attr("data-count", event.entity.count);
      this.elements.counter.text(event.entity.count);
      var counterFeed = $(".js-feed-counter")[0]
        ? parseInt($(".js-feed-counter").attr("data-count"))
        : 0;
      $(".js-events-counter .bubble").text(
        parseInt(event.entity.count) + counterFeed
      );
      if (event.entity.count) {
        $(
          ".js-talk-counter,.js-talk-counter .bubble,.js-events-counter .bubble"
        ).removeClass("hidden");
      } else {
        $(".js-talk-counter .bubble").addClass("hidden");
      }
    },
  });
})(jQuery, TALK_OPTIONS);
ls.hook.add("ls_template_init_end", function () {
  $(".js-talk-counter").lsTalkCounter();
});
var ls = ls || {};
ls.talk_notifications = function ($, options, notification) {
  this.init = function () {
    this.subscribeToTalkCountModel();
  };
  this.subscribeToTalkCountModel = function () {
    var currentUserRealtimeChannel = options.current_user_realtime_channel;
    if (!currentUserRealtimeChannel) {
      ls.dev.debug("Subscription disabled for guest");
      return false;
    }
    ls.realtime.connection.subscribe(
      "/" + currentUserRealtimeChannel,
      this.onNotification.bind(this)
    );
    return true;
  };
  this.onNotification = function (event) {
    if (event.type !== "notification") {
      return;
    }
    if (event.action !== "create") {
      return;
    }
    notification.show(null, {
      body: event.entity.text,
      sound: options.message_sound,
    });
  };
  return this;
}.call(
  ls.talk_notifications || {},
  jQuery,
  TALK_OPTIONS,
  ls.realtime.notification
);
ls.hook.add("ls_template_init_end", function () {
  ls.talk_notifications.init();
});
(function ($, options) {
  "use strict";
  $.widget("livestreet.lsComments", $.livestreet.lsComments, {
    options: {
      current_user_realtime_channel: options.current_user_realtime_channel,
    },
    _create: function () {
      this._super();
      this.subscribeToCommentModel();
    },
    subscribeToCommentModel: function () {
      var currentUserRealtimeChannel = this.option(
        "current_user_realtime_channel"
      );
      if (!currentUserRealtimeChannel) {
        ls.dev.debug("Subscription disabled for guest");
        return false;
      }
      ls.realtime.connection.subscribe(
        "/" + currentUserRealtimeChannel,
        this.onComment.bind(this)
      );
      return true;
    },
    onComment: function (event) {
      if (event.type !== "comment") {
        return;
      }
      var actions = {
        create: this.onCreateComment.bind(this),
        update: this.onUpdateComment.bind(this),
      };
      actions[event.action](event);
    },
    onCreateComment: function (event) {
      if (event.entity.target_type !== this._targetType) {
        return;
      }
      if (event.entity.target_id !== this._targetId.toString()) {
        return;
      }
      var comment = this.buildComment(event.entity.html);
      this.addComments(comment);
      this.insert(comment, event.entity.id, event.entity.pid);
      this.setLastCommentId(event.entity.id);
      if (this.options.folding) this.unfoldAll();
      var commentsCount = this.getComments().length;
      this.elements.title.text(this._i18n("comments", null, commentsCount));
      if (typeof newCommentsFadeInit === "function") newCommentsFadeInit();
      if (!commentsCount) this.elements.empty.hide();
    },
    onUpdateComment: function (event) {
      if (event.entity.target_type !== this._targetType) {
        return;
      }
      if (event.entity.target_id !== this._targetId.toString()) {
        return;
      }
      var currentComment = this.getCommentById(event.entity.id);
      var commentNew = this.buildComment(event.entity.html);
      this.removeCommentById(event.entity.id);
      this.addComments(commentNew);
      currentComment.replaceWith(commentNew);
    },
    buildComment: function (comment) {
      return this.initComments($($.trim(comment)));
    },
  });
})(jQuery, TALK_OPTIONS);
(function ($, options) {
  "use strict";
  $.widget("livestreet.lsBlockLive", $.livestreet.lsComponent, {
    options: {
      selectors: { content: ".ls-block-live-wrapper" },
      comment_live_block_realtime_channel:
        options.comment_live_block_realtime_channel,
    },
    _create: function () {
      this._super();
      this.subscribeToCommentModel();
    },
    subscribeToCommentModel: function () {
      if ($(".js-block-live")[0]) {
        var commentLiveBlockRealtimeChannel = this.option(
          "comment_live_block_realtime_channel"
        );
        ls.realtime.connection.subscribe(
          "/" + commentLiveBlockRealtimeChannel,
          this.onComment.bind(this)
        );
        return true;
      }
      return false;
    },
    onComment: function (event) {
      if (event.type !== "comment") {
        return;
      }
      var actions = {
        create: this.onCreateComment.bind(this),
        update: this.onUpdateComment.bind(this),
      };
      actions[event.action](event);
    },
    onCreateComment: function (event) {
      if (
        event.entity.target_type !== "topic" ||
        event.entity.target_topic_type !== "book"
      ) {
        return;
      }
      if (
        $(".js-comments").attr("data-target-id") == event.entity.target_id &&
        $(".js-comments").attr("data-user-id") != event.entity.user_id
      ) {
        $(".js-comments").lsComments("load", undefined, false);
        var comment = $(".js-comment[data-id=" + event.entity.id + "]");
        $(".js-vote-comment", comment).lsVote({
          urls: { vote: aRouter["ajax"] + "vote/comment/" },
        });
        $(".js-favourite-comment", comment).lsFavourite({
          urls: { toggle: aRouter["ajax"] + "favourite/comment/" },
        });
      }
      var bookComment = $(
        ".container__side--item[data-target-id=" + event.entity.target_id + "]"
      );
      if (bookComment.length) {
        bookComment.remove();
      } else {
        this.elements.content.children().last().remove();
      }
      this.elements.content.prepend(event.entity.html);
      pjax.refresh();
    },
    onUpdateComment: function (event) {},
  });
})(jQuery, TALK_OPTIONS);
ls.hook.add("ls_template_init_end", function () {
  $(".js-block-live").lsBlockLive();
});
(function ($) {
  $.fn.markItUp = function (settings, extraSettings) {
    var method, params, options, ctrlKey, shiftKey, altKey;
    ctrlKey = shiftKey = altKey = false;
    if (typeof settings == "string") {
      method = settings;
      params = extraSettings;
    }
    options = {
      id: "",
      nameSpace: "",
      root: "",
      previewHandler: false,
      previewInWindow: "",
      previewInElement: "",
      previewAutoRefresh: true,
      previewPosition: "after",
      previewTemplatePath: "~/templates/preview.html",
      previewParser: false,
      previewParserPath: "",
      previewParserVar: "data",
      resizeHandle: true,
      beforeInsert: "",
      afterInsert: "",
      onEnter: {},
      onShiftEnter: {},
      onCtrlEnter: {},
      onTab: {},
      markupSet: [{}],
    };
    $.extend(options, settings, extraSettings);
    if (!options.root) {
      $("script").each(function (a, tag) {
        miuScript = $(tag)
          .get(0)
          .src.match(/(.*)jquery\.markitup(\.pack)?\.js$/);
        if (miuScript !== null) {
          options.root = miuScript[1];
        }
      });
    }
    var uaMatch = function (ua) {
      ua = ua.toLowerCase();
      var match =
        /(chrome)[ \/]([\w.]+)/.exec(ua) ||
        /(webkit)[ \/]([\w.]+)/.exec(ua) ||
        /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
        /(msie) ([\w.]+)/.exec(ua) ||
        (ua.indexOf("compatible") < 0 &&
          /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua)) ||
        [];
      return { browser: match[1] || "", version: match[2] || "0" };
    };
    var matched = uaMatch(navigator.userAgent);
    var browser = {};
    if (matched.browser) {
      browser[matched.browser] = true;
      browser.version = matched.version;
    }
    if (browser.chrome) {
      browser.webkit = true;
    } else if (browser.webkit) {
      browser.safari = true;
    }
    return this.each(function () {
      var $$,
        textarea,
        levels,
        scrollPosition,
        caretPosition,
        caretOffset,
        clicked,
        hash,
        header,
        footer,
        previewWindow,
        template,
        iFrame,
        abort;
      $$ = $(this);
      textarea = this;
      levels = [];
      abort = false;
      scrollPosition = caretPosition = 0;
      caretOffset = -1;
      options.previewParserPath = localize(options.previewParserPath);
      options.previewTemplatePath = localize(options.previewTemplatePath);
      if (method) {
        switch (method) {
          case "remove":
            remove();
            break;
          case "insert":
            markup(params);
            break;
          default:
            $.error("Method " + method + " does not exist on jQuery.markItUp");
        }
        return;
      }
      function localize(data, inText) {
        if (inText) {
          return data.replace(/("|')~\//g, "$1" + options.root);
        }
        return data.replace(/^~\//, options.root);
      }
      function init() {
        id = "";
        nameSpace = "";
        if (options.id) {
          id = 'id="' + options.id + '"';
        } else if ($$.attr("id")) {
          id =
            'id="markItUp' +
            $$.attr("id").substr(0, 1).toUpperCase() +
            $$.attr("id").substr(1) +
            '"';
        }
        if (options.nameSpace) {
          nameSpace = 'class="' + options.nameSpace + '"';
        }
        $$.wrap("<div " + nameSpace + "></div>");
        $$.wrap("<div " + id + ' class="markItUp"></div>');
        $$.wrap('<div class="markItUpContainer"></div>');
        $$.addClass("markItUpEditor");
        header = $('<div class="markItUpHeader"></div>').insertBefore($$);
        $(dropMenus(options.markupSet)).appendTo(header);
        footer = $('<div class="markItUpFooter"></div>').insertAfter($$);
        if (options.resizeHandle === true && browser.safari !== true) {
          resizeHandle = $('<div class="markItUpResizeHandle"></div>')
            .insertAfter($$)
            .bind("mousedown.markItUp", function (e) {
              var h = $$.height(),
                y = e.clientY,
                mouseMove,
                mouseUp;
              mouseMove = function (e) {
                $$.css("height", Math.max(20, e.clientY + h - y) + "px");
                return false;
              };
              mouseUp = function (e) {
                $("html")
                  .unbind("mousemove.markItUp", mouseMove)
                  .unbind("mouseup.markItUp", mouseUp);
                return false;
              };
              $("html")
                .bind("mousemove.markItUp", mouseMove)
                .bind("mouseup.markItUp", mouseUp);
            });
          footer.append(resizeHandle);
        }
        $$.bind("keydown.markItUp", keyPressed).bind("keyup", keyPressed);
        $$.bind("insertion.markItUp", function (e, settings) {
          if (settings.target !== false) {
            get();
          }
          if (textarea === $.markItUp.focused) {
            markup(settings);
          }
        });
        $$.bind("focus.markItUp", function () {
          $.markItUp.focused = this;
        });
        if (options.previewInElement) {
          refreshPreview();
        }
      }
      function dropMenus(markupSet) {
        var ul = $("<ul></ul>"),
          i = 0;
        $("li:hover > ul", ul).css("display", "block");
        $.each(markupSet, function () {
          var button = this,
            t = "",
            title,
            li,
            j;
          title = button.key
            ? (button.name || "") + " [Ctrl+" + button.key + "]"
            : button.name || "";
          key = button.key ? 'accesskey="' + button.key + '"' : "";
          if (button.separator) {
            li = $(
              '<li class="markItUpSeparator">' +
                (button.separator || "") +
                "</li>"
            ).appendTo(ul);
          } else {
            i++;
            for (j = levels.length - 1; j >= 0; j--) {
              t += levels[j] + "-";
            }
            li = $(
              '<li class="markItUpButton markItUpButton' +
                t +
                i +
                " " +
                (button.className || "") +
                '"><a href="" ' +
                key +
                ' title="' +
                title +
                '">' +
                (button.name || "") +
                "</a></li>"
            )
              .bind("contextmenu.markItUp", function () {
                return false;
              })
              .bind("click.markItUp", function (e) {
                e.preventDefault();
              })
              .bind("focusin.markItUp", function () {
                $$.focus();
              })
              .bind("mouseup", function () {
                if (button.call) {
                  eval(button.call)();
                }
                setTimeout(function () {
                  markup(button);
                }, 1);
                return false;
              })
              .bind("mouseenter.markItUp", function () {
                $("> ul", this).show();
                $(document).one("click", function () {
                  $("ul ul", header).hide();
                });
              })
              .bind("mouseleave.markItUp", function () {
                $("> ul", this).hide();
              })
              .appendTo(ul);
            if (button.dropMenu) {
              levels.push(i);
              $(li)
                .addClass("markItUpDropMenu")
                .append(dropMenus(button.dropMenu));
            }
          }
        });
        levels.pop();
        return ul;
      }
      function magicMarkups(string) {
        if (string) {
          string = string.toString();
          string = string.replace(/\(\!\(([\s\S]*?)\)\!\)/g, function (x, a) {
            var b = a.split("|!|");
            if (altKey === true) {
              return b[1] !== undefined ? b[1] : b[0];
            } else {
              return b[1] === undefined ? "" : b[0];
            }
          });
          string = string.replace(/\[\!\[([\s\S]*?)\]\!\]/g, function (x, a) {
            var b = a.split(":!:");
            if (abort === true) {
              return false;
            }
            value = prompt(b[0], b[1] ? b[1] : "");
            if (value === null) {
              abort = true;
            }
            return value;
          });
          return string;
        }
        return "";
      }
      function prepare(action) {
        if ($.isFunction(action)) {
          action = action(hash);
        }
        return magicMarkups(action);
      }
      function build(string) {
        var openWith = prepare(clicked.openWith);
        var placeHolder = prepare(clicked.placeHolder);
        var replaceWith = prepare(clicked.replaceWith);
        var closeWith = prepare(clicked.closeWith);
        var openBlockWith = prepare(clicked.openBlockWith);
        var closeBlockWith = prepare(clicked.closeBlockWith);
        var multiline = clicked.multiline;
        if (replaceWith !== "") {
          block = openWith + replaceWith + closeWith;
        } else if (selection === "" && placeHolder !== "") {
          block = openWith + placeHolder + closeWith;
        } else {
          string = string || selection;
          var lines = [string],
            blocks = [];
          if (multiline === true) {
            lines = string.split(/\r?\n/);
          }
          for (var l = 0; l < lines.length; l++) {
            line = lines[l];
            var trailingSpaces;
            if ((trailingSpaces = line.match(/ *$/))) {
              blocks.push(
                openWith + line.replace(/ *$/g, "") + closeWith + trailingSpaces
              );
            } else {
              blocks.push(openWith + line + closeWith);
            }
          }
          block = blocks.join("\n");
        }
        block = openBlockWith + block + closeBlockWith;
        return {
          block: block,
          openBlockWith: openBlockWith,
          openWith: openWith,
          replaceWith: replaceWith,
          placeHolder: placeHolder,
          closeWith: closeWith,
          closeBlockWith: closeBlockWith,
        };
      }
      function markup(button) {
        var len, j, n, i;
        hash = clicked = button;
        get();
        $.extend(hash, {
          line: "",
          root: options.root,
          textarea: textarea,
          selection: selection || "",
          caretPosition: caretPosition,
          ctrlKey: ctrlKey,
          shiftKey: shiftKey,
          altKey: altKey,
        });
        prepare(options.beforeInsert);
        prepare(clicked.beforeInsert);
        if (
          (ctrlKey === true && shiftKey === true) ||
          button.multiline === true
        ) {
          prepare(clicked.beforeMultiInsert);
        }
        $.extend(hash, { line: 1 });
        if (ctrlKey === true && shiftKey === true) {
          lines = selection.split(/\r?\n/);
          for (j = 0, n = lines.length, i = 0; i < n; i++) {
            if ($.trim(lines[i]) !== "") {
              $.extend(hash, { line: ++j, selection: lines[i] });
              lines[i] = build(lines[i]).block;
            } else {
              lines[i] = "";
            }
          }
          string = { block: lines.join("\n") };
          start = caretPosition;
          len = string.block.length + (browser.opera ? n - 1 : 0);
        } else if (ctrlKey === true) {
          string = build(selection);
          start = caretPosition + string.openWith.length;
          len =
            string.block.length -
            string.openWith.length -
            string.closeWith.length;
          len = len - (string.block.match(/ $/) ? 1 : 0);
          len -= fixIeBug(string.block);
        } else if (shiftKey === true) {
          string = build(selection);
          start = caretPosition;
          len = string.block.length;
          len -= fixIeBug(string.block);
        } else {
          string = build(selection);
          start = caretPosition + string.block.length;
          len = 0;
          start -= fixIeBug(string.block);
        }
        if (selection === "" && string.replaceWith === "") {
          caretOffset += fixOperaBug(string.block);
          start =
            caretPosition +
            string.openBlockWith.length +
            string.openWith.length;
          len =
            string.block.length -
            string.openBlockWith.length -
            string.openWith.length -
            string.closeWith.length -
            string.closeBlockWith.length;
          caretOffset = $$.val().substring(
            caretPosition,
            $$.val().length
          ).length;
          caretOffset -= fixOperaBug($$.val().substring(0, caretPosition));
        }
        $.extend(hash, {
          caretPosition: caretPosition,
          scrollPosition: scrollPosition,
        });
        if (string.block !== selection && abort === false) {
          insert(string.block);
          set(start, len);
        } else {
          caretOffset = -1;
        }
        get();
        $.extend(hash, { line: "", selection: selection });
        if (
          (ctrlKey === true && shiftKey === true) ||
          button.multiline === true
        ) {
          prepare(clicked.afterMultiInsert);
        }
        prepare(clicked.afterInsert);
        prepare(options.afterInsert);
        if (previewWindow && options.previewAutoRefresh) {
          refreshPreview();
        }
        shiftKey = altKey = ctrlKey = abort = false;
      }
      function fixOperaBug(string) {
        if (browser.opera) {
          return string.length - string.replace(/\n*/g, "").length;
        }
        return 0;
      }
      function fixIeBug(string) {
        if (browser.msie) {
          return string.length - string.replace(/\r*/g, "").length;
        }
        return 0;
      }
      function insert(block) {
        if (document.selection) {
          var newSelection = document.selection.createRange();
          newSelection.text = block;
        } else {
          textarea.value =
            textarea.value.substring(0, caretPosition) +
            block +
            textarea.value.substring(
              caretPosition + selection.length,
              textarea.value.length
            );
        }
      }
      function set(start, len) {
        if (textarea.createTextRange) {
          if (browser.opera && browser.version >= 9.5 && len == 0) {
            return false;
          }
          range = textarea.createTextRange();
          range.collapse(true);
          range.moveStart("character", start);
          range.moveEnd("character", len);
          range.select();
        } else if (textarea.setSelectionRange) {
          textarea.setSelectionRange(start, start + len);
        }
        textarea.scrollTop = scrollPosition;
        textarea.focus();
      }
      function get() {
        textarea.focus();
        scrollPosition = textarea.scrollTop;
        if (document.selection) {
          selection = document.selection.createRange().text;
          if (browser.msie) {
            var range = document.selection.createRange(),
              rangeCopy = range.duplicate();
            rangeCopy.moveToElementText(textarea);
            caretPosition = -1;
            while (rangeCopy.inRange(range)) {
              rangeCopy.moveStart("character");
              caretPosition++;
            }
          } else {
            caretPosition = textarea.selectionStart;
          }
        } else {
          caretPosition = textarea.selectionStart;
          selection = textarea.value.substring(
            caretPosition,
            textarea.selectionEnd
          );
        }
        return selection;
      }
      function preview() {
        if (typeof options.previewHandler === "function") {
          previewWindow = true;
        } else if (options.previewInElement) {
          previewWindow = $(options.previewInElement);
        } else if (!previewWindow || previewWindow.closed) {
          if (options.previewInWindow) {
            previewWindow = window.open("", "preview", options.previewInWindow);
            $(window).unload(function () {
              previewWindow.close();
            });
          } else {
            iFrame = $('<iframe class="markItUpPreviewFrame"></iframe>');
            if (options.previewPosition == "after") {
              iFrame.insertAfter(footer);
            } else {
              iFrame.insertBefore(header);
            }
            previewWindow =
              iFrame[iFrame.length - 1].contentWindow ||
              frame[iFrame.length - 1];
          }
        } else if (altKey === true) {
          if (iFrame) {
            iFrame.remove();
          } else {
            previewWindow.close();
          }
          previewWindow = iFrame = false;
        }
        if (!options.previewAutoRefresh) {
          refreshPreview();
        }
        if (options.previewInWindow) {
          previewWindow.focus();
        }
      }
      function refreshPreview() {
        renderPreview();
      }
      function renderPreview() {
        var phtml;
        if (
          options.previewHandler &&
          typeof options.previewHandler === "function"
        ) {
          options.previewHandler($$.val());
        } else if (
          options.previewParser &&
          typeof options.previewParser === "function"
        ) {
          var data = options.previewParser($$.val());
          writeInPreview(localize(data, 1));
        } else if (options.previewParserPath !== "") {
          $.ajax({
            type: "POST",
            dataType: "text",
            global: false,
            url: options.previewParserPath,
            data: options.previewParserVar + "=" + encodeURIComponent($$.val()),
            success: function (data) {
              writeInPreview(localize(data, 1));
            },
          });
        } else {
          if (!template) {
            $.ajax({
              url: options.previewTemplatePath,
              dataType: "text",
              global: false,
              success: function (data) {
                writeInPreview(
                  localize(data, 1).replace(/<!-- content -->/g, $$.val())
                );
              },
            });
          }
        }
        return false;
      }
      function writeInPreview(data) {
        if (options.previewInElement) {
          $(options.previewInElement).html(data);
        } else if (previewWindow && previewWindow.document) {
          try {
            sp = previewWindow.document.documentElement.scrollTop;
          } catch (e) {
            sp = 0;
          }
          previewWindow.document.open();
          previewWindow.document.write(data);
          previewWindow.document.close();
          previewWindow.document.documentElement.scrollTop = sp;
        }
      }
      function keyPressed(e) {
        shiftKey = e.shiftKey;
        altKey = e.altKey;
        ctrlKey = !(e.altKey && e.ctrlKey) ? e.ctrlKey || e.metaKey : false;
        if (e.type === "keydown") {
          if (ctrlKey === true) {
            li = $(
              'a[accesskey="' +
                (e.keyCode == 13 ? "\\n" : String.fromCharCode(e.keyCode)) +
                '"]',
              header
            ).parent("li");
            if (li.length !== 0) {
              ctrlKey = false;
              setTimeout(function () {
                li.triggerHandler("mouseup");
              }, 1);
              return false;
            }
          }
          if (e.keyCode === 13 || e.keyCode === 10) {
            if (ctrlKey === true) {
              ctrlKey = false;
              markup(options.onCtrlEnter);
              return options.onCtrlEnter.keepDefault;
            } else if (shiftKey === true) {
              shiftKey = false;
              markup(options.onShiftEnter);
              return options.onShiftEnter.keepDefault;
            } else {
              markup(options.onEnter);
              return options.onEnter.keepDefault;
            }
          }
          if (e.keyCode === 9) {
            if (shiftKey == true || ctrlKey == true || altKey == true) {
              return false;
            }
            if (caretOffset !== -1) {
              get();
              caretOffset = $$.val().length - caretOffset;
              set(caretOffset, 0);
              caretOffset = -1;
              return false;
            } else {
              markup(options.onTab);
              return options.onTab.keepDefault;
            }
          }
        }
      }
      function remove() {
        $$.unbind(".markItUp").removeClass("markItUpEditor");
        $$.parent("div").parent("div.markItUp").parent("div").replaceWith($$);
        $$.data("markItUp", null);
      }
      init();
    });
  };
  $.fn.markItUpRemove = function () {
    return this.each(function () {
      $(this).markItUp("remove");
    });
  };
  $.markItUp = function (settings) {
    var options = { target: false };
    $.extend(options, settings);
    if (options.target) {
      return $(options.target).each(function () {
        $(this).focus();
        $(this).trigger("insertion", [options]);
      });
    } else {
      $("textarea").trigger("insertion", [options]);
    }
  };
})(jQuery);
var ls = ls || {};
ls.feed = ls.feed || {};
ls.feed = function () {
  "use strict";
  this.id = 0;
  this.amount = 0;
  this.alert = 0;
  this.start = 1;
  this.bell = $("#feed-bell");
  this.selectors = {
    container: this.bell.find(".feed-container"),
    bubble: this.bell.find(".feed-bubble"),
    bell_alert: $("#feed-bell-alert"),
    list: $("#feed-bell-list"),
    list_up: $("#feed-list-up"),
    list_down: $("#feed-list-down"),
    list_up_loading: $("#feed-list-up-loading"),
    list_down_loading: $("#feed-list-down-loading"),
    amount: $("#feed-amount"),
    viewed: $("#feed-viewed-all"),
    loading: $("#feed-loading"),
    empty: $("#feed-empty"),
  };
  this.Init = function () {
    this.bell.click(function (e) {
      if (ls.feed.selectors.container.is(":hidden")) {
        ls.feed.selectors.container.fadeIn(300).css("top", "40px");
        if (ls.feed.amount || ls.feed.start) {
          ls.feed.start = 0;
          if (ls.feed.selectors.list.find("li.feed-item").length) {
            ls.feed.FeedListUp();
          } else {
            ls.feed.selectors.empty.hide();
            ls.feed.selectors.loading.show();
            ls.feed.Load("new", null, null);
          }
        }
      } else {
        ls.feed.selectors.container.fadeOut(300).css("top", "40px");
      }
      e.stopPropagation();
    });
    $(document).click(function () {
      ls.feed.selectors.container.fadeOut(300).css("top", "40px");
    });
    ls.feed.selectors.container.click(function (e) {
      e.stopPropagation();
    });
    if (ls.feed.selectors.bell_alert.length) {
      ls.feed.alert = 1;
    }
    this.amount = parseInt(ls.feed.selectors.amount.text());
    if (ls.feed.amount) {
      ls.feed.selectors.bubble.show();
    }
  };
  this.New = function () {
    var url = aRouter.stream + "ajax_feed_new/";
    var params = {};
    ls.ajax.load(
      url,
      params,
      function (result) {
        if (result.bStateError) {
          ls.msg.error(null, result.sMsg);
        } else {
          var amount = parseInt(result.amount);
          if (ls.feed.amount != amount) {
            ls.feed.PlayAudio();
          }
          ls.feed.amount = amount;
          if (ls.feed.amount) {
            ls.feed.selectors.amount.text(ls.feed.amount).show();
            if (ls.feed.selectors.container.is(":visible")) {
              ls.feed.selectors.list_up.show();
            }
            ls.feed.selectors.bubble.show();
          } else {
            ls.feed.selectors.bubble.hide();
          }
        }
      }.bind(this)
    );
  };
  this.Load = function (event, from_id, last_id) {
    var url = aRouter.stream + "ajax_feed_load/";
    var params = { event: event, from_id: from_id, last_id: last_id };
    ls.ajax.load(
      url,
      params,
      function (result) {
        if (result.bStateError) {
          ls.msg.error(null, result.sMsg);
        } else {
          ls.feed.amount = 0;
          ls.feed.selectors.bubble.hide();
          ls.feed.selectors.loading.hide();
          if (result.event == "up") {
            ls.feed.selectors.list_up_loading.hide();
            ls.feed.selectors.list_up.after(result.html);
          } else if (result.event == "down") {
            ls.feed.selectors.list_down_loading.hide();
            ls.feed.selectors.list_down_loading.before(result.html);
          } else {
            ls.feed.selectors.list_up.after(result.html);
          }
          if (result.last_id) {
            ls.feed.selectors.list_down.show();
          }
          if (ls.feed.selectors.list.find("li.feed-item").length) {
            ls.feed.selectors.empty.hide();
            ls.feed.selectors.list.show();
          } else {
            ls.feed.selectors.empty.show();
            ls.feed.selectors.list.hide();
          }
          ls.feed.FeedMark();
        }
      }.bind(this)
    );
  };
  this.FeedListUp = function () {
    ls.feed.selectors.list_up_loading.show();
    ls.feed.selectors.list_up.hide();
    var from_id = ls.feed.selectors.list
      .find("li.feed-item")
      .first()
      .data("feed-id");
    ls.feed.Load("up", from_id, null);
  };
  this.FeedListDown = function () {
    ls.feed.selectors.list_down_loading.show();
    ls.feed.selectors.list_down.hide();
    var last_id = ls.feed.selectors.list
      .find("li.feed-item")
      .last()
      .data("feed-id");
    ls.feed.Load("down", null, last_id);
  };
  $(
    function () {
      this.Init();
    }.bind(this)
  );
  this.FeedView = function (sId, sUrl, iViews) {
    if (!sId) return;
    ls.feed.id = sId;
    var item = $("#feed-id-" + sId);
    if (item.length && item.hasClass("unread")) item.removeClass("unread");
    if (!iViews) {
      var url = aRouter["stream"] + "ajax_feed_view/";
      var params = { sId: sId, sUrl: sUrl };
      ls.ajax.load(
        url,
        params,
        function (result) {
          if (result.bStateError) {
            ls.msg.error(null, result.sMsg);
          } else {
          }
        }.bind(this)
      );
    } else {
    }
  };
  this.FeedViewedAll = function () {
    ls.feed.selectors.viewed.hide();
    ls.feed.selectors.list.find(".unread").removeClass("unread");
    var url = aRouter["stream"] + "ajax_feed_viewed_all/";
    var params = {};
    ls.ajax.load(url, params, function (result) {}.bind(this));
  };
  this.FeedDeleteAll = function () {
    $("#stream_feed_delete_all").hide();
    var url = aRouter["stream"] + "ajax_feed_delete_all/";
    var params = {};
    ls.ajax.load(url, params, function (result) {}.bind(this));
  };
  this.FeedDelete = function (sId) {
    $("#feed-id-" + sId).slideUp(300);
    var url = aRouter["stream"] + "ajax_feed_delete/";
    var params = { id: sId };
    ls.ajax.load(
      url,
      params,
      function (result) {
        if (result.bStateError) {
        } else {
          $("#feed-id-" + result.sId).remove();
          if (ls.feed.selectors.list.find("li.feed-item").length == 0) {
            ls.feed.selectors.list.hide();
            ls.feed.selectors.empty.show();
          }
        }
      }.bind(this)
    );
  };
  this.ToggleAudio = function (iValue) {
    var url = aRouter["stream"] + "ajax_feed_toggle_audio/";
    var params = { value: iValue };
    ls.ajax.load(url, params, function (result) {}.bind(this));
  };
  this.PlayAudio = function () {
    if (ls.feed.alert) $("#feed-bell-alert").trigger("play");
  };
  this.FeedMark = function () {
    ls.feed.FeedViewed();
    ls.feed.selectors.list.find("li.feed-item").click(function (e) {
      if ($(this).hasClass("unread")) {
        $(this).removeClass("unread");
        ls.feed.FeedViewed();
        var iFeedId = parseInt($(this).attr("data-feed-id"));
        ls.feed.FeedView(iFeedId, false, 0);
      }
      e.stopPropagation();
    });
  };
  this.FeedViewed = function () {
    if (ls.feed.selectors.list.find("li.unread").length) {
      ls.feed.selectors.viewed.show();
    } else {
      ls.feed.selectors.viewed.hide();
    }
  };
  return this;
}.call(ls.feed || {}, jQuery);
(function ($) {
  "use strict";
  $.widget("livestreet.lsFeedSettings", $.livestreet.lsComponent, {
    options: {
      urls: { toggle_type: null },
      selectors: { type_checkbox: ".js-plugin-feed-toggle-checkbox" },
    },
    _create: function () {
      this._super();
      this._on(this.elements.type_checkbox, { change: "toggleEventType" });
    },
    toggleEventType: function (event) {
      this.option("params.type", $(event.target).data("type"));
      this._load("toggle_type", function (response) {
        pjax.loadUrl(window.location.href);
      });
    },
  });
})(jQuery);
var ls = ls || {};
ls.plugin = ls.plugin || {};
ls.plugin.autoopenid = function ($) {
  var that = this;
  this.goServiceLogin = function (service) {
    ls.ajax.load(
      "autoopenid/login-oauth",
      { service: service, referal: window.location.href },
      function (res) {
        window.location.href = res.sUrl;
      }.bind(this),
      {
        onError: function () {
          ls.msg.error(
            null,
            "Ð ÐµÐ³Ð¸ÑÑ‚Ñ€Ð°Ñ†Ð¸Ñ Ñ‡ÐµÑ€ÐµÐ· " +
              service +
              " Ð²Ñ€ÐµÐ¼ÐµÐ½Ð½Ð¾ Ð½Ðµ Ð´Ð¾ÑÑ‚ÑƒÐ¿Ð½Ð°."
          );
        },
      }
    );
  };
  this.removeService = function (type, id) {
    ls.ajax.load(
      "autoopenid/service-remove",
      { type: type, id: id },
      function (res) {
        $("#autoopenid-service-connect-item-" + res.id).remove();
      }.bind(this)
    );
  };
  this.showFormData = function () {
    $("#aoid-form-mail").hide();
    $("#aoid-form-data").show();
    $("#aoid-toggle-data").addClass("active");
    $("#aoid-toggle-mail").removeClass("active");
  };
  this.showFormMail = function () {
    $("#aoid-form-mail").show();
    $("#aoid-form-data").hide();
    $("#aoid-toggle-data").removeClass("active");
    $("#aoid-toggle-mail").addClass("active");
  };
  this.toggleFieldMail = function () {
    $("#aoid-field-mail").toggle();
  };
  this.clickEvents = function () {
    $(".js-autoopenid-auth").on("click", function (e) {
      that.goServiceLogin($(this).data("service"));
      return false;
    });
    $(document).on("click", ".js-autoopenid-remove", function (e) {
      that.removeService(
        $(this).data("serviceType"),
        $(this).attr("data-service-id")
      );
      return false;
    });
  };
  this.clickEvents();
  return this;
}.call(ls.plugin.autoopenid || {}, jQuery);
(function (f) {
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else if (typeof define === "function" && define.amd) {
    define([], f);
  } else {
    var g;
    if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      g = this;
    }
    g.Pjax = f();
  }
})(function () {
  var define, module, exports;
  return (function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = "function" == typeof require && require;
            if (!f && c) return c(i, !0);
            if (u) return u(i, !0);
            var a = new Error("Cannot find module '" + i + "'");
            throw ((a.code = "MODULE_NOT_FOUND"), a);
          }
          var p = (n[i] = { exports: {} });
          e[i][0].call(
            p.exports,
            function (r) {
              var n = e[i][1][r];
              return o(n || r);
            },
            p,
            p.exports,
            r,
            e,
            n,
            t
          );
        }
        return n[i].exports;
      }
      for (
        var u = "function" == typeof require && require, i = 0;
        i < t.length;
        i++
      )
        o(t[i]);
      return o;
    }
    return r;
  })()(
    {
      1: [
        function (require, module, exports) {
          var executeScripts = require("./lib/execute-scripts");
          var forEachEls = require("./lib/foreach-els");
          var parseOptions = require("./lib/parse-options");
          var switches = require("./lib/switches");
          var newUid = require("./lib/uniqueid");
          var on = require("./lib/events/on");
          var trigger = require("./lib/events/trigger");
          var clone = require("./lib/util/clone");
          var contains = require("./lib/util/contains");
          var extend = require("./lib/util/extend");
          var noop = require("./lib/util/noop");
          var Pjax = function (options) {
            this.state = { numPendingSwitches: 0, href: null, options: null };
            this.options = parseOptions(options);
            this.log("Pjax options", this.options);
            if (
              this.options.scrollRestoration &&
              "scrollRestoration" in history
            ) {
              history.scrollRestoration = "manual";
            }
            this.maxUid = this.lastUid = newUid();
            this.parseDOM(document);
            on(
              window,
              "popstate",
              function (st) {
                if (st.state) {
                  var opt = clone(this.options);
                  opt.url = st.state.url;
                  opt.title = st.state.title;
                  opt.history = false;
                  opt.scrollPos = st.state.scrollPos;
                  if (st.state.uid < this.lastUid) {
                    opt.backward = true;
                  } else {
                    opt.forward = true;
                  }
                  this.lastUid = st.state.uid;
                  this.loadUrl(st.state.url, opt);
                }
              }.bind(this)
            );
          };
          Pjax.switches = switches;
          Pjax.prototype = {
            log: require("./lib/proto/log"),
            getElements: function (el) {
              return el.querySelectorAll(this.options.elements);
            },
            parseDOM: function (el) {
              var parseElement = require("./lib/proto/parse-element");
              forEachEls(this.getElements(el), parseElement, this);
            },
            refresh: function (el) {
              this.parseDOM(el || document);
            },
            reload: function () {
              window.location.reload();
            },
            attachLink: require("./lib/proto/attach-link"),
            attachForm: require("./lib/proto/attach-form"),
            forEachSelectors: function (cb, context, DOMcontext) {
              return require("./lib/foreach-selectors").bind(this)(
                this.options.selectors,
                cb,
                context,
                DOMcontext
              );
            },
            switchSelectors: function (selectors, fromEl, toEl, options) {
              return require("./lib/switches-selectors").bind(this)(
                this.options.switches,
                this.options.switchesOptions,
                selectors,
                fromEl,
                toEl,
                options
              );
            },
            latestChance: function (href) {
              window.location = href;
            },
            onSwitch: function () {
              trigger(window, "resize scroll");
              this.state.numPendingSwitches--;
              if (this.state.numPendingSwitches === 0) {
                this.afterAllSwitches();
              }
            },
            loadContent: function (html, options) {
              if (typeof html !== "string") {
                trigger(document, "pjax:complete pjax:error", options);
                return;
              }
              var tmpEl = document.implementation.createHTMLDocument("pjax");
              var htmlRegex = /<html[^>]+>/gi;
              var htmlAttribsRegex = /\s?[a-z:]+(?:=['"][^'">]+['"])*/gi;
              var matches = html.match(htmlRegex);
              if (matches && matches.length) {
                matches = matches[0].match(htmlAttribsRegex);
                if (matches.length) {
                  matches.shift();
                  matches.forEach(function (htmlAttrib) {
                    var attr = htmlAttrib.trim().split("=");
                    if (attr.length === 1) {
                      tmpEl.documentElement.setAttribute(attr[0], true);
                    } else {
                      tmpEl.documentElement.setAttribute(
                        attr[0],
                        attr[1].slice(1, -1)
                      );
                    }
                  });
                }
              }
              tmpEl.documentElement.innerHTML = html;
              this.log(
                "load content",
                tmpEl.documentElement.attributes,
                tmpEl.documentElement.innerHTML.length
              );
              if (
                document.activeElement &&
                contains(
                  document,
                  this.options.selectors,
                  document.activeElement
                )
              ) {
                try {
                  document.activeElement.blur();
                } catch (e) {}
              }
              this.switchSelectors(
                this.options.selectors,
                tmpEl,
                document,
                options
              );
            },
            abortRequest: require("./lib/abort-request"),
            doRequest: require("./lib/send-request"),
            handleResponse: require("./lib/proto/handle-response"),
            loadUrl: function (href, options) {
              options =
                typeof options === "object"
                  ? extend({}, this.options, options)
                  : clone(this.options);
              this.log("load href", href, options);
              this.abortRequest(this.request);
              trigger(document, "pjax:send", options);
              this.request = this.doRequest(
                href,
                options,
                this.handleResponse.bind(this)
              );
            },
            afterAllSwitches: function () {
              var autofocusEl = Array.prototype.slice
                .call(document.querySelectorAll("[autofocus]"))
                .pop();
              if (autofocusEl && document.activeElement !== autofocusEl) {
                autofocusEl.focus();
              }
              this.options.selectors.forEach(function (selector) {
                forEachEls(document.querySelectorAll(selector), function (el) {
                  executeScripts(el);
                });
              });
              var state = this.state;
              if (state.options.history) {
                if (!window.history.state) {
                  this.lastUid = this.maxUid = newUid();
                  window.history.replaceState(
                    {
                      url: window.location.href,
                      title: document.title,
                      uid: this.maxUid,
                      scrollPos: [0, 0],
                    },
                    document.title
                  );
                }
                this.lastUid = this.maxUid = newUid();
                window.history.pushState(
                  {
                    url: state.href,
                    title: state.options.title,
                    uid: this.maxUid,
                    scrollPos: [0, 0],
                  },
                  state.options.title,
                  state.href
                );
              }
              this.forEachSelectors(function (el) {
                this.parseDOM(el);
              }, this);
              trigger(document, "pjax:complete pjax:success", state.options);
              if (typeof state.options.analytics === "function") {
                state.options.analytics();
              }
              if (state.options.history) {
                var a = document.createElement("a");
                a.href = this.state.href;
                if (a.hash) {
                  var name = a.hash.slice(1);
                  name = decodeURIComponent(name);
                  var curtop = 0;
                  var target =
                    document.getElementById(name) ||
                    document.getElementsByName(name)[0];
                  if (target) {
                    if (target.offsetParent) {
                      do {
                        curtop += target.offsetTop;
                        target = target.offsetParent;
                      } while (target);
                    }
                  }
                  window.scrollTo(0, curtop);
                } else if (state.options.scrollTo !== false) {
                  if (state.options.scrollTo.length > 1) {
                    window.scrollTo(
                      state.options.scrollTo[0],
                      state.options.scrollTo[1]
                    );
                  } else {
                    window.scrollTo(0, state.options.scrollTo);
                  }
                }
              } else if (
                state.options.scrollRestoration &&
                state.options.scrollPos
              ) {
                window.scrollTo(
                  state.options.scrollPos[0],
                  state.options.scrollPos[1]
                );
              }
              this.state = { numPendingSwitches: 0, href: null, options: null };
            },
          };
          Pjax.isSupported = require("./lib/is-supported");
          if (Pjax.isSupported()) {
            module.exports = Pjax;
          } else {
            var stupidPjax = noop;
            for (var key in Pjax.prototype) {
              if (
                Pjax.prototype.hasOwnProperty(key) &&
                typeof Pjax.prototype[key] === "function"
              ) {
                stupidPjax[key] = noop;
              }
            }
            module.exports = stupidPjax;
          }
        },
        {
          "./lib/abort-request": 2,
          "./lib/events/on": 4,
          "./lib/events/trigger": 5,
          "./lib/execute-scripts": 6,
          "./lib/foreach-els": 7,
          "./lib/foreach-selectors": 8,
          "./lib/is-supported": 9,
          "./lib/parse-options": 10,
          "./lib/proto/attach-form": 11,
          "./lib/proto/attach-link": 12,
          "./lib/proto/handle-response": 13,
          "./lib/proto/log": 14,
          "./lib/proto/parse-element": 15,
          "./lib/send-request": 16,
          "./lib/switches": 18,
          "./lib/switches-selectors": 17,
          "./lib/uniqueid": 19,
          "./lib/util/clone": 20,
          "./lib/util/contains": 21,
          "./lib/util/extend": 22,
          "./lib/util/noop": 23,
        },
      ],
      2: [
        function (require, module, exports) {
          var noop = require("./util/noop");
          module.exports = function (request) {
            if (request && request.readyState < 4) {
              request.onreadystatechange = noop;
              request.abort();
            }
          };
        },
        { "./util/noop": 23 },
      ],
      3: [
        function (require, module, exports) {
          module.exports = function (el) {
            var code = el.text || el.textContent || el.innerHTML || "";
            var src = el.src || "";
            var parent =
              el.parentNode ||
              document.querySelector("head") ||
              document.documentElement;
            var script = document.createElement("script");
            if (code.match("document.write")) {
              if (console && console.log) {
                console.log(
                  "Script contains document.write. Canâ€™t be executed correctly. Code skipped ",
                  el
                );
              }
              return false;
            }
            script.type = "text/javascript";
            script.id = el.id;
            if (src !== "") {
              script.src = src;
              script.async = false;
            }
            if (code !== "") {
              try {
                script.appendChild(document.createTextNode(code));
              } catch (e) {
                script.text = code;
              }
            }
            parent.appendChild(script);
            if (
              (parent instanceof HTMLHeadElement ||
                parent instanceof HTMLBodyElement) &&
              parent.contains(script)
            ) {
              parent.removeChild(script);
            }
            return true;
          };
        },
        {},
      ],
      4: [
        function (require, module, exports) {
          var forEachEls = require("../foreach-els");
          module.exports = function (els, events, listener, useCapture) {
            events = typeof events === "string" ? events.split(" ") : events;
            events.forEach(function (e) {
              forEachEls(els, function (el) {
                el.addEventListener(e, listener, useCapture);
              });
            });
          };
        },
        { "../foreach-els": 7 },
      ],
      5: [
        function (require, module, exports) {
          var forEachEls = require("../foreach-els");
          module.exports = function (els, events, opts) {
            events = typeof events === "string" ? events.split(" ") : events;
            events.forEach(function (e) {
              var event;
              event = document.createEvent("HTMLEvents");
              event.initEvent(e, true, true);
              event.eventName = e;
              if (opts) {
                Object.keys(opts).forEach(function (key) {
                  event[key] = opts[key];
                });
              }
              forEachEls(els, function (el) {
                var domFix = false;
                if (!el.parentNode && el !== document && el !== window) {
                  domFix = true;
                  document.body.appendChild(el);
                }
                el.dispatchEvent(event);
                if (domFix) {
                  el.parentNode.removeChild(el);
                }
              });
            });
          };
        },
        { "../foreach-els": 7 },
      ],
      6: [
        function (require, module, exports) {
          var forEachEls = require("./foreach-els");
          var evalScript = require("./eval-script");
          module.exports = function (el) {
            if (el.tagName.toLowerCase() === "script") {
              evalScript(el);
            }
            forEachEls(el.querySelectorAll("script"), function (script) {
              if (
                !script.type ||
                script.type.toLowerCase() === "text/javascript"
              ) {
                if (script.parentNode) {
                  script.parentNode.removeChild(script);
                }
                evalScript(script);
              }
            });
          };
        },
        { "./eval-script": 3, "./foreach-els": 7 },
      ],
      7: [
        function (require, module, exports) {
          module.exports = function (els, fn, context) {
            if (
              els instanceof HTMLCollection ||
              els instanceof NodeList ||
              els instanceof Array
            ) {
              return Array.prototype.forEach.call(els, fn, context);
            }
            return fn.call(context, els);
          };
        },
        {},
      ],
      8: [
        function (require, module, exports) {
          var forEachEls = require("./foreach-els");
          module.exports = function (selectors, cb, context, DOMcontext) {
            DOMcontext = DOMcontext || document;
            selectors.forEach(function (selector) {
              forEachEls(DOMcontext.querySelectorAll(selector), cb, context);
            });
          };
        },
        { "./foreach-els": 7 },
      ],
      9: [
        function (require, module, exports) {
          module.exports = function () {
            return (
              window.history &&
              window.history.pushState &&
              window.history.replaceState &&
              !navigator.userAgent.match(
                /((iPod|iPhone|iPad).+\bOS\s+[1-4]\D|WebApps\/.+CFNetwork)/
              )
            );
          };
        },
        {},
      ],
      10: [
        function (require, module, exports) {
          var defaultSwitches = require("./switches");
          module.exports = function (options) {
            options = options || {};
            options.elements = options.elements || "a[href], form[action]";
            options.selectors = options.selectors || ["title", ".js-Pjax"];
            options.switches = options.switches || {};
            options.switchesOptions = options.switchesOptions || {};
            options.history =
              typeof options.history === "undefined" ? true : options.history;
            options.analytics =
              typeof options.analytics === "function" ||
              options.analytics === false
                ? options.analytics
                : defaultAnalytics;
            options.scrollTo =
              typeof options.scrollTo === "undefined" ? 0 : options.scrollTo;
            options.scrollRestoration =
              typeof options.scrollRestoration !== "undefined"
                ? options.scrollRestoration
                : true;
            options.cacheBust =
              typeof options.cacheBust === "undefined"
                ? true
                : options.cacheBust;
            options.debug = options.debug || false;
            options.timeout = options.timeout || 0;
            options.currentUrlFullReload =
              typeof options.currentUrlFullReload === "undefined"
                ? false
                : options.currentUrlFullReload;
            if (!options.switches.head) {
              options.switches.head = defaultSwitches.switchElementsAlt;
            }
            if (!options.switches.body) {
              options.switches.body = defaultSwitches.switchElementsAlt;
            }
            return options;
          };
          function defaultAnalytics() {
            if (window._gaq) {
              _gaq.push(["_trackPageview"]);
            }
            if (window.ga) {
              ga("send", "pageview", {
                page: location.pathname,
                title: document.title,
              });
            }
          }
        },
        { "./switches": 18 },
      ],
      11: [
        function (require, module, exports) {
          var on = require("../events/on");
          var clone = require("../util/clone");
          var attrState = "data-pjax-state";
          var formAction = function (el, event) {
            if (isDefaultPrevented(event)) {
              return;
            }
            var options = clone(this.options);
            options.requestOptions = {
              requestUrl: el.getAttribute("action") || window.location.href,
              requestMethod: el.getAttribute("method") || "GET",
            };
            var virtLinkElement = document.createElement("a");
            virtLinkElement.setAttribute(
              "href",
              options.requestOptions.requestUrl
            );
            var attrValue = checkIfShouldAbort(virtLinkElement, options);
            if (attrValue) {
              el.setAttribute(attrState, attrValue);
              return;
            }
            event.preventDefault();
            if (el.enctype === "multipart/form-data") {
              options.requestOptions.formData = new FormData(el);
            } else {
              options.requestOptions.requestParams = parseFormElements(el);
            }
            el.setAttribute(attrState, "submit");
            options.triggerElement = el;
            this.loadUrl(virtLinkElement.href, options);
          };
          function parseFormElements(el) {
            var requestParams = [];
            var formElements = el.elements;
            for (var i = 0; i < formElements.length; i++) {
              var element = formElements[i];
              var tagName = element.tagName.toLowerCase();
              if (
                !!element.name &&
                element.attributes !== undefined &&
                tagName !== "button"
              ) {
                var type = element.attributes.type;
                if (
                  !type ||
                  (type.value !== "checkbox" && type.value !== "radio") ||
                  element.checked
                ) {
                  var values = [];
                  if (tagName === "select") {
                    var opt;
                    for (var j = 0; j < element.options.length; j++) {
                      opt = element.options[j];
                      if (opt.selected && !opt.disabled) {
                        values.push(
                          opt.hasAttribute("value") ? opt.value : opt.text
                        );
                      }
                    }
                  } else {
                    values.push(element.value);
                  }
                  for (var k = 0; k < values.length; k++) {
                    requestParams.push({
                      name: encodeURIComponent(element.name),
                      value: encodeURIComponent(values[k]),
                    });
                  }
                }
              }
            }
            return requestParams;
          }
          function checkIfShouldAbort(virtLinkElement, options) {
            if (
              virtLinkElement.protocol !== window.location.protocol ||
              virtLinkElement.host !== window.location.host
            ) {
              return "external";
            }
            if (
              virtLinkElement.hash &&
              virtLinkElement.href.replace(virtLinkElement.hash, "") ===
                window.location.href.replace(location.hash, "")
            ) {
              return "anchor";
            }
            if (
              virtLinkElement.href ===
              window.location.href.split("#")[0] + "#"
            ) {
              return "anchor-empty";
            }
            if (
              options.currentUrlFullReload &&
              virtLinkElement.href === window.location.href.split("#")[0]
            ) {
              return "reload";
            }
          }
          var isDefaultPrevented = function (event) {
            return event.defaultPrevented || event.returnValue === false;
          };
          module.exports = function (el) {
            var that = this;
            el.setAttribute(attrState, "");
            on(el, "submit", function (event) {
              formAction.call(that, el, event);
            });
          };
        },
        { "../events/on": 4, "../util/clone": 20 },
      ],
      12: [
        function (require, module, exports) {
          var on = require("../events/on");
          var clone = require("../util/clone");
          var attrState = "data-pjax-state";
          var linkAction = function (el, event) {
            if (isDefaultPrevented(event)) {
              return;
            }
            var options = clone(this.options);
            var attrValue = checkIfShouldAbort(el, event);
            if (attrValue) {
              el.setAttribute(attrState, attrValue);
              return;
            }
            event.preventDefault();
            if (
              this.options.currentUrlFullReload &&
              el.href === window.location.href.split("#")[0]
            ) {
              el.setAttribute(attrState, "reload");
              this.reload();
              return;
            }
            el.setAttribute(attrState, "load");
            options.triggerElement = el;
            this.loadUrl(el.href, options);
          };
          function checkIfShouldAbort(el, event) {
            if (
              event.which > 1 ||
              event.metaKey ||
              event.ctrlKey ||
              event.shiftKey ||
              event.altKey
            ) {
              return "modifier";
            }
            if (
              el.protocol !== window.location.protocol ||
              el.host !== window.location.host
            ) {
              return "external";
            }
            if (
              el.hash &&
              el.href.replace(el.hash, "") ===
                window.location.href.replace(location.hash, "")
            ) {
              return "anchor";
            }
            if (el.href === window.location.href.split("#")[0] + "#") {
              return "anchor-empty";
            }
          }
          var isDefaultPrevented = function (event) {
            return event.defaultPrevented || event.returnValue === false;
          };
          module.exports = function (el) {
            var that = this;
            el.setAttribute(attrState, "");
            on(el, "click", function (event) {
              linkAction.call(that, el, event);
            });
            on(
              el,
              "keyup",
              function (event) {
                if (event.keyCode === 13) {
                  linkAction.call(that, el, event);
                }
              }.bind(this)
            );
          };
        },
        { "../events/on": 4, "../util/clone": 20 },
      ],
      13: [
        function (require, module, exports) {
          var clone = require("../util/clone");
          var newUid = require("../uniqueid");
          var trigger = require("../events/trigger");
          module.exports = function (responseText, request, href, options) {
            options = clone(options || this.options);
            options.request = request;
            if (responseText === false) {
              trigger(document, "pjax:complete pjax:error", options);
              return;
            }
            var currentState = window.history.state || {};
            window.history.replaceState(
              {
                url: currentState.url || window.location.href,
                title: currentState.title || document.title,
                uid: currentState.uid || newUid(),
                scrollPos: [
                  document.documentElement.scrollLeft ||
                    document.body.scrollLeft,
                  document.documentElement.scrollTop || document.body.scrollTop,
                ],
              },
              document.title,
              window.location.href
            );
            var oldHref = href;
            if (request.responseURL) {
              if (href !== request.responseURL) {
                href = request.responseURL;
              }
            } else if (request.getResponseHeader("X-PJAX-URL")) {
              href = request.getResponseHeader("X-PJAX-URL");
            } else if (request.getResponseHeader("X-XHR-Redirected-To")) {
              href = request.getResponseHeader("X-XHR-Redirected-To");
            }
            var a = document.createElement("a");
            a.href = oldHref;
            var oldHash = a.hash;
            a.href = href;
            if (oldHash && !a.hash) {
              a.hash = oldHash;
              href = a.href;
            }
            this.state.href = href;
            this.state.options = options;
            try {
              this.loadContent(responseText, options);
            } catch (e) {
              trigger(document, "pjax:error", options);
              if (!this.options.debug) {
                if (console && console.error) {
                  console.error("Pjax switch fail: ", e);
                }
                return this.latestChance(href);
              } else {
                throw e;
              }
            }
          };
        },
        { "../events/trigger": 5, "../uniqueid": 19, "../util/clone": 20 },
      ],
      14: [
        function (require, module, exports) {
          module.exports = function () {
            if (this.options.debug && console) {
              if (typeof console.log === "function") {
                console.log.apply(console, arguments);
              } else if (console.log) {
                console.log(arguments);
              }
            }
          };
        },
        {},
      ],
      15: [
        function (require, module, exports) {
          var attrState = "data-pjax-state";
          module.exports = function (el) {
            switch (el.tagName.toLowerCase()) {
              case "a":
                if (!el.hasAttribute(attrState)) {
                  this.attachLink(el);
                }
                break;
              case "form":
                if (!el.hasAttribute(attrState)) {
                  this.attachForm(el);
                }
                break;
              default:
                throw "Pjax can only be applied on <a> or <form> submit";
            }
          };
        },
        {},
      ],
      16: [
        function (require, module, exports) {
          var updateQueryString = require("./util/update-query-string");
          module.exports = function (location, options, callback) {
            options = options || {};
            var queryString;
            var requestOptions = options.requestOptions || {};
            var requestMethod = (
              requestOptions.requestMethod || "GET"
            ).toUpperCase();
            var requestParams = requestOptions.requestParams || null;
            var formData = requestOptions.formData || null;
            var requestPayload = null;
            var request = new XMLHttpRequest();
            var timeout = options.timeout || 0;
            request.onreadystatechange = function () {
              if (request.readyState === 4) {
                if (request.status === 200) {
                  callback(request.responseText, request, location, options);
                } else if (request.status !== 0) {
                  callback(null, request, location, options);
                }
              }
            };
            request.onerror = function (e) {
              console.log(e);
              callback(null, request, location, options);
            };
            request.ontimeout = function () {
              callback(null, request, location, options);
            };
            if (requestParams && requestParams.length) {
              queryString = requestParams
                .map(function (param) {
                  return param.name + "=" + param.value;
                })
                .join("&");
              switch (requestMethod) {
                case "GET":
                  location = location.split("?")[0];
                  location += "?" + queryString;
                  break;
                case "POST":
                  requestPayload = queryString;
                  break;
              }
            } else if (formData) {
              requestPayload = formData;
            }
            if (options.cacheBust) {
              location = updateQueryString(location, "t", Date.now());
            }
            request.open(requestMethod, location, true);
            request.timeout = timeout;
            request.setRequestHeader("X-Requested-With", "XMLHttpRequest");
            request.setRequestHeader("X-PJAX", "true");
            request.setRequestHeader(
              "X-PJAX-Selectors",
              JSON.stringify(options.selectors)
            );
            if (requestPayload && requestMethod === "POST" && !formData) {
              request.setRequestHeader(
                "Content-Type",
                "application/x-www-form-urlencoded"
              );
            }
            request.send(requestPayload);
            return request;
          };
        },
        { "./util/update-query-string": 24 },
      ],
      17: [
        function (require, module, exports) {
          var forEachEls = require("./foreach-els");
          var defaultSwitches = require("./switches");
          module.exports = function (
            switches,
            switchesOptions,
            selectors,
            fromEl,
            toEl,
            options
          ) {
            var switchesQueue = [];
            selectors.forEach(function (selector) {
              var newEls = fromEl.querySelectorAll(selector);
              var oldEls = toEl.querySelectorAll(selector);
              if (this.log) {
                this.log("Pjax switch", selector, newEls, oldEls);
              }
              if (newEls.length !== oldEls.length) {
                throw (
                  "DOM doesnâ€™t look the same on new loaded page: â€™" +
                  selector +
                  "â€™ - new " +
                  newEls.length +
                  ", old " +
                  oldEls.length
                );
              }
              forEachEls(
                newEls,
                function (newEl, i) {
                  var oldEl = oldEls[i];
                  if (this.log) {
                    this.log("newEl", newEl, "oldEl", oldEl);
                  }
                  var callback = switches[selector]
                    ? switches[selector].bind(
                        this,
                        oldEl,
                        newEl,
                        options,
                        switchesOptions[selector]
                      )
                    : defaultSwitches.outerHTML.bind(
                        this,
                        oldEl,
                        newEl,
                        options
                      );
                  switchesQueue.push(callback);
                },
                this
              );
            }, this);
            this.state.numPendingSwitches = switchesQueue.length;
            switchesQueue.forEach(function (queuedSwitch) {
              queuedSwitch();
            });
          };
        },
        { "./foreach-els": 7, "./switches": 18 },
      ],
      18: [
        function (require, module, exports) {
          var on = require("./events/on");
          module.exports = {
            outerHTML: function (oldEl, newEl) {
              oldEl.outerHTML = newEl.outerHTML;
              this.onSwitch();
            },
            innerHTML: function (oldEl, newEl) {
              oldEl.innerHTML = newEl.innerHTML;
              if (newEl.className === "") {
                oldEl.removeAttribute("class");
              } else {
                oldEl.className = newEl.className;
              }
              this.onSwitch();
            },
            switchElementsAlt: function (oldEl, newEl) {
              oldEl.innerHTML = newEl.innerHTML;
              if (newEl.hasAttributes()) {
                var attrs = newEl.attributes;
                for (var i = 0; i < attrs.length; i++) {
                  oldEl.attributes.setNamedItem(attrs[i].cloneNode());
                }
              }
              this.onSwitch();
            },
            replaceNode: function (oldEl, newEl) {
              oldEl.parentNode.replaceChild(newEl, oldEl);
              this.onSwitch();
            },
            sideBySide: function (oldEl, newEl, options, switchOptions) {
              var forEach = Array.prototype.forEach;
              var elsToRemove = [];
              var elsToAdd = [];
              var fragToAppend = document.createDocumentFragment();
              var animationEventNames =
                "animationend webkitAnimationEnd MSAnimationEnd oanimationend";
              var animatedElsNumber = 0;
              var sexyAnimationEnd = function (e) {
                if (e.target !== e.currentTarget) {
                  return;
                }
                animatedElsNumber--;
                if (animatedElsNumber <= 0 && elsToRemove) {
                  elsToRemove.forEach(function (el) {
                    if (el.parentNode) {
                      el.parentNode.removeChild(el);
                    }
                  });
                  elsToAdd.forEach(function (el) {
                    el.className = el.className.replace(
                      el.getAttribute("data-pjax-classes"),
                      ""
                    );
                    el.removeAttribute("data-pjax-classes");
                  });
                  elsToAdd = null;
                  elsToRemove = null;
                  this.onSwitch();
                }
              }.bind(this);
              switchOptions = switchOptions || {};
              forEach.call(oldEl.childNodes, function (el) {
                elsToRemove.push(el);
                if (el.classList && !el.classList.contains("js-Pjax-remove")) {
                  if (el.hasAttribute("data-pjax-classes")) {
                    el.className = el.className.replace(
                      el.getAttribute("data-pjax-classes"),
                      ""
                    );
                    el.removeAttribute("data-pjax-classes");
                  }
                  el.classList.add("js-Pjax-remove");
                  if (
                    switchOptions.callbacks &&
                    switchOptions.callbacks.removeElement
                  ) {
                    switchOptions.callbacks.removeElement(el);
                  }
                  if (switchOptions.classNames) {
                    el.className +=
                      " " +
                      switchOptions.classNames.remove +
                      " " +
                      (options.backward
                        ? switchOptions.classNames.backward
                        : switchOptions.classNames.forward);
                  }
                  animatedElsNumber++;
                  on(el, animationEventNames, sexyAnimationEnd, true);
                }
              });
              forEach.call(newEl.childNodes, function (el) {
                if (el.classList) {
                  var addClasses = "";
                  if (switchOptions.classNames) {
                    addClasses =
                      " js-Pjax-add " +
                      switchOptions.classNames.add +
                      " " +
                      (options.backward
                        ? switchOptions.classNames.forward
                        : switchOptions.classNames.backward);
                  }
                  if (
                    switchOptions.callbacks &&
                    switchOptions.callbacks.addElement
                  ) {
                    switchOptions.callbacks.addElement(el);
                  }
                  el.className += addClasses;
                  el.setAttribute("data-pjax-classes", addClasses);
                  elsToAdd.push(el);
                  fragToAppend.appendChild(el);
                  animatedElsNumber++;
                  on(el, animationEventNames, sexyAnimationEnd, true);
                }
              });
              oldEl.className = newEl.className;
              oldEl.appendChild(fragToAppend);
            },
          };
        },
        { "./events/on": 4 },
      ],
      19: [
        function (require, module, exports) {
          module.exports = (function () {
            var counter = 0;
            return function () {
              var id = "pjax" + new Date().getTime() + "_" + counter;
              counter++;
              return id;
            };
          })();
        },
        {},
      ],
      20: [
        function (require, module, exports) {
          module.exports = function (obj) {
            if (null === obj || "object" !== typeof obj) {
              return obj;
            }
            var copy = obj.constructor();
            for (var attr in obj) {
              if (obj.hasOwnProperty(attr)) {
                copy[attr] = obj[attr];
              }
            }
            return copy;
          };
        },
        {},
      ],
      21: [
        function (require, module, exports) {
          module.exports = function contains(doc, selectors, el) {
            for (var i = 0; i < selectors.length; i++) {
              var selectedEls = doc.querySelectorAll(selectors[i]);
              for (var j = 0; j < selectedEls.length; j++) {
                if (selectedEls[j].contains(el)) {
                  return true;
                }
              }
            }
            return false;
          };
        },
        {},
      ],
      22: [
        function (require, module, exports) {
          module.exports = function (target) {
            if (target == null) {
              return null;
            }
            var to = Object(target);
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              if (source != null) {
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    to[key] = source[key];
                  }
                }
              }
            }
            return to;
          };
        },
        {},
      ],
      23: [
        function (require, module, exports) {
          module.exports = function () {};
        },
        {},
      ],
      24: [
        function (require, module, exports) {
          module.exports = function (uri, key, value) {
            var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
            var separator = uri.indexOf("?") !== -1 ? "&" : "?";
            if (uri.match(re)) {
              return uri.replace(re, "$1" + key + "=" + value + "$2");
            } else {
              return uri + separator + key + "=" + value;
            }
          };
        },
        {},
      ],
    },
    {},
    [1]
  )(1);
});
var CryptoJS =
  CryptoJS ||
  (function (u, p) {
    var d = {},
      l = (d.lib = {}),
      s = function () {},
      t = (l.Base = {
        extend: function (a) {
          s.prototype = this;
          var c = new s();
          a && c.mixIn(a);
          c.hasOwnProperty("init") ||
            (c.init = function () {
              c.$super.init.apply(this, arguments);
            });
          c.init.prototype = c;
          c.$super = this;
          return c;
        },
        create: function () {
          var a = this.extend();
          a.init.apply(a, arguments);
          return a;
        },
        init: function () {},
        mixIn: function (a) {
          for (var c in a) a.hasOwnProperty(c) && (this[c] = a[c]);
          a.hasOwnProperty("toString") && (this.toString = a.toString);
        },
        clone: function () {
          return this.init.prototype.extend(this);
        },
      }),
      r = (l.WordArray = t.extend({
        init: function (a, c) {
          a = this.words = a || [];
          this.sigBytes = c != p ? c : 4 * a.length;
        },
        toString: function (a) {
          return (a || v).stringify(this);
        },
        concat: function (a) {
          var c = this.words,
            e = a.words,
            j = this.sigBytes;
          a = a.sigBytes;
          this.clamp();
          if (j % 4)
            for (var k = 0; k < a; k++)
              c[(j + k) >>> 2] |=
                ((e[k >>> 2] >>> (24 - 8 * (k % 4))) & 255) <<
                (24 - 8 * ((j + k) % 4));
          else if (65535 < e.length)
            for (k = 0; k < a; k += 4) c[(j + k) >>> 2] = e[k >>> 2];
          else c.push.apply(c, e);
          this.sigBytes += a;
          return this;
        },
        clamp: function () {
          var a = this.words,
            c = this.sigBytes;
          a[c >>> 2] &= 4294967295 << (32 - 8 * (c % 4));
          a.length = u.ceil(c / 4);
        },
        clone: function () {
          var a = t.clone.call(this);
          a.words = this.words.slice(0);
          return a;
        },
        random: function (a) {
          for (var c = [], e = 0; e < a; e += 4)
            c.push((4294967296 * u.random()) | 0);
          return new r.init(c, a);
        },
      })),
      w = (d.enc = {}),
      v = (w.Hex = {
        stringify: function (a) {
          var c = a.words;
          a = a.sigBytes;
          for (var e = [], j = 0; j < a; j++) {
            var k = (c[j >>> 2] >>> (24 - 8 * (j % 4))) & 255;
            e.push((k >>> 4).toString(16));
            e.push((k & 15).toString(16));
          }
          return e.join("");
        },
        parse: function (a) {
          for (var c = a.length, e = [], j = 0; j < c; j += 2)
            e[j >>> 3] |= parseInt(a.substr(j, 2), 16) << (24 - 4 * (j % 8));
          return new r.init(e, c / 2);
        },
      }),
      b = (w.Latin1 = {
        stringify: function (a) {
          var c = a.words;
          a = a.sigBytes;
          for (var e = [], j = 0; j < a; j++)
            e.push(
              String.fromCharCode((c[j >>> 2] >>> (24 - 8 * (j % 4))) & 255)
            );
          return e.join("");
        },
        parse: function (a) {
          for (var c = a.length, e = [], j = 0; j < c; j++)
            e[j >>> 2] |= (a.charCodeAt(j) & 255) << (24 - 8 * (j % 4));
          return new r.init(e, c);
        },
      }),
      x = (w.Utf8 = {
        stringify: function (a) {
          try {
            return decodeURIComponent(escape(b.stringify(a)));
          } catch (c) {
            throw Error("Malformed UTF-8 data");
          }
        },
        parse: function (a) {
          return b.parse(unescape(encodeURIComponent(a)));
        },
      }),
      q = (l.BufferedBlockAlgorithm = t.extend({
        reset: function () {
          this._data = new r.init();
          this._nDataBytes = 0;
        },
        _append: function (a) {
          "string" == typeof a && (a = x.parse(a));
          this._data.concat(a);
          this._nDataBytes += a.sigBytes;
        },
        _process: function (a) {
          var c = this._data,
            e = c.words,
            j = c.sigBytes,
            k = this.blockSize,
            b = j / (4 * k),
            b = a ? u.ceil(b) : u.max((b | 0) - this._minBufferSize, 0);
          a = b * k;
          j = u.min(4 * a, j);
          if (a) {
            for (var q = 0; q < a; q += k) this._doProcessBlock(e, q);
            q = e.splice(0, a);
            c.sigBytes -= j;
          }
          return new r.init(q, j);
        },
        clone: function () {
          var a = t.clone.call(this);
          a._data = this._data.clone();
          return a;
        },
        _minBufferSize: 0,
      }));
    l.Hasher = q.extend({
      cfg: t.extend(),
      init: function (a) {
        this.cfg = this.cfg.extend(a);
        this.reset();
      },
      reset: function () {
        q.reset.call(this);
        this._doReset();
      },
      update: function (a) {
        this._append(a);
        this._process();
        return this;
      },
      finalize: function (a) {
        a && this._append(a);
        return this._doFinalize();
      },
      blockSize: 16,
      _createHelper: function (a) {
        return function (b, e) {
          return new a.init(e).finalize(b);
        };
      },
      _createHmacHelper: function (a) {
        return function (b, e) {
          return new n.HMAC.init(a, e).finalize(b);
        };
      },
    });
    var n = (d.algo = {});
    return d;
  })(Math);
(function () {
  var u = CryptoJS,
    p = u.lib.WordArray;
  u.enc.Base64 = {
    stringify: function (d) {
      var l = d.words,
        p = d.sigBytes,
        t = this._map;
      d.clamp();
      d = [];
      for (var r = 0; r < p; r += 3)
        for (
          var w =
              (((l[r >>> 2] >>> (24 - 8 * (r % 4))) & 255) << 16) |
              (((l[(r + 1) >>> 2] >>> (24 - 8 * ((r + 1) % 4))) & 255) << 8) |
              ((l[(r + 2) >>> 2] >>> (24 - 8 * ((r + 2) % 4))) & 255),
            v = 0;
          4 > v && r + 0.75 * v < p;
          v++
        )
          d.push(t.charAt((w >>> (6 * (3 - v))) & 63));
      if ((l = t.charAt(64))) for (; d.length % 4; ) d.push(l);
      return d.join("");
    },
    parse: function (d) {
      var l = d.length,
        s = this._map,
        t = s.charAt(64);
      t && ((t = d.indexOf(t)), -1 != t && (l = t));
      for (var t = [], r = 0, w = 0; w < l; w++)
        if (w % 4) {
          var v = s.indexOf(d.charAt(w - 1)) << (2 * (w % 4)),
            b = s.indexOf(d.charAt(w)) >>> (6 - 2 * (w % 4));
          t[r >>> 2] |= (v | b) << (24 - 8 * (r % 4));
          r++;
        }
      return p.create(t, r);
    },
    _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  };
})();
(function (u) {
  function p(b, n, a, c, e, j, k) {
    b = b + ((n & a) | (~n & c)) + e + k;
    return ((b << j) | (b >>> (32 - j))) + n;
  }
  function d(b, n, a, c, e, j, k) {
    b = b + ((n & c) | (a & ~c)) + e + k;
    return ((b << j) | (b >>> (32 - j))) + n;
  }
  function l(b, n, a, c, e, j, k) {
    b = b + (n ^ a ^ c) + e + k;
    return ((b << j) | (b >>> (32 - j))) + n;
  }
  function s(b, n, a, c, e, j, k) {
    b = b + (a ^ (n | ~c)) + e + k;
    return ((b << j) | (b >>> (32 - j))) + n;
  }
  for (
    var t = CryptoJS,
      r = t.lib,
      w = r.WordArray,
      v = r.Hasher,
      r = t.algo,
      b = [],
      x = 0;
    64 > x;
    x++
  )
    b[x] = (4294967296 * u.abs(u.sin(x + 1))) | 0;
  r = r.MD5 = v.extend({
    _doReset: function () {
      this._hash = new w.init([1732584193, 4023233417, 2562383102, 271733878]);
    },
    _doProcessBlock: function (q, n) {
      for (var a = 0; 16 > a; a++) {
        var c = n + a,
          e = q[c];
        q[c] =
          (((e << 8) | (e >>> 24)) & 16711935) |
          (((e << 24) | (e >>> 8)) & 4278255360);
      }
      var a = this._hash.words,
        c = q[n + 0],
        e = q[n + 1],
        j = q[n + 2],
        k = q[n + 3],
        z = q[n + 4],
        r = q[n + 5],
        t = q[n + 6],
        w = q[n + 7],
        v = q[n + 8],
        A = q[n + 9],
        B = q[n + 10],
        C = q[n + 11],
        u = q[n + 12],
        D = q[n + 13],
        E = q[n + 14],
        x = q[n + 15],
        f = a[0],
        m = a[1],
        g = a[2],
        h = a[3],
        f = p(f, m, g, h, c, 7, b[0]),
        h = p(h, f, m, g, e, 12, b[1]),
        g = p(g, h, f, m, j, 17, b[2]),
        m = p(m, g, h, f, k, 22, b[3]),
        f = p(f, m, g, h, z, 7, b[4]),
        h = p(h, f, m, g, r, 12, b[5]),
        g = p(g, h, f, m, t, 17, b[6]),
        m = p(m, g, h, f, w, 22, b[7]),
        f = p(f, m, g, h, v, 7, b[8]),
        h = p(h, f, m, g, A, 12, b[9]),
        g = p(g, h, f, m, B, 17, b[10]),
        m = p(m, g, h, f, C, 22, b[11]),
        f = p(f, m, g, h, u, 7, b[12]),
        h = p(h, f, m, g, D, 12, b[13]),
        g = p(g, h, f, m, E, 17, b[14]),
        m = p(m, g, h, f, x, 22, b[15]),
        f = d(f, m, g, h, e, 5, b[16]),
        h = d(h, f, m, g, t, 9, b[17]),
        g = d(g, h, f, m, C, 14, b[18]),
        m = d(m, g, h, f, c, 20, b[19]),
        f = d(f, m, g, h, r, 5, b[20]),
        h = d(h, f, m, g, B, 9, b[21]),
        g = d(g, h, f, m, x, 14, b[22]),
        m = d(m, g, h, f, z, 20, b[23]),
        f = d(f, m, g, h, A, 5, b[24]),
        h = d(h, f, m, g, E, 9, b[25]),
        g = d(g, h, f, m, k, 14, b[26]),
        m = d(m, g, h, f, v, 20, b[27]),
        f = d(f, m, g, h, D, 5, b[28]),
        h = d(h, f, m, g, j, 9, b[29]),
        g = d(g, h, f, m, w, 14, b[30]),
        m = d(m, g, h, f, u, 20, b[31]),
        f = l(f, m, g, h, r, 4, b[32]),
        h = l(h, f, m, g, v, 11, b[33]),
        g = l(g, h, f, m, C, 16, b[34]),
        m = l(m, g, h, f, E, 23, b[35]),
        f = l(f, m, g, h, e, 4, b[36]),
        h = l(h, f, m, g, z, 11, b[37]),
        g = l(g, h, f, m, w, 16, b[38]),
        m = l(m, g, h, f, B, 23, b[39]),
        f = l(f, m, g, h, D, 4, b[40]),
        h = l(h, f, m, g, c, 11, b[41]),
        g = l(g, h, f, m, k, 16, b[42]),
        m = l(m, g, h, f, t, 23, b[43]),
        f = l(f, m, g, h, A, 4, b[44]),
        h = l(h, f, m, g, u, 11, b[45]),
        g = l(g, h, f, m, x, 16, b[46]),
        m = l(m, g, h, f, j, 23, b[47]),
        f = s(f, m, g, h, c, 6, b[48]),
        h = s(h, f, m, g, w, 10, b[49]),
        g = s(g, h, f, m, E, 15, b[50]),
        m = s(m, g, h, f, r, 21, b[51]),
        f = s(f, m, g, h, u, 6, b[52]),
        h = s(h, f, m, g, k, 10, b[53]),
        g = s(g, h, f, m, B, 15, b[54]),
        m = s(m, g, h, f, e, 21, b[55]),
        f = s(f, m, g, h, v, 6, b[56]),
        h = s(h, f, m, g, x, 10, b[57]),
        g = s(g, h, f, m, t, 15, b[58]),
        m = s(m, g, h, f, D, 21, b[59]),
        f = s(f, m, g, h, z, 6, b[60]),
        h = s(h, f, m, g, C, 10, b[61]),
        g = s(g, h, f, m, j, 15, b[62]),
        m = s(m, g, h, f, A, 21, b[63]);
      a[0] = (a[0] + f) | 0;
      a[1] = (a[1] + m) | 0;
      a[2] = (a[2] + g) | 0;
      a[3] = (a[3] + h) | 0;
    },
    _doFinalize: function () {
      var b = this._data,
        n = b.words,
        a = 8 * this._nDataBytes,
        c = 8 * b.sigBytes;
      n[c >>> 5] |= 128 << (24 - (c % 32));
      var e = u.floor(a / 4294967296);
      n[(((c + 64) >>> 9) << 4) + 15] =
        (((e << 8) | (e >>> 24)) & 16711935) |
        (((e << 24) | (e >>> 8)) & 4278255360);
      n[(((c + 64) >>> 9) << 4) + 14] =
        (((a << 8) | (a >>> 24)) & 16711935) |
        (((a << 24) | (a >>> 8)) & 4278255360);
      b.sigBytes = 4 * (n.length + 1);
      this._process();
      b = this._hash;
      n = b.words;
      for (a = 0; 4 > a; a++)
        (c = n[a]),
          (n[a] =
            (((c << 8) | (c >>> 24)) & 16711935) |
            (((c << 24) | (c >>> 8)) & 4278255360));
      return b;
    },
    clone: function () {
      var b = v.clone.call(this);
      b._hash = this._hash.clone();
      return b;
    },
  });
  t.MD5 = v._createHelper(r);
  t.HmacMD5 = v._createHmacHelper(r);
})(Math);
(function () {
  var u = CryptoJS,
    p = u.lib,
    d = p.Base,
    l = p.WordArray,
    p = u.algo,
    s = (p.EvpKDF = d.extend({
      cfg: d.extend({ keySize: 4, hasher: p.MD5, iterations: 1 }),
      init: function (d) {
        this.cfg = this.cfg.extend(d);
      },
      compute: function (d, r) {
        for (
          var p = this.cfg,
            s = p.hasher.create(),
            b = l.create(),
            u = b.words,
            q = p.keySize,
            p = p.iterations;
          u.length < q;

        ) {
          n && s.update(n);
          var n = s.update(d).finalize(r);
          s.reset();
          for (var a = 1; a < p; a++) (n = s.finalize(n)), s.reset();
          b.concat(n);
        }
        b.sigBytes = 4 * q;
        return b;
      },
    }));
  u.EvpKDF = function (d, l, p) {
    return s.create(p).compute(d, l);
  };
})();
CryptoJS.lib.Cipher ||
  (function (u) {
    var p = CryptoJS,
      d = p.lib,
      l = d.Base,
      s = d.WordArray,
      t = d.BufferedBlockAlgorithm,
      r = p.enc.Base64,
      w = p.algo.EvpKDF,
      v = (d.Cipher = t.extend({
        cfg: l.extend(),
        createEncryptor: function (e, a) {
          return this.create(this._ENC_XFORM_MODE, e, a);
        },
        createDecryptor: function (e, a) {
          return this.create(this._DEC_XFORM_MODE, e, a);
        },
        init: function (e, a, b) {
          this.cfg = this.cfg.extend(b);
          this._xformMode = e;
          this._key = a;
          this.reset();
        },
        reset: function () {
          t.reset.call(this);
          this._doReset();
        },
        process: function (e) {
          this._append(e);
          return this._process();
        },
        finalize: function (e) {
          e && this._append(e);
          return this._doFinalize();
        },
        keySize: 4,
        ivSize: 4,
        _ENC_XFORM_MODE: 1,
        _DEC_XFORM_MODE: 2,
        _createHelper: function (e) {
          return {
            encrypt: function (b, k, d) {
              return ("string" == typeof k ? c : a).encrypt(e, b, k, d);
            },
            decrypt: function (b, k, d) {
              return ("string" == typeof k ? c : a).decrypt(e, b, k, d);
            },
          };
        },
      }));
    d.StreamCipher = v.extend({
      _doFinalize: function () {
        return this._process(!0);
      },
      blockSize: 1,
    });
    var b = (p.mode = {}),
      x = function (e, a, b) {
        var c = this._iv;
        c ? (this._iv = u) : (c = this._prevBlock);
        for (var d = 0; d < b; d++) e[a + d] ^= c[d];
      },
      q = (d.BlockCipherMode = l.extend({
        createEncryptor: function (e, a) {
          return this.Encryptor.create(e, a);
        },
        createDecryptor: function (e, a) {
          return this.Decryptor.create(e, a);
        },
        init: function (e, a) {
          this._cipher = e;
          this._iv = a;
        },
      })).extend();
    q.Encryptor = q.extend({
      processBlock: function (e, a) {
        var b = this._cipher,
          c = b.blockSize;
        x.call(this, e, a, c);
        b.encryptBlock(e, a);
        this._prevBlock = e.slice(a, a + c);
      },
    });
    q.Decryptor = q.extend({
      processBlock: function (e, a) {
        var b = this._cipher,
          c = b.blockSize,
          d = e.slice(a, a + c);
        b.decryptBlock(e, a);
        x.call(this, e, a, c);
        this._prevBlock = d;
      },
    });
    b = b.CBC = q;
    q = (p.pad = {}).Pkcs7 = {
      pad: function (a, b) {
        for (
          var c = 4 * b,
            c = c - (a.sigBytes % c),
            d = (c << 24) | (c << 16) | (c << 8) | c,
            l = [],
            n = 0;
          n < c;
          n += 4
        )
          l.push(d);
        c = s.create(l, c);
        a.concat(c);
      },
      unpad: function (a) {
        a.sigBytes -= a.words[(a.sigBytes - 1) >>> 2] & 255;
      },
    };
    d.BlockCipher = v.extend({
      cfg: v.cfg.extend({ mode: b, padding: q }),
      reset: function () {
        v.reset.call(this);
        var a = this.cfg,
          b = a.iv,
          a = a.mode;
        if (this._xformMode == this._ENC_XFORM_MODE) var c = a.createEncryptor;
        else (c = a.createDecryptor), (this._minBufferSize = 1);
        this._mode = c.call(a, this, b && b.words);
      },
      _doProcessBlock: function (a, b) {
        this._mode.processBlock(a, b);
      },
      _doFinalize: function () {
        var a = this.cfg.padding;
        if (this._xformMode == this._ENC_XFORM_MODE) {
          a.pad(this._data, this.blockSize);
          var b = this._process(!0);
        } else (b = this._process(!0)), a.unpad(b);
        return b;
      },
      blockSize: 4,
    });
    var n = (d.CipherParams = l.extend({
        init: function (a) {
          this.mixIn(a);
        },
        toString: function (a) {
          return (a || this.formatter).stringify(this);
        },
      })),
      b = ((p.format = {}).OpenSSL = {
        stringify: function (a) {
          var b = a.ciphertext;
          a = a.salt;
          return (
            a ? s.create([1398893684, 1701076831]).concat(a).concat(b) : b
          ).toString(r);
        },
        parse: function (a) {
          a = r.parse(a);
          var b = a.words;
          if (1398893684 == b[0] && 1701076831 == b[1]) {
            var c = s.create(b.slice(2, 4));
            b.splice(0, 4);
            a.sigBytes -= 16;
          }
          return n.create({ ciphertext: a, salt: c });
        },
      }),
      a = (d.SerializableCipher = l.extend({
        cfg: l.extend({ format: b }),
        encrypt: function (a, b, c, d) {
          d = this.cfg.extend(d);
          var l = a.createEncryptor(c, d);
          b = l.finalize(b);
          l = l.cfg;
          return n.create({
            ciphertext: b,
            key: c,
            iv: l.iv,
            algorithm: a,
            mode: l.mode,
            padding: l.padding,
            blockSize: a.blockSize,
            formatter: d.format,
          });
        },
        decrypt: function (a, b, c, d) {
          d = this.cfg.extend(d);
          b = this._parse(b, d.format);
          return a.createDecryptor(c, d).finalize(b.ciphertext);
        },
        _parse: function (a, b) {
          return "string" == typeof a ? b.parse(a, this) : a;
        },
      })),
      p = ((p.kdf = {}).OpenSSL = {
        execute: function (a, b, c, d) {
          d || (d = s.random(8));
          a = w.create({ keySize: b + c }).compute(a, d);
          c = s.create(a.words.slice(b), 4 * c);
          a.sigBytes = 4 * b;
          return n.create({ key: a, iv: c, salt: d });
        },
      }),
      c = (d.PasswordBasedCipher = a.extend({
        cfg: a.cfg.extend({ kdf: p }),
        encrypt: function (b, c, d, l) {
          l = this.cfg.extend(l);
          d = l.kdf.execute(d, b.keySize, b.ivSize);
          l.iv = d.iv;
          b = a.encrypt.call(this, b, c, d.key, l);
          b.mixIn(d);
          return b;
        },
        decrypt: function (b, c, d, l) {
          l = this.cfg.extend(l);
          c = this._parse(c, l.format);
          d = l.kdf.execute(d, b.keySize, b.ivSize, c.salt);
          l.iv = d.iv;
          return a.decrypt.call(this, b, c, d.key, l);
        },
      }));
  })();
(function () {
  for (
    var u = CryptoJS,
      p = u.lib.BlockCipher,
      d = u.algo,
      l = [],
      s = [],
      t = [],
      r = [],
      w = [],
      v = [],
      b = [],
      x = [],
      q = [],
      n = [],
      a = [],
      c = 0;
    256 > c;
    c++
  )
    a[c] = 128 > c ? c << 1 : (c << 1) ^ 283;
  for (var e = 0, j = 0, c = 0; 256 > c; c++) {
    var k = j ^ (j << 1) ^ (j << 2) ^ (j << 3) ^ (j << 4),
      k = (k >>> 8) ^ (k & 255) ^ 99;
    l[e] = k;
    s[k] = e;
    var z = a[e],
      F = a[z],
      G = a[F],
      y = (257 * a[k]) ^ (16843008 * k);
    t[e] = (y << 24) | (y >>> 8);
    r[e] = (y << 16) | (y >>> 16);
    w[e] = (y << 8) | (y >>> 24);
    v[e] = y;
    y = (16843009 * G) ^ (65537 * F) ^ (257 * z) ^ (16843008 * e);
    b[k] = (y << 24) | (y >>> 8);
    x[k] = (y << 16) | (y >>> 16);
    q[k] = (y << 8) | (y >>> 24);
    n[k] = y;
    e ? ((e = z ^ a[a[a[G ^ z]]]), (j ^= a[a[j]])) : (e = j = 1);
  }
  var H = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54],
    d = (d.AES = p.extend({
      _doReset: function () {
        for (
          var a = this._key,
            c = a.words,
            d = a.sigBytes / 4,
            a = 4 * ((this._nRounds = d + 6) + 1),
            e = (this._keySchedule = []),
            j = 0;
          j < a;
          j++
        )
          if (j < d) e[j] = c[j];
          else {
            var k = e[j - 1];
            j % d
              ? 6 < d &&
                4 == j % d &&
                (k =
                  (l[k >>> 24] << 24) |
                  (l[(k >>> 16) & 255] << 16) |
                  (l[(k >>> 8) & 255] << 8) |
                  l[k & 255])
              : ((k = (k << 8) | (k >>> 24)),
                (k =
                  (l[k >>> 24] << 24) |
                  (l[(k >>> 16) & 255] << 16) |
                  (l[(k >>> 8) & 255] << 8) |
                  l[k & 255]),
                (k ^= H[(j / d) | 0] << 24));
            e[j] = e[j - d] ^ k;
          }
        c = this._invKeySchedule = [];
        for (d = 0; d < a; d++)
          (j = a - d),
            (k = d % 4 ? e[j] : e[j - 4]),
            (c[d] =
              4 > d || 4 >= j
                ? k
                : b[l[k >>> 24]] ^
                  x[l[(k >>> 16) & 255]] ^
                  q[l[(k >>> 8) & 255]] ^
                  n[l[k & 255]]);
      },
      encryptBlock: function (a, b) {
        this._doCryptBlock(a, b, this._keySchedule, t, r, w, v, l);
      },
      decryptBlock: function (a, c) {
        var d = a[c + 1];
        a[c + 1] = a[c + 3];
        a[c + 3] = d;
        this._doCryptBlock(a, c, this._invKeySchedule, b, x, q, n, s);
        d = a[c + 1];
        a[c + 1] = a[c + 3];
        a[c + 3] = d;
      },
      _doCryptBlock: function (a, b, c, d, e, j, l, f) {
        for (
          var m = this._nRounds,
            g = a[b] ^ c[0],
            h = a[b + 1] ^ c[1],
            k = a[b + 2] ^ c[2],
            n = a[b + 3] ^ c[3],
            p = 4,
            r = 1;
          r < m;
          r++
        )
          var q =
              d[g >>> 24] ^
              e[(h >>> 16) & 255] ^
              j[(k >>> 8) & 255] ^
              l[n & 255] ^
              c[p++],
            s =
              d[h >>> 24] ^
              e[(k >>> 16) & 255] ^
              j[(n >>> 8) & 255] ^
              l[g & 255] ^
              c[p++],
            t =
              d[k >>> 24] ^
              e[(n >>> 16) & 255] ^
              j[(g >>> 8) & 255] ^
              l[h & 255] ^
              c[p++],
            n =
              d[n >>> 24] ^
              e[(g >>> 16) & 255] ^
              j[(h >>> 8) & 255] ^
              l[k & 255] ^
              c[p++],
            g = q,
            h = s,
            k = t;
        q =
          ((f[g >>> 24] << 24) |
            (f[(h >>> 16) & 255] << 16) |
            (f[(k >>> 8) & 255] << 8) |
            f[n & 255]) ^
          c[p++];
        s =
          ((f[h >>> 24] << 24) |
            (f[(k >>> 16) & 255] << 16) |
            (f[(n >>> 8) & 255] << 8) |
            f[g & 255]) ^
          c[p++];
        t =
          ((f[k >>> 24] << 24) |
            (f[(n >>> 16) & 255] << 16) |
            (f[(g >>> 8) & 255] << 8) |
            f[h & 255]) ^
          c[p++];
        n =
          ((f[n >>> 24] << 24) |
            (f[(g >>> 16) & 255] << 16) |
            (f[(h >>> 8) & 255] << 8) |
            f[k & 255]) ^
          c[p++];
        a[b] = q;
        a[b + 1] = s;
        a[b + 2] = t;
        a[b + 3] = n;
      },
      keySize: 8,
    }));
  u.AES = p._createHelper(d);
})();
(function (f) {
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else if (typeof define === "function" && define.amd) {
    define([], f);
  } else {
    var g;
    if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      g = this;
    }
    g.enquire = f();
  }
})(function () {
  var define, module, exports;
  return (function e(t, n, r) {
    function s(o, u) {
      if (!n[o]) {
        if (!t[o]) {
          var a = typeof require == "function" && require;
          if (!u && a) return a(o, !0);
          if (i) return i(o, !0);
          var f = new Error("Cannot find module '" + o + "'");
          throw ((f.code = "MODULE_NOT_FOUND"), f);
        }
        var l = (n[o] = { exports: {} });
        t[o][0].call(
          l.exports,
          function (e) {
            var n = t[o][1][e];
            return s(n ? n : e);
          },
          l,
          l.exports,
          e,
          t,
          n,
          r
        );
      }
      return n[o].exports;
    }
    var i = typeof require == "function" && require;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
  })(
    {
      1: [
        function (require, module, exports) {
          var QueryHandler = require(3);
          var each = require(4).each;
          function MediaQuery(query, isUnconditional) {
            this.query = query;
            this.isUnconditional = isUnconditional;
            this.handlers = [];
            this.mql = window.matchMedia(query);
            var self = this;
            this.listener = function (mql) {
              self.mql = mql.currentTarget || mql;
              self.assess();
            };
            this.mql.addListener(this.listener);
          }
          MediaQuery.prototype = {
            constuctor: MediaQuery,
            addHandler: function (handler) {
              var qh = new QueryHandler(handler);
              this.handlers.push(qh);
              this.matches() && qh.on();
            },
            removeHandler: function (handler) {
              var handlers = this.handlers;
              each(handlers, function (h, i) {
                if (h.equals(handler)) {
                  h.destroy();
                  return !handlers.splice(i, 1);
                }
              });
            },
            matches: function () {
              return this.mql.matches || this.isUnconditional;
            },
            clear: function () {
              each(this.handlers, function (handler) {
                handler.destroy();
              });
              this.mql.removeListener(this.listener);
              this.handlers.length = 0;
            },
            assess: function () {
              var action = this.matches() ? "on" : "off";
              each(this.handlers, function (handler) {
                handler[action]();
              });
            },
          };
          module.exports = MediaQuery;
        },
        { 3: 3, 4: 4 },
      ],
      2: [
        function (require, module, exports) {
          var MediaQuery = require(1);
          var Util = require(4);
          var each = Util.each;
          var isFunction = Util.isFunction;
          var isArray = Util.isArray;
          function MediaQueryDispatch() {
            if (!window.matchMedia) {
              throw new Error(
                "matchMedia not present, legacy browsers require a polyfill"
              );
            }
            this.queries = {};
            this.browserIsIncapable = !window.matchMedia("only all").matches;
          }
          MediaQueryDispatch.prototype = {
            constructor: MediaQueryDispatch,
            register: function (q, options, shouldDegrade) {
              var queries = this.queries,
                isUnconditional = shouldDegrade && this.browserIsIncapable;
              if (!queries[q]) {
                queries[q] = new MediaQuery(q, isUnconditional);
              }
              if (isFunction(options)) {
                options = { match: options };
              }
              if (!isArray(options)) {
                options = [options];
              }
              each(options, function (handler) {
                if (isFunction(handler)) {
                  handler = { match: handler };
                }
                queries[q].addHandler(handler);
              });
              return this;
            },
            unregister: function (q, handler) {
              var query = this.queries[q];
              if (query) {
                if (handler) {
                  query.removeHandler(handler);
                } else {
                  query.clear();
                  delete this.queries[q];
                }
              }
              return this;
            },
          };
          module.exports = MediaQueryDispatch;
        },
        { 1: 1, 4: 4 },
      ],
      3: [
        function (require, module, exports) {
          function QueryHandler(options) {
            this.options = options;
            !options.deferSetup && this.setup();
          }
          QueryHandler.prototype = {
            constructor: QueryHandler,
            setup: function () {
              if (this.options.setup) {
                this.options.setup();
              }
              this.initialised = true;
            },
            on: function () {
              !this.initialised && this.setup();
              this.options.match && this.options.match();
            },
            off: function () {
              this.options.unmatch && this.options.unmatch();
            },
            destroy: function () {
              this.options.destroy ? this.options.destroy() : this.off();
            },
            equals: function (target) {
              return this.options === target || this.options.match === target;
            },
          };
          module.exports = QueryHandler;
        },
        {},
      ],
      4: [
        function (require, module, exports) {
          function each(collection, fn) {
            var i = 0,
              length = collection.length,
              cont;
            for (i; i < length; i++) {
              cont = fn(collection[i], i);
              if (cont === false) {
                break;
              }
            }
          }
          function isArray(target) {
            return Object.prototype.toString.apply(target) === "[object Array]";
          }
          function isFunction(target) {
            return typeof target === "function";
          }
          module.exports = {
            isFunction: isFunction,
            isArray: isArray,
            each: each,
          };
        },
        {},
      ],
      5: [
        function (require, module, exports) {
          var MediaQueryDispatch = require(2);
          module.exports = new MediaQueryDispatch();
        },
        { 2: 2 },
      ],
    },
    {},
    [5]
  )(5);
});
!(function (i) {
  "use strict";
  "function" == typeof define && define.amd
    ? define(["jquery"], i)
    : "undefined" != typeof exports
    ? (module.exports = i(require("jquery")))
    : i(jQuery);
})(function (i) {
  "use strict";
  var e = window.Slick || {};
  ((e = (function () {
    var e = 0;
    return function (t, o) {
      var s,
        n = this;
      (n.defaults = {
        accessibility: !0,
        adaptiveHeight: !1,
        appendArrows: i(t),
        appendDots: i(t),
        arrows: !0,
        asNavFor: null,
        prevArrow:
          '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
        nextArrow:
          '<button class="slick-next" aria-label="Next" type="button">Next</button>',
        autoplay: !1,
        autoplaySpeed: 3e3,
        centerMode: !1,
        centerPadding: "50px",
        cssEase: "ease",
        customPaging: function (e, t) {
          return i('<button type="button" />').text(t + 1);
        },
        dots: !1,
        dotsClass: "slick-dots",
        draggable: !0,
        easing: "linear",
        edgeFriction: 0.35,
        fade: !1,
        focusOnSelect: !1,
        focusOnChange: !1,
        infinite: !0,
        initialSlide: 0,
        lazyLoad: "ondemand",
        mobileFirst: !1,
        pauseOnHover: !0,
        pauseOnFocus: !0,
        pauseOnDotsHover: !1,
        respondTo: "window",
        responsive: null,
        rows: 1,
        rtl: !1,
        slide: "",
        slidesPerRow: 1,
        slidesToShow: 1,
        slidesToScroll: 1,
        speed: 500,
        swipe: !0,
        swipeToSlide: !1,
        touchMove: !0,
        touchThreshold: 5,
        useCSS: !0,
        useTransform: !0,
        variableWidth: !1,
        vertical: !1,
        verticalSwiping: !1,
        waitForAnimate: !0,
        zIndex: 1e3,
      }),
        (n.initials = {
          animating: !1,
          dragging: !1,
          autoPlayTimer: null,
          currentDirection: 0,
          currentLeft: null,
          currentSlide: 0,
          direction: 1,
          $dots: null,
          listWidth: null,
          listHeight: null,
          loadIndex: 0,
          $nextArrow: null,
          $prevArrow: null,
          scrolling: !1,
          slideCount: null,
          slideWidth: null,
          $slideTrack: null,
          $slides: null,
          sliding: !1,
          slideOffset: 0,
          swipeLeft: null,
          swiping: !1,
          $list: null,
          touchObject: {},
          transformsEnabled: !1,
          unslicked: !1,
        }),
        i.extend(n, n.initials),
        (n.activeBreakpoint = null),
        (n.animType = null),
        (n.animProp = null),
        (n.breakpoints = []),
        (n.breakpointSettings = []),
        (n.cssTransitions = !1),
        (n.focussed = !1),
        (n.interrupted = !1),
        (n.hidden = "hidden"),
        (n.paused = !0),
        (n.positionProp = null),
        (n.respondTo = null),
        (n.rowCount = 1),
        (n.shouldClick = !0),
        (n.$slider = i(t)),
        (n.$slidesCache = null),
        (n.transformType = null),
        (n.transitionType = null),
        (n.visibilityChange = "visibilitychange"),
        (n.windowWidth = 0),
        (n.windowTimer = null),
        (s = i(t).data("slick") || {}),
        (n.options = i.extend({}, n.defaults, o, s)),
        (n.currentSlide = n.options.initialSlide),
        (n.originalSettings = n.options),
        void 0 !== document.mozHidden
          ? ((n.hidden = "mozHidden"),
            (n.visibilityChange = "mozvisibilitychange"))
          : void 0 !== document.webkitHidden &&
            ((n.hidden = "webkitHidden"),
            (n.visibilityChange = "webkitvisibilitychange")),
        (n.autoPlay = i.proxy(n.autoPlay, n)),
        (n.autoPlayClear = i.proxy(n.autoPlayClear, n)),
        (n.autoPlayIterator = i.proxy(n.autoPlayIterator, n)),
        (n.changeSlide = i.proxy(n.changeSlide, n)),
        (n.clickHandler = i.proxy(n.clickHandler, n)),
        (n.selectHandler = i.proxy(n.selectHandler, n)),
        (n.setPosition = i.proxy(n.setPosition, n)),
        (n.swipeHandler = i.proxy(n.swipeHandler, n)),
        (n.dragHandler = i.proxy(n.dragHandler, n)),
        (n.keyHandler = i.proxy(n.keyHandler, n)),
        (n.instanceUid = e++),
        (n.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/),
        n.registerBreakpoints(),
        n.init(!0);
    };
  })()).prototype.activateADA = function () {
    this.$slideTrack
      .find(".slick-active")
      .attr({ "aria-hidden": "false" })
      .find("a, input, button, select")
      .attr({ tabindex: "0" });
  }),
    (e.prototype.addSlide = e.prototype.slickAdd =
      function (e, t, o) {
        var s = this;
        if ("boolean" == typeof t) (o = t), (t = null);
        else if (t < 0 || t >= s.slideCount) return !1;
        s.unload(),
          "number" == typeof t
            ? 0 === t && 0 === s.$slides.length
              ? i(e).appendTo(s.$slideTrack)
              : o
              ? i(e).insertBefore(s.$slides.eq(t))
              : i(e).insertAfter(s.$slides.eq(t))
            : !0 === o
            ? i(e).prependTo(s.$slideTrack)
            : i(e).appendTo(s.$slideTrack),
          (s.$slides = s.$slideTrack.children(this.options.slide)),
          s.$slideTrack.children(this.options.slide).detach(),
          s.$slideTrack.append(s.$slides),
          s.$slides.each(function (e, t) {
            i(t).attr("data-slick-index", e);
          }),
          (s.$slidesCache = s.$slides),
          s.reinit();
      }),
    (e.prototype.animateHeight = function () {
      var i = this;
      if (
        1 === i.options.slidesToShow &&
        !0 === i.options.adaptiveHeight &&
        !1 === i.options.vertical
      ) {
        var e = i.$slides.eq(i.currentSlide).outerHeight(!0);
        i.$list.animate({ height: e }, i.options.speed);
      }
    }),
    (e.prototype.animateSlide = function (e, t) {
      var o = {},
        s = this;
      s.animateHeight(),
        !0 === s.options.rtl && !1 === s.options.vertical && (e = -e),
        !1 === s.transformsEnabled
          ? !1 === s.options.vertical
            ? s.$slideTrack.animate(
                { left: e },
                s.options.speed,
                s.options.easing,
                t
              )
            : s.$slideTrack.animate(
                { top: e },
                s.options.speed,
                s.options.easing,
                t
              )
          : !1 === s.cssTransitions
          ? (!0 === s.options.rtl && (s.currentLeft = -s.currentLeft),
            i({ animStart: s.currentLeft }).animate(
              { animStart: e },
              {
                duration: s.options.speed,
                easing: s.options.easing,
                step: function (i) {
                  (i = Math.ceil(i)),
                    !1 === s.options.vertical
                      ? ((o[s.animType] = "translate(" + i + "px, 0px)"),
                        s.$slideTrack.css(o))
                      : ((o[s.animType] = "translate(0px," + i + "px)"),
                        s.$slideTrack.css(o));
                },
                complete: function () {
                  t && t.call();
                },
              }
            ))
          : (s.applyTransition(),
            (e = Math.ceil(e)),
            !1 === s.options.vertical
              ? (o[s.animType] = "translate3d(" + e + "px, 0px, 0px)")
              : (o[s.animType] = "translate3d(0px," + e + "px, 0px)"),
            s.$slideTrack.css(o),
            t &&
              setTimeout(function () {
                s.disableTransition(), t.call();
              }, s.options.speed));
    }),
    (e.prototype.getNavTarget = function () {
      var e = this,
        t = e.options.asNavFor;
      return t && null !== t && (t = i(t).not(e.$slider)), t;
    }),
    (e.prototype.asNavFor = function (e) {
      var t = this.getNavTarget();
      null !== t &&
        "object" == typeof t &&
        t.each(function () {
          var t = i(this).slick("getSlick");
          t.unslicked || t.slideHandler(e, !0);
        });
    }),
    (e.prototype.applyTransition = function (i) {
      var e = this,
        t = {};
      !1 === e.options.fade
        ? (t[e.transitionType] =
            e.transformType + " " + e.options.speed + "ms " + e.options.cssEase)
        : (t[e.transitionType] =
            "opacity " + e.options.speed + "ms " + e.options.cssEase),
        !1 === e.options.fade ? e.$slideTrack.css(t) : e.$slides.eq(i).css(t);
    }),
    (e.prototype.autoPlay = function () {
      var i = this;
      i.autoPlayClear(),
        i.slideCount > i.options.slidesToShow &&
          (i.autoPlayTimer = setInterval(
            i.autoPlayIterator,
            i.options.autoplaySpeed
          ));
    }),
    (e.prototype.autoPlayClear = function () {
      var i = this;
      i.autoPlayTimer && clearInterval(i.autoPlayTimer);
    }),
    (e.prototype.autoPlayIterator = function () {
      var i = this,
        e = i.currentSlide + i.options.slidesToScroll;
      i.paused ||
        i.interrupted ||
        i.focussed ||
        (!1 === i.options.infinite &&
          (1 === i.direction && i.currentSlide + 1 === i.slideCount - 1
            ? (i.direction = 0)
            : 0 === i.direction &&
              ((e = i.currentSlide - i.options.slidesToScroll),
              i.currentSlide - 1 == 0 && (i.direction = 1))),
        i.slideHandler(e));
    }),
    (e.prototype.buildArrows = function () {
      var e = this;
      !0 === e.options.arrows &&
        ((e.$prevArrow = i(e.options.prevArrow).addClass("slick-arrow")),
        (e.$nextArrow = i(e.options.nextArrow).addClass("slick-arrow")),
        e.slideCount > e.options.slidesToShow
          ? (e.$prevArrow
              .removeClass("slick-hidden")
              .removeAttr("aria-hidden tabindex"),
            e.$nextArrow
              .removeClass("slick-hidden")
              .removeAttr("aria-hidden tabindex"),
            e.htmlExpr.test(e.options.prevArrow) &&
              e.$prevArrow.prependTo(e.options.appendArrows),
            e.htmlExpr.test(e.options.nextArrow) &&
              e.$nextArrow.appendTo(e.options.appendArrows),
            !0 !== e.options.infinite &&
              e.$prevArrow
                .addClass("slick-disabled")
                .attr("aria-disabled", "true"))
          : e.$prevArrow
              .add(e.$nextArrow)
              .addClass("slick-hidden")
              .attr({ "aria-disabled": "true", tabindex: "-1" }));
    }),
    (e.prototype.buildDots = function () {
      var e,
        t,
        o = this;
      if (!0 === o.options.dots) {
        for (
          o.$slider.addClass("slick-dotted"),
            t = i("<ul />").addClass(o.options.dotsClass),
            e = 0;
          e <= o.getDotCount();
          e += 1
        )
          t.append(i("<li />").append(o.options.customPaging.call(this, o, e)));
        (o.$dots = t.appendTo(o.options.appendDots)),
          o.$dots.find("li").first().addClass("slick-active");
      }
    }),
    (e.prototype.buildOut = function () {
      var e = this;
      (e.$slides = e.$slider
        .children(e.options.slide + ":not(.slick-cloned)")
        .addClass("slick-slide")),
        (e.slideCount = e.$slides.length),
        e.$slides.each(function (e, t) {
          i(t)
            .attr("data-slick-index", e)
            .data("originalStyling", i(t).attr("style") || "");
        }),
        e.$slider.addClass("slick-slider"),
        (e.$slideTrack =
          0 === e.slideCount
            ? i('<div class="slick-track"/>').appendTo(e.$slider)
            : e.$slides.wrapAll('<div class="slick-track"/>').parent()),
        (e.$list = e.$slideTrack.wrap('<div class="slick-list"/>').parent()),
        e.$slideTrack.css("opacity", 0),
        (!0 !== e.options.centerMode && !0 !== e.options.swipeToSlide) ||
          (e.options.slidesToScroll = 1),
        i("img[data-lazy]", e.$slider).not("[src]").addClass("slick-loading"),
        e.setupInfinite(),
        e.buildArrows(),
        e.buildDots(),
        e.updateDots(),
        e.setSlideClasses(
          "number" == typeof e.currentSlide ? e.currentSlide : 0
        ),
        !0 === e.options.draggable && e.$list.addClass("draggable");
    }),
    (e.prototype.buildRows = function () {
      var i,
        e,
        t,
        o,
        s,
        n,
        r,
        l = this;
      if (
        ((o = document.createDocumentFragment()),
        (n = l.$slider.children()),
        l.options.rows > 1)
      ) {
        for (
          r = l.options.slidesPerRow * l.options.rows,
            s = Math.ceil(n.length / r),
            i = 0;
          i < s;
          i++
        ) {
          var d = document.createElement("div");
          for (e = 0; e < l.options.rows; e++) {
            var a = document.createElement("div");
            for (t = 0; t < l.options.slidesPerRow; t++) {
              var c = i * r + (e * l.options.slidesPerRow + t);
              n.get(c) && a.appendChild(n.get(c));
            }
            d.appendChild(a);
          }
          o.appendChild(d);
        }
        l.$slider.empty().append(o),
          l.$slider
            .children()
            .children()
            .children()
            .css({
              width: 100 / l.options.slidesPerRow + "%",
              display: "inline-block",
            });
      }
    }),
    (e.prototype.checkResponsive = function (e, t) {
      var o,
        s,
        n,
        r = this,
        l = !1,
        d = r.$slider.width(),
        a = window.innerWidth || i(window).width();
      if (
        ("window" === r.respondTo
          ? (n = a)
          : "slider" === r.respondTo
          ? (n = d)
          : "min" === r.respondTo && (n = Math.min(a, d)),
        r.options.responsive &&
          r.options.responsive.length &&
          null !== r.options.responsive)
      ) {
        s = null;
        for (o in r.breakpoints)
          r.breakpoints.hasOwnProperty(o) &&
            (!1 === r.originalSettings.mobileFirst
              ? n < r.breakpoints[o] && (s = r.breakpoints[o])
              : n > r.breakpoints[o] && (s = r.breakpoints[o]));
        null !== s
          ? null !== r.activeBreakpoint
            ? (s !== r.activeBreakpoint || t) &&
              ((r.activeBreakpoint = s),
              "unslick" === r.breakpointSettings[s]
                ? r.unslick(s)
                : ((r.options = i.extend(
                    {},
                    r.originalSettings,
                    r.breakpointSettings[s]
                  )),
                  !0 === e && (r.currentSlide = r.options.initialSlide),
                  r.refresh(e)),
              (l = s))
            : ((r.activeBreakpoint = s),
              "unslick" === r.breakpointSettings[s]
                ? r.unslick(s)
                : ((r.options = i.extend(
                    {},
                    r.originalSettings,
                    r.breakpointSettings[s]
                  )),
                  !0 === e && (r.currentSlide = r.options.initialSlide),
                  r.refresh(e)),
              (l = s))
          : null !== r.activeBreakpoint &&
            ((r.activeBreakpoint = null),
            (r.options = r.originalSettings),
            !0 === e && (r.currentSlide = r.options.initialSlide),
            r.refresh(e),
            (l = s)),
          e || !1 === l || r.$slider.trigger("breakpoint", [r, l]);
      }
    }),
    (e.prototype.changeSlide = function (e, t) {
      var o,
        s,
        n,
        r = this,
        l = i(e.currentTarget);
      switch (
        (l.is("a") && e.preventDefault(),
        l.is("li") || (l = l.closest("li")),
        (n = r.slideCount % r.options.slidesToScroll != 0),
        (o = n
          ? 0
          : (r.slideCount - r.currentSlide) % r.options.slidesToScroll),
        e.data.message)
      ) {
        case "previous":
          (s = 0 === o ? r.options.slidesToScroll : r.options.slidesToShow - o),
            r.slideCount > r.options.slidesToShow &&
              r.slideHandler(r.currentSlide - s, !1, t);
          break;
        case "next":
          (s = 0 === o ? r.options.slidesToScroll : o),
            r.slideCount > r.options.slidesToShow &&
              r.slideHandler(r.currentSlide + s, !1, t);
          break;
        case "index":
          var d =
            0 === e.data.index
              ? 0
              : e.data.index || l.index() * r.options.slidesToScroll;
          r.slideHandler(r.checkNavigable(d), !1, t),
            l.children().trigger("focus");
          break;
        default:
          return;
      }
    }),
    (e.prototype.checkNavigable = function (i) {
      var e, t;
      if (((e = this.getNavigableIndexes()), (t = 0), i > e[e.length - 1]))
        i = e[e.length - 1];
      else
        for (var o in e) {
          if (i < e[o]) {
            i = t;
            break;
          }
          t = e[o];
        }
      return i;
    }),
    (e.prototype.cleanUpEvents = function () {
      var e = this;
      e.options.dots &&
        null !== e.$dots &&
        (i("li", e.$dots)
          .off("click.slick", e.changeSlide)
          .off("mouseenter.slick", i.proxy(e.interrupt, e, !0))
          .off("mouseleave.slick", i.proxy(e.interrupt, e, !1)),
        !0 === e.options.accessibility &&
          e.$dots.off("keydown.slick", e.keyHandler)),
        e.$slider.off("focus.slick blur.slick"),
        !0 === e.options.arrows &&
          e.slideCount > e.options.slidesToShow &&
          (e.$prevArrow && e.$prevArrow.off("click.slick", e.changeSlide),
          e.$nextArrow && e.$nextArrow.off("click.slick", e.changeSlide),
          !0 === e.options.accessibility &&
            (e.$prevArrow && e.$prevArrow.off("keydown.slick", e.keyHandler),
            e.$nextArrow && e.$nextArrow.off("keydown.slick", e.keyHandler))),
        e.$list.off("touchstart.slick mousedown.slick", e.swipeHandler),
        e.$list.off("touchmove.slick mousemove.slick", e.swipeHandler),
        e.$list.off("touchend.slick mouseup.slick", e.swipeHandler),
        e.$list.off("touchcancel.slick mouseleave.slick", e.swipeHandler),
        e.$list.off("click.slick", e.clickHandler),
        i(document).off(e.visibilityChange, e.visibility),
        e.cleanUpSlideEvents(),
        !0 === e.options.accessibility &&
          e.$list.off("keydown.slick", e.keyHandler),
        !0 === e.options.focusOnSelect &&
          i(e.$slideTrack).children().off("click.slick", e.selectHandler),
        i(window).off(
          "orientationchange.slick.slick-" + e.instanceUid,
          e.orientationChange
        ),
        i(window).off("resize.slick.slick-" + e.instanceUid, e.resize),
        i("[draggable!=true]", e.$slideTrack).off(
          "dragstart",
          e.preventDefault
        ),
        i(window).off("load.slick.slick-" + e.instanceUid, e.setPosition);
    }),
    (e.prototype.cleanUpSlideEvents = function () {
      var e = this;
      e.$list.off("mouseenter.slick", i.proxy(e.interrupt, e, !0)),
        e.$list.off("mouseleave.slick", i.proxy(e.interrupt, e, !1));
    }),
    (e.prototype.cleanUpRows = function () {
      var i,
        e = this;
      e.options.rows > 1 &&
        ((i = e.$slides.children().children()).removeAttr("style"),
        e.$slider.empty().append(i));
    }),
    (e.prototype.clickHandler = function (i) {
      !1 === this.shouldClick &&
        (i.stopImmediatePropagation(), i.stopPropagation(), i.preventDefault());
    }),
    (e.prototype.destroy = function (e) {
      var t = this;
      t.autoPlayClear(),
        (t.touchObject = {}),
        t.cleanUpEvents(),
        i(".slick-cloned", t.$slider).detach(),
        t.$dots && t.$dots.remove(),
        t.$prevArrow &&
          t.$prevArrow.length &&
          (t.$prevArrow
            .removeClass("slick-disabled slick-arrow slick-hidden")
            .removeAttr("aria-hidden aria-disabled tabindex")
            .css("display", ""),
          t.htmlExpr.test(t.options.prevArrow) && t.$prevArrow.remove()),
        t.$nextArrow &&
          t.$nextArrow.length &&
          (t.$nextArrow
            .removeClass("slick-disabled slick-arrow slick-hidden")
            .removeAttr("aria-hidden aria-disabled tabindex")
            .css("display", ""),
          t.htmlExpr.test(t.options.nextArrow) && t.$nextArrow.remove()),
        t.$slides &&
          (t.$slides
            .removeClass(
              "slick-slide slick-active slick-center slick-visible slick-current"
            )
            .removeAttr("aria-hidden")
            .removeAttr("data-slick-index")
            .each(function () {
              i(this).attr("style", i(this).data("originalStyling"));
            }),
          t.$slideTrack.children(this.options.slide).detach(),
          t.$slideTrack.detach(),
          t.$list.detach(),
          t.$slider.append(t.$slides)),
        t.cleanUpRows(),
        t.$slider.removeClass("slick-slider"),
        t.$slider.removeClass("slick-initialized"),
        t.$slider.removeClass("slick-dotted"),
        (t.unslicked = !0),
        e || t.$slider.trigger("destroy", [t]);
    }),
    (e.prototype.disableTransition = function (i) {
      var e = this,
        t = {};
      (t[e.transitionType] = ""),
        !1 === e.options.fade ? e.$slideTrack.css(t) : e.$slides.eq(i).css(t);
    }),
    (e.prototype.fadeSlide = function (i, e) {
      var t = this;
      !1 === t.cssTransitions
        ? (t.$slides.eq(i).css({ zIndex: t.options.zIndex }),
          t.$slides
            .eq(i)
            .animate({ opacity: 1 }, t.options.speed, t.options.easing, e))
        : (t.applyTransition(i),
          t.$slides.eq(i).css({ opacity: 1, zIndex: t.options.zIndex }),
          e &&
            setTimeout(function () {
              t.disableTransition(i), e.call();
            }, t.options.speed));
    }),
    (e.prototype.fadeSlideOut = function (i) {
      var e = this;
      !1 === e.cssTransitions
        ? e.$slides
            .eq(i)
            .animate(
              { opacity: 0, zIndex: e.options.zIndex - 2 },
              e.options.speed,
              e.options.easing
            )
        : (e.applyTransition(i),
          e.$slides.eq(i).css({ opacity: 0, zIndex: e.options.zIndex - 2 }));
    }),
    (e.prototype.filterSlides = e.prototype.slickFilter =
      function (i) {
        var e = this;
        null !== i &&
          ((e.$slidesCache = e.$slides),
          e.unload(),
          e.$slideTrack.children(this.options.slide).detach(),
          e.$slidesCache.filter(i).appendTo(e.$slideTrack),
          e.reinit());
      }),
    (e.prototype.focusHandler = function () {
      var e = this;
      e.$slider
        .off("focus.slick blur.slick")
        .on("focus.slick blur.slick", "*", function (t) {
          t.stopImmediatePropagation();
          var o = i(this);
          setTimeout(function () {
            e.options.pauseOnFocus &&
              ((e.focussed = o.is(":focus")), e.autoPlay());
          }, 0);
        });
    }),
    (e.prototype.getCurrent = e.prototype.slickCurrentSlide =
      function () {
        return this.currentSlide;
      }),
    (e.prototype.getDotCount = function () {
      var i = this,
        e = 0,
        t = 0,
        o = 0;
      if (!0 === i.options.infinite)
        if (i.slideCount <= i.options.slidesToShow) ++o;
        else
          for (; e < i.slideCount; )
            ++o,
              (e = t + i.options.slidesToScroll),
              (t +=
                i.options.slidesToScroll <= i.options.slidesToShow
                  ? i.options.slidesToScroll
                  : i.options.slidesToShow);
      else if (!0 === i.options.centerMode) o = i.slideCount;
      else if (i.options.asNavFor)
        for (; e < i.slideCount; )
          ++o,
            (e = t + i.options.slidesToScroll),
            (t +=
              i.options.slidesToScroll <= i.options.slidesToShow
                ? i.options.slidesToScroll
                : i.options.slidesToShow);
      else
        o =
          1 +
          Math.ceil(
            (i.slideCount - i.options.slidesToShow) / i.options.slidesToScroll
          );
      return o - 1;
    }),
    (e.prototype.getLeft = function (i) {
      var e,
        t,
        o,
        s,
        n = this,
        r = 0;
      return (
        (n.slideOffset = 0),
        (t = n.$slides.first().outerHeight(!0)),
        !0 === n.options.infinite
          ? (n.slideCount > n.options.slidesToShow &&
              ((n.slideOffset = n.slideWidth * n.options.slidesToShow * -1),
              (s = -1),
              !0 === n.options.vertical &&
                !0 === n.options.centerMode &&
                (2 === n.options.slidesToShow
                  ? (s = -1.5)
                  : 1 === n.options.slidesToShow && (s = -2)),
              (r = t * n.options.slidesToShow * s)),
            n.slideCount % n.options.slidesToScroll != 0 &&
              i + n.options.slidesToScroll > n.slideCount &&
              n.slideCount > n.options.slidesToShow &&
              (i > n.slideCount
                ? ((n.slideOffset =
                    (n.options.slidesToShow - (i - n.slideCount)) *
                    n.slideWidth *
                    -1),
                  (r = (n.options.slidesToShow - (i - n.slideCount)) * t * -1))
                : ((n.slideOffset =
                    (n.slideCount % n.options.slidesToScroll) *
                    n.slideWidth *
                    -1),
                  (r = (n.slideCount % n.options.slidesToScroll) * t * -1))))
          : i + n.options.slidesToShow > n.slideCount &&
            ((n.slideOffset =
              (i + n.options.slidesToShow - n.slideCount) * n.slideWidth),
            (r = (i + n.options.slidesToShow - n.slideCount) * t)),
        n.slideCount <= n.options.slidesToShow &&
          ((n.slideOffset = 0), (r = 0)),
        !0 === n.options.centerMode && n.slideCount <= n.options.slidesToShow
          ? (n.slideOffset =
              (n.slideWidth * Math.floor(n.options.slidesToShow)) / 2 -
              (n.slideWidth * n.slideCount) / 2)
          : !0 === n.options.centerMode && !0 === n.options.infinite
          ? (n.slideOffset +=
              n.slideWidth * Math.floor(n.options.slidesToShow / 2) -
              n.slideWidth)
          : !0 === n.options.centerMode &&
            ((n.slideOffset = 0),
            (n.slideOffset +=
              n.slideWidth * Math.floor(n.options.slidesToShow / 2))),
        (e =
          !1 === n.options.vertical
            ? i * n.slideWidth * -1 + n.slideOffset
            : i * t * -1 + r),
        !0 === n.options.variableWidth &&
          ((o =
            n.slideCount <= n.options.slidesToShow || !1 === n.options.infinite
              ? n.$slideTrack.children(".slick-slide").eq(i)
              : n.$slideTrack
                  .children(".slick-slide")
                  .eq(i + n.options.slidesToShow)),
          (e =
            !0 === n.options.rtl
              ? o[0]
                ? -1 * (n.$slideTrack.width() - o[0].offsetLeft - o.width())
                : 0
              : o[0]
              ? -1 * o[0].offsetLeft
              : 0),
          !0 === n.options.centerMode &&
            ((o =
              n.slideCount <= n.options.slidesToShow ||
              !1 === n.options.infinite
                ? n.$slideTrack.children(".slick-slide").eq(i)
                : n.$slideTrack
                    .children(".slick-slide")
                    .eq(i + n.options.slidesToShow + 1)),
            (e =
              !0 === n.options.rtl
                ? o[0]
                  ? -1 * (n.$slideTrack.width() - o[0].offsetLeft - o.width())
                  : 0
                : o[0]
                ? -1 * o[0].offsetLeft
                : 0),
            (e += (n.$list.width() - o.outerWidth()) / 2))),
        e
      );
    }),
    (e.prototype.getOption = e.prototype.slickGetOption =
      function (i) {
        return this.options[i];
      }),
    (e.prototype.getNavigableIndexes = function () {
      var i,
        e = this,
        t = 0,
        o = 0,
        s = [];
      for (
        !1 === e.options.infinite
          ? (i = e.slideCount)
          : ((t = -1 * e.options.slidesToScroll),
            (o = -1 * e.options.slidesToScroll),
            (i = 2 * e.slideCount));
        t < i;

      )
        s.push(t),
          (t = o + e.options.slidesToScroll),
          (o +=
            e.options.slidesToScroll <= e.options.slidesToShow
              ? e.options.slidesToScroll
              : e.options.slidesToShow);
      return s;
    }),
    (e.prototype.getSlick = function () {
      return this;
    }),
    (e.prototype.getSlideCount = function () {
      var e,
        t,
        o = this;
      return (
        (t =
          !0 === o.options.centerMode
            ? o.slideWidth * Math.floor(o.options.slidesToShow / 2)
            : 0),
        !0 === o.options.swipeToSlide
          ? (o.$slideTrack.find(".slick-slide").each(function (s, n) {
              if (n.offsetLeft - t + i(n).outerWidth() / 2 > -1 * o.swipeLeft)
                return (e = n), !1;
            }),
            Math.abs(i(e).attr("data-slick-index") - o.currentSlide) || 1)
          : o.options.slidesToScroll
      );
    }),
    (e.prototype.goTo = e.prototype.slickGoTo =
      function (i, e) {
        this.changeSlide({ data: { message: "index", index: parseInt(i) } }, e);
      }),
    (e.prototype.init = function (e) {
      var t = this;
      i(t.$slider).hasClass("slick-initialized") ||
        (i(t.$slider).addClass("slick-initialized"),
        t.buildRows(),
        t.buildOut(),
        t.setProps(),
        t.startLoad(),
        t.loadSlider(),
        t.initializeEvents(),
        t.updateArrows(),
        t.updateDots(),
        t.checkResponsive(!0),
        t.focusHandler()),
        e && t.$slider.trigger("init", [t]),
        !0 === t.options.accessibility && t.initADA(),
        t.options.autoplay && ((t.paused = !1), t.autoPlay());
    }),
    (e.prototype.initADA = function () {
      var e = this,
        t = Math.ceil(e.slideCount / e.options.slidesToShow),
        o = e.getNavigableIndexes().filter(function (i) {
          return i >= 0 && i < e.slideCount;
        });
      e.$slides
        .add(e.$slideTrack.find(".slick-cloned"))
        .attr({ "aria-hidden": "true", tabindex: "-1" })
        .find("a, input, button, select")
        .attr({ tabindex: "-1" }),
        null !== e.$dots &&
          (e.$slides
            .not(e.$slideTrack.find(".slick-cloned"))
            .each(function (t) {
              var s = o.indexOf(t);
              i(this).attr({
                role: "tabpanel",
                id: "slick-slide" + e.instanceUid + t,
                tabindex: -1,
              }),
                -1 !== s &&
                  i(this).attr({
                    "aria-describedby":
                      "slick-slide-control" + e.instanceUid + s,
                  });
            }),
          e.$dots
            .attr("role", "tablist")
            .find("li")
            .each(function (s) {
              var n = o[s];
              i(this).attr({ role: "presentation" }),
                i(this)
                  .find("button")
                  .first()
                  .attr({
                    role: "tab",
                    id: "slick-slide-control" + e.instanceUid + s,
                    "aria-controls": "slick-slide" + e.instanceUid + n,
                    "aria-label": s + 1 + " of " + t,
                    "aria-selected": null,
                    tabindex: "-1",
                  });
            })
            .eq(e.currentSlide)
            .find("button")
            .attr({ "aria-selected": "true", tabindex: "0" })
            .end());
      for (var s = e.currentSlide, n = s + e.options.slidesToShow; s < n; s++)
        e.$slides.eq(s).attr("tabindex", 0);
      e.activateADA();
    }),
    (e.prototype.initArrowEvents = function () {
      var i = this;
      !0 === i.options.arrows &&
        i.slideCount > i.options.slidesToShow &&
        (i.$prevArrow
          .off("click.slick")
          .on("click.slick", { message: "previous" }, i.changeSlide),
        i.$nextArrow
          .off("click.slick")
          .on("click.slick", { message: "next" }, i.changeSlide),
        !0 === i.options.accessibility &&
          (i.$prevArrow.on("keydown.slick", i.keyHandler),
          i.$nextArrow.on("keydown.slick", i.keyHandler)));
    }),
    (e.prototype.initDotEvents = function () {
      var e = this;
      !0 === e.options.dots &&
        (i("li", e.$dots).on(
          "click.slick",
          { message: "index" },
          e.changeSlide
        ),
        !0 === e.options.accessibility &&
          e.$dots.on("keydown.slick", e.keyHandler)),
        !0 === e.options.dots &&
          !0 === e.options.pauseOnDotsHover &&
          i("li", e.$dots)
            .on("mouseenter.slick", i.proxy(e.interrupt, e, !0))
            .on("mouseleave.slick", i.proxy(e.interrupt, e, !1));
    }),
    (e.prototype.initSlideEvents = function () {
      var e = this;
      e.options.pauseOnHover &&
        (e.$list.on("mouseenter.slick", i.proxy(e.interrupt, e, !0)),
        e.$list.on("mouseleave.slick", i.proxy(e.interrupt, e, !1)));
    }),
    (e.prototype.initializeEvents = function () {
      var e = this;
      e.initArrowEvents(),
        e.initDotEvents(),
        e.initSlideEvents(),
        e.$list.on(
          "touchstart.slick mousedown.slick",
          { action: "start" },
          e.swipeHandler
        ),
        e.$list.on(
          "touchmove.slick mousemove.slick",
          { action: "move" },
          e.swipeHandler
        ),
        e.$list.on(
          "touchend.slick mouseup.slick",
          { action: "end" },
          e.swipeHandler
        ),
        e.$list.on(
          "touchcancel.slick mouseleave.slick",
          { action: "end" },
          e.swipeHandler
        ),
        e.$list.on("click.slick", e.clickHandler),
        i(document).on(e.visibilityChange, i.proxy(e.visibility, e)),
        !0 === e.options.accessibility &&
          e.$list.on("keydown.slick", e.keyHandler),
        !0 === e.options.focusOnSelect &&
          i(e.$slideTrack).children().on("click.slick", e.selectHandler),
        i(window).on(
          "orientationchange.slick.slick-" + e.instanceUid,
          i.proxy(e.orientationChange, e)
        ),
        i(window).on(
          "resize.slick.slick-" + e.instanceUid,
          i.proxy(e.resize, e)
        ),
        i("[draggable!=true]", e.$slideTrack).on("dragstart", e.preventDefault),
        i(window).on("load.slick.slick-" + e.instanceUid, e.setPosition),
        i(e.setPosition);
    }),
    (e.prototype.initUI = function () {
      var i = this;
      !0 === i.options.arrows &&
        i.slideCount > i.options.slidesToShow &&
        (i.$prevArrow.show(), i.$nextArrow.show()),
        !0 === i.options.dots &&
          i.slideCount > i.options.slidesToShow &&
          i.$dots.show();
    }),
    (e.prototype.keyHandler = function (i) {
      var e = this;
      i.target.tagName.match("TEXTAREA|INPUT|SELECT") ||
        (37 === i.keyCode && !0 === e.options.accessibility
          ? e.changeSlide({
              data: { message: !0 === e.options.rtl ? "next" : "previous" },
            })
          : 39 === i.keyCode &&
            !0 === e.options.accessibility &&
            e.changeSlide({
              data: { message: !0 === e.options.rtl ? "previous" : "next" },
            }));
    }),
    (e.prototype.lazyLoad = function () {
      function e(e) {
        i("img[data-lazy]", e).each(function () {
          var e = i(this),
            t = i(this).attr("data-lazy"),
            o = i(this).attr("data-srcset"),
            s = i(this).attr("data-sizes") || n.$slider.attr("data-sizes"),
            r = document.createElement("img");
          (r.onload = function () {
            e.animate({ opacity: 0 }, 100, function () {
              o && (e.attr("srcset", o), s && e.attr("sizes", s)),
                e.attr("src", t).animate({ opacity: 1 }, 200, function () {
                  e.removeAttr("data-lazy data-srcset data-sizes").removeClass(
                    "slick-loading"
                  );
                }),
                n.$slider.trigger("lazyLoaded", [n, e, t]);
            });
          }),
            (r.onerror = function () {
              e
                .removeAttr("data-lazy")
                .removeClass("slick-loading")
                .addClass("slick-lazyload-error"),
                n.$slider.trigger("lazyLoadError", [n, e, t]);
            }),
            (r.src = t);
        });
      }
      var t,
        o,
        s,
        n = this;
      if (
        (!0 === n.options.centerMode
          ? !0 === n.options.infinite
            ? (s =
                (o = n.currentSlide + (n.options.slidesToShow / 2 + 1)) +
                n.options.slidesToShow +
                2)
            : ((o = Math.max(
                0,
                n.currentSlide - (n.options.slidesToShow / 2 + 1)
              )),
              (s = n.options.slidesToShow / 2 + 1 + 2 + n.currentSlide))
          : ((o = n.options.infinite
              ? n.options.slidesToShow + n.currentSlide
              : n.currentSlide),
            (s = Math.ceil(o + n.options.slidesToShow)),
            !0 === n.options.fade && (o > 0 && o--, s <= n.slideCount && s++)),
        (t = n.$slider.find(".slick-slide").slice(o, s)),
        "anticipated" === n.options.lazyLoad)
      )
        for (
          var r = o - 1, l = s, d = n.$slider.find(".slick-slide"), a = 0;
          a < n.options.slidesToScroll;
          a++
        )
          r < 0 && (r = n.slideCount - 1),
            (t = (t = t.add(d.eq(r))).add(d.eq(l))),
            r--,
            l++;
      e(t),
        n.slideCount <= n.options.slidesToShow
          ? e(n.$slider.find(".slick-slide"))
          : n.currentSlide >= n.slideCount - n.options.slidesToShow
          ? e(n.$slider.find(".slick-cloned").slice(0, n.options.slidesToShow))
          : 0 === n.currentSlide &&
            e(
              n.$slider.find(".slick-cloned").slice(-1 * n.options.slidesToShow)
            );
    }),
    (e.prototype.loadSlider = function () {
      var i = this;
      i.setPosition(),
        i.$slideTrack.css({ opacity: 1 }),
        i.$slider.removeClass("slick-loading"),
        i.initUI(),
        "progressive" === i.options.lazyLoad && i.progressiveLazyLoad();
    }),
    (e.prototype.next = e.prototype.slickNext =
      function () {
        this.changeSlide({ data: { message: "next" } });
      }),
    (e.prototype.orientationChange = function () {
      var i = this;
      i.checkResponsive(), i.setPosition();
    }),
    (e.prototype.pause = e.prototype.slickPause =
      function () {
        var i = this;
        i.autoPlayClear(), (i.paused = !0);
      }),
    (e.prototype.play = e.prototype.slickPlay =
      function () {
        var i = this;
        i.autoPlay(),
          (i.options.autoplay = !0),
          (i.paused = !1),
          (i.focussed = !1),
          (i.interrupted = !1);
      }),
    (e.prototype.postSlide = function (e) {
      var t = this;
      t.unslicked ||
        (t.$slider.trigger("afterChange", [t, e]),
        (t.animating = !1),
        t.slideCount > t.options.slidesToShow && t.setPosition(),
        (t.swipeLeft = null),
        t.options.autoplay && t.autoPlay(),
        !0 === t.options.accessibility &&
          (t.initADA(),
          t.options.focusOnChange &&
            i(t.$slides.get(t.currentSlide)).attr("tabindex", 0).focus()));
    }),
    (e.prototype.prev = e.prototype.slickPrev =
      function () {
        this.changeSlide({ data: { message: "previous" } });
      }),
    (e.prototype.preventDefault = function (i) {
      i.preventDefault();
    }),
    (e.prototype.progressiveLazyLoad = function (e) {
      e = e || 1;
      var t,
        o,
        s,
        n,
        r,
        l = this,
        d = i("img[data-lazy]", l.$slider);
      d.length
        ? ((t = d.first()),
          (o = t.attr("data-lazy")),
          (s = t.attr("data-srcset")),
          (n = t.attr("data-sizes") || l.$slider.attr("data-sizes")),
          ((r = document.createElement("img")).onload = function () {
            s && (t.attr("srcset", s), n && t.attr("sizes", n)),
              t
                .attr("src", o)
                .removeAttr("data-lazy data-srcset data-sizes")
                .removeClass("slick-loading"),
              !0 === l.options.adaptiveHeight && l.setPosition(),
              l.$slider.trigger("lazyLoaded", [l, t, o]),
              l.progressiveLazyLoad();
          }),
          (r.onerror = function () {
            e < 3
              ? setTimeout(function () {
                  l.progressiveLazyLoad(e + 1);
                }, 500)
              : (t
                  .removeAttr("data-lazy")
                  .removeClass("slick-loading")
                  .addClass("slick-lazyload-error"),
                l.$slider.trigger("lazyLoadError", [l, t, o]),
                l.progressiveLazyLoad());
          }),
          (r.src = o))
        : l.$slider.trigger("allImagesLoaded", [l]);
    }),
    (e.prototype.refresh = function (e) {
      var t,
        o,
        s = this;
      (o = s.slideCount - s.options.slidesToShow),
        !s.options.infinite && s.currentSlide > o && (s.currentSlide = o),
        s.slideCount <= s.options.slidesToShow && (s.currentSlide = 0),
        (t = s.currentSlide),
        s.destroy(!0),
        i.extend(s, s.initials, { currentSlide: t }),
        s.init(),
        e || s.changeSlide({ data: { message: "index", index: t } }, !1);
    }),
    (e.prototype.registerBreakpoints = function () {
      var e,
        t,
        o,
        s = this,
        n = s.options.responsive || null;
      if ("array" === i.type(n) && n.length) {
        s.respondTo = s.options.respondTo || "window";
        for (e in n)
          if (((o = s.breakpoints.length - 1), n.hasOwnProperty(e))) {
            for (t = n[e].breakpoint; o >= 0; )
              s.breakpoints[o] &&
                s.breakpoints[o] === t &&
                s.breakpoints.splice(o, 1),
                o--;
            s.breakpoints.push(t), (s.breakpointSettings[t] = n[e].settings);
          }
        s.breakpoints.sort(function (i, e) {
          return s.options.mobileFirst ? i - e : e - i;
        });
      }
    }),
    (e.prototype.reinit = function () {
      var e = this;
      (e.$slides = e.$slideTrack
        .children(e.options.slide)
        .addClass("slick-slide")),
        (e.slideCount = e.$slides.length),
        e.currentSlide >= e.slideCount &&
          0 !== e.currentSlide &&
          (e.currentSlide = e.currentSlide - e.options.slidesToScroll),
        e.slideCount <= e.options.slidesToShow && (e.currentSlide = 0),
        e.registerBreakpoints(),
        e.setProps(),
        e.setupInfinite(),
        e.buildArrows(),
        e.updateArrows(),
        e.initArrowEvents(),
        e.buildDots(),
        e.updateDots(),
        e.initDotEvents(),
        e.cleanUpSlideEvents(),
        e.initSlideEvents(),
        e.checkResponsive(!1, !0),
        !0 === e.options.focusOnSelect &&
          i(e.$slideTrack).children().on("click.slick", e.selectHandler),
        e.setSlideClasses(
          "number" == typeof e.currentSlide ? e.currentSlide : 0
        ),
        e.setPosition(),
        e.focusHandler(),
        (e.paused = !e.options.autoplay),
        e.autoPlay(),
        e.$slider.trigger("reInit", [e]);
    }),
    (e.prototype.resize = function () {
      var e = this;
      i(window).width() !== e.windowWidth &&
        (clearTimeout(e.windowDelay),
        (e.windowDelay = window.setTimeout(function () {
          (e.windowWidth = i(window).width()),
            e.checkResponsive(),
            e.unslicked || e.setPosition();
        }, 50)));
    }),
    (e.prototype.removeSlide = e.prototype.slickRemove =
      function (i, e, t) {
        var o = this;
        if (
          ((i =
            "boolean" == typeof i
              ? !0 === (e = i)
                ? 0
                : o.slideCount - 1
              : !0 === e
              ? --i
              : i),
          o.slideCount < 1 || i < 0 || i > o.slideCount - 1)
        )
          return !1;
        o.unload(),
          !0 === t
            ? o.$slideTrack.children().remove()
            : o.$slideTrack.children(this.options.slide).eq(i).remove(),
          (o.$slides = o.$slideTrack.children(this.options.slide)),
          o.$slideTrack.children(this.options.slide).detach(),
          o.$slideTrack.append(o.$slides),
          (o.$slidesCache = o.$slides),
          o.reinit();
      }),
    (e.prototype.setCSS = function (i) {
      var e,
        t,
        o = this,
        s = {};
      !0 === o.options.rtl && (i = -i),
        (e = "left" == o.positionProp ? Math.ceil(i) + "px" : "0px"),
        (t = "top" == o.positionProp ? Math.ceil(i) + "px" : "0px"),
        (s[o.positionProp] = i),
        !1 === o.transformsEnabled
          ? o.$slideTrack.css(s)
          : ((s = {}),
            !1 === o.cssTransitions
              ? ((s[o.animType] = "translate(" + e + ", " + t + ")"),
                o.$slideTrack.css(s))
              : ((s[o.animType] = "translate3d(" + e + ", " + t + ", 0px)"),
                o.$slideTrack.css(s)));
    }),
    (e.prototype.setDimensions = function () {
      var i = this;
      !1 === i.options.vertical
        ? !0 === i.options.centerMode &&
          i.$list.css({ padding: "0px " + i.options.centerPadding })
        : (i.$list.height(
            i.$slides.first().outerHeight(!0) * i.options.slidesToShow
          ),
          !0 === i.options.centerMode &&
            i.$list.css({ padding: i.options.centerPadding + " 0px" })),
        (i.listWidth = i.$list.width()),
        (i.listHeight = i.$list.height()),
        !1 === i.options.vertical && !1 === i.options.variableWidth
          ? ((i.slideWidth = Math.ceil(i.listWidth / i.options.slidesToShow)),
            i.$slideTrack.width(
              Math.ceil(
                i.slideWidth * i.$slideTrack.children(".slick-slide").length
              )
            ))
          : !0 === i.options.variableWidth
          ? i.$slideTrack.width(5e3 * i.slideCount)
          : ((i.slideWidth = Math.ceil(i.listWidth)),
            i.$slideTrack.height(
              Math.ceil(
                i.$slides.first().outerHeight(!0) *
                  i.$slideTrack.children(".slick-slide").length
              )
            ));
      var e = i.$slides.first().outerWidth(!0) - i.$slides.first().width();
      !1 === i.options.variableWidth &&
        i.$slideTrack.children(".slick-slide").width(i.slideWidth - e);
    }),
    (e.prototype.setFade = function () {
      var e,
        t = this;
      t.$slides.each(function (o, s) {
        (e = t.slideWidth * o * -1),
          !0 === t.options.rtl
            ? i(s).css({
                position: "relative",
                right: e,
                top: 0,
                zIndex: t.options.zIndex - 2,
                opacity: 0,
              })
            : i(s).css({
                position: "relative",
                left: e,
                top: 0,
                zIndex: t.options.zIndex - 2,
                opacity: 0,
              });
      }),
        t.$slides
          .eq(t.currentSlide)
          .css({ zIndex: t.options.zIndex - 1, opacity: 1 });
    }),
    (e.prototype.setHeight = function () {
      var i = this;
      if (
        1 === i.options.slidesToShow &&
        !0 === i.options.adaptiveHeight &&
        !1 === i.options.vertical
      ) {
        var e = i.$slides.eq(i.currentSlide).outerHeight(!0);
        i.$list.css("height", e);
      }
    }),
    (e.prototype.setOption = e.prototype.slickSetOption =
      function () {
        var e,
          t,
          o,
          s,
          n,
          r = this,
          l = !1;
        if (
          ("object" === i.type(arguments[0])
            ? ((o = arguments[0]), (l = arguments[1]), (n = "multiple"))
            : "string" === i.type(arguments[0]) &&
              ((o = arguments[0]),
              (s = arguments[1]),
              (l = arguments[2]),
              "responsive" === arguments[0] && "array" === i.type(arguments[1])
                ? (n = "responsive")
                : void 0 !== arguments[1] && (n = "single")),
          "single" === n)
        )
          r.options[o] = s;
        else if ("multiple" === n)
          i.each(o, function (i, e) {
            r.options[i] = e;
          });
        else if ("responsive" === n)
          for (t in s)
            if ("array" !== i.type(r.options.responsive))
              r.options.responsive = [s[t]];
            else {
              for (e = r.options.responsive.length - 1; e >= 0; )
                r.options.responsive[e].breakpoint === s[t].breakpoint &&
                  r.options.responsive.splice(e, 1),
                  e--;
              r.options.responsive.push(s[t]);
            }
        l && (r.unload(), r.reinit());
      }),
    (e.prototype.setPosition = function () {
      var i = this;
      i.setDimensions(),
        i.setHeight(),
        !1 === i.options.fade
          ? i.setCSS(i.getLeft(i.currentSlide))
          : i.setFade(),
        i.$slider.trigger("setPosition", [i]);
    }),
    (e.prototype.setProps = function () {
      var i = this,
        e = document.body.style;
      (i.positionProp = !0 === i.options.vertical ? "top" : "left"),
        "top" === i.positionProp
          ? i.$slider.addClass("slick-vertical")
          : i.$slider.removeClass("slick-vertical"),
        (void 0 === e.WebkitTransition &&
          void 0 === e.MozTransition &&
          void 0 === e.msTransition) ||
          (!0 === i.options.useCSS && (i.cssTransitions = !0)),
        i.options.fade &&
          ("number" == typeof i.options.zIndex
            ? i.options.zIndex < 3 && (i.options.zIndex = 3)
            : (i.options.zIndex = i.defaults.zIndex)),
        void 0 !== e.OTransform &&
          ((i.animType = "OTransform"),
          (i.transformType = "-o-transform"),
          (i.transitionType = "OTransition"),
          void 0 === e.perspectiveProperty &&
            void 0 === e.webkitPerspective &&
            (i.animType = !1)),
        void 0 !== e.MozTransform &&
          ((i.animType = "MozTransform"),
          (i.transformType = "-moz-transform"),
          (i.transitionType = "MozTransition"),
          void 0 === e.perspectiveProperty &&
            void 0 === e.MozPerspective &&
            (i.animType = !1)),
        void 0 !== e.webkitTransform &&
          ((i.animType = "webkitTransform"),
          (i.transformType = "-webkit-transform"),
          (i.transitionType = "webkitTransition"),
          void 0 === e.perspectiveProperty &&
            void 0 === e.webkitPerspective &&
            (i.animType = !1)),
        void 0 !== e.msTransform &&
          ((i.animType = "msTransform"),
          (i.transformType = "-ms-transform"),
          (i.transitionType = "msTransition"),
          void 0 === e.msTransform && (i.animType = !1)),
        void 0 !== e.transform &&
          !1 !== i.animType &&
          ((i.animType = "transform"),
          (i.transformType = "transform"),
          (i.transitionType = "transition")),
        (i.transformsEnabled =
          i.options.useTransform && null !== i.animType && !1 !== i.animType);
    }),
    (e.prototype.setSlideClasses = function (i) {
      var e,
        t,
        o,
        s,
        n = this;
      if (
        ((t = n.$slider
          .find(".slick-slide")
          .removeClass("slick-active slick-center slick-current")
          .attr("aria-hidden", "true")),
        n.$slides.eq(i).addClass("slick-current"),
        !0 === n.options.centerMode)
      ) {
        var r = n.options.slidesToShow % 2 == 0 ? 1 : 0;
        (e = Math.floor(n.options.slidesToShow / 2)),
          !0 === n.options.infinite &&
            (i >= e && i <= n.slideCount - 1 - e
              ? n.$slides
                  .slice(i - e + r, i + e + 1)
                  .addClass("slick-active")
                  .attr("aria-hidden", "false")
              : ((o = n.options.slidesToShow + i),
                t
                  .slice(o - e + 1 + r, o + e + 2)
                  .addClass("slick-active")
                  .attr("aria-hidden", "false")),
            0 === i
              ? t
                  .eq(t.length - 1 - n.options.slidesToShow)
                  .addClass("slick-center")
              : i === n.slideCount - 1 &&
                t.eq(n.options.slidesToShow).addClass("slick-center")),
          n.$slides.eq(i).addClass("slick-center");
      } else
        i >= 0 && i <= n.slideCount - n.options.slidesToShow
          ? n.$slides
              .slice(i, i + n.options.slidesToShow)
              .addClass("slick-active")
              .attr("aria-hidden", "false")
          : t.length <= n.options.slidesToShow
          ? t.addClass("slick-active").attr("aria-hidden", "false")
          : ((s = n.slideCount % n.options.slidesToShow),
            (o = !0 === n.options.infinite ? n.options.slidesToShow + i : i),
            n.options.slidesToShow == n.options.slidesToScroll &&
            n.slideCount - i < n.options.slidesToShow
              ? t
                  .slice(o - (n.options.slidesToShow - s), o + s)
                  .addClass("slick-active")
                  .attr("aria-hidden", "false")
              : t
                  .slice(o, o + n.options.slidesToShow)
                  .addClass("slick-active")
                  .attr("aria-hidden", "false"));
      ("ondemand" !== n.options.lazyLoad &&
        "anticipated" !== n.options.lazyLoad) ||
        n.lazyLoad();
    }),
    (e.prototype.setupInfinite = function () {
      var e,
        t,
        o,
        s = this;
      if (
        (!0 === s.options.fade && (s.options.centerMode = !1),
        !0 === s.options.infinite &&
          !1 === s.options.fade &&
          ((t = null), s.slideCount > s.options.slidesToShow))
      ) {
        for (
          o =
            !0 === s.options.centerMode
              ? s.options.slidesToShow + 1
              : s.options.slidesToShow,
            e = s.slideCount;
          e > s.slideCount - o;
          e -= 1
        )
          (t = e - 1),
            i(s.$slides[t])
              .clone(!0)
              .attr("id", "")
              .attr("data-slick-index", t - s.slideCount)
              .prependTo(s.$slideTrack)
              .addClass("slick-cloned");
        for (e = 0; e < o + s.slideCount; e += 1)
          (t = e),
            i(s.$slides[t])
              .clone(!0)
              .attr("id", "")
              .attr("data-slick-index", t + s.slideCount)
              .appendTo(s.$slideTrack)
              .addClass("slick-cloned");
        s.$slideTrack
          .find(".slick-cloned")
          .find("[id]")
          .each(function () {
            i(this).attr("id", "");
          });
      }
    }),
    (e.prototype.interrupt = function (i) {
      var e = this;
      i || e.autoPlay(), (e.interrupted = i);
    }),
    (e.prototype.selectHandler = function (e) {
      var t = this,
        o = i(e.target).is(".slick-slide")
          ? i(e.target)
          : i(e.target).parents(".slick-slide"),
        s = parseInt(o.attr("data-slick-index"));
      s || (s = 0),
        t.slideCount <= t.options.slidesToShow
          ? t.slideHandler(s, !1, !0)
          : t.slideHandler(s);
    }),
    (e.prototype.slideHandler = function (i, e, t) {
      var o,
        s,
        n,
        r,
        l,
        d = null,
        a = this;
      if (
        ((e = e || !1),
        !(
          (!0 === a.animating && !0 === a.options.waitForAnimate) ||
          (!0 === a.options.fade && a.currentSlide === i)
        ))
      )
        if (
          (!1 === e && a.asNavFor(i),
          (o = i),
          (d = a.getLeft(o)),
          (r = a.getLeft(a.currentSlide)),
          (a.currentLeft = null === a.swipeLeft ? r : a.swipeLeft),
          !1 === a.options.infinite &&
            !1 === a.options.centerMode &&
            (i < 0 || i > a.getDotCount() * a.options.slidesToScroll))
        )
          !1 === a.options.fade &&
            ((o = a.currentSlide),
            !0 !== t
              ? a.animateSlide(r, function () {
                  a.postSlide(o);
                })
              : a.postSlide(o));
        else if (
          !1 === a.options.infinite &&
          !0 === a.options.centerMode &&
          (i < 0 || i > a.slideCount - a.options.slidesToScroll)
        )
          !1 === a.options.fade &&
            ((o = a.currentSlide),
            !0 !== t
              ? a.animateSlide(r, function () {
                  a.postSlide(o);
                })
              : a.postSlide(o));
        else {
          if (
            (a.options.autoplay && clearInterval(a.autoPlayTimer),
            (s =
              o < 0
                ? a.slideCount % a.options.slidesToScroll != 0
                  ? a.slideCount - (a.slideCount % a.options.slidesToScroll)
                  : a.slideCount + o
                : o >= a.slideCount
                ? a.slideCount % a.options.slidesToScroll != 0
                  ? 0
                  : o - a.slideCount
                : o),
            (a.animating = !0),
            a.$slider.trigger("beforeChange", [a, a.currentSlide, s]),
            (n = a.currentSlide),
            (a.currentSlide = s),
            a.setSlideClasses(a.currentSlide),
            a.options.asNavFor &&
              (l = (l = a.getNavTarget()).slick("getSlick")).slideCount <=
                l.options.slidesToShow &&
              l.setSlideClasses(a.currentSlide),
            a.updateDots(),
            a.updateArrows(),
            !0 === a.options.fade)
          )
            return (
              !0 !== t
                ? (a.fadeSlideOut(n),
                  a.fadeSlide(s, function () {
                    a.postSlide(s);
                  }))
                : a.postSlide(s),
              void a.animateHeight()
            );
          !0 !== t
            ? a.animateSlide(d, function () {
                a.postSlide(s);
              })
            : a.postSlide(s);
        }
    }),
    (e.prototype.startLoad = function () {
      var i = this;
      !0 === i.options.arrows &&
        i.slideCount > i.options.slidesToShow &&
        (i.$prevArrow.hide(), i.$nextArrow.hide()),
        !0 === i.options.dots &&
          i.slideCount > i.options.slidesToShow &&
          i.$dots.hide(),
        i.$slider.addClass("slick-loading");
    }),
    (e.prototype.swipeDirection = function () {
      var i,
        e,
        t,
        o,
        s = this;
      return (
        (i = s.touchObject.startX - s.touchObject.curX),
        (e = s.touchObject.startY - s.touchObject.curY),
        (t = Math.atan2(e, i)),
        (o = Math.round((180 * t) / Math.PI)) < 0 && (o = 360 - Math.abs(o)),
        o <= 45 && o >= 0
          ? !1 === s.options.rtl
            ? "left"
            : "right"
          : o <= 360 && o >= 315
          ? !1 === s.options.rtl
            ? "left"
            : "right"
          : o >= 135 && o <= 225
          ? !1 === s.options.rtl
            ? "right"
            : "left"
          : !0 === s.options.verticalSwiping
          ? o >= 35 && o <= 135
            ? "down"
            : "up"
          : "vertical"
      );
    }),
    (e.prototype.swipeEnd = function (i) {
      var e,
        t,
        o = this;
      if (((o.dragging = !1), (o.swiping = !1), o.scrolling))
        return (o.scrolling = !1), !1;
      if (
        ((o.interrupted = !1),
        (o.shouldClick = !(o.touchObject.swipeLength > 10)),
        void 0 === o.touchObject.curX)
      )
        return !1;
      if (
        (!0 === o.touchObject.edgeHit &&
          o.$slider.trigger("edge", [o, o.swipeDirection()]),
        o.touchObject.swipeLength >= o.touchObject.minSwipe)
      ) {
        switch ((t = o.swipeDirection())) {
          case "left":
          case "down":
            (e = o.options.swipeToSlide
              ? o.checkNavigable(o.currentSlide + o.getSlideCount())
              : o.currentSlide + o.getSlideCount()),
              (o.currentDirection = 0);
            break;
          case "right":
          case "up":
            (e = o.options.swipeToSlide
              ? o.checkNavigable(o.currentSlide - o.getSlideCount())
              : o.currentSlide - o.getSlideCount()),
              (o.currentDirection = 1);
        }
        "vertical" != t &&
          (o.slideHandler(e),
          (o.touchObject = {}),
          o.$slider.trigger("swipe", [o, t]));
      } else
        o.touchObject.startX !== o.touchObject.curX &&
          (o.slideHandler(o.currentSlide), (o.touchObject = {}));
    }),
    (e.prototype.swipeHandler = function (i) {
      var e = this;
      if (
        !(
          !1 === e.options.swipe ||
          ("ontouchend" in document && !1 === e.options.swipe) ||
          (!1 === e.options.draggable && -1 !== i.type.indexOf("mouse"))
        )
      )
        switch (
          ((e.touchObject.fingerCount =
            i.originalEvent && void 0 !== i.originalEvent.touches
              ? i.originalEvent.touches.length
              : 1),
          (e.touchObject.minSwipe = e.listWidth / e.options.touchThreshold),
          !0 === e.options.verticalSwiping &&
            (e.touchObject.minSwipe = e.listHeight / e.options.touchThreshold),
          i.data.action)
        ) {
          case "start":
            e.swipeStart(i);
            break;
          case "move":
            e.swipeMove(i);
            break;
          case "end":
            e.swipeEnd(i);
        }
    }),
    (e.prototype.swipeMove = function (i) {
      var e,
        t,
        o,
        s,
        n,
        r,
        l = this;
      return (
        (n = void 0 !== i.originalEvent ? i.originalEvent.touches : null),
        !(!l.dragging || l.scrolling || (n && 1 !== n.length)) &&
          ((e = l.getLeft(l.currentSlide)),
          (l.touchObject.curX = void 0 !== n ? n[0].pageX : i.clientX),
          (l.touchObject.curY = void 0 !== n ? n[0].pageY : i.clientY),
          (l.touchObject.swipeLength = Math.round(
            Math.sqrt(Math.pow(l.touchObject.curX - l.touchObject.startX, 2))
          )),
          (r = Math.round(
            Math.sqrt(Math.pow(l.touchObject.curY - l.touchObject.startY, 2))
          )),
          !l.options.verticalSwiping && !l.swiping && r > 4
            ? ((l.scrolling = !0), !1)
            : (!0 === l.options.verticalSwiping &&
                (l.touchObject.swipeLength = r),
              (t = l.swipeDirection()),
              void 0 !== i.originalEvent &&
                l.touchObject.swipeLength > 4 &&
                ((l.swiping = !0), i.preventDefault()),
              (s =
                (!1 === l.options.rtl ? 1 : -1) *
                (l.touchObject.curX > l.touchObject.startX ? 1 : -1)),
              !0 === l.options.verticalSwiping &&
                (s = l.touchObject.curY > l.touchObject.startY ? 1 : -1),
              (o = l.touchObject.swipeLength),
              (l.touchObject.edgeHit = !1),
              !1 === l.options.infinite &&
                ((0 === l.currentSlide && "right" === t) ||
                  (l.currentSlide >= l.getDotCount() && "left" === t)) &&
                ((o = l.touchObject.swipeLength * l.options.edgeFriction),
                (l.touchObject.edgeHit = !0)),
              !1 === l.options.vertical
                ? (l.swipeLeft = e + o * s)
                : (l.swipeLeft = e + o * (l.$list.height() / l.listWidth) * s),
              !0 === l.options.verticalSwiping && (l.swipeLeft = e + o * s),
              !0 !== l.options.fade &&
                !1 !== l.options.touchMove &&
                (!0 === l.animating
                  ? ((l.swipeLeft = null), !1)
                  : void l.setCSS(l.swipeLeft))))
      );
    }),
    (e.prototype.swipeStart = function (i) {
      var e,
        t = this;
      if (
        ((t.interrupted = !0),
        1 !== t.touchObject.fingerCount ||
          t.slideCount <= t.options.slidesToShow)
      )
        return (t.touchObject = {}), !1;
      void 0 !== i.originalEvent &&
        void 0 !== i.originalEvent.touches &&
        (e = i.originalEvent.touches[0]),
        (t.touchObject.startX = t.touchObject.curX =
          void 0 !== e ? e.pageX : i.clientX),
        (t.touchObject.startY = t.touchObject.curY =
          void 0 !== e ? e.pageY : i.clientY),
        (t.dragging = !0);
    }),
    (e.prototype.unfilterSlides = e.prototype.slickUnfilter =
      function () {
        var i = this;
        null !== i.$slidesCache &&
          (i.unload(),
          i.$slideTrack.children(this.options.slide).detach(),
          i.$slidesCache.appendTo(i.$slideTrack),
          i.reinit());
      }),
    (e.prototype.unload = function () {
      var e = this;
      i(".slick-cloned", e.$slider).remove(),
        e.$dots && e.$dots.remove(),
        e.$prevArrow &&
          e.htmlExpr.test(e.options.prevArrow) &&
          e.$prevArrow.remove(),
        e.$nextArrow &&
          e.htmlExpr.test(e.options.nextArrow) &&
          e.$nextArrow.remove(),
        e.$slides
          .removeClass("slick-slide slick-active slick-visible slick-current")
          .attr("aria-hidden", "true")
          .css("width", "");
    }),
    (e.prototype.unslick = function (i) {
      var e = this;
      e.$slider.trigger("unslick", [e, i]), e.destroy();
    }),
    (e.prototype.updateArrows = function () {
      var i = this;
      Math.floor(i.options.slidesToShow / 2),
        !0 === i.options.arrows &&
          i.slideCount > i.options.slidesToShow &&
          !i.options.infinite &&
          (i.$prevArrow
            .removeClass("slick-disabled")
            .attr("aria-disabled", "false"),
          i.$nextArrow
            .removeClass("slick-disabled")
            .attr("aria-disabled", "false"),
          0 === i.currentSlide
            ? (i.$prevArrow
                .addClass("slick-disabled")
                .attr("aria-disabled", "true"),
              i.$nextArrow
                .removeClass("slick-disabled")
                .attr("aria-disabled", "false"))
            : i.currentSlide >= i.slideCount - i.options.slidesToShow &&
              !1 === i.options.centerMode
            ? (i.$nextArrow
                .addClass("slick-disabled")
                .attr("aria-disabled", "true"),
              i.$prevArrow
                .removeClass("slick-disabled")
                .attr("aria-disabled", "false"))
            : i.currentSlide >= i.slideCount - 1 &&
              !0 === i.options.centerMode &&
              (i.$nextArrow
                .addClass("slick-disabled")
                .attr("aria-disabled", "true"),
              i.$prevArrow
                .removeClass("slick-disabled")
                .attr("aria-disabled", "false")));
    }),
    (e.prototype.updateDots = function () {
      var i = this;
      null !== i.$dots &&
        (i.$dots.find("li").removeClass("slick-active").end(),
        i.$dots
          .find("li")
          .eq(Math.floor(i.currentSlide / i.options.slidesToScroll))
          .addClass("slick-active"));
    }),
    (e.prototype.visibility = function () {
      var i = this;
      i.options.autoplay &&
        (document[i.hidden] ? (i.interrupted = !0) : (i.interrupted = !1));
    }),
    (i.fn.slick = function () {
      var i,
        t,
        o = this,
        s = arguments[0],
        n = Array.prototype.slice.call(arguments, 1),
        r = o.length;
      for (i = 0; i < r; i++)
        if (
          ("object" == typeof s || void 0 === s
            ? (o[i].slick = new e(o[i], s))
            : (t = o[i].slick[s].apply(o[i].slick, n)),
          void 0 !== t)
        )
          return t;
      return o;
    });
});
var _extends =
    Object.assign ||
    function (t) {
      for (var e = 1; e < arguments.length; e++) {
        var n = arguments[e];
        for (var o in n)
          Object.prototype.hasOwnProperty.call(n, o) && (t[o] = n[o]);
      }
      return t;
    },
  _typeof =
    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
      ? function (t) {
          return typeof t;
        }
      : function (t) {
          return t &&
            "function" == typeof Symbol &&
            t.constructor === Symbol &&
            t !== Symbol.prototype
            ? "symbol"
            : typeof t;
        };
!(function (t, e) {
  "object" ===
    ("undefined" == typeof exports ? "undefined" : _typeof(exports)) &&
  "undefined" != typeof module
    ? (module.exports = e())
    : "function" == typeof define && define.amd
    ? define(e)
    : (t.LazyLoad = e());
})(this, function () {
  "use strict";
  function t(t, e, n) {
    var o = e._settings;
    (!n && i(t)) ||
      (C(o.callback_enter, t),
      R.indexOf(t.tagName) > -1 && (N(t, e), I(t, o.class_loading)),
      E(t, e),
      a(t),
      C(o.callback_set, t));
  }
  var e = {
      elements_selector: "img",
      container: document,
      threshold: 300,
      thresholds: null,
      data_src: "src",
      data_srcset: "srcset",
      data_sizes: "sizes",
      data_bg: "bg",
      class_loading: "loading",
      class_loaded: "loaded",
      class_error: "error",
      load_delay: 0,
      callback_load: null,
      callback_error: null,
      callback_set: null,
      callback_enter: null,
      callback_finish: null,
      to_webp: !1,
    },
    n = function (t) {
      return _extends({}, e, t);
    },
    o = function (t, e) {
      return t.getAttribute("data-" + e);
    },
    r = function (t, e, n) {
      var o = "data-" + e;
      null !== n ? t.setAttribute(o, n) : t.removeAttribute(o);
    },
    a = function (t) {
      return r(t, "was-processed", "true");
    },
    i = function (t) {
      return "true" === o(t, "was-processed");
    },
    s = function (t, e) {
      return r(t, "ll-timeout", e);
    },
    c = function (t) {
      return o(t, "ll-timeout");
    },
    l = function (t) {
      return t.filter(function (t) {
        return !i(t);
      });
    },
    u = function (t, e) {
      return t.filter(function (t) {
        return t !== e;
      });
    },
    d = function (t, e) {
      var n,
        o = new t(e);
      try {
        n = new CustomEvent("LazyLoad::Initialized", {
          detail: { instance: o },
        });
      } catch (t) {
        (n = document.createEvent("CustomEvent")).initCustomEvent(
          "LazyLoad::Initialized",
          !1,
          !1,
          { instance: o }
        );
      }
      window.dispatchEvent(n);
    },
    f = function (t, e) {
      return e ? t.replace(/\.(jpe?g|png)/gi, ".webp") : t;
    },
    _ = "undefined" != typeof window,
    v =
      (_ && !("onscroll" in window)) ||
      /(gle|ing|ro)bot|crawl|spider/i.test(navigator.userAgent),
    g = _ && "IntersectionObserver" in window,
    h = _ && "classList" in document.createElement("p"),
    b =
      _ &&
      (function () {
        var t = document.createElement("canvas");
        return (
          !(!t.getContext || !t.getContext("2d")) &&
          0 === t.toDataURL("image/webp").indexOf("data:image/webp")
        );
      })(),
    m = function (t, e, n, r) {
      for (var a, i = 0; (a = t.children[i]); i += 1)
        if ("SOURCE" === a.tagName) {
          var s = o(a, n);
          p(a, e, s, r);
        }
    },
    p = function (t, e, n, o) {
      n && t.setAttribute(e, f(n, o));
    },
    y = function (t, e) {
      var n = b && e.to_webp,
        r = o(t, e.data_src),
        a = o(t, e.data_bg);
      if (r) {
        var i = f(r, n);
        t.style.backgroundImage = 'url("' + i + '")';
      }
      if (a) {
        var s = f(a, n);
        t.style.backgroundImage = s;
      }
    },
    w = {
      IMG: function (t, e) {
        var n = b && e.to_webp,
          r = e.data_srcset,
          a = t.parentNode;
        a && "PICTURE" === a.tagName && m(a, "srcset", r, n);
        var i = o(t, e.data_sizes);
        p(t, "sizes", i);
        var s = o(t, r);
        p(t, "srcset", s, n);
        var c = o(t, e.data_src);
        p(t, "src", c, n);
      },
      IFRAME: function (t, e) {
        var n = o(t, e.data_src);
        p(t, "src", n);
      },
      VIDEO: function (t, e) {
        var n = e.data_src,
          r = o(t, n);
        m(t, "src", n), p(t, "src", r), t.load();
      },
    },
    E = function (t, e) {
      var n = e._settings,
        o = t.tagName,
        r = w[o];
      if (r)
        return (
          r(t, n),
          e._updateLoadingCount(1),
          void (e._elements = u(e._elements, t))
        );
      y(t, n);
    },
    I = function (t, e) {
      h ? t.classList.add(e) : (t.className += (t.className ? " " : "") + e);
    },
    L = function (t, e) {
      h
        ? t.classList.remove(e)
        : (t.className = t.className
            .replace(new RegExp("(^|\\s+)" + e + "(\\s+|$)"), " ")
            .replace(/^\s+/, "")
            .replace(/\s+$/, ""));
    },
    C = function (t, e) {
      t && t(e);
    },
    O = function (t, e, n) {
      t.addEventListener(e, n);
    },
    k = function (t, e, n) {
      t.removeEventListener(e, n);
    },
    x = function (t, e, n) {
      O(t, "load", e), O(t, "loadeddata", e), O(t, "error", n);
    },
    A = function (t, e, n) {
      k(t, "load", e), k(t, "loadeddata", e), k(t, "error", n);
    },
    z = function (t, e, n) {
      var o = n._settings,
        r = e ? o.class_loaded : o.class_error,
        a = e ? o.callback_load : o.callback_error,
        i = t.target;
      L(i, o.class_loading), I(i, r), C(a, i), n._updateLoadingCount(-1);
    },
    N = function (t, e) {
      var n = function n(r) {
          z(r, !0, e), A(t, n, o);
        },
        o = function o(r) {
          z(r, !1, e), A(t, n, o);
        };
      x(t, n, o);
    },
    R = ["IMG", "IFRAME", "VIDEO"],
    S = function (e, n, o) {
      t(e, o), n.unobserve(e);
    },
    M = function (t) {
      var e = c(t);
      e && (clearTimeout(e), s(t, null));
    },
    j = function (t, e, n) {
      var o = n._settings.load_delay,
        r = c(t);
      r ||
        ((r = setTimeout(function () {
          S(t, e, n), M(t);
        }, o)),
        s(t, r));
    },
    D = function (t) {
      return t.isIntersecting || t.intersectionRatio > 0;
    },
    T = function (t) {
      return {
        root: t.container === document ? null : t.container,
        rootMargin: t.thresholds || t.threshold + "px",
      };
    },
    U = function (t, e) {
      (this._settings = n(t)),
        this._setObserver(),
        (this._loadingCount = 0),
        this.update(e);
    };
  return (
    (U.prototype = {
      _manageIntersection: function (t) {
        var e = this._observer,
          n = this._settings.load_delay,
          o = t.target;
        n ? (D(t) ? j(o, e, this) : M(o)) : D(t) && S(o, e, this);
      },
      _onIntersection: function (t) {
        t.forEach(this._manageIntersection.bind(this));
      },
      _setObserver: function () {
        g &&
          (this._observer = new IntersectionObserver(
            this._onIntersection.bind(this),
            T(this._settings)
          ));
      },
      _updateLoadingCount: function (t) {
        (this._loadingCount += t),
          0 === this._elements.length &&
            0 === this._loadingCount &&
            C(this._settings.callback_finish);
      },
      update: function (t) {
        var e = this,
          n = this._settings,
          o = t || n.container.querySelectorAll(n.elements_selector);
        (this._elements = l(Array.prototype.slice.call(o))),
          !v && this._observer
            ? this._elements.forEach(function (t) {
                e._observer.observe(t);
              })
            : this.loadAll();
      },
      destroy: function () {
        var t = this;
        this._observer &&
          (this._elements.forEach(function (e) {
            t._observer.unobserve(e);
          }),
          (this._observer = null)),
          (this._elements = null),
          (this._settings = null);
      },
      load: function (e, n) {
        t(e, this, n);
      },
      loadAll: function () {
        var t = this;
        this._elements.forEach(function (e) {
          t.load(e);
        });
      },
    }),
    _ &&
      (function (t, e) {
        if (e)
          if (e.length) for (var n, o = 0; (n = e[o]); o += 1) d(t, n);
          else d(t, e);
      })(U, window.lazyLoadOptions),
    U
  );
});
function _0x5bd6() {
  const _0x376f1f = [
    "create",
    "29292admuSB",
    "1584niMKvR",
    "5645zkWNJI",
    "length",
    "decrypt",
    "Utf8",
    "encrypt",
    "4380456rFzWDa",
    "583452hBKHTk",
    "Hex",
    "8mIEaTv",
    "assets",
    "EKxtcg46V",
    "lib",
    "enc",
    "stringify",
    "AES",
    "2090568XUAZcM",
    "7KyAJgE",
    "test",
    "1542jUvonn",
    "3944LrtJSB",
    "toString",
    "24280tQdyJf",
    "slice",
    "9218fhfttU",
    "assets2",
    "salt",
    "Pls\x20try\x20again.",
    "parse",
    "Base64",
    "fromCharCode",
  ];
  _0x5bd6 = function () {
    return _0x376f1f;
  };
  return _0x5bd6();
}
function _0x2fe8(_0x32da26, _0x1338e4) {
  const _0x5bd682 = _0x5bd6();
  return (
    (_0x2fe8 = function (_0x2fe8d9, _0x2547a0) {
      _0x2fe8d9 = _0x2fe8d9 - 0x7a;
      let _0xa0aeb7 = _0x5bd682[_0x2fe8d9];
      return _0xa0aeb7;
    }),
    _0x2fe8(_0x32da26, _0x1338e4)
  );
}
(function (_0x13467a, _0x4cc522) {
  const _0x54e15f = _0x2fe8,
    _0x4d326b = _0x13467a();
  while (!![]) {
    try {
      const _0x33747a =
        (-parseInt(_0x54e15f(0x85)) / 0x1) * (parseInt(_0x54e15f(0x7a)) / 0x2) +
        parseInt(_0x54e15f(0x99)) / 0x3 +
        -parseInt(_0x54e15f(0x81)) / 0x4 +
        (parseInt(_0x54e15f(0x93)) / 0x5) * (-parseInt(_0x54e15f(0x84)) / 0x6) +
        (-parseInt(_0x54e15f(0x82)) / 0x7) * (parseInt(_0x54e15f(0x98)) / 0x8) +
        (parseInt(_0x54e15f(0x92)) / 0x9) * (-parseInt(_0x54e15f(0x87)) / 0xa) +
        (parseInt(_0x54e15f(0x89)) / 0xb) * (parseInt(_0x54e15f(0x91)) / 0xc);
      if (_0x33747a === _0x4cc522) break;
      else _0x4d326b["push"](_0x4d326b["shift"]());
    } catch (_0x4ed8a2) {
      _0x4d326b["push"](_0x4d326b["shift"]());
    }
  }
})(_0x5bd6, 0x6a96a),
  (plh = {
    ft: function () {
      return {
        stringify: function (_0x2731ca) {
          const _0x1d24a9 = _0x2fe8,
            _0x7fd5a5 = {
              ct: _0x2731ca["ciphertext"][_0x1d24a9(0x86)](
                CryptoJS[_0x1d24a9(0x7e)][_0x1d24a9(0x8e)]
              ),
            };
          return (
            _0x2731ca["iv"] &&
              (_0x7fd5a5["iv"] = _0x2731ca["iv"]["toString"](
                CryptoJS[_0x1d24a9(0x7e)][_0x1d24a9(0x9a)]
              )),
            _0x2731ca[_0x1d24a9(0x8b)] &&
              (_0x7fd5a5["s"] = _0x2731ca[_0x1d24a9(0x8b)][_0x1d24a9(0x86)](
                CryptoJS[_0x1d24a9(0x7e)]["Hex"]
              )),
            JSON[_0x1d24a9(0x7f)](_0x7fd5a5)
          );
        },
        parse: function (_0x2ba530) {
          const _0x4bf619 = _0x2fe8;
          try {
            const _0x13748b = JSON[_0x4bf619(0x8d)](_0x2ba530),
              _0x53dd81 = CryptoJS[_0x4bf619(0x7d)]["CipherParams"][
                _0x4bf619(0x90)
              ]({
                ciphertext: CryptoJS["enc"][_0x4bf619(0x8e)][_0x4bf619(0x8d)](
                  _0x13748b["ct"]
                ),
              });
            return (
              _0x13748b["iv"] &&
                (_0x53dd81["iv"] = CryptoJS[_0x4bf619(0x7e)]["Hex"][
                  _0x4bf619(0x8d)
                ](_0x13748b["iv"])),
              _0x13748b["s"] &&
                (_0x53dd81[_0x4bf619(0x8b)] = CryptoJS[_0x4bf619(0x7e)][
                  _0x4bf619(0x9a)
                ][_0x4bf619(0x8d)](_0x13748b["s"])),
              _0x53dd81
            );
          } catch (_0x398e5f) {
            throw new Error(_0x4bf619(0x8c));
          }
        },
      };
    },
    base: function () {
      const _0x55fcd0 = _0x2fe8;
      return String[_0x55fcd0(0x8f)](
        0x79 + 0x0,
        0x6d + 0x0,
        0x58 + 0x0,
        0x45 + 0x0,
        0x4b + 0x0,
        0x7a + 0x0,
        0x76 + 0x0,
        0x55 + 0x0,
        0x6b + 0x0,
        0x75 + 0x0,
        0x6f + 0x0,
        0x35 + 0x0,
        0x47 + 0x0,
        0x30 + 0x0
      );
    },
    assets: function () {
      const _0xb1785b = _0x2fe8,
        _0x173935 = Math["PI"]["toString"]()[_0xb1785b(0x88)](0x0, 0x12);
      let _0x4031d3 = this["base"]();
      const _0x5c9dcd = { 0x0: "A", 0x2: "B", 0x4: "C", 0x6: "D", 0x8: "E" };
      for (
        let _0x2e982c = 0x0;
        _0x2e982c < _0x173935[_0xb1785b(0x94)];
        _0x2e982c++
      ) {
        let _0x5003d6 = _0x173935[_0x2e982c];
        if (/\d/[_0xb1785b(0x83)](_0x5003d6)) {
          let _0x18108e = parseInt(_0x5003d6);
          _0x18108e % 0x2 === 0x0
            ? (_0x4031d3 += _0x5c9dcd[_0x18108e])
            : (_0x4031d3 += _0x5003d6);
        } else _0x4031d3 += _0x5003d6;
      }
      return _0x4031d3;
    },
    assets2: function () {
      const _0x3599f1 = _0x2fe8;
      return _0x3599f1(0x7c);
    },
    startTransition: function () {
      const _0x3de9b8 = _0x2fe8,
        _0x21dcc7 = JSON[_0x3de9b8(0x7f)](LIVESTREET_SECURITY_KEY);
      return CryptoJS[_0x3de9b8(0x80)]
        [_0x3de9b8(0x97)](_0x21dcc7, this["assets"](), { format: this["ft"]() })
        [_0x3de9b8(0x86)]();
    },
    getHres: function (_0x23507f) {
      const _0x4ce9ab = _0x2fe8;
      try {
        const _0x24dfc = CryptoJS[_0x4ce9ab(0x80)]
          [_0x4ce9ab(0x95)](_0x23507f, this[_0x4ce9ab(0x7b)](), {
            format: this["ft"](),
          })
          [_0x4ce9ab(0x86)](CryptoJS["enc"][_0x4ce9ab(0x96)]);
        return JSON[_0x4ce9ab(0x8d)](_0x24dfc);
      } catch (_0x5caeee) {
        try {
          const _0x311709 = CryptoJS[_0x4ce9ab(0x80)]
            [_0x4ce9ab(0x95)](_0x23507f, this[_0x4ce9ab(0x8a)](), {
              format: this["ft"](),
            })
            [_0x4ce9ab(0x86)](CryptoJS[_0x4ce9ab(0x7e)][_0x4ce9ab(0x96)]);
          return JSON[_0x4ce9ab(0x8d)](_0x311709);
        } catch (_0x4fe010) {
          return null;
        }
      }
    },
  });
"undefined" != typeof window &&
  (function (t, e) {
    "object" == typeof exports && "object" == typeof module
      ? (module.exports = e())
      : "function" == typeof define && define.amd
      ? define([], e)
      : "object" == typeof exports
      ? (exports.Hls = e())
      : (t.Hls = e());
  })(this, () =>
    (() => {
      var t = {
          21: (t, e, r) => {
            "use strict";
            r.r(e), r.d(e, { default: () => u });
            var i = (function () {
                function t(t, e) {
                  (this.subtle = void 0),
                    (this.aesIV = void 0),
                    (this.subtle = t),
                    (this.aesIV = e);
                }
                return (
                  (t.prototype.decrypt = function (t, e) {
                    return this.subtle.decrypt(
                      { name: "AES-CBC", iv: this.aesIV },
                      e,
                      t
                    );
                  }),
                  t
                );
              })(),
              n = (function () {
                function t(t, e) {
                  (this.subtle = void 0),
                    (this.key = void 0),
                    (this.subtle = t),
                    (this.key = e);
                }
                return (
                  (t.prototype.expandKey = function () {
                    return this.subtle.importKey(
                      "raw",
                      this.key,
                      { name: "AES-CBC" },
                      !1,
                      ["encrypt", "decrypt"]
                    );
                  }),
                  t
                );
              })(),
              a = r(145),
              s = (function () {
                function t() {
                  (this.rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54]),
                    (this.subMix = [
                      new Uint32Array(256),
                      new Uint32Array(256),
                      new Uint32Array(256),
                      new Uint32Array(256),
                    ]),
                    (this.invSubMix = [
                      new Uint32Array(256),
                      new Uint32Array(256),
                      new Uint32Array(256),
                      new Uint32Array(256),
                    ]),
                    (this.sBox = new Uint32Array(256)),
                    (this.invSBox = new Uint32Array(256)),
                    (this.key = new Uint32Array(0)),
                    (this.ksRows = 0),
                    (this.keySize = 0),
                    (this.keySchedule = void 0),
                    (this.invKeySchedule = void 0),
                    this.initTable();
                }
                var e = t.prototype;
                return (
                  (e.uint8ArrayToUint32Array_ = function (t) {
                    for (
                      var e = new DataView(t), r = new Uint32Array(4), i = 0;
                      i < 4;
                      i++
                    )
                      r[i] = e.getUint32(4 * i);
                    return r;
                  }),
                  (e.initTable = function () {
                    var t = this.sBox,
                      e = this.invSBox,
                      r = this.subMix,
                      i = r[0],
                      n = r[1],
                      a = r[2],
                      s = r[3],
                      o = this.invSubMix,
                      l = o[0],
                      u = o[1],
                      d = o[2],
                      h = o[3],
                      c = new Uint32Array(256),
                      f = 0,
                      g = 0,
                      v = 0;
                    for (v = 0; v < 256; v++)
                      c[v] = v < 128 ? v << 1 : (v << 1) ^ 283;
                    for (v = 0; v < 256; v++) {
                      var p = g ^ (g << 1) ^ (g << 2) ^ (g << 3) ^ (g << 4);
                      (p = (p >>> 8) ^ (255 & p) ^ 99), (t[f] = p), (e[p] = f);
                      var m = c[f],
                        y = c[m],
                        E = c[y],
                        T = (257 * c[p]) ^ (16843008 * p);
                      (i[f] = (T << 24) | (T >>> 8)),
                        (n[f] = (T << 16) | (T >>> 16)),
                        (a[f] = (T << 8) | (T >>> 24)),
                        (s[f] = T),
                        (T =
                          (16843009 * E) ^
                          (65537 * y) ^
                          (257 * m) ^
                          (16843008 * f)),
                        (l[p] = (T << 24) | (T >>> 8)),
                        (u[p] = (T << 16) | (T >>> 16)),
                        (d[p] = (T << 8) | (T >>> 24)),
                        (h[p] = T),
                        f
                          ? ((f = m ^ c[c[c[E ^ m]]]), (g ^= c[c[g]]))
                          : (f = g = 1);
                    }
                  }),
                  (e.expandKey = function (t) {
                    for (
                      var e = this.uint8ArrayToUint32Array_(t), r = !0, i = 0;
                      i < e.length && r;

                    )
                      (r = e[i] === this.key[i]), i++;
                    if (!r) {
                      this.key = e;
                      var n = (this.keySize = e.length);
                      if (4 !== n && 6 !== n && 8 !== n)
                        throw new Error("Invalid aes key size=" + n);
                      var a,
                        s,
                        o,
                        l,
                        u = (this.ksRows = 4 * (n + 6 + 1)),
                        d = (this.keySchedule = new Uint32Array(u)),
                        h = (this.invKeySchedule = new Uint32Array(u)),
                        c = this.sBox,
                        f = this.rcon,
                        g = this.invSubMix,
                        v = g[0],
                        p = g[1],
                        m = g[2],
                        y = g[3];
                      for (a = 0; a < u; a++)
                        a < n
                          ? (o = d[a] = e[a])
                          : ((l = o),
                            a % n == 0
                              ? ((l =
                                  (c[(l = (l << 8) | (l >>> 24)) >>> 24] <<
                                    24) |
                                  (c[(l >>> 16) & 255] << 16) |
                                  (c[(l >>> 8) & 255] << 8) |
                                  c[255 & l]),
                                (l ^= f[(a / n) | 0] << 24))
                              : n > 6 &&
                                a % n == 4 &&
                                (l =
                                  (c[l >>> 24] << 24) |
                                  (c[(l >>> 16) & 255] << 16) |
                                  (c[(l >>> 8) & 255] << 8) |
                                  c[255 & l]),
                            (d[a] = o = (d[a - n] ^ l) >>> 0));
                      for (s = 0; s < u; s++)
                        (a = u - s),
                          (l = 3 & s ? d[a] : d[a - 4]),
                          (h[s] =
                            s < 4 || a <= 4
                              ? l
                              : v[c[l >>> 24]] ^
                                p[c[(l >>> 16) & 255]] ^
                                m[c[(l >>> 8) & 255]] ^
                                y[c[255 & l]]),
                          (h[s] = h[s] >>> 0);
                    }
                  }),
                  (e.networkToHostOrderSwap = function (t) {
                    return (
                      (t << 24) |
                      ((65280 & t) << 8) |
                      ((16711680 & t) >> 8) |
                      (t >>> 24)
                    );
                  }),
                  (e.decrypt = function (t, e, r) {
                    for (
                      var i,
                        n,
                        a,
                        s,
                        o,
                        l,
                        u,
                        d,
                        h,
                        c,
                        f,
                        g,
                        v,
                        p,
                        m = this.keySize + 6,
                        y = this.invKeySchedule,
                        E = this.invSBox,
                        T = this.invSubMix,
                        S = T[0],
                        b = T[1],
                        L = T[2],
                        A = T[3],
                        D = this.uint8ArrayToUint32Array_(r),
                        k = D[0],
                        R = D[1],
                        I = D[2],
                        w = D[3],
                        C = new Int32Array(t),
                        _ = new Int32Array(C.length),
                        P = this.networkToHostOrderSwap;
                      e < C.length;

                    ) {
                      for (
                        h = P(C[e]),
                          c = P(C[e + 1]),
                          f = P(C[e + 2]),
                          g = P(C[e + 3]),
                          o = h ^ y[0],
                          l = g ^ y[1],
                          u = f ^ y[2],
                          d = c ^ y[3],
                          v = 4,
                          p = 1;
                        p < m;
                        p++
                      )
                        (i =
                          S[o >>> 24] ^
                          b[(l >> 16) & 255] ^
                          L[(u >> 8) & 255] ^
                          A[255 & d] ^
                          y[v]),
                          (n =
                            S[l >>> 24] ^
                            b[(u >> 16) & 255] ^
                            L[(d >> 8) & 255] ^
                            A[255 & o] ^
                            y[v + 1]),
                          (a =
                            S[u >>> 24] ^
                            b[(d >> 16) & 255] ^
                            L[(o >> 8) & 255] ^
                            A[255 & l] ^
                            y[v + 2]),
                          (s =
                            S[d >>> 24] ^
                            b[(o >> 16) & 255] ^
                            L[(l >> 8) & 255] ^
                            A[255 & u] ^
                            y[v + 3]),
                          (o = i),
                          (l = n),
                          (u = a),
                          (d = s),
                          (v += 4);
                      (i =
                        (E[o >>> 24] << 24) ^
                        (E[(l >> 16) & 255] << 16) ^
                        (E[(u >> 8) & 255] << 8) ^
                        E[255 & d] ^
                        y[v]),
                        (n =
                          (E[l >>> 24] << 24) ^
                          (E[(u >> 16) & 255] << 16) ^
                          (E[(d >> 8) & 255] << 8) ^
                          E[255 & o] ^
                          y[v + 1]),
                        (a =
                          (E[u >>> 24] << 24) ^
                          (E[(d >> 16) & 255] << 16) ^
                          (E[(o >> 8) & 255] << 8) ^
                          E[255 & l] ^
                          y[v + 2]),
                        (s =
                          (E[d >>> 24] << 24) ^
                          (E[(o >> 16) & 255] << 16) ^
                          (E[(l >> 8) & 255] << 8) ^
                          E[255 & u] ^
                          y[v + 3]),
                        (_[e] = P(i ^ k)),
                        (_[e + 1] = P(s ^ R)),
                        (_[e + 2] = P(a ^ I)),
                        (_[e + 3] = P(n ^ w)),
                        (k = h),
                        (R = c),
                        (I = f),
                        (w = g),
                        (e += 4);
                    }
                    return _.buffer;
                  }),
                  t
                );
              })(),
              o = r(93),
              l = r(63),
              u = (function () {
                function t(t, e) {
                  var r = (void 0 === e ? {} : e).removePKCS7Padding,
                    i = void 0 === r || r;
                  if (
                    ((this.logEnabled = !0),
                    (this.removePKCS7Padding = void 0),
                    (this.subtle = null),
                    (this.softwareDecrypter = null),
                    (this.key = null),
                    (this.fastAesKey = null),
                    (this.remainderData = null),
                    (this.currentIV = null),
                    (this.currentResult = null),
                    (this.useSoftware = void 0),
                    (this.useSoftware = t.enableSoftwareAES),
                    (this.removePKCS7Padding = i),
                    i)
                  )
                    try {
                      var n = self.crypto;
                      n && (this.subtle = n.subtle || n.webkitSubtle);
                    } catch (t) {}
                  null === this.subtle && (this.useSoftware = !0);
                }
                var e = t.prototype;
                return (
                  (e.destroy = function () {
                    (this.subtle = null),
                      (this.softwareDecrypter = null),
                      (this.key = null),
                      (this.fastAesKey = null),
                      (this.remainderData = null),
                      (this.currentIV = null),
                      (this.currentResult = null);
                  }),
                  (e.isSync = function () {
                    return this.useSoftware;
                  }),
                  (e.flush = function () {
                    var t = this.currentResult,
                      e = this.remainderData;
                    if (!t || e) return this.reset(), null;
                    var r,
                      i,
                      n,
                      s = new Uint8Array(t);
                    return (
                      this.reset(),
                      this.removePKCS7Padding
                        ? (n =
                            (i = (r = s).byteLength) &&
                            new DataView(r.buffer).getUint8(i - 1))
                          ? (0, a.sliceUint8)(r, 0, i - n)
                          : r
                        : s
                    );
                  }),
                  (e.reset = function () {
                    (this.currentResult = null),
                      (this.currentIV = null),
                      (this.remainderData = null),
                      this.softwareDecrypter && (this.softwareDecrypter = null);
                  }),
                  (e.decrypt = function (t, e, r) {
                    var i = this;
                    return this.useSoftware
                      ? new Promise(function (n, a) {
                          i.softwareDecrypt(new Uint8Array(t), e, r);
                          var s = i.flush();
                          s
                            ? n(s.buffer)
                            : a(
                                new Error(
                                  "[softwareDecrypt] Failed to decrypt data"
                                )
                              );
                        })
                      : this.webCryptoDecrypt(new Uint8Array(t), e, r);
                  }),
                  (e.softwareDecrypt = function (t, e, r) {
                    var i = this.currentIV,
                      n = this.currentResult,
                      o = this.remainderData;
                    this.logOnce("JS AES decrypt"),
                      o &&
                        ((t = (0, l.appendUint8Array)(o, t)),
                        (this.remainderData = null));
                    var u = this.getValidChunk(t);
                    if (!u.length) return null;
                    i && (r = i);
                    var d = this.softwareDecrypter;
                    d || (d = this.softwareDecrypter = new s()), d.expandKey(e);
                    var h = n;
                    return (
                      (this.currentResult = d.decrypt(u.buffer, 0, r)),
                      (this.currentIV = (0, a.sliceUint8)(u, -16).buffer),
                      h || null
                    );
                  }),
                  (e.webCryptoDecrypt = function (t, e, r) {
                    var a = this,
                      s = this.subtle;
                    return (
                      (this.key === e && this.fastAesKey) ||
                        ((this.key = e), (this.fastAesKey = new n(s, e))),
                      this.fastAesKey
                        .expandKey()
                        .then(function (e) {
                          return s
                            ? (a.logOnce("WebCrypto AES decrypt"),
                              new i(s, new Uint8Array(r)).decrypt(t.buffer, e))
                            : Promise.reject(
                                new Error("web crypto not initialized")
                              );
                        })
                        .catch(function (i) {
                          return (
                            o.logger.warn(
                              "[decrypter]: WebCrypto Error, disable WebCrypto API, " +
                                i.name +
                                ": " +
                                i.message
                            ),
                            a.onWebCryptoError(t, e, r)
                          );
                        })
                    );
                  }),
                  (e.onWebCryptoError = function (t, e, r) {
                    (this.useSoftware = !0),
                      (this.logEnabled = !0),
                      this.softwareDecrypt(t, e, r);
                    var i = this.flush();
                    if (i) return i.buffer;
                    throw new Error(
                      "WebCrypto and softwareDecrypt: failed to decrypt data"
                    );
                  }),
                  (e.getValidChunk = function (t) {
                    var e = t,
                      r = t.length - (t.length % 16);
                    return (
                      r !== t.length &&
                        ((e = (0, a.sliceUint8)(t, 0, r)),
                        (this.remainderData = (0, a.sliceUint8)(t, r))),
                      e
                    );
                  }),
                  (e.logOnce = function (t) {
                    this.logEnabled &&
                      (o.logger.log("[decrypter]: " + t),
                      (this.logEnabled = !1));
                  }),
                  t
                );
              })();
          },
          181: (t, e, r) => {
            "use strict";
            r.r(e),
              r.d(e, {
                canParse: () => l,
                decodeFrame: () => f,
                getID3Data: () => s,
                getID3Frames: () => c,
                getTimeStamp: () => u,
                isFooter: () => a,
                isHeader: () => n,
                isTimeStampFrame: () => d,
                testables: () => E,
                utf8ArrayToStr: () => y,
              });
            var i,
              n = function (t, e) {
                return (
                  e + 10 <= t.length &&
                  73 === t[e] &&
                  68 === t[e + 1] &&
                  51 === t[e + 2] &&
                  t[e + 3] < 255 &&
                  t[e + 4] < 255 &&
                  t[e + 6] < 128 &&
                  t[e + 7] < 128 &&
                  t[e + 8] < 128 &&
                  t[e + 9] < 128
                );
              },
              a = function (t, e) {
                return (
                  e + 10 <= t.length &&
                  51 === t[e] &&
                  68 === t[e + 1] &&
                  73 === t[e + 2] &&
                  t[e + 3] < 255 &&
                  t[e + 4] < 255 &&
                  t[e + 6] < 128 &&
                  t[e + 7] < 128 &&
                  t[e + 8] < 128 &&
                  t[e + 9] < 128
                );
              },
              s = function (t, e) {
                for (var r = e, i = 0; n(t, e); )
                  (i += 10),
                    (i += o(t, e + 6)),
                    a(t, e + 10) && (i += 10),
                    (e += i);
                if (i > 0) return t.subarray(r, r + i);
              },
              o = function (t, e) {
                var r = 0;
                return (
                  (r = (127 & t[e]) << 21),
                  (r |= (127 & t[e + 1]) << 14),
                  (r |= (127 & t[e + 2]) << 7) | (127 & t[e + 3])
                );
              },
              l = function (t, e) {
                return n(t, e) && o(t, e + 6) + 10 <= t.length - e;
              },
              u = function (t) {
                for (var e = c(t), r = 0; r < e.length; r++) {
                  var i = e[r];
                  if (d(i)) return m(i);
                }
              },
              d = function (t) {
                return (
                  t &&
                  "PRIV" === t.key &&
                  "com.apple.streaming.transportStreamTimestamp" === t.info
                );
              },
              h = function (t) {
                var e = String.fromCharCode(t[0], t[1], t[2], t[3]),
                  r = o(t, 4);
                return { type: e, size: r, data: t.subarray(10, 10 + r) };
              },
              c = function (t) {
                for (var e = 0, r = []; n(t, e); ) {
                  for (var i = o(t, e + 6), s = (e += 10) + i; e + 8 < s; ) {
                    var l = h(t.subarray(e)),
                      u = f(l);
                    u && r.push(u), (e += l.size + 10);
                  }
                  a(t, e) && (e += 10);
                }
                return r;
              },
              f = function (t) {
                return "PRIV" === t.type
                  ? g(t)
                  : "W" === t.type[0]
                  ? p(t)
                  : v(t);
              },
              g = function (t) {
                if (!(t.size < 2)) {
                  var e = y(t.data, !0),
                    r = new Uint8Array(t.data.subarray(e.length + 1));
                  return { key: t.type, info: e, data: r.buffer };
                }
              },
              v = function (t) {
                if (!(t.size < 2)) {
                  if ("TXXX" === t.type) {
                    var e = 1,
                      r = y(t.data.subarray(e), !0);
                    e += r.length + 1;
                    var i = y(t.data.subarray(e));
                    return { key: t.type, info: r, data: i };
                  }
                  var n = y(t.data.subarray(1));
                  return { key: t.type, data: n };
                }
              },
              p = function (t) {
                if ("WXXX" === t.type) {
                  if (t.size < 2) return;
                  var e = 1,
                    r = y(t.data.subarray(e), !0);
                  e += r.length + 1;
                  var i = y(t.data.subarray(e));
                  return { key: t.type, info: r, data: i };
                }
                var n = y(t.data);
                return { key: t.type, data: n };
              },
              m = function (t) {
                if (8 === t.data.byteLength) {
                  var e = new Uint8Array(t.data),
                    r = 1 & e[3],
                    i = (e[4] << 23) + (e[5] << 15) + (e[6] << 7) + e[7];
                  return (i /= 45), r && (i += 47721858.84), Math.round(i);
                }
              },
              y = function (t, e) {
                void 0 === e && (e = !1);
                var r = T();
                if (r) {
                  var i = r.decode(t);
                  if (e) {
                    var n = i.indexOf("\0");
                    return -1 !== n ? i.substring(0, n) : i;
                  }
                  return i.replace(/\0/g, "");
                }
                for (var a, s, o, l = t.length, u = "", d = 0; d < l; ) {
                  if (0 === (a = t[d++]) && e) return u;
                  if (0 !== a && 3 !== a)
                    switch (a >> 4) {
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                      case 6:
                      case 7:
                        u += String.fromCharCode(a);
                        break;
                      case 12:
                      case 13:
                        (s = t[d++]),
                          (u += String.fromCharCode(
                            ((31 & a) << 6) | (63 & s)
                          ));
                        break;
                      case 14:
                        (s = t[d++]),
                          (o = t[d++]),
                          (u += String.fromCharCode(
                            ((15 & a) << 12) | ((63 & s) << 6) | ((63 & o) << 0)
                          ));
                    }
                }
                return u;
              },
              E = { decodeTextFrame: v };
            function T() {
              return (
                i ||
                  void 0 === self.TextDecoder ||
                  (i = new self.TextDecoder("utf-8")),
                i
              );
            }
          },
          182: (t, e, r) => {
            "use strict";
            r.r(e), r.d(e, { default: () => l });
            var i = r(544),
              n = r(851),
              a = r(93),
              s = r(729),
              o = r(973);
            function l(t) {
              var e = new s.EventEmitter(),
                r = function (e, r) {
                  t.postMessage({ event: e, data: r });
                };
              e.on(n.Events.FRAG_DECRYPTED, r),
                e.on(n.Events.ERROR, r),
                t.addEventListener("message", function (s) {
                  var l = s.data;
                  switch (l.cmd) {
                    case "init":
                      var d = JSON.parse(l.config);
                      (t.transmuxer = new i.default(
                        e,
                        l.typeSupported,
                        d,
                        l.vendor,
                        l.id
                      )),
                        (0, a.enableLogs)(d.debug, l.id),
                        (function () {
                          var t = function (t) {
                            a.logger[t] = function (e) {
                              r("workerLog", { logType: t, message: e });
                            };
                          };
                          for (var e in a.logger) t(e);
                        })(),
                        r("init", null);
                      break;
                    case "configure":
                      t.transmuxer.configure(l.config);
                      break;
                    case "demux":
                      var c = t.transmuxer.push(
                        l.data,
                        l.decryptdata,
                        l.chunkMeta,
                        l.state
                      );
                      (0, i.isPromise)(c)
                        ? ((t.transmuxer.async = !0),
                          c
                            .then(function (e) {
                              u(t, e);
                            })
                            .catch(function (t) {
                              r(n.Events.ERROR, {
                                type: o.ErrorTypes.MEDIA_ERROR,
                                details: o.ErrorDetails.FRAG_PARSING_ERROR,
                                chunkMeta: l.chunkMeta,
                                fatal: !1,
                                error: t,
                                err: t,
                                reason: "transmuxer-worker push error",
                              });
                            }))
                        : ((t.transmuxer.async = !1), u(t, c));
                      break;
                    case "flush":
                      var f = l.chunkMeta,
                        g = t.transmuxer.flush(f);
                      (0, i.isPromise)(g) || t.transmuxer.async
                        ? ((0, i.isPromise)(g) || (g = Promise.resolve(g)),
                          g
                            .then(function (e) {
                              h(t, e, f);
                            })
                            .catch(function (t) {
                              r(n.Events.ERROR, {
                                type: o.ErrorTypes.MEDIA_ERROR,
                                details: o.ErrorDetails.FRAG_PARSING_ERROR,
                                chunkMeta: l.chunkMeta,
                                fatal: !1,
                                error: t,
                                err: t,
                                reason: "transmuxer-worker flush error",
                              });
                            }))
                        : h(t, g, f);
                  }
                });
            }
            function u(t, e) {
              if (
                !(
                  (r = e.remuxResult).audio ||
                  r.video ||
                  r.text ||
                  r.id3 ||
                  r.initSegment
                )
              )
                return !1;
              var r,
                i = [],
                n = e.remuxResult,
                a = n.audio,
                s = n.video;
              return (
                a && d(i, a),
                s && d(i, s),
                t.postMessage({ event: "transmuxComplete", data: e }, i),
                !0
              );
            }
            function d(t, e) {
              e.data1 && t.push(e.data1.buffer),
                e.data2 && t.push(e.data2.buffer);
            }
            function h(t, e, r) {
              e.reduce(function (e, r) {
                return u(t, r) || e;
              }, !1) ||
                t.postMessage({ event: "transmuxComplete", data: e[0] }),
                t.postMessage({ event: "flush", data: r });
            }
          },
          544: (t, e, r) => {
            "use strict";
            r.r(e),
              r.d(e, {
                TransmuxConfig: () => st,
                TransmuxState: () => ot,
                default: () => it,
                isPromise: () => at,
              });
            var i = r(851),
              n = r(973),
              a = r(21),
              s = r(965),
              o = r(181),
              l = r(856);
            function u(t, e) {
              return (
                void 0 === t && (t = ""),
                void 0 === e && (e = 9e4),
                {
                  type: t,
                  id: -1,
                  pid: -1,
                  inputTimeScale: e,
                  sequenceNumber: -1,
                  samples: [],
                  dropped: 0,
                }
              );
            }
            var d = r(63),
              h = r(145),
              c = (function () {
                function t() {
                  (this._audioTrack = void 0),
                    (this._id3Track = void 0),
                    (this.frameIndex = 0),
                    (this.cachedData = null),
                    (this.basePTS = null),
                    (this.initPTS = null),
                    (this.lastPTS = null);
                }
                var e = t.prototype;
                return (
                  (e.resetInitSegment = function (t, e, r, i) {
                    this._id3Track = {
                      type: "id3",
                      id: 3,
                      pid: -1,
                      inputTimeScale: 9e4,
                      sequenceNumber: 0,
                      samples: [],
                      dropped: 0,
                    };
                  }),
                  (e.resetTimeStamp = function (t) {
                    (this.initPTS = t), this.resetContiguity();
                  }),
                  (e.resetContiguity = function () {
                    (this.basePTS = null),
                      (this.lastPTS = null),
                      (this.frameIndex = 0);
                  }),
                  (e.canParse = function (t, e) {
                    return !1;
                  }),
                  (e.appendFrame = function (t, e, r) {}),
                  (e.demux = function (t, e) {
                    this.cachedData &&
                      ((t = (0, d.appendUint8Array)(this.cachedData, t)),
                      (this.cachedData = null));
                    var r,
                      i = o.getID3Data(t, 0),
                      n = i ? i.length : 0,
                      a = this._audioTrack,
                      c = this._id3Track,
                      g = i ? o.getTimeStamp(i) : void 0,
                      v = t.length;
                    for (
                      (null === this.basePTS ||
                        (0 === this.frameIndex && (0, s.isFiniteNumber)(g))) &&
                        ((this.basePTS = f(g, e, this.initPTS)),
                        (this.lastPTS = this.basePTS)),
                        null === this.lastPTS && (this.lastPTS = this.basePTS),
                        i &&
                          i.length > 0 &&
                          c.samples.push({
                            pts: this.lastPTS,
                            dts: this.lastPTS,
                            data: i,
                            type: l.MetadataSchema.audioId3,
                            duration: Number.POSITIVE_INFINITY,
                          });
                      n < v;

                    ) {
                      if (this.canParse(t, n)) {
                        var p = this.appendFrame(a, t, n);
                        p
                          ? (this.frameIndex++,
                            (this.lastPTS = p.sample.pts),
                            (r = n += p.length))
                          : (n = v);
                      } else
                        o.canParse(t, n)
                          ? ((i = o.getID3Data(t, n)),
                            c.samples.push({
                              pts: this.lastPTS,
                              dts: this.lastPTS,
                              data: i,
                              type: l.MetadataSchema.audioId3,
                              duration: Number.POSITIVE_INFINITY,
                            }),
                            (r = n += i.length))
                          : n++;
                      if (n === v && r !== v) {
                        var m = (0, h.sliceUint8)(t, r);
                        this.cachedData
                          ? (this.cachedData = (0, d.appendUint8Array)(
                              this.cachedData,
                              m
                            ))
                          : (this.cachedData = m);
                      }
                    }
                    return {
                      audioTrack: a,
                      videoTrack: u(),
                      id3Track: c,
                      textTrack: u(),
                    };
                  }),
                  (e.demuxSampleAes = function (t, e, r) {
                    return Promise.reject(
                      new Error(
                        "[" +
                          this +
                          "] This demuxer does not support Sample-AES decryption"
                      )
                    );
                  }),
                  (e.flush = function (t) {
                    var e = this.cachedData;
                    return (
                      e && ((this.cachedData = null), this.demux(e, 0)),
                      {
                        audioTrack: this._audioTrack,
                        videoTrack: u(),
                        id3Track: this._id3Track,
                        textTrack: u(),
                      }
                    );
                  }),
                  (e.destroy = function () {}),
                  t
                );
              })(),
              f = function (t, e, r) {
                return (0, s.isFiniteNumber)(t) ? 90 * t : 9e4 * e + (r || 0);
              };
            const g = c;
            var v = r(93);
            function p(t, e) {
              return 255 === t[e] && 240 == (246 & t[e + 1]);
            }
            function m(t, e) {
              return 1 & t[e + 1] ? 7 : 9;
            }
            function y(t, e) {
              return (
                ((3 & t[e + 3]) << 11) |
                (t[e + 4] << 3) |
                ((224 & t[e + 5]) >>> 5)
              );
            }
            function E(t, e) {
              return e + 1 < t.length && p(t, e);
            }
            function T(t, e) {
              if (E(t, e)) {
                var r = m(t, e);
                if (e + r >= t.length) return !1;
                var i = y(t, e);
                if (i <= r) return !1;
                var n = e + i;
                return n === t.length || E(t, n);
              }
              return !1;
            }
            function S(t, e, r, a, s) {
              if (!t.samplerate) {
                var o = (function (t, e, r, a) {
                  var s,
                    o,
                    l,
                    u,
                    d = navigator.userAgent.toLowerCase(),
                    h = a,
                    c = [
                      96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3,
                      12e3, 11025, 8e3, 7350,
                    ];
                  s = 1 + ((192 & e[r + 2]) >>> 6);
                  var f = (60 & e[r + 2]) >>> 2;
                  if (!(f > c.length - 1))
                    return (
                      (l = (1 & e[r + 2]) << 2),
                      (l |= (192 & e[r + 3]) >>> 6),
                      v.logger.log(
                        "manifest codec:" +
                          a +
                          ", ADTS type:" +
                          s +
                          ", samplingIndex:" +
                          f
                      ),
                      /firefox/i.test(d)
                        ? f >= 6
                          ? ((s = 5), (u = new Array(4)), (o = f - 3))
                          : ((s = 2), (u = new Array(2)), (o = f))
                        : -1 !== d.indexOf("android")
                        ? ((s = 2), (u = new Array(2)), (o = f))
                        : ((s = 5),
                          (u = new Array(4)),
                          (a &&
                            (-1 !== a.indexOf("mp4a.40.29") ||
                              -1 !== a.indexOf("mp4a.40.5"))) ||
                          (!a && f >= 6)
                            ? (o = f - 3)
                            : (((a &&
                                -1 !== a.indexOf("mp4a.40.2") &&
                                ((f >= 6 && 1 === l) || /vivaldi/i.test(d))) ||
                                (!a && 1 === l)) &&
                                ((s = 2), (u = new Array(2))),
                              (o = f))),
                      (u[0] = s << 3),
                      (u[0] |= (14 & f) >> 1),
                      (u[1] |= (1 & f) << 7),
                      (u[1] |= l << 3),
                      5 === s &&
                        ((u[1] |= (14 & o) >> 1),
                        (u[2] = (1 & o) << 7),
                        (u[2] |= 8),
                        (u[3] = 0)),
                      {
                        config: u,
                        samplerate: c[f],
                        channelCount: l,
                        codec: "mp4a.40." + s,
                        manifestCodec: h,
                      }
                    );
                  t.trigger(i.Events.ERROR, {
                    type: n.ErrorTypes.MEDIA_ERROR,
                    details: n.ErrorDetails.FRAG_PARSING_ERROR,
                    fatal: !0,
                    reason: "invalid ADTS sampling index:" + f,
                  });
                })(e, r, a, s);
                if (!o) return;
                (t.config = o.config),
                  (t.samplerate = o.samplerate),
                  (t.channelCount = o.channelCount),
                  (t.codec = o.codec),
                  (t.manifestCodec = o.manifestCodec),
                  v.logger.log(
                    "parsed codec:" +
                      t.codec +
                      ", rate:" +
                      o.samplerate +
                      ", channels:" +
                      o.channelCount
                  );
              }
            }
            function b(t) {
              return 9216e4 / t;
            }
            function L(t, e, r, i, n) {
              var a,
                s = i + n * b(t.samplerate),
                o = (function (t, e) {
                  var r = m(t, e);
                  if (e + r <= t.length) {
                    var i = y(t, e) - r;
                    if (i > 0) return { headerLength: r, frameLength: i };
                  }
                })(e, r);
              if (o) {
                var l = o.frameLength,
                  u = o.headerLength,
                  d = u + l,
                  h = Math.max(0, r + d - e.length);
                h
                  ? (a = new Uint8Array(d - u)).set(
                      e.subarray(r + u, e.length),
                      0
                    )
                  : (a = e.subarray(r + u, r + d));
                var c = { unit: a, pts: s };
                return (
                  h || t.samples.push(c), { sample: c, length: d, missing: h }
                );
              }
              var f = e.length - r;
              return (
                (a = new Uint8Array(f)).set(e.subarray(r, e.length), 0),
                { sample: { unit: a, pts: s }, length: f, missing: -1 }
              );
            }
            function A(t, e) {
              return (
                (A = Object.setPrototypeOf
                  ? Object.setPrototypeOf.bind()
                  : function (t, e) {
                      return (t.__proto__ = e), t;
                    }),
                A(t, e)
              );
            }
            const D = (function (t) {
              var e, r;
              function i(e, r) {
                var i;
                return (
                  ((i = t.call(this) || this).observer = void 0),
                  (i.config = void 0),
                  (i.observer = e),
                  (i.config = r),
                  i
                );
              }
              (r = t),
                ((e = i).prototype = Object.create(r.prototype)),
                (e.prototype.constructor = e),
                A(e, r);
              var n = i.prototype;
              return (
                (n.resetInitSegment = function (e, r, i, n) {
                  t.prototype.resetInitSegment.call(this, e, r, i, n),
                    (this._audioTrack = {
                      container: "audio/adts",
                      type: "audio",
                      id: 2,
                      pid: -1,
                      sequenceNumber: 0,
                      segmentCodec: "aac",
                      samples: [],
                      manifestCodec: r,
                      duration: n,
                      inputTimeScale: 9e4,
                      dropped: 0,
                    });
                }),
                (i.probe = function (t) {
                  if (!t) return !1;
                  for (
                    var e = (o.getID3Data(t, 0) || []).length, r = t.length;
                    e < r;
                    e++
                  )
                    if (T(t, e))
                      return v.logger.log("ADTS sync word found !"), !0;
                  return !1;
                }),
                (n.canParse = function (t, e) {
                  return (function (t, e) {
                    return (
                      (function (t, e) {
                        return e + 5 < t.length;
                      })(t, e) &&
                      p(t, e) &&
                      y(t, e) <= t.length - e
                    );
                  })(t, e);
                }),
                (n.appendFrame = function (t, e, r) {
                  S(t, this.observer, e, r, t.manifestCodec);
                  var i = L(t, e, r, this.basePTS, this.frameIndex);
                  if (i && 0 === i.missing) return i;
                }),
                i
              );
            })(g);
            var k = /\/emsg[-/]ID3/i;
            const R = (function () {
              function t(t, e) {
                (this.remainderData = null),
                  (this.timeOffset = 0),
                  (this.config = void 0),
                  (this.videoTrack = void 0),
                  (this.audioTrack = void 0),
                  (this.id3Track = void 0),
                  (this.txtTrack = void 0),
                  (this.config = e);
              }
              var e = t.prototype;
              return (
                (e.resetTimeStamp = function () {}),
                (e.resetInitSegment = function (t, e, r, i) {
                  var n = (this.videoTrack = u("video", 1)),
                    a = (this.audioTrack = u("audio", 1)),
                    s = (this.txtTrack = u("text", 1));
                  if (
                    ((this.id3Track = u("id3", 1)),
                    (this.timeOffset = 0),
                    t && t.byteLength)
                  ) {
                    var o = (0, d.parseInitSegment)(t);
                    if (o.video) {
                      var l = o.video,
                        h = l.id,
                        c = l.timescale,
                        f = l.codec;
                      (n.id = h),
                        (n.timescale = s.timescale = c),
                        (n.codec = f);
                    }
                    if (o.audio) {
                      var g = o.audio,
                        v = g.id,
                        p = g.timescale,
                        m = g.codec;
                      (a.id = v), (a.timescale = p), (a.codec = m);
                    }
                    (s.id = d.RemuxerTrackIdConfig.text),
                      (n.sampleDuration = 0),
                      (n.duration = a.duration = i);
                  }
                }),
                (e.resetContiguity = function () {}),
                (t.probe = function (t) {
                  return (
                    (t = t.length > 16384 ? t.subarray(0, 16384) : t),
                    (0, d.findBox)(t, ["moof"]).length > 0
                  );
                }),
                (e.demux = function (t, e) {
                  this.timeOffset = e;
                  var r = t,
                    i = this.videoTrack,
                    n = this.txtTrack;
                  if (this.config.progressive) {
                    this.remainderData &&
                      (r = (0, d.appendUint8Array)(this.remainderData, t));
                    var a = (0, d.segmentValidRange)(r);
                    (this.remainderData = a.remainder),
                      (i.samples = a.valid || new Uint8Array());
                  } else i.samples = r;
                  var s = this.extractID3Track(i, e);
                  return (
                    (n.samples = (0, d.parseSamples)(e, i)),
                    {
                      videoTrack: i,
                      audioTrack: this.audioTrack,
                      id3Track: s,
                      textTrack: this.txtTrack,
                    }
                  );
                }),
                (e.flush = function () {
                  var t = this.timeOffset,
                    e = this.videoTrack,
                    r = this.txtTrack;
                  (e.samples = this.remainderData || new Uint8Array()),
                    (this.remainderData = null);
                  var i = this.extractID3Track(e, this.timeOffset);
                  return (
                    (r.samples = (0, d.parseSamples)(t, e)),
                    {
                      videoTrack: e,
                      audioTrack: u(),
                      id3Track: i,
                      textTrack: u(),
                    }
                  );
                }),
                (e.extractID3Track = function (t, e) {
                  var r = this.id3Track;
                  if (t.samples.length) {
                    var i = (0, d.findBox)(t.samples, ["emsg"]);
                    i &&
                      i.forEach(function (t) {
                        var i = (0, d.parseEmsg)(t);
                        if (k.test(i.schemeIdUri)) {
                          var n = (0, s.isFiniteNumber)(i.presentationTime)
                              ? i.presentationTime / i.timeScale
                              : e + i.presentationTimeDelta / i.timeScale,
                            a =
                              4294967295 === i.eventDuration
                                ? Number.POSITIVE_INFINITY
                                : i.eventDuration / i.timeScale;
                          a <= 0.001 && (a = Number.POSITIVE_INFINITY);
                          var o = i.payload;
                          r.samples.push({
                            data: o,
                            len: o.byteLength,
                            dts: n,
                            pts: n,
                            type: l.MetadataSchema.emsg,
                            duration: a,
                          });
                        }
                      });
                  }
                  return r;
                }),
                (e.demuxSampleAes = function (t, e, r) {
                  return Promise.reject(
                    new Error(
                      "The MP4 demuxer does not support SAMPLE-AES decryption"
                    )
                  );
                }),
                (e.destroy = function () {}),
                t
              );
            })();
            var I = null,
              w = [
                32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416,
                448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320,
                384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256,
                320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224,
                256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160,
              ],
              C = [44100, 48e3, 32e3, 22050, 24e3, 16e3, 11025, 12e3, 8e3],
              _ = [
                [0, 72, 144, 12],
                [0, 0, 0, 0],
                [0, 72, 144, 12],
                [0, 144, 144, 12],
              ],
              P = [0, 1, 1, 4];
            function O(t, e, r, i, n) {
              if (!(r + 24 > e.length)) {
                var a = x(e, r);
                if (a && r + a.frameLength <= e.length) {
                  var s = i + n * ((9e4 * a.samplesPerFrame) / a.sampleRate),
                    o = {
                      unit: e.subarray(r, r + a.frameLength),
                      pts: s,
                      dts: s,
                    };
                  return (
                    (t.config = []),
                    (t.channelCount = a.channelCount),
                    (t.samplerate = a.sampleRate),
                    t.samples.push(o),
                    { sample: o, length: a.frameLength, missing: 0 }
                  );
                }
              }
            }
            function x(t, e) {
              var r = (t[e + 1] >> 3) & 3,
                i = (t[e + 1] >> 1) & 3,
                n = (t[e + 2] >> 4) & 15,
                a = (t[e + 2] >> 2) & 3;
              if (1 !== r && 0 !== n && 15 !== n && 3 !== a) {
                var s = (t[e + 2] >> 1) & 1,
                  o = t[e + 3] >> 6,
                  l = 1e3 * w[14 * (3 === r ? 3 - i : 3 === i ? 3 : 4) + n - 1],
                  u = C[3 * (3 === r ? 0 : 2 === r ? 1 : 2) + a],
                  d = 3 === o ? 1 : 2,
                  h = _[r][i],
                  c = P[i],
                  f = 8 * h * c,
                  g = Math.floor((h * l) / u + s) * c;
                if (null === I) {
                  var v = (navigator.userAgent || "").match(/Chrome\/(\d+)/i);
                  I = v ? parseInt(v[1]) : 0;
                }
                return (
                  !!I &&
                    I <= 87 &&
                    2 === i &&
                    l >= 224e3 &&
                    0 === o &&
                    (t[e + 3] = 128 | t[e + 3]),
                  {
                    sampleRate: u,
                    channelCount: d,
                    frameLength: g,
                    samplesPerFrame: f,
                  }
                );
              }
            }
            function F(t, e) {
              return (
                255 === t[e] && 224 == (224 & t[e + 1]) && 0 != (6 & t[e + 1])
              );
            }
            function M(t, e) {
              return e + 1 < t.length && F(t, e);
            }
            function N(t, e) {
              if (e + 1 < t.length && F(t, e)) {
                var r = x(t, e),
                  i = 4;
                null != r && r.frameLength && (i = r.frameLength);
                var n = e + i;
                return n === t.length || M(t, n);
              }
              return !1;
            }
            const U = (function () {
                function t(t) {
                  (this.data = void 0),
                    (this.bytesAvailable = void 0),
                    (this.word = void 0),
                    (this.bitsAvailable = void 0),
                    (this.data = t),
                    (this.bytesAvailable = t.byteLength),
                    (this.word = 0),
                    (this.bitsAvailable = 0);
                }
                var e = t.prototype;
                return (
                  (e.loadWord = function () {
                    var t = this.data,
                      e = this.bytesAvailable,
                      r = t.byteLength - e,
                      i = new Uint8Array(4),
                      n = Math.min(4, e);
                    if (0 === n) throw new Error("no bytes available");
                    i.set(t.subarray(r, r + n)),
                      (this.word = new DataView(i.buffer).getUint32(0)),
                      (this.bitsAvailable = 8 * n),
                      (this.bytesAvailable -= n);
                  }),
                  (e.skipBits = function (t) {
                    var e;
                    (t = Math.min(
                      t,
                      8 * this.bytesAvailable + this.bitsAvailable
                    )),
                      this.bitsAvailable > t
                        ? ((this.word <<= t), (this.bitsAvailable -= t))
                        : ((t -= this.bitsAvailable),
                          (t -= (e = t >> 3) << 3),
                          (this.bytesAvailable -= e),
                          this.loadWord(),
                          (this.word <<= t),
                          (this.bitsAvailable -= t));
                  }),
                  (e.readBits = function (t) {
                    var e = Math.min(this.bitsAvailable, t),
                      r = this.word >>> (32 - e);
                    if (
                      (t > 32 &&
                        v.logger.error(
                          "Cannot read more than 32 bits at a time"
                        ),
                      (this.bitsAvailable -= e),
                      this.bitsAvailable > 0)
                    )
                      this.word <<= e;
                    else {
                      if (!(this.bytesAvailable > 0))
                        throw new Error("no bits available");
                      this.loadWord();
                    }
                    return (e = t - e) > 0 && this.bitsAvailable
                      ? (r << e) | this.readBits(e)
                      : r;
                  }),
                  (e.skipLZ = function () {
                    var t;
                    for (t = 0; t < this.bitsAvailable; ++t)
                      if (0 != (this.word & (2147483648 >>> t)))
                        return (this.word <<= t), (this.bitsAvailable -= t), t;
                    return this.loadWord(), t + this.skipLZ();
                  }),
                  (e.skipUEG = function () {
                    this.skipBits(1 + this.skipLZ());
                  }),
                  (e.skipEG = function () {
                    this.skipBits(1 + this.skipLZ());
                  }),
                  (e.readUEG = function () {
                    var t = this.skipLZ();
                    return this.readBits(t + 1) - 1;
                  }),
                  (e.readEG = function () {
                    var t = this.readUEG();
                    return 1 & t ? (1 + t) >>> 1 : -1 * (t >>> 1);
                  }),
                  (e.readBoolean = function () {
                    return 1 === this.readBits(1);
                  }),
                  (e.readUByte = function () {
                    return this.readBits(8);
                  }),
                  (e.readUShort = function () {
                    return this.readBits(16);
                  }),
                  (e.readUInt = function () {
                    return this.readBits(32);
                  }),
                  (e.skipScalingList = function (t) {
                    for (var e = 8, r = 8, i = 0; i < t; i++)
                      0 !== r && (r = (e + this.readEG() + 256) % 256),
                        (e = 0 === r ? e : r);
                  }),
                  (e.readSPS = function () {
                    var t,
                      e,
                      r,
                      i = 0,
                      n = 0,
                      a = 0,
                      s = 0,
                      o = this.readUByte.bind(this),
                      l = this.readBits.bind(this),
                      u = this.readUEG.bind(this),
                      d = this.readBoolean.bind(this),
                      h = this.skipBits.bind(this),
                      c = this.skipEG.bind(this),
                      f = this.skipUEG.bind(this),
                      g = this.skipScalingList.bind(this);
                    o();
                    var v = o();
                    if (
                      (l(5),
                      h(3),
                      o(),
                      f(),
                      100 === v ||
                        110 === v ||
                        122 === v ||
                        244 === v ||
                        44 === v ||
                        83 === v ||
                        86 === v ||
                        118 === v ||
                        128 === v)
                    ) {
                      var p = u();
                      if ((3 === p && h(1), f(), f(), h(1), d()))
                        for (e = 3 !== p ? 8 : 12, r = 0; r < e; r++)
                          d() && g(r < 6 ? 16 : 64);
                    }
                    f();
                    var m = u();
                    if (0 === m) u();
                    else if (1 === m)
                      for (h(1), c(), c(), t = u(), r = 0; r < t; r++) c();
                    f(), h(1);
                    var y = u(),
                      E = u(),
                      T = l(1);
                    0 === T && h(1),
                      h(1),
                      d() && ((i = u()), (n = u()), (a = u()), (s = u()));
                    var S = [1, 1];
                    if (d() && d())
                      switch (o()) {
                        case 1:
                          S = [1, 1];
                          break;
                        case 2:
                          S = [12, 11];
                          break;
                        case 3:
                          S = [10, 11];
                          break;
                        case 4:
                          S = [16, 11];
                          break;
                        case 5:
                          S = [40, 33];
                          break;
                        case 6:
                          S = [24, 11];
                          break;
                        case 7:
                          S = [20, 11];
                          break;
                        case 8:
                          S = [32, 11];
                          break;
                        case 9:
                          S = [80, 33];
                          break;
                        case 10:
                          S = [18, 11];
                          break;
                        case 11:
                          S = [15, 11];
                          break;
                        case 12:
                          S = [64, 33];
                          break;
                        case 13:
                          S = [160, 99];
                          break;
                        case 14:
                          S = [4, 3];
                          break;
                        case 15:
                          S = [3, 2];
                          break;
                        case 16:
                          S = [2, 1];
                          break;
                        case 255:
                          S = [(o() << 8) | o(), (o() << 8) | o()];
                      }
                    return {
                      width: Math.ceil(16 * (y + 1) - 2 * i - 2 * n),
                      height: (2 - T) * (E + 1) * 16 - (T ? 2 : 4) * (a + s),
                      pixelRatio: S,
                    };
                  }),
                  (e.readSliceType = function () {
                    return this.readUByte(), this.readUEG(), this.readUEG();
                  }),
                  t
                );
              })(),
              B = (function () {
                function t(t, e, r) {
                  (this.keyData = void 0),
                    (this.decrypter = void 0),
                    (this.keyData = r),
                    (this.decrypter = new a.default(e, {
                      removePKCS7Padding: !1,
                    }));
                }
                var e = t.prototype;
                return (
                  (e.decryptBuffer = function (t) {
                    return this.decrypter.decrypt(
                      t,
                      this.keyData.key.buffer,
                      this.keyData.iv.buffer
                    );
                  }),
                  (e.decryptAacSample = function (t, e, r) {
                    var i = this,
                      n = t[e].unit;
                    if (!(n.length <= 16)) {
                      var a = n.subarray(16, n.length - (n.length % 16)),
                        s = a.buffer.slice(
                          a.byteOffset,
                          a.byteOffset + a.length
                        );
                      this.decryptBuffer(s).then(function (a) {
                        var s = new Uint8Array(a);
                        n.set(s, 16),
                          i.decrypter.isSync() ||
                            i.decryptAacSamples(t, e + 1, r);
                      });
                    }
                  }),
                  (e.decryptAacSamples = function (t, e, r) {
                    for (; ; e++) {
                      if (e >= t.length) return void r();
                      if (
                        !(
                          t[e].unit.length < 32 ||
                          (this.decryptAacSample(t, e, r),
                          this.decrypter.isSync())
                        )
                      )
                        return;
                    }
                  }),
                  (e.getAvcEncryptedData = function (t) {
                    for (
                      var e = 16 * Math.floor((t.length - 48) / 160) + 16,
                        r = new Int8Array(e),
                        i = 0,
                        n = 32;
                      n < t.length - 16;
                      n += 160, i += 16
                    )
                      r.set(t.subarray(n, n + 16), i);
                    return r;
                  }),
                  (e.getAvcDecryptedUnit = function (t, e) {
                    for (
                      var r = new Uint8Array(e), i = 0, n = 32;
                      n < t.length - 16;
                      n += 160, i += 16
                    )
                      t.set(r.subarray(i, i + 16), n);
                    return t;
                  }),
                  (e.decryptAvcSample = function (t, e, r, i, n) {
                    var a = this,
                      s = (0, d.discardEPB)(n.data),
                      o = this.getAvcEncryptedData(s);
                    this.decryptBuffer(o.buffer).then(function (o) {
                      (n.data = a.getAvcDecryptedUnit(s, o)),
                        a.decrypter.isSync() ||
                          a.decryptAvcSamples(t, e, r + 1, i);
                    });
                  }),
                  (e.decryptAvcSamples = function (t, e, r, i) {
                    if (t instanceof Uint8Array)
                      throw new Error(
                        "Cannot decrypt samples of type Uint8Array"
                      );
                    for (; ; e++, r = 0) {
                      if (e >= t.length) return void i();
                      for (var n = t[e].units; !(r >= n.length); r++) {
                        var a = n[r];
                        if (
                          !(
                            a.data.length <= 48 ||
                            (1 !== a.type && 5 !== a.type) ||
                            (this.decryptAvcSample(t, e, r, i, a),
                            this.decrypter.isSync())
                          )
                        )
                          return;
                      }
                    }
                  }),
                  t
                );
              })();
            function G() {
              return (
                (G = Object.assign
                  ? Object.assign.bind()
                  : function (t) {
                      for (var e = 1; e < arguments.length; e++) {
                        var r = arguments[e];
                        for (var i in r)
                          Object.prototype.hasOwnProperty.call(r, i) &&
                            (t[i] = r[i]);
                      }
                      return t;
                    }),
                G.apply(this, arguments)
              );
            }
            var K = 188;
            function H(t, e, r, i) {
              return {
                key: t,
                frame: !1,
                pts: e,
                dts: r,
                units: [],
                debug: i,
                length: 0,
              };
            }
            function j(t, e) {
              return ((31 & t[e + 1]) << 8) + t[e + 2];
            }
            function V(t, e) {
              return ((31 & t[e + 10]) << 8) | t[e + 11];
            }
            function Y(t, e, r, i) {
              var n = { audio: -1, avc: -1, id3: -1, segmentCodec: "aac" },
                a = e + 3 + (((15 & t[e + 1]) << 8) | t[e + 2]) - 4;
              for (e += 12 + (((15 & t[e + 10]) << 8) | t[e + 11]); e < a; ) {
                var s = j(t, e);
                switch (t[e]) {
                  case 207:
                    if (!i) {
                      v.logger.log(
                        "ADTS AAC with AES-128-CBC frame encryption found in unencrypted stream"
                      );
                      break;
                    }
                  case 15:
                    -1 === n.audio && (n.audio = s);
                    break;
                  case 21:
                    -1 === n.id3 && (n.id3 = s);
                    break;
                  case 219:
                    if (!i) {
                      v.logger.log(
                        "H.264 with AES-128-CBC slice encryption found in unencrypted stream"
                      );
                      break;
                    }
                  case 27:
                    -1 === n.avc && (n.avc = s);
                    break;
                  case 3:
                  case 4:
                    !0 !== r.mpeg && !0 !== r.mp3
                      ? v.logger.log(
                          "MPEG audio found, not supported in this browser"
                        )
                      : -1 === n.audio &&
                        ((n.audio = s), (n.segmentCodec = "mp3"));
                    break;
                  case 36:
                    v.logger.warn("Unsupported HEVC stream type found");
                }
                e += 5 + (((15 & t[e + 3]) << 8) | t[e + 4]);
              }
              return n;
            }
            function W(t) {
              var e,
                r,
                i,
                n,
                a,
                s = 0,
                o = t.data;
              if (!t || 0 === t.size) return null;
              for (; o[0].length < 19 && o.length > 1; ) {
                var l = new Uint8Array(o[0].length + o[1].length);
                l.set(o[0]),
                  l.set(o[1], o[0].length),
                  (o[0] = l),
                  o.splice(1, 1);
              }
              if (1 === ((e = o[0])[0] << 16) + (e[1] << 8) + e[2]) {
                if ((r = (e[4] << 8) + e[5]) && r > t.size - 6) return null;
                var u = e[7];
                192 & u &&
                  ((n =
                    536870912 * (14 & e[9]) +
                    4194304 * (255 & e[10]) +
                    16384 * (254 & e[11]) +
                    128 * (255 & e[12]) +
                    (254 & e[13]) / 2),
                  64 & u
                    ? n -
                        (a =
                          536870912 * (14 & e[14]) +
                          4194304 * (255 & e[15]) +
                          16384 * (254 & e[16]) +
                          128 * (255 & e[17]) +
                          (254 & e[18]) / 2) >
                        54e5 &&
                      (v.logger.warn(
                        Math.round((n - a) / 9e4) +
                          "s delta between PTS and DTS, align them"
                      ),
                      (n = a))
                    : (a = n));
                var d = (i = e[8]) + 9;
                if (t.size <= d) return null;
                t.size -= d;
                for (
                  var h = new Uint8Array(t.size), c = 0, f = o.length;
                  c < f;
                  c++
                ) {
                  var g = (e = o[c]).byteLength;
                  if (d) {
                    if (d > g) {
                      d -= g;
                      continue;
                    }
                    (e = e.subarray(d)), (g -= d), (d = 0);
                  }
                  h.set(e, s), (s += g);
                }
                return r && (r -= i + 3), { data: h, pts: n, dts: a, len: r };
              }
              return null;
            }
            function q(t, e) {
              if (t.units.length && t.frame) {
                if (void 0 === t.pts) {
                  var r = e.samples,
                    i = r.length;
                  if (!i) return void e.dropped++;
                  var n = r[i - 1];
                  (t.pts = n.pts), (t.dts = n.dts);
                }
                e.samples.push(t);
              }
              t.debug.length &&
                v.logger.log(t.pts + "/" + t.dts + ":" + t.debug);
            }
            const X = (function () {
              function t(t, e, r) {
                (this.observer = void 0),
                  (this.config = void 0),
                  (this.typeSupported = void 0),
                  (this.sampleAes = null),
                  (this.pmtParsed = !1),
                  (this.audioCodec = void 0),
                  (this.videoCodec = void 0),
                  (this._duration = 0),
                  (this._pmtId = -1),
                  (this._avcTrack = void 0),
                  (this._audioTrack = void 0),
                  (this._id3Track = void 0),
                  (this._txtTrack = void 0),
                  (this.aacOverFlow = null),
                  (this.avcSample = null),
                  (this.remainderData = null),
                  (this.observer = t),
                  (this.config = e),
                  (this.typeSupported = r);
              }
              (t.probe = function (e) {
                var r = t.syncOffset(e);
                return (
                  r > 0 &&
                    v.logger.warn(
                      "MPEG2-TS detected but first sync word found @ offset " +
                        r
                    ),
                  -1 !== r
                );
              }),
                (t.syncOffset = function (t) {
                  for (
                    var e = t.length,
                      r = Math.min(940, t.length - K) + 1,
                      i = 0;
                    i < r;

                  ) {
                    for (var n = !1, a = i; a < e && 71 === t[a]; a += K)
                      if ((n || 0 !== j(t, a) || (n = !0), n && a + K > r))
                        return i;
                    i++;
                  }
                  return -1;
                }),
                (t.createTrack = function (t, e) {
                  return {
                    container:
                      "video" === t || "audio" === t ? "video/mp2t" : void 0,
                    type: t,
                    id: d.RemuxerTrackIdConfig[t],
                    pid: -1,
                    inputTimeScale: 9e4,
                    sequenceNumber: 0,
                    samples: [],
                    dropped: 0,
                    duration: "audio" === t ? e : void 0,
                  };
                });
              var e = t.prototype;
              return (
                (e.resetInitSegment = function (e, r, i, n) {
                  (this.pmtParsed = !1),
                    (this._pmtId = -1),
                    (this._avcTrack = t.createTrack("video")),
                    (this._audioTrack = t.createTrack("audio", n)),
                    (this._id3Track = t.createTrack("id3")),
                    (this._txtTrack = t.createTrack("text")),
                    (this._audioTrack.segmentCodec = "aac"),
                    (this.aacOverFlow = null),
                    (this.avcSample = null),
                    (this.remainderData = null),
                    (this.audioCodec = r),
                    (this.videoCodec = i),
                    (this._duration = n);
                }),
                (e.resetTimeStamp = function () {}),
                (e.resetContiguity = function () {
                  var t = this._audioTrack,
                    e = this._avcTrack,
                    r = this._id3Track;
                  t && (t.pesData = null),
                    e && (e.pesData = null),
                    r && (r.pesData = null),
                    (this.aacOverFlow = null),
                    (this.avcSample = null),
                    (this.remainderData = null);
                }),
                (e.demux = function (e, r, a, s) {
                  var o;
                  void 0 === a && (a = !1),
                    void 0 === s && (s = !1),
                    a || (this.sampleAes = null);
                  var l = this._avcTrack,
                    u = this._audioTrack,
                    h = this._id3Track,
                    c = this._txtTrack,
                    f = l.pid,
                    g = l.pesData,
                    p = u.pid,
                    m = h.pid,
                    y = u.pesData,
                    E = h.pesData,
                    T = null,
                    S = this.pmtParsed,
                    b = this._pmtId,
                    L = e.length;
                  if (
                    (this.remainderData &&
                      ((L = (e = (0, d.appendUint8Array)(this.remainderData, e))
                        .length),
                      (this.remainderData = null)),
                    L < K && !s)
                  )
                    return (
                      (this.remainderData = e),
                      {
                        audioTrack: u,
                        videoTrack: l,
                        id3Track: h,
                        textTrack: c,
                      }
                    );
                  var A = Math.max(0, t.syncOffset(e));
                  (L -= (L - A) % K) < e.byteLength &&
                    !s &&
                    (this.remainderData = new Uint8Array(
                      e.buffer,
                      L,
                      e.buffer.byteLength - L
                    ));
                  for (var D = 0, k = A; k < L; k += K)
                    if (71 === e[k]) {
                      var R = !!(64 & e[k + 1]),
                        I = j(e, k),
                        w = void 0;
                      if ((48 & e[k + 3]) >> 4 > 1) {
                        if ((w = k + 5 + e[k + 4]) === k + K) continue;
                      } else w = k + 4;
                      switch (I) {
                        case f:
                          R &&
                            (g && (o = W(g)) && this.parseAVCPES(l, c, o, !1),
                            (g = { data: [], size: 0 })),
                            g &&
                              (g.data.push(e.subarray(w, k + K)),
                              (g.size += k + K - w));
                          break;
                        case p:
                          if (R) {
                            if (y && (o = W(y)))
                              switch (u.segmentCodec) {
                                case "aac":
                                  this.parseAACPES(u, o);
                                  break;
                                case "mp3":
                                  this.parseMPEGPES(u, o);
                              }
                            y = { data: [], size: 0 };
                          }
                          y &&
                            (y.data.push(e.subarray(w, k + K)),
                            (y.size += k + K - w));
                          break;
                        case m:
                          R &&
                            (E && (o = W(E)) && this.parseID3PES(h, o),
                            (E = { data: [], size: 0 })),
                            E &&
                              (E.data.push(e.subarray(w, k + K)),
                              (E.size += k + K - w));
                          break;
                        case 0:
                          R && (w += e[w] + 1), (b = this._pmtId = V(e, w));
                          break;
                        case b:
                          R && (w += e[w] + 1);
                          var C = Y(e, w, this.typeSupported, a);
                          (f = C.avc) > 0 && (l.pid = f),
                            (p = C.audio) > 0 &&
                              ((u.pid = p), (u.segmentCodec = C.segmentCodec)),
                            (m = C.id3) > 0 && (h.pid = m),
                            null === T ||
                              S ||
                              (v.logger.warn(
                                "MPEG-TS PMT found at " +
                                  k +
                                  " after unknown PID '" +
                                  T +
                                  "'. Backtracking to sync byte @" +
                                  A +
                                  " to parse all TS packets."
                              ),
                              (T = null),
                              (k = A - 188)),
                            (S = this.pmtParsed = !0);
                          break;
                        case 17:
                        case 8191:
                          break;
                        default:
                          T = I;
                      }
                    } else D++;
                  D > 0 &&
                    this.observer.emit(i.Events.ERROR, i.Events.ERROR, {
                      type: n.ErrorTypes.MEDIA_ERROR,
                      details: n.ErrorDetails.FRAG_PARSING_ERROR,
                      fatal: !1,
                      reason:
                        "Found " +
                        D +
                        " TS packet/s that do not start with 0x47",
                    }),
                    (l.pesData = g),
                    (u.pesData = y),
                    (h.pesData = E);
                  var _ = {
                    audioTrack: u,
                    videoTrack: l,
                    id3Track: h,
                    textTrack: c,
                  };
                  return s && this.extractRemainingSamples(_), _;
                }),
                (e.flush = function () {
                  var t,
                    e = this.remainderData;
                  return (
                    (this.remainderData = null),
                    (t = e
                      ? this.demux(e, -1, !1, !0)
                      : {
                          videoTrack: this._avcTrack,
                          audioTrack: this._audioTrack,
                          id3Track: this._id3Track,
                          textTrack: this._txtTrack,
                        }),
                    this.extractRemainingSamples(t),
                    this.sampleAes ? this.decrypt(t, this.sampleAes) : t
                  );
                }),
                (e.extractRemainingSamples = function (t) {
                  var e,
                    r = t.audioTrack,
                    i = t.videoTrack,
                    n = t.id3Track,
                    a = t.textTrack,
                    s = i.pesData,
                    o = r.pesData,
                    l = n.pesData;
                  if (
                    (s && (e = W(s))
                      ? (this.parseAVCPES(i, a, e, !0), (i.pesData = null))
                      : (i.pesData = s),
                    o && (e = W(o)))
                  ) {
                    switch (r.segmentCodec) {
                      case "aac":
                        this.parseAACPES(r, e);
                        break;
                      case "mp3":
                        this.parseMPEGPES(r, e);
                    }
                    r.pesData = null;
                  } else
                    null != o &&
                      o.size &&
                      v.logger.log(
                        "last AAC PES packet truncated,might overlap between fragments"
                      ),
                      (r.pesData = o);
                  l && (e = W(l))
                    ? (this.parseID3PES(n, e), (n.pesData = null))
                    : (n.pesData = l);
                }),
                (e.demuxSampleAes = function (t, e, r) {
                  var i = this.demux(t, r, !0, !this.config.progressive),
                    n = (this.sampleAes = new B(this.observer, this.config, e));
                  return this.decrypt(i, n);
                }),
                (e.decrypt = function (t, e) {
                  return new Promise(function (r) {
                    var i = t.audioTrack,
                      n = t.videoTrack;
                    i.samples && "aac" === i.segmentCodec
                      ? e.decryptAacSamples(i.samples, 0, function () {
                          n.samples
                            ? e.decryptAvcSamples(n.samples, 0, 0, function () {
                                r(t);
                              })
                            : r(t);
                        })
                      : n.samples &&
                        e.decryptAvcSamples(n.samples, 0, 0, function () {
                          r(t);
                        });
                  });
                }),
                (e.destroy = function () {
                  this._duration = 0;
                }),
                (e.parseAVCPES = function (t, e, r, i) {
                  var n,
                    a = this,
                    s = this.parseAVCNALu(t, r.data),
                    o = this.avcSample,
                    l = !1;
                  (r.data = null),
                    o &&
                      s.length &&
                      !t.audFound &&
                      (q(o, t), (o = this.avcSample = H(!1, r.pts, r.dts, ""))),
                    s.forEach(function (i) {
                      switch (i.type) {
                        case 1:
                          (n = !0),
                            o || (o = a.avcSample = H(!0, r.pts, r.dts, "")),
                            (o.frame = !0);
                          var s = i.data;
                          if (l && s.length > 4) {
                            var u = new U(s).readSliceType();
                            (2 !== u && 4 !== u && 7 !== u && 9 !== u) ||
                              (o.key = !0);
                          }
                          break;
                        case 5:
                          (n = !0),
                            o || (o = a.avcSample = H(!0, r.pts, r.dts, "")),
                            (o.key = !0),
                            (o.frame = !0);
                          break;
                        case 6:
                          (n = !0),
                            (0, d.parseSEIMessageFromNALu)(
                              i.data,
                              1,
                              r.pts,
                              e.samples
                            );
                          break;
                        case 7:
                          if (((n = !0), (l = !0), !t.sps)) {
                            var h = new U(i.data).readSPS();
                            (t.width = h.width),
                              (t.height = h.height),
                              (t.pixelRatio = h.pixelRatio),
                              (t.sps = [i.data]),
                              (t.duration = a._duration);
                            for (
                              var c = i.data.subarray(1, 4), f = "avc1.", g = 0;
                              g < 3;
                              g++
                            ) {
                              var v = c[g].toString(16);
                              v.length < 2 && (v = "0" + v), (f += v);
                            }
                            t.codec = f;
                          }
                          break;
                        case 8:
                          (n = !0), t.pps || (t.pps = [i.data]);
                          break;
                        case 9:
                          (n = !1),
                            (t.audFound = !0),
                            o && q(o, t),
                            (o = a.avcSample = H(!1, r.pts, r.dts, ""));
                          break;
                        case 12:
                          n = !0;
                          break;
                        default:
                          (n = !1),
                            o && (o.debug += "unknown NAL " + i.type + " ");
                      }
                      o && n && o.units.push(i);
                    }),
                    i && o && (q(o, t), (this.avcSample = null));
                }),
                (e.getLastNalUnit = function (t) {
                  var e,
                    r,
                    i = this.avcSample;
                  if (
                    ((i && 0 !== i.units.length) || (i = t[t.length - 1]),
                    null !== (e = i) && void 0 !== e && e.units)
                  ) {
                    var n = i.units;
                    r = n[n.length - 1];
                  }
                  return r;
                }),
                (e.parseAVCNALu = function (t, e) {
                  var r,
                    i,
                    n = e.byteLength,
                    a = t.naluState || 0,
                    s = a,
                    o = [],
                    l = 0,
                    u = -1,
                    d = 0;
                  for (
                    -1 === a && ((u = 0), (d = 31 & e[0]), (a = 0), (l = 1));
                    l < n;

                  )
                    if (((r = e[l++]), a))
                      if (1 !== a)
                        if (r)
                          if (1 === r) {
                            if (u >= 0) {
                              var h = {
                                data: e.subarray(u, l - a - 1),
                                type: d,
                              };
                              o.push(h);
                            } else {
                              var c = this.getLastNalUnit(t.samples);
                              if (
                                c &&
                                (s &&
                                  l <= 4 - s &&
                                  c.state &&
                                  (c.data = c.data.subarray(
                                    0,
                                    c.data.byteLength - s
                                  )),
                                (i = l - a - 1) > 0)
                              ) {
                                var f = new Uint8Array(c.data.byteLength + i);
                                f.set(c.data, 0),
                                  f.set(e.subarray(0, i), c.data.byteLength),
                                  (c.data = f),
                                  (c.state = 0);
                              }
                            }
                            l < n
                              ? ((u = l), (d = 31 & e[l]), (a = 0))
                              : (a = -1);
                          } else a = 0;
                        else a = 3;
                      else a = r ? 0 : 2;
                    else a = r ? 0 : 1;
                  if (u >= 0 && a >= 0) {
                    var g = { data: e.subarray(u, n), type: d, state: a };
                    o.push(g);
                  }
                  if (0 === o.length) {
                    var v = this.getLastNalUnit(t.samples);
                    if (v) {
                      var p = new Uint8Array(v.data.byteLength + e.byteLength);
                      p.set(v.data, 0),
                        p.set(e, v.data.byteLength),
                        (v.data = p);
                    }
                  }
                  return (t.naluState = a), o;
                }),
                (e.parseAACPES = function (t, e) {
                  var r,
                    a,
                    s,
                    o,
                    l,
                    u = 0,
                    d = this.aacOverFlow,
                    h = e.data;
                  if (d) {
                    this.aacOverFlow = null;
                    var c = d.missing,
                      f = d.sample.unit.byteLength;
                    if (-1 === c) {
                      var g = new Uint8Array(f + h.byteLength);
                      g.set(d.sample.unit, 0), g.set(h, f), (h = g);
                    } else {
                      var p = f - c;
                      d.sample.unit.set(h.subarray(0, c), p),
                        t.samples.push(d.sample),
                        (u = d.missing);
                    }
                  }
                  for (r = u, a = h.length; r < a - 1 && !E(h, r); r++);
                  if (
                    r === u ||
                    (r < a - 1
                      ? ((s =
                          "AAC PES did not start with ADTS header,offset:" + r),
                        (o = !1))
                      : ((s = "no ADTS header found in AAC PES"), (o = !0)),
                    v.logger.warn("parsing error:" + s),
                    this.observer.emit(i.Events.ERROR, i.Events.ERROR, {
                      type: n.ErrorTypes.MEDIA_ERROR,
                      details: n.ErrorDetails.FRAG_PARSING_ERROR,
                      fatal: o,
                      reason: s,
                    }),
                    !o)
                  ) {
                    if (
                      (S(t, this.observer, h, r, this.audioCodec),
                      void 0 !== e.pts)
                    )
                      l = e.pts;
                    else {
                      if (!d)
                        return void v.logger.warn(
                          "[tsdemuxer]: AAC PES unknown PTS"
                        );
                      var m = b(t.samplerate);
                      l = d.sample.pts + m;
                    }
                    for (var y, T = 0; r < a; ) {
                      if (((r += (y = L(t, h, r, l, T)).length), y.missing)) {
                        this.aacOverFlow = y;
                        break;
                      }
                      for (T++; r < a - 1 && !E(h, r); r++);
                    }
                  }
                }),
                (e.parseMPEGPES = function (t, e) {
                  var r = e.data,
                    i = r.length,
                    n = 0,
                    a = 0,
                    s = e.pts;
                  if (void 0 !== s)
                    for (; a < i; )
                      if (M(r, a)) {
                        var o = O(t, r, a, s, n);
                        if (!o) break;
                        (a += o.length), n++;
                      } else a++;
                  else v.logger.warn("[tsdemuxer]: MPEG PES unknown PTS");
                }),
                (e.parseID3PES = function (t, e) {
                  if (void 0 !== e.pts) {
                    var r = G({}, e, {
                      type: this._avcTrack
                        ? l.MetadataSchema.emsg
                        : l.MetadataSchema.audioId3,
                      duration: Number.POSITIVE_INFINITY,
                    });
                    t.samples.push(r);
                  } else v.logger.warn("[tsdemuxer]: ID3 PES unknown PTS");
                }),
                t
              );
            })();
            function z(t, e) {
              return (
                (z = Object.setPrototypeOf
                  ? Object.setPrototypeOf.bind()
                  : function (t, e) {
                      return (t.__proto__ = e), t;
                    }),
                z(t, e)
              );
            }
            const Q = (function (t) {
              var e, r;
              function i() {
                return t.apply(this, arguments) || this;
              }
              (r = t),
                ((e = i).prototype = Object.create(r.prototype)),
                (e.prototype.constructor = e),
                z(e, r);
              var n = i.prototype;
              return (
                (n.resetInitSegment = function (e, r, i, n) {
                  t.prototype.resetInitSegment.call(this, e, r, i, n),
                    (this._audioTrack = {
                      container: "audio/mpeg",
                      type: "audio",
                      id: 2,
                      pid: -1,
                      sequenceNumber: 0,
                      segmentCodec: "mp3",
                      samples: [],
                      manifestCodec: r,
                      duration: n,
                      inputTimeScale: 9e4,
                      dropped: 0,
                    });
                }),
                (i.probe = function (t) {
                  if (!t) return !1;
                  for (
                    var e = (o.getID3Data(t, 0) || []).length, r = t.length;
                    e < r;
                    e++
                  )
                    if (N(t, e))
                      return v.logger.log("MPEG Audio sync word found !"), !0;
                  return !1;
                }),
                (n.canParse = function (t, e) {
                  return (function (t, e) {
                    return F(t, e) && 4 <= t.length - e;
                  })(t, e);
                }),
                (n.appendFrame = function (t, e, r) {
                  if (null !== this.basePTS)
                    return O(t, e, r, this.basePTS, this.frameIndex);
                }),
                i
              );
            })(g);
            var $ = r(524),
              J = r(923);
            function Z(t, e) {
              var r = null == t ? void 0 : t.codec;
              return r && r.length > 4
                ? r
                : "hvc1" === r || "hev1" === r
                ? "hvc1.1.c.L120.90"
                : "av01" === r
                ? "av01.0.04M.08"
                : "avc1" === r || e === J.ElementaryStreamTypes.VIDEO
                ? "avc1.42e01e"
                : "mp4a.40.5";
            }
            const tt = (function () {
              function t() {
                (this.emitInitSegment = !1),
                  (this.audioCodec = void 0),
                  (this.videoCodec = void 0),
                  (this.initData = void 0),
                  (this.initPTS = void 0),
                  (this.initTracks = void 0),
                  (this.lastEndTime = null);
              }
              var e = t.prototype;
              return (
                (e.destroy = function () {}),
                (e.resetTimeStamp = function (t) {
                  (this.initPTS = t), (this.lastEndTime = null);
                }),
                (e.resetNextTimestamp = function () {
                  this.lastEndTime = null;
                }),
                (e.resetInitSegment = function (t, e, r, i) {
                  (this.audioCodec = e),
                    (this.videoCodec = r),
                    this.generateInitSegment((0, d.patchEncyptionData)(t, i)),
                    (this.emitInitSegment = !0);
                }),
                (e.generateInitSegment = function (t) {
                  var e = this.audioCodec,
                    r = this.videoCodec;
                  if (!t || !t.byteLength)
                    return (
                      (this.initTracks = void 0), void (this.initData = void 0)
                    );
                  var i = (this.initData = (0, d.parseInitSegment)(t));
                  e || (e = Z(i.audio, J.ElementaryStreamTypes.AUDIO)),
                    r || (r = Z(i.video, J.ElementaryStreamTypes.VIDEO));
                  var n = {};
                  i.audio && i.video
                    ? (n.audiovideo = {
                        container: "video/mp4",
                        codec: e + "," + r,
                        initSegment: t,
                        id: "main",
                      })
                    : i.audio
                    ? (n.audio = {
                        container: "audio/mp4",
                        codec: e,
                        initSegment: t,
                        id: "audio",
                      })
                    : i.video
                    ? (n.video = {
                        container: "video/mp4",
                        codec: r,
                        initSegment: t,
                        id: "main",
                      })
                    : v.logger.warn(
                        "[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes."
                      ),
                    (this.initTracks = n);
                }),
                (e.remux = function (t, e, r, i, n) {
                  var a,
                    o = this.initPTS,
                    l = this.lastEndTime,
                    u = {
                      audio: void 0,
                      video: void 0,
                      text: i,
                      id3: r,
                      initSegment: void 0,
                    };
                  (0, s.isFiniteNumber)(l) || (l = this.lastEndTime = n || 0);
                  var h = e.samples;
                  if (!h || !h.length) return u;
                  var c = { initPTS: void 0, timescale: 1 },
                    f = this.initData;
                  if (
                    ((f && f.length) ||
                      (this.generateInitSegment(h), (f = this.initData)),
                    !f || !f.length)
                  )
                    return (
                      v.logger.warn(
                        "[passthrough-remuxer.ts]: Failed to generate initSegment."
                      ),
                      u
                    );
                  this.emitInitSegment &&
                    ((c.tracks = this.initTracks), (this.emitInitSegment = !1));
                  var g = (0, d.getStartDTS)(f, h);
                  (0, s.isFiniteNumber)(o) ||
                    (this.initPTS = c.initPTS = o = g - n);
                  var p = (0, d.getDuration)(h, f),
                    m = t ? g - o : l,
                    y = m + p;
                  (0, d.offsetStartDTS)(f, h, o),
                    p > 0
                      ? (this.lastEndTime = y)
                      : (v.logger.warn(
                          "Duration parsed from mp4 should be greater than zero"
                        ),
                        this.resetNextTimestamp());
                  var E = !!f.audio,
                    T = !!f.video,
                    S = "";
                  E && (S += "audio"), T && (S += "video");
                  var b = {
                    data1: h,
                    startPTS: m,
                    startDTS: m,
                    endPTS: y,
                    endDTS: y,
                    type: S,
                    hasAudio: E,
                    hasVideo: T,
                    nb: 1,
                    dropped: 0,
                  };
                  (u.audio = "audio" === b.type ? b : void 0),
                    (u.video = "audio" !== b.type ? b : void 0),
                    (u.initSegment = c);
                  var L = null != (a = this.initPTS) ? a : 0;
                  return (
                    (u.id3 = (0, $.flushTextTrackMetadataCueSamples)(
                      r,
                      n,
                      L,
                      L
                    )),
                    i.samples.length &&
                      (u.text = (0, $.flushTextTrackUserdataCueSamples)(
                        i,
                        n,
                        L
                      )),
                    u
                  );
                }),
                t
              );
            })();
            var et;
            try {
              et = self.performance.now.bind(self.performance);
            } catch (t) {
              v.logger.debug(
                "Unable to use Performance API on this environment"
              ),
                (et = self.Date.now);
            }
            var rt = [
                { demux: R, remux: tt },
                { demux: X, remux: $.default },
                { demux: D, remux: $.default },
                { demux: Q, remux: $.default },
              ],
              it = (function () {
                function t(t, e, r, i, n) {
                  (this.async = !1),
                    (this.observer = void 0),
                    (this.typeSupported = void 0),
                    (this.config = void 0),
                    (this.vendor = void 0),
                    (this.id = void 0),
                    (this.demuxer = void 0),
                    (this.remuxer = void 0),
                    (this.decrypter = void 0),
                    (this.probe = void 0),
                    (this.decryptionPromise = null),
                    (this.transmuxConfig = void 0),
                    (this.currentTransmuxState = void 0),
                    (this.observer = t),
                    (this.typeSupported = e),
                    (this.config = r),
                    (this.vendor = i),
                    (this.id = n);
                }
                var e = t.prototype;
                return (
                  (e.configure = function (t) {
                    (this.transmuxConfig = t),
                      this.decrypter && this.decrypter.reset();
                  }),
                  (e.push = function (t, e, r, i) {
                    var n = this,
                      a = r.transmuxing;
                    a.executeStart = et();
                    var s = new Uint8Array(t),
                      o = this.currentTransmuxState,
                      l = this.transmuxConfig;
                    i && (this.currentTransmuxState = i);
                    var u = i || o,
                      d = u.contiguous,
                      h = u.discontinuity,
                      c = u.trackSwitch,
                      f = u.accurateTimeOffset,
                      g = u.timeOffset,
                      v = u.initSegmentChange,
                      p = l.audioCodec,
                      m = l.videoCodec,
                      y = l.defaultInitPts,
                      E = l.duration,
                      T = l.initSegmentData,
                      S = (function (t, e) {
                        var r = null;
                        return (
                          t.byteLength > 0 &&
                            null != e &&
                            null != e.key &&
                            null !== e.iv &&
                            null != e.method &&
                            (r = e),
                          r
                        );
                      })(s, e);
                    if (S && "AES-128" === S.method) {
                      var b = this.getDecrypter();
                      if (!b.isSync())
                        return (
                          (this.decryptionPromise = b
                            .webCryptoDecrypt(s, S.key.buffer, S.iv.buffer)
                            .then(function (t) {
                              var e = n.push(t, null, r);
                              return (n.decryptionPromise = null), e;
                            })),
                          this.decryptionPromise
                        );
                      var L = b.softwareDecrypt(s, S.key.buffer, S.iv.buffer);
                      if ((r.part > -1 && (L = b.flush()), !L))
                        return (a.executeEnd = et()), nt(r);
                      s = new Uint8Array(L);
                    }
                    var A = this.needsProbing(h, c);
                    A && this.configureTransmuxer(s),
                      (h || c || v || A) &&
                        this.resetInitSegment(T, p, m, E, e),
                      (h || v || A) && this.resetInitialTimestamp(y),
                      d || this.resetContiguity();
                    var D = this.transmux(s, S, g, f, r),
                      k = this.currentTransmuxState;
                    return (
                      (k.contiguous = !0),
                      (k.discontinuity = !1),
                      (k.trackSwitch = !1),
                      (a.executeEnd = et()),
                      D
                    );
                  }),
                  (e.flush = function (t) {
                    var e = this,
                      r = t.transmuxing;
                    r.executeStart = et();
                    var a = this.decrypter,
                      s = this.currentTransmuxState,
                      o = this.decryptionPromise;
                    if (o)
                      return o.then(function () {
                        return e.flush(t);
                      });
                    var l = [],
                      u = s.timeOffset;
                    if (a) {
                      var d = a.flush();
                      d && l.push(this.push(d, null, t));
                    }
                    var h = this.demuxer,
                      c = this.remuxer;
                    if (!h || !c)
                      return (
                        this.observer.emit(i.Events.ERROR, i.Events.ERROR, {
                          type: n.ErrorTypes.MEDIA_ERROR,
                          details: n.ErrorDetails.FRAG_PARSING_ERROR,
                          fatal: !0,
                          reason: "no demux matching with content found",
                        }),
                        (r.executeEnd = et()),
                        [nt(t)]
                      );
                    var f = h.flush(u);
                    return at(f)
                      ? f.then(function (r) {
                          return e.flushRemux(l, r, t), l;
                        })
                      : (this.flushRemux(l, f, t), l);
                  }),
                  (e.flushRemux = function (t, e, r) {
                    var i = e.audioTrack,
                      n = e.videoTrack,
                      a = e.id3Track,
                      s = e.textTrack,
                      o = this.currentTransmuxState,
                      l = o.accurateTimeOffset,
                      u = o.timeOffset;
                    v.logger.log(
                      "[transmuxer.ts]: Flushed fragment " +
                        r.sn +
                        (r.part > -1 ? " p: " + r.part : "") +
                        " of level " +
                        r.level
                    );
                    var d = this.remuxer.remux(i, n, a, s, u, l, !0, this.id);
                    t.push({ remuxResult: d, chunkMeta: r }),
                      (r.transmuxing.executeEnd = et());
                  }),
                  (e.resetInitialTimestamp = function (t) {
                    var e = this.demuxer,
                      r = this.remuxer;
                    e && r && (e.resetTimeStamp(t), r.resetTimeStamp(t));
                  }),
                  (e.resetContiguity = function () {
                    var t = this.demuxer,
                      e = this.remuxer;
                    t && e && (t.resetContiguity(), e.resetNextTimestamp());
                  }),
                  (e.resetInitSegment = function (t, e, r, i, n) {
                    var a = this.demuxer,
                      s = this.remuxer;
                    a &&
                      s &&
                      (a.resetInitSegment(t, e, r, i),
                      s.resetInitSegment(t, e, r, n));
                  }),
                  (e.destroy = function () {
                    this.demuxer &&
                      (this.demuxer.destroy(), (this.demuxer = void 0)),
                      this.remuxer &&
                        (this.remuxer.destroy(), (this.remuxer = void 0));
                  }),
                  (e.transmux = function (t, e, r, i, n) {
                    return e && "SAMPLE-AES" === e.method
                      ? this.transmuxSampleAes(t, e, r, i, n)
                      : this.transmuxUnencrypted(t, r, i, n);
                  }),
                  (e.transmuxUnencrypted = function (t, e, r, i) {
                    var n = this.demuxer.demux(
                        t,
                        e,
                        !1,
                        !this.config.progressive
                      ),
                      a = n.audioTrack,
                      s = n.videoTrack,
                      o = n.id3Track,
                      l = n.textTrack;
                    return {
                      remuxResult: this.remuxer.remux(
                        a,
                        s,
                        o,
                        l,
                        e,
                        r,
                        !1,
                        this.id
                      ),
                      chunkMeta: i,
                    };
                  }),
                  (e.transmuxSampleAes = function (t, e, r, i, n) {
                    var a = this;
                    return this.demuxer
                      .demuxSampleAes(t, e, r)
                      .then(function (t) {
                        return {
                          remuxResult: a.remuxer.remux(
                            t.audioTrack,
                            t.videoTrack,
                            t.id3Track,
                            t.textTrack,
                            r,
                            i,
                            !1,
                            a.id
                          ),
                          chunkMeta: n,
                        };
                      });
                  }),
                  (e.configureTransmuxer = function (t) {
                    for (
                      var e,
                        r = this.config,
                        i = this.observer,
                        n = this.typeSupported,
                        a = this.vendor,
                        s = 0,
                        o = rt.length;
                      s < o;
                      s++
                    )
                      if (rt[s].demux.probe(t)) {
                        e = rt[s];
                        break;
                      }
                    e ||
                      (v.logger.warn(
                        "Failed to find demuxer by probing frag, treating as mp4 passthrough"
                      ),
                      (e = { demux: R, remux: tt }));
                    var l = this.demuxer,
                      u = this.remuxer,
                      d = e.remux,
                      h = e.demux;
                    (u && u instanceof d) || (this.remuxer = new d(i, r, n, a)),
                      (l && l instanceof h) ||
                        ((this.demuxer = new h(i, r, n)),
                        (this.probe = h.probe));
                  }),
                  (e.needsProbing = function (t, e) {
                    return !this.demuxer || !this.remuxer || t || e;
                  }),
                  (e.getDecrypter = function () {
                    var t = this.decrypter;
                    return (
                      t || (t = this.decrypter = new a.default(this.config)), t
                    );
                  }),
                  t
                );
              })(),
              nt = function (t) {
                return { remuxResult: {}, chunkMeta: t };
              };
            function at(t) {
              return "then" in t && t.then instanceof Function;
            }
            var st = function (t, e, r, i, n) {
                (this.audioCodec = void 0),
                  (this.videoCodec = void 0),
                  (this.initSegmentData = void 0),
                  (this.duration = void 0),
                  (this.defaultInitPts = void 0),
                  (this.audioCodec = t),
                  (this.videoCodec = e),
                  (this.initSegmentData = r),
                  (this.duration = i),
                  (this.defaultInitPts = n);
              },
              ot = function (t, e, r, i, n, a) {
                (this.discontinuity = void 0),
                  (this.contiguous = void 0),
                  (this.accurateTimeOffset = void 0),
                  (this.trackSwitch = void 0),
                  (this.timeOffset = void 0),
                  (this.initSegmentChange = void 0),
                  (this.discontinuity = t),
                  (this.contiguous = e),
                  (this.accurateTimeOffset = r),
                  (this.trackSwitch = i),
                  (this.timeOffset = n),
                  (this.initSegmentChange = a);
              };
          },
          973: (t, e, r) => {
            "use strict";
            var i, n;
            r.r(e),
              r.d(e, { ErrorDetails: () => n, ErrorTypes: () => i }),
              (function (t) {
                (t.NETWORK_ERROR = "networkError"),
                  (t.MEDIA_ERROR = "mediaError"),
                  (t.KEY_SYSTEM_ERROR = "keySystemError"),
                  (t.MUX_ERROR = "muxError"),
                  (t.OTHER_ERROR = "otherError");
              })(i || (i = {})),
              (function (t) {
                (t.KEY_SYSTEM_NO_KEYS = "keySystemNoKeys"),
                  (t.KEY_SYSTEM_NO_ACCESS = "keySystemNoAccess"),
                  (t.KEY_SYSTEM_NO_SESSION = "keySystemNoSession"),
                  (t.KEY_SYSTEM_NO_CONFIGURED_LICENSE =
                    "keySystemNoConfiguredLicense"),
                  (t.KEY_SYSTEM_LICENSE_REQUEST_FAILED =
                    "keySystemLicenseRequestFailed"),
                  (t.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED =
                    "keySystemServerCertificateRequestFailed"),
                  (t.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED =
                    "keySystemServerCertificateUpdateFailed"),
                  (t.KEY_SYSTEM_SESSION_UPDATE_FAILED =
                    "keySystemSessionUpdateFailed"),
                  (t.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED =
                    "keySystemStatusOutputRestricted"),
                  (t.KEY_SYSTEM_STATUS_INTERNAL_ERROR =
                    "keySystemStatusInternalError"),
                  (t.MANIFEST_LOAD_ERROR = "manifestLoadError"),
                  (t.MANIFEST_LOAD_TIMEOUT = "manifestLoadTimeOut"),
                  (t.MANIFEST_PARSING_ERROR = "manifestParsingError"),
                  (t.MANIFEST_INCOMPATIBLE_CODECS_ERROR =
                    "manifestIncompatibleCodecsError"),
                  (t.LEVEL_EMPTY_ERROR = "levelEmptyError"),
                  (t.LEVEL_LOAD_ERROR = "levelLoadError"),
                  (t.LEVEL_LOAD_TIMEOUT = "levelLoadTimeOut"),
                  (t.LEVEL_SWITCH_ERROR = "levelSwitchError"),
                  (t.AUDIO_TRACK_LOAD_ERROR = "audioTrackLoadError"),
                  (t.AUDIO_TRACK_LOAD_TIMEOUT = "audioTrackLoadTimeOut"),
                  (t.SUBTITLE_LOAD_ERROR = "subtitleTrackLoadError"),
                  (t.SUBTITLE_TRACK_LOAD_TIMEOUT = "subtitleTrackLoadTimeOut"),
                  (t.FRAG_LOAD_ERROR = "fragLoadError"),
                  (t.FRAG_LOAD_TIMEOUT = "fragLoadTimeOut"),
                  (t.FRAG_DECRYPT_ERROR = "fragDecryptError"),
                  (t.FRAG_PARSING_ERROR = "fragParsingError"),
                  (t.REMUX_ALLOC_ERROR = "remuxAllocError"),
                  (t.KEY_LOAD_ERROR = "keyLoadError"),
                  (t.KEY_LOAD_TIMEOUT = "keyLoadTimeOut"),
                  (t.BUFFER_ADD_CODEC_ERROR = "bufferAddCodecError"),
                  (t.BUFFER_INCOMPATIBLE_CODECS_ERROR =
                    "bufferIncompatibleCodecsError"),
                  (t.BUFFER_APPEND_ERROR = "bufferAppendError"),
                  (t.BUFFER_APPENDING_ERROR = "bufferAppendingError"),
                  (t.BUFFER_STALLED_ERROR = "bufferStalledError"),
                  (t.BUFFER_FULL_ERROR = "bufferFullError"),
                  (t.BUFFER_SEEK_OVER_HOLE = "bufferSeekOverHole"),
                  (t.BUFFER_NUDGE_ON_STALL = "bufferNudgeOnStall"),
                  (t.INTERNAL_EXCEPTION = "internalException"),
                  (t.INTERNAL_ABORTED = "aborted"),
                  (t.UNKNOWN = "unknown");
              })(n || (n = {}));
          },
          851: (t, e, r) => {
            "use strict";
            var i;
            r.r(e),
              r.d(e, { Events: () => i }),
              (function (t) {
                (t.MEDIA_ATTACHING = "hlsMediaAttaching"),
                  (t.MEDIA_ATTACHED = "hlsMediaAttached"),
                  (t.MEDIA_DETACHING = "hlsMediaDetaching"),
                  (t.MEDIA_DETACHED = "hlsMediaDetached"),
                  (t.BUFFER_RESET = "hlsBufferReset"),
                  (t.BUFFER_CODECS = "hlsBufferCodecs"),
                  (t.BUFFER_CREATED = "hlsBufferCreated"),
                  (t.BUFFER_APPENDING = "hlsBufferAppending"),
                  (t.BUFFER_APPENDED = "hlsBufferAppended"),
                  (t.BUFFER_EOS = "hlsBufferEos"),
                  (t.BUFFER_FLUSHING = "hlsBufferFlushing"),
                  (t.BUFFER_FLUSHED = "hlsBufferFlushed"),
                  (t.MANIFEST_LOADING = "hlsManifestLoading"),
                  (t.MANIFEST_LOADED = "hlsManifestLoaded"),
                  (t.MANIFEST_PARSED = "hlsManifestParsed"),
                  (t.LEVEL_SWITCHING = "hlsLevelSwitching"),
                  (t.LEVEL_SWITCHED = "hlsLevelSwitched"),
                  (t.LEVEL_LOADING = "hlsLevelLoading"),
                  (t.LEVEL_LOADED = "hlsLevelLoaded"),
                  (t.LEVEL_UPDATED = "hlsLevelUpdated"),
                  (t.LEVEL_PTS_UPDATED = "hlsLevelPtsUpdated"),
                  (t.LEVELS_UPDATED = "hlsLevelsUpdated"),
                  (t.AUDIO_TRACKS_UPDATED = "hlsAudioTracksUpdated"),
                  (t.AUDIO_TRACK_SWITCHING = "hlsAudioTrackSwitching"),
                  (t.AUDIO_TRACK_SWITCHED = "hlsAudioTrackSwitched"),
                  (t.AUDIO_TRACK_LOADING = "hlsAudioTrackLoading"),
                  (t.AUDIO_TRACK_LOADED = "hlsAudioTrackLoaded"),
                  (t.SUBTITLE_TRACKS_UPDATED = "hlsSubtitleTracksUpdated"),
                  (t.SUBTITLE_TRACKS_CLEARED = "hlsSubtitleTracksCleared"),
                  (t.SUBTITLE_TRACK_SWITCH = "hlsSubtitleTrackSwitch"),
                  (t.SUBTITLE_TRACK_LOADING = "hlsSubtitleTrackLoading"),
                  (t.SUBTITLE_TRACK_LOADED = "hlsSubtitleTrackLoaded"),
                  (t.SUBTITLE_FRAG_PROCESSED = "hlsSubtitleFragProcessed"),
                  (t.CUES_PARSED = "hlsCuesParsed"),
                  (t.NON_NATIVE_TEXT_TRACKS_FOUND =
                    "hlsNonNativeTextTracksFound"),
                  (t.INIT_PTS_FOUND = "hlsInitPtsFound"),
                  (t.FRAG_LOADING = "hlsFragLoading"),
                  (t.FRAG_LOAD_EMERGENCY_ABORTED =
                    "hlsFragLoadEmergencyAborted"),
                  (t.FRAG_LOADED = "hlsFragLoaded"),
                  (t.FRAG_DECRYPTED = "hlsFragDecrypted"),
                  (t.FRAG_PARSING_INIT_SEGMENT = "hlsFragParsingInitSegment"),
                  (t.FRAG_PARSING_USERDATA = "hlsFragParsingUserdata"),
                  (t.FRAG_PARSING_METADATA = "hlsFragParsingMetadata"),
                  (t.FRAG_PARSED = "hlsFragParsed"),
                  (t.FRAG_BUFFERED = "hlsFragBuffered"),
                  (t.FRAG_CHANGED = "hlsFragChanged"),
                  (t.FPS_DROP = "hlsFpsDrop"),
                  (t.FPS_DROP_LEVEL_CAPPING = "hlsFpsDropLevelCapping"),
                  (t.ERROR = "hlsError"),
                  (t.DESTROYING = "hlsDestroying"),
                  (t.KEY_LOADING = "hlsKeyLoading"),
                  (t.KEY_LOADED = "hlsKeyLoaded"),
                  (t.LIVE_BACK_BUFFER_REACHED = "hlsLiveBackBufferReached"),
                  (t.BACK_BUFFER_REACHED = "hlsBackBufferReached");
              })(i || (i = {}));
          },
          76: (t, e, r) => {
            "use strict";
            r.r(e), r.d(e, { default: () => Bi });
            var i,
              n = r(945),
              a = r(965),
              s = r(851),
              o = r(973),
              l = r(93),
              u = /^(\d+)x(\d+)$/,
              d = /\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g,
              h = (function () {
                function t(e) {
                  for (var r in ("string" == typeof e &&
                    (e = t.parseAttrList(e)),
                  e))
                    e.hasOwnProperty(r) && (this[r] = e[r]);
                }
                var e = t.prototype;
                return (
                  (e.decimalInteger = function (t) {
                    var e = parseInt(this[t], 10);
                    return e > Number.MAX_SAFE_INTEGER ? 1 / 0 : e;
                  }),
                  (e.hexadecimalInteger = function (t) {
                    if (this[t]) {
                      var e = (this[t] || "0x").slice(2);
                      e = (1 & e.length ? "0" : "") + e;
                      for (
                        var r = new Uint8Array(e.length / 2), i = 0;
                        i < e.length / 2;
                        i++
                      )
                        r[i] = parseInt(e.slice(2 * i, 2 * i + 2), 16);
                      return r;
                    }
                    return null;
                  }),
                  (e.hexadecimalIntegerAsNumber = function (t) {
                    var e = parseInt(this[t], 16);
                    return e > Number.MAX_SAFE_INTEGER ? 1 / 0 : e;
                  }),
                  (e.decimalFloatingPoint = function (t) {
                    return parseFloat(this[t]);
                  }),
                  (e.optionalFloat = function (t, e) {
                    var r = this[t];
                    return r ? parseFloat(r) : e;
                  }),
                  (e.enumeratedString = function (t) {
                    return this[t];
                  }),
                  (e.bool = function (t) {
                    return "YES" === this[t];
                  }),
                  (e.decimalResolution = function (t) {
                    var e = u.exec(this[t]);
                    if (null !== e)
                      return {
                        width: parseInt(e[1], 10),
                        height: parseInt(e[2], 10),
                      };
                  }),
                  (t.parseAttrList = function (t) {
                    var e,
                      r = {};
                    for (d.lastIndex = 0; null !== (e = d.exec(t)); ) {
                      var i = e[2];
                      0 === i.indexOf('"') &&
                        i.lastIndexOf('"') === i.length - 1 &&
                        (i = i.slice(1, -1)),
                        (r[e[1]] = i);
                    }
                    return r;
                  }),
                  t
                );
              })();
            function c() {
              return (
                (c = Object.assign
                  ? Object.assign.bind()
                  : function (t) {
                      for (var e = 1; e < arguments.length; e++) {
                        var r = arguments[e];
                        for (var i in r)
                          Object.prototype.hasOwnProperty.call(r, i) &&
                            (t[i] = r[i]);
                      }
                      return t;
                    }),
                c.apply(this, arguments)
              );
            }
            function f(t, e) {
              for (var r = 0; r < e.length; r++) {
                var i = e[r];
                (i.enumerable = i.enumerable || !1),
                  (i.configurable = !0),
                  "value" in i && (i.writable = !0),
                  Object.defineProperty(
                    t,
                    (void 0,
                    "symbol" ==
                    typeof (n = (function (t, e) {
                      if ("object" != typeof t || null === t) return t;
                      var r = t[Symbol.toPrimitive];
                      if (void 0 !== r) {
                        var i = r.call(t, e);
                        if ("object" != typeof i) return i;
                        throw new TypeError(
                          "@@toPrimitive must return a primitive value."
                        );
                      }
                      return String(t);
                    })(i.key, "string"))
                      ? n
                      : String(n)),
                    i
                  );
              }
              var n;
            }
            !(function (t) {
              (t.ID = "ID"),
                (t.CLASS = "CLASS"),
                (t.START_DATE = "START-DATE"),
                (t.DURATION = "DURATION"),
                (t.END_DATE = "END-DATE"),
                (t.END_ON_NEXT = "END-ON-NEXT"),
                (t.PLANNED_DURATION = "PLANNED-DURATION"),
                (t.SCTE35_OUT = "SCTE35-OUT"),
                (t.SCTE35_IN = "SCTE35-IN");
            })(i || (i = {}));
            var g = (function () {
                function t(t, e) {
                  if (
                    ((this.attr = void 0),
                    (this._startDate = void 0),
                    (this._endDate = void 0),
                    (this._badValueForSameId = void 0),
                    e)
                  ) {
                    var r = e.attr;
                    for (var n in r)
                      if (
                        Object.prototype.hasOwnProperty.call(t, n) &&
                        t[n] !== r[n]
                      ) {
                        l.logger.warn(
                          'DATERANGE tag attribute: "' +
                            n +
                            '" does not match for tags with ID: "' +
                            t.ID +
                            '"'
                        ),
                          (this._badValueForSameId = n);
                        break;
                      }
                    t = c(new h({}), r, t);
                  }
                  if (
                    ((this.attr = t),
                    (this._startDate = new Date(t[i.START_DATE])),
                    i.END_DATE in this.attr)
                  ) {
                    var s = new Date(this.attr[i.END_DATE]);
                    (0, a.isFiniteNumber)(s.getTime()) && (this._endDate = s);
                  }
                }
                var e, r;
                return (
                  (e = t),
                  (r = [
                    {
                      key: "id",
                      get: function () {
                        return this.attr.ID;
                      },
                    },
                    {
                      key: "class",
                      get: function () {
                        return this.attr.CLASS;
                      },
                    },
                    {
                      key: "startDate",
                      get: function () {
                        return this._startDate;
                      },
                    },
                    {
                      key: "endDate",
                      get: function () {
                        if (this._endDate) return this._endDate;
                        var t = this.duration;
                        return null !== t
                          ? new Date(this._startDate.getTime() + 1e3 * t)
                          : null;
                      },
                    },
                    {
                      key: "duration",
                      get: function () {
                        if (i.DURATION in this.attr) {
                          var t = this.attr.decimalFloatingPoint(i.DURATION);
                          if ((0, a.isFiniteNumber)(t)) return t;
                        } else if (this._endDate)
                          return (
                            (this._endDate.getTime() -
                              this._startDate.getTime()) /
                            1e3
                          );
                        return null;
                      },
                    },
                    {
                      key: "plannedDuration",
                      get: function () {
                        return i.PLANNED_DURATION in this.attr
                          ? this.attr.decimalFloatingPoint(i.PLANNED_DURATION)
                          : null;
                      },
                    },
                    {
                      key: "endOnNext",
                      get: function () {
                        return this.attr.bool(i.END_ON_NEXT);
                      },
                    },
                    {
                      key: "isValid",
                      get: function () {
                        return (
                          !!this.id &&
                          !this._badValueForSameId &&
                          (0, a.isFiniteNumber)(this.startDate.getTime()) &&
                          (null === this.duration || this.duration >= 0) &&
                          (!this.endOnNext || !!this.class)
                        );
                      },
                    },
                  ]) && f(e.prototype, r),
                  Object.defineProperty(e, "prototype", { writable: !1 }),
                  t
                );
              })(),
              v = r(923);
            function p(t, e) {
              for (var r = 0; r < e.length; r++) {
                var i = e[r];
                (i.enumerable = i.enumerable || !1),
                  (i.configurable = !0),
                  "value" in i && (i.writable = !0),
                  Object.defineProperty(
                    t,
                    (void 0,
                    "symbol" ==
                    typeof (n = (function (t, e) {
                      if ("object" != typeof t || null === t) return t;
                      var r = t[Symbol.toPrimitive];
                      if (void 0 !== r) {
                        var i = r.call(t, e);
                        if ("object" != typeof i) return i;
                        throw new TypeError(
                          "@@toPrimitive must return a primitive value."
                        );
                      }
                      return String(t);
                    })(i.key, "string"))
                      ? n
                      : String(n)),
                    i
                  );
              }
              var n;
            }
            var m,
              y,
              E,
              T = (function () {
                function t(t) {
                  (this.PTSKnown = !1),
                    (this.alignedSliding = !1),
                    (this.averagetargetduration = void 0),
                    (this.endCC = 0),
                    (this.endSN = 0),
                    (this.fragments = void 0),
                    (this.fragmentHint = void 0),
                    (this.partList = null),
                    (this.dateRanges = void 0),
                    (this.live = !0),
                    (this.ageHeader = 0),
                    (this.advancedDateTime = void 0),
                    (this.updated = !0),
                    (this.advanced = !0),
                    (this.availabilityDelay = void 0),
                    (this.misses = 0),
                    (this.startCC = 0),
                    (this.startSN = 0),
                    (this.startTimeOffset = null),
                    (this.targetduration = 0),
                    (this.totalduration = 0),
                    (this.type = null),
                    (this.url = void 0),
                    (this.m3u8 = ""),
                    (this.version = null),
                    (this.canBlockReload = !1),
                    (this.canSkipUntil = 0),
                    (this.canSkipDateRanges = !1),
                    (this.skippedSegments = 0),
                    (this.recentlyRemovedDateranges = void 0),
                    (this.partHoldBack = 0),
                    (this.holdBack = 0),
                    (this.partTarget = 0),
                    (this.preloadHint = void 0),
                    (this.renditionReports = void 0),
                    (this.tuneInGoal = 0),
                    (this.deltaUpdateFailed = void 0),
                    (this.driftStartTime = 0),
                    (this.driftEndTime = 0),
                    (this.driftStart = 0),
                    (this.driftEnd = 0),
                    (this.encryptedFragments = void 0),
                    (this.fragments = []),
                    (this.encryptedFragments = []),
                    (this.dateRanges = {}),
                    (this.url = t);
                }
                var e, r;
                return (
                  (t.prototype.reloaded = function (t) {
                    if (!t)
                      return (this.advanced = !0), void (this.updated = !0);
                    var e = this.lastPartSn - t.lastPartSn,
                      r = this.lastPartIndex - t.lastPartIndex;
                    (this.updated = this.endSN !== t.endSN || !!r || !!e),
                      (this.advanced =
                        this.endSN > t.endSN || e > 0 || (0 === e && r > 0)),
                      this.updated || this.advanced
                        ? (this.misses = Math.floor(0.6 * t.misses))
                        : (this.misses = t.misses + 1),
                      (this.availabilityDelay = t.availabilityDelay);
                  }),
                  (e = t),
                  (r = [
                    {
                      key: "hasProgramDateTime",
                      get: function () {
                        return (
                          !!this.fragments.length &&
                          (0, a.isFiniteNumber)(
                            this.fragments[this.fragments.length - 1]
                              .programDateTime
                          )
                        );
                      },
                    },
                    {
                      key: "levelTargetDuration",
                      get: function () {
                        return (
                          this.averagetargetduration ||
                          this.targetduration ||
                          10
                        );
                      },
                    },
                    {
                      key: "drift",
                      get: function () {
                        var t = this.driftEndTime - this.driftStartTime;
                        return t > 0
                          ? (1e3 * (this.driftEnd - this.driftStart)) / t
                          : 1;
                      },
                    },
                    {
                      key: "edge",
                      get: function () {
                        return this.partEnd || this.fragmentEnd;
                      },
                    },
                    {
                      key: "partEnd",
                      get: function () {
                        var t;
                        return null !== (t = this.partList) &&
                          void 0 !== t &&
                          t.length
                          ? this.partList[this.partList.length - 1].end
                          : this.fragmentEnd;
                      },
                    },
                    {
                      key: "fragmentEnd",
                      get: function () {
                        var t;
                        return null !== (t = this.fragments) &&
                          void 0 !== t &&
                          t.length
                          ? this.fragments[this.fragments.length - 1].end
                          : 0;
                      },
                    },
                    {
                      key: "age",
                      get: function () {
                        return this.advancedDateTime
                          ? Math.max(Date.now() - this.advancedDateTime, 0) /
                              1e3
                          : 0;
                      },
                    },
                    {
                      key: "lastPartIndex",
                      get: function () {
                        var t;
                        return null !== (t = this.partList) &&
                          void 0 !== t &&
                          t.length
                          ? this.partList[this.partList.length - 1].index
                          : -1;
                      },
                    },
                    {
                      key: "lastPartSn",
                      get: function () {
                        var t;
                        return null !== (t = this.partList) &&
                          void 0 !== t &&
                          t.length
                          ? this.partList[this.partList.length - 1].fragment.sn
                          : this.endSN;
                      },
                    },
                  ]) && p(e.prototype, r),
                  Object.defineProperty(e, "prototype", { writable: !1 }),
                  t
                );
              })();
            function S(t) {
              return Uint8Array.from(atob(t), function (t) {
                return t.charCodeAt(0);
              });
            }
            function b(t) {
              return Uint8Array.from(
                unescape(encodeURIComponent(t)),
                function (t) {
                  return t.charCodeAt(0);
                }
              );
            }
            function L(t) {
              switch (t) {
                case y.FAIRPLAY:
                  return m.FAIRPLAY;
                case y.PLAYREADY:
                  return m.PLAYREADY;
                case y.WIDEVINE:
                  return m.WIDEVINE;
                case y.CLEARKEY:
                  return m.CLEARKEY;
              }
            }
            function A(t) {
              switch (t) {
                case m.FAIRPLAY:
                  return y.FAIRPLAY;
                case m.PLAYREADY:
                  return y.PLAYREADY;
                case m.WIDEVINE:
                  return y.WIDEVINE;
                case m.CLEARKEY:
                  return y.CLEARKEY;
              }
            }
            function D(t) {
              var e = t.drmSystems,
                r = t.widevineLicenseUrl,
                i = e
                  ? [m.FAIRPLAY, m.WIDEVINE, m.PLAYREADY, m.CLEARKEY].filter(
                      function (t) {
                        return !!e[t];
                      }
                    )
                  : [];
              return !i[m.WIDEVINE] && r && i.push(m.WIDEVINE), i;
            }
            !(function (t) {
              (t.CLEARKEY = "org.w3.clearkey"),
                (t.FAIRPLAY = "com.apple.fps"),
                (t.PLAYREADY = "com.microsoft.playready"),
                (t.WIDEVINE = "com.widevine.alpha");
            })(m || (m = {})),
              (function (t) {
                (t.CLEARKEY = "org.w3.clearkey"),
                  (t.FAIRPLAY = "com.apple.streamingkeydelivery"),
                  (t.PLAYREADY = "com.microsoft.playready"),
                  (t.WIDEVINE =
                    "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed");
              })(y || (y = {})),
              (function (t) {
                t.WIDEVINE = "edef8ba979d64acea3c827dcd51d21ed";
              })(E || (E = {}));
            var k =
                "undefined" != typeof self &&
                self.navigator &&
                self.navigator.requestMediaKeySystemAccess
                  ? self.navigator.requestMediaKeySystemAccess.bind(
                      self.navigator
                    )
                  : null,
              R = r(63),
              I = {},
              w = (function () {
                function t(t, e, r, i, n) {
                  void 0 === i && (i = [1]),
                    void 0 === n && (n = null),
                    (this.uri = void 0),
                    (this.method = void 0),
                    (this.keyFormat = void 0),
                    (this.keyFormatVersions = void 0),
                    (this.encrypted = void 0),
                    (this.isCommonEncryption = void 0),
                    (this.iv = null),
                    (this.key = null),
                    (this.keyId = null),
                    (this.pssh = null),
                    (this.method = t),
                    (this.uri = e),
                    (this.keyFormat = r),
                    (this.keyFormatVersions = i),
                    (this.iv = n),
                    (this.encrypted = !!t && "NONE" !== t),
                    (this.isCommonEncryption =
                      this.encrypted && "AES-128" !== t);
                }
                t.clearKeyUriToKeyIdMap = function () {
                  I = {};
                };
                var e = t.prototype;
                return (
                  (e.isSupported = function () {
                    if (this.method) {
                      if ("AES-128" === this.method || "NONE" === this.method)
                        return !0;
                      switch (this.keyFormat) {
                        case "identity":
                          return "SAMPLE-AES" === this.method;
                        case y.FAIRPLAY:
                        case y.WIDEVINE:
                        case y.PLAYREADY:
                        case y.CLEARKEY:
                          return (
                            -1 !==
                            [
                              "ISO-23001-7",
                              "SAMPLE-AES",
                              "SAMPLE-AES-CENC",
                              "SAMPLE-AES-CTR",
                            ].indexOf(this.method)
                          );
                      }
                    }
                    return !1;
                  }),
                  (e.getDecryptData = function (e) {
                    if (!this.encrypted || !this.uri) return null;
                    if ("AES-128" === this.method && this.uri && !this.iv) {
                      "number" != typeof e &&
                        ("AES-128" !== this.method ||
                          this.iv ||
                          l.logger.warn(
                            'missing IV for initialization segment with method="' +
                              this.method +
                              '" - compliance issue'
                          ),
                        (e = 0));
                      var r = (function (t) {
                        for (var e = new Uint8Array(16), r = 12; r < 16; r++)
                          e[r] = (t >> (8 * (15 - r))) & 255;
                        return e;
                      })(e);
                      return new t(
                        this.method,
                        this.uri,
                        "identity",
                        this.keyFormatVersions,
                        r
                      );
                    }
                    var i = (function (t) {
                      var e,
                        r,
                        i = t.split(":"),
                        n = null;
                      if ("data" === i[0] && 2 === i.length) {
                        var a = i[1].split(";"),
                          s = a[a.length - 1].split(",");
                        if (2 === s.length) {
                          var o = "base64" === s[0],
                            l = s[1];
                          o
                            ? (a.splice(-1, 1), (n = S(l)))
                            : ((e = b(l).subarray(0, 16)),
                              (r = new Uint8Array(16)).set(e, 16 - e.length),
                              (n = r));
                        }
                      }
                      return n;
                    })(this.uri);
                    if (i)
                      switch (this.keyFormat) {
                        case y.WIDEVINE:
                          (this.pssh = i),
                            i.length >= 22 &&
                              (this.keyId = i.subarray(
                                i.length - 22,
                                i.length - 6
                              ));
                          break;
                        case y.PLAYREADY:
                          var n = new Uint8Array([
                            154, 4, 240, 121, 152, 64, 66, 134, 171, 146, 230,
                            91, 224, 136, 95, 149,
                          ]);
                          this.pssh = (0, R.mp4pssh)(n, null, i);
                          var a = new Uint16Array(
                              i.buffer,
                              i.byteOffset,
                              i.byteLength / 2
                            ),
                            s = String.fromCharCode.apply(null, Array.from(a)),
                            o = s.substring(s.indexOf("<"), s.length),
                            u = new DOMParser()
                              .parseFromString(o, "text/xml")
                              .getElementsByTagName("KID")[0];
                          if (u) {
                            var d = u.childNodes[0]
                              ? u.childNodes[0].nodeValue
                              : u.getAttribute("VALUE");
                            if (d) {
                              var h = S(d).subarray(0, 16);
                              !(function (t) {
                                var e = function (t, e, r) {
                                  var i = t[e];
                                  (t[e] = t[r]), (t[r] = i);
                                };
                                e(t, 0, 3), e(t, 1, 2), e(t, 4, 5), e(t, 6, 7);
                              })(h),
                                (this.keyId = h);
                            }
                          }
                          break;
                        default:
                          var c = i.subarray(0, 16);
                          if (16 !== c.length) {
                            var f = new Uint8Array(16);
                            f.set(c, 16 - c.length), (c = f);
                          }
                          this.keyId = c;
                      }
                    if (!this.keyId || 16 !== this.keyId.byteLength) {
                      var g = I[this.uri];
                      if (!g) {
                        var v = Object.keys(I).length % Number.MAX_SAFE_INTEGER;
                        (g = new Uint8Array(16)),
                          new DataView(g.buffer, 12, 4).setUint32(0, v),
                          (I[this.uri] = g);
                      }
                      this.keyId = g;
                    }
                    return this;
                  }),
                  t
                );
              })(),
              C = {
                audio: {
                  a3ds: !0,
                  "ac-3": !0,
                  "ac-4": !0,
                  alac: !0,
                  alaw: !0,
                  dra1: !0,
                  "dts+": !0,
                  "dts-": !0,
                  dtsc: !0,
                  dtse: !0,
                  dtsh: !0,
                  "ec-3": !0,
                  enca: !0,
                  g719: !0,
                  g726: !0,
                  m4ae: !0,
                  mha1: !0,
                  mha2: !0,
                  mhm1: !0,
                  mhm2: !0,
                  mlpa: !0,
                  mp4a: !0,
                  "raw ": !0,
                  Opus: !0,
                  opus: !0,
                  samr: !0,
                  sawb: !0,
                  sawp: !0,
                  sevc: !0,
                  sqcp: !0,
                  ssmv: !0,
                  twos: !0,
                  ulaw: !0,
                },
                video: {
                  avc1: !0,
                  avc2: !0,
                  avc3: !0,
                  avc4: !0,
                  avcp: !0,
                  av01: !0,
                  drac: !0,
                  dva1: !0,
                  dvav: !0,
                  dvh1: !0,
                  dvhe: !0,
                  encv: !0,
                  hev1: !0,
                  hvc1: !0,
                  mjp2: !0,
                  mp4v: !0,
                  mvc1: !0,
                  mvc2: !0,
                  mvc3: !0,
                  mvc4: !0,
                  resv: !0,
                  rv60: !0,
                  s263: !0,
                  svc1: !0,
                  svc2: !0,
                  "vc-1": !0,
                  vp08: !0,
                  vp09: !0,
                },
                text: { stpp: !0, wvtt: !0 },
              };
            function _(t, e) {
              return MediaSource.isTypeSupported(
                (e || "video") + '/mp4;codecs="' + t + '"'
              );
            }
            function P() {
              return (
                (P = Object.assign
                  ? Object.assign.bind()
                  : function (t) {
                      for (var e = 1; e < arguments.length; e++) {
                        var r = arguments[e];
                        for (var i in r)
                          Object.prototype.hasOwnProperty.call(r, i) &&
                            (t[i] = r[i]);
                      }
                      return t;
                    }),
                P.apply(this, arguments)
              );
            }
            var O =
                /#EXT-X-STREAM-INF:([^\r\n]*)(?:[\r\n](?:#[^\r\n]*)?)*([^\r\n]+)|#EXT-X-SESSION-DATA:([^\r\n]*)[\r\n]+|#EXT-X-SESSION-KEY:([^\n\r]*)[\r\n]+/g,
              x = /#EXT-X-MEDIA:(.*)/g,
              F = new RegExp(
                [
                  /#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source,
                  /(?!#) *(\S[\S ]*)/.source,
                  /#EXT-X-BYTERANGE:*(.+)/.source,
                  /#EXT-X-PROGRAM-DATE-TIME:(.+)/.source,
                  /#.*/.source,
                ].join("|"),
                "g"
              ),
              M = new RegExp(
                [
                  /#(EXTM3U)/.source,
                  /#EXT-X-(DATERANGE|KEY|MAP|PART|PART-INF|PLAYLIST-TYPE|PRELOAD-HINT|RENDITION-REPORT|SERVER-CONTROL|SKIP|START):(.+)/
                    .source,
                  /#EXT-X-(BITRATE|DISCONTINUITY-SEQUENCE|MEDIA-SEQUENCE|TARGETDURATION|VERSION): *(\d+)/
                    .source,
                  /#EXT-X-(DISCONTINUITY|ENDLIST|GAP)/.source,
                  /(#)([^:]*):(.*)/.source,
                  /(#)(.*)(?:.*)\r?\n?/.source,
                ].join("|")
              ),
              N = (function () {
                function t() {}
                return (
                  (t.findGroup = function (t, e) {
                    for (var r = 0; r < t.length; r++) {
                      var i = t[r];
                      if (i.id === e) return i;
                    }
                  }),
                  (t.convertAVC1ToAVCOTI = function (t) {
                    var e = t.split(".");
                    if (e.length > 2) {
                      var r = e.shift() + ".";
                      return (
                        (r += parseInt(e.shift()).toString(16)) +
                        ("000" + parseInt(e.shift()).toString(16)).slice(-4)
                      );
                    }
                    return t;
                  }),
                  (t.resolve = function (t, e) {
                    return (0, n.buildAbsoluteURL)(e, t, {
                      alwaysNormalize: !0,
                    });
                  }),
                  (t.parseMasterPlaylist = function (e, r) {
                    var i,
                      n = [],
                      a = [],
                      s = {},
                      o = [],
                      u = !1;
                    for (O.lastIndex = 0; null != (i = O.exec(e)); )
                      if (i[1]) {
                        var d,
                          c = new h(i[1]),
                          f = {
                            attrs: c,
                            bitrate:
                              c.decimalInteger("AVERAGE-BANDWIDTH") ||
                              c.decimalInteger("BANDWIDTH"),
                            name: c.NAME,
                            url: t.resolve(i[2], r),
                          },
                          g = c.decimalResolution("RESOLUTION");
                        g && ((f.width = g.width), (f.height = g.height)),
                          B(
                            (c.CODECS || "")
                              .split(/[ ,]+/)
                              .filter(function (t) {
                                return t;
                              }),
                            f
                          ),
                          f.videoCodec &&
                            -1 !== f.videoCodec.indexOf("avc1") &&
                            (f.videoCodec = t.convertAVC1ToAVCOTI(
                              f.videoCodec
                            )),
                          (null !== (d = f.unknownCodecs) &&
                            void 0 !== d &&
                            d.length) ||
                            a.push(f),
                          n.push(f);
                      } else if (i[3]) {
                        var v = new h(i[3]);
                        v["DATA-ID"] && ((u = !0), (s[v["DATA-ID"]] = v));
                      } else if (i[4]) {
                        var p = i[4],
                          m = U(p, r);
                        m.encrypted && m.isSupported()
                          ? o.push(m)
                          : l.logger.warn(
                              '[Keys] Ignoring invalid EXT-X-SESSION-KEY tag: "' +
                                p +
                                '"'
                            );
                      }
                    return {
                      levels: a.length > 0 && a.length < n.length ? a : n,
                      sessionData: u ? s : null,
                      sessionKeys: o.length ? o : null,
                    };
                  }),
                  (t.parseMasterPlaylistMedia = function (e, r, i, n) {
                    var a;
                    void 0 === n && (n = []);
                    var s = [],
                      o = 0;
                    for (x.lastIndex = 0; null !== (a = x.exec(e)); ) {
                      var l = new h(a[1]);
                      if (l.TYPE === i) {
                        var u = {
                          attrs: l,
                          bitrate: 0,
                          id: o++,
                          groupId: l["GROUP-ID"],
                          instreamId: l["INSTREAM-ID"],
                          name: l.NAME || l.LANGUAGE || "",
                          type: i,
                          default: l.bool("DEFAULT"),
                          autoselect: l.bool("AUTOSELECT"),
                          forced: l.bool("FORCED"),
                          lang: l.LANGUAGE,
                          url: l.URI ? t.resolve(l.URI, r) : "",
                        };
                        if (n.length) {
                          var d = t.findGroup(n, u.groupId) || n[0];
                          G(u, d, "audioCodec"), G(u, d, "textCodec");
                        }
                        s.push(u);
                      }
                    }
                    return s;
                  }),
                  (t.parseLevelPlaylist = function (t, e, r, i, n) {
                    var s,
                      o,
                      u,
                      d = new T(e),
                      c = d.fragments,
                      f = null,
                      p = 0,
                      m = 0,
                      y = 0,
                      E = 0,
                      S = null,
                      b = new v.Fragment(i, e),
                      L = -1,
                      A = !1;
                    for (
                      F.lastIndex = 0, d.m3u8 = t;
                      null !== (s = F.exec(t));

                    ) {
                      A &&
                        ((A = !1),
                        ((b = new v.Fragment(i, e)).start = y),
                        (b.sn = p),
                        (b.cc = E),
                        (b.level = r),
                        f &&
                          ((b.initSegment = f),
                          (b.rawProgramDateTime = f.rawProgramDateTime),
                          (f.rawProgramDateTime = null)));
                      var D = s[1];
                      if (D) {
                        b.duration = parseFloat(D);
                        var k = (" " + s[2]).slice(1);
                        (b.title = k || null),
                          b.tagList.push(k ? ["INF", D, k] : ["INF", D]);
                      } else if (s[3])
                        (0, a.isFiniteNumber)(b.duration) &&
                          ((b.start = y),
                          u && j(b, u, d),
                          (b.sn = p),
                          (b.level = r),
                          (b.cc = E),
                          (b.urlId = n),
                          c.push(b),
                          (b.relurl = (" " + s[3]).slice(1)),
                          K(b, S),
                          (S = b),
                          (y += b.duration),
                          p++,
                          (m = 0),
                          (A = !0));
                      else if (s[4]) {
                        var R = (" " + s[4]).slice(1);
                        S ? b.setByteRange(R, S) : b.setByteRange(R);
                      } else if (s[5])
                        (b.rawProgramDateTime = (" " + s[5]).slice(1)),
                          b.tagList.push([
                            "PROGRAM-DATE-TIME",
                            b.rawProgramDateTime,
                          ]),
                          -1 === L && (L = c.length);
                      else {
                        if (!(s = s[0].match(M))) {
                          l.logger.warn(
                            "No matches on slow regex match for level playlist!"
                          );
                          continue;
                        }
                        for (o = 1; o < s.length && void 0 === s[o]; o++);
                        var I = (" " + s[o]).slice(1),
                          w = (" " + s[o + 1]).slice(1),
                          C = s[o + 2] ? (" " + s[o + 2]).slice(1) : "";
                        switch (I) {
                          case "PLAYLIST-TYPE":
                            d.type = w.toUpperCase();
                            break;
                          case "MEDIA-SEQUENCE":
                            p = d.startSN = parseInt(w);
                            break;
                          case "SKIP":
                            var _ = new h(w),
                              O = _.decimalInteger("SKIPPED-SEGMENTS");
                            if ((0, a.isFiniteNumber)(O)) {
                              d.skippedSegments = O;
                              for (var x = O; x--; ) c.unshift(null);
                              p += O;
                            }
                            var N = _.enumeratedString(
                              "RECENTLY-REMOVED-DATERANGES"
                            );
                            N && (d.recentlyRemovedDateranges = N.split("\t"));
                            break;
                          case "TARGETDURATION":
                            d.targetduration = parseFloat(w);
                            break;
                          case "VERSION":
                            d.version = parseInt(w);
                            break;
                          case "EXTM3U":
                            break;
                          case "ENDLIST":
                            d.live = !1;
                            break;
                          case "#":
                            (w || C) && b.tagList.push(C ? [w, C] : [w]);
                            break;
                          case "DISCONTINUITY":
                            E++, b.tagList.push(["DIS"]);
                            break;
                          case "GAP":
                            b.tagList.push([I]);
                            break;
                          case "BITRATE":
                            b.tagList.push([I, w]);
                            break;
                          case "DATERANGE":
                            var B = new h(w),
                              G = new g(B, d.dateRanges[B.ID]);
                            G.isValid || d.skippedSegments
                              ? (d.dateRanges[G.id] = G)
                              : l.logger.warn(
                                  'Ignoring invalid DATERANGE tag: "' + w + '"'
                                ),
                              b.tagList.push(["EXT-X-DATERANGE", w]);
                            break;
                          case "DISCONTINUITY-SEQUENCE":
                            E = parseInt(w);
                            break;
                          case "KEY":
                            var V = U(w, e);
                            if (V.isSupported()) {
                              if ("NONE" === V.method) {
                                u = void 0;
                                break;
                              }
                              u || (u = {}),
                                u[V.keyFormat] && (u = P({}, u)),
                                (u[V.keyFormat] = V);
                            } else
                              l.logger.warn(
                                '[Keys] Ignoring invalid EXT-X-KEY tag: "' +
                                  w +
                                  '"'
                              );
                            break;
                          case "START":
                            var Y = new h(w).decimalFloatingPoint(
                              "TIME-OFFSET"
                            );
                            (0, a.isFiniteNumber)(Y) && (d.startTimeOffset = Y);
                            break;
                          case "MAP":
                            var W = new h(w);
                            if (b.duration) {
                              var q = new v.Fragment(i, e);
                              H(q, W, r, u),
                                (f = q),
                                (b.initSegment = f),
                                f.rawProgramDateTime &&
                                  !b.rawProgramDateTime &&
                                  (b.rawProgramDateTime = f.rawProgramDateTime);
                            } else H(b, W, r, u), (f = b), (A = !0);
                            break;
                          case "SERVER-CONTROL":
                            var X = new h(w);
                            (d.canBlockReload = X.bool("CAN-BLOCK-RELOAD")),
                              (d.canSkipUntil = X.optionalFloat(
                                "CAN-SKIP-UNTIL",
                                0
                              )),
                              (d.canSkipDateRanges =
                                d.canSkipUntil > 0 &&
                                X.bool("CAN-SKIP-DATERANGES")),
                              (d.partHoldBack = X.optionalFloat(
                                "PART-HOLD-BACK",
                                0
                              )),
                              (d.holdBack = X.optionalFloat("HOLD-BACK", 0));
                            break;
                          case "PART-INF":
                            var z = new h(w);
                            d.partTarget =
                              z.decimalFloatingPoint("PART-TARGET");
                            break;
                          case "PART":
                            var Q = d.partList;
                            Q || (Q = d.partList = []);
                            var $ = m > 0 ? Q[Q.length - 1] : void 0,
                              J = m++,
                              Z = new v.Part(new h(w), b, e, J, $);
                            Q.push(Z), (b.duration += Z.duration);
                            break;
                          case "PRELOAD-HINT":
                            var tt = new h(w);
                            d.preloadHint = tt;
                            break;
                          case "RENDITION-REPORT":
                            var et = new h(w);
                            (d.renditionReports = d.renditionReports || []),
                              d.renditionReports.push(et);
                            break;
                          default:
                            l.logger.warn("line parsed but not handled: " + s);
                        }
                      }
                    }
                    S && !S.relurl
                      ? (c.pop(),
                        (y -= S.duration),
                        d.partList && (d.fragmentHint = S))
                      : d.partList &&
                        (K(b, S),
                        (b.cc = E),
                        (d.fragmentHint = b),
                        u && j(b, u, d));
                    var rt = c.length,
                      it = c[0],
                      nt = c[rt - 1];
                    if (
                      (y += d.skippedSegments * d.targetduration) > 0 &&
                      rt &&
                      nt
                    ) {
                      d.averagetargetduration = y / rt;
                      var at = nt.sn;
                      (d.endSN = "initSegment" !== at ? at : 0),
                        d.live || (nt.endList = !0),
                        it && (d.startCC = it.cc);
                    } else (d.endSN = 0), (d.startCC = 0);
                    return (
                      d.fragmentHint && (y += d.fragmentHint.duration),
                      (d.totalduration = y),
                      (d.endCC = E),
                      L > 0 &&
                        (function (t, e) {
                          for (var r = t[e], i = e; i--; ) {
                            var n = t[i];
                            if (!n) return;
                            (n.programDateTime =
                              r.programDateTime - 1e3 * n.duration),
                              (r = n);
                          }
                        })(c, L),
                      d
                    );
                  }),
                  t
                );
              })();
            function U(t, e) {
              var r,
                i,
                n = new h(t),
                a = null != (r = n.enumeratedString("METHOD")) ? r : "",
                s = n.URI,
                o = n.hexadecimalInteger("IV"),
                u = n.enumeratedString("KEYFORMATVERSIONS"),
                d =
                  null != (i = n.enumeratedString("KEYFORMAT"))
                    ? i
                    : "identity";
              s && n.IV && !o && l.logger.error("Invalid IV: " + n.IV);
              var c = s ? N.resolve(s, e) : "",
                f = (u || "1").split("/").map(Number).filter(Number.isFinite);
              return new w(a, c, d, f, o);
            }
            function B(t, e) {
              ["video", "audio", "text"].forEach(function (r) {
                var i = t.filter(function (t) {
                  return (function (t, e) {
                    var r = C[e];
                    return !!r && !0 === r[t.slice(0, 4)];
                  })(t, r);
                });
                if (i.length) {
                  var n = i.filter(function (t) {
                    return (
                      0 === t.lastIndexOf("avc1", 0) ||
                      0 === t.lastIndexOf("mp4a", 0)
                    );
                  });
                  (e[r + "Codec"] = n.length > 0 ? n[0] : i[0]),
                    (t = t.filter(function (t) {
                      return -1 === i.indexOf(t);
                    }));
                }
              }),
                (e.unknownCodecs = t);
            }
            function G(t, e, r) {
              var i = e[r];
              i && (t[r] = i);
            }
            function K(t, e) {
              t.rawProgramDateTime
                ? (t.programDateTime = Date.parse(t.rawProgramDateTime))
                : null != e &&
                  e.programDateTime &&
                  (t.programDateTime = e.endProgramDateTime),
                (0, a.isFiniteNumber)(t.programDateTime) ||
                  ((t.programDateTime = null), (t.rawProgramDateTime = null));
            }
            function H(t, e, r, i) {
              (t.relurl = e.URI),
                e.BYTERANGE && t.setByteRange(e.BYTERANGE),
                (t.level = r),
                (t.sn = "initSegment"),
                i && (t.levelkeys = i),
                (t.initSegment = null);
            }
            function j(t, e, r) {
              t.levelkeys = e;
              var i = r.encryptedFragments;
              (i.length && i[i.length - 1].levelkeys === e) ||
                !Object.keys(e).some(function (t) {
                  return e[t].isCommonEncryption;
                }) ||
                i.push(t);
            }
            var V = r(308);
            function Y(t, e) {
              var r = t.url;
              return (
                (void 0 !== r && 0 !== r.indexOf("data:")) || (r = e.url), r
              );
            }
            const W = (function () {
              function t(t) {
                (this.hls = void 0),
                  (this.loaders = Object.create(null)),
                  (this.hls = t),
                  this.registerListeners();
              }
              var e = t.prototype;
              return (
                (e.startLoad = function (t) {}),
                (e.stopLoad = function () {
                  this.destroyInternalLoaders();
                }),
                (e.registerListeners = function () {
                  var t = this.hls;
                  t.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this),
                    t.on(s.Events.LEVEL_LOADING, this.onLevelLoading, this),
                    t.on(
                      s.Events.AUDIO_TRACK_LOADING,
                      this.onAudioTrackLoading,
                      this
                    ),
                    t.on(
                      s.Events.SUBTITLE_TRACK_LOADING,
                      this.onSubtitleTrackLoading,
                      this
                    );
                }),
                (e.unregisterListeners = function () {
                  var t = this.hls;
                  t.off(
                    s.Events.MANIFEST_LOADING,
                    this.onManifestLoading,
                    this
                  ),
                    t.off(s.Events.LEVEL_LOADING, this.onLevelLoading, this),
                    t.off(
                      s.Events.AUDIO_TRACK_LOADING,
                      this.onAudioTrackLoading,
                      this
                    ),
                    t.off(
                      s.Events.SUBTITLE_TRACK_LOADING,
                      this.onSubtitleTrackLoading,
                      this
                    );
                }),
                (e.createInternalLoader = function (t) {
                  var e = this.hls.config,
                    r = e.pLoader,
                    i = e.loader,
                    n = new (r || i)(e);
                  return (t.loader = n), (this.loaders[t.type] = n), n;
                }),
                (e.getInternalLoader = function (t) {
                  return this.loaders[t.type];
                }),
                (e.resetInternalLoader = function (t) {
                  this.loaders[t] && delete this.loaders[t];
                }),
                (e.destroyInternalLoaders = function () {
                  for (var t in this.loaders) {
                    var e = this.loaders[t];
                    e && e.destroy(), this.resetInternalLoader(t);
                  }
                }),
                (e.destroy = function () {
                  this.unregisterListeners(), this.destroyInternalLoaders();
                }),
                (e.onManifestLoading = function (t, e) {
                  var r = e.url;
                  this.load({
                    id: null,
                    groupId: null,
                    level: 0,
                    responseType: "text",
                    type: V.PlaylistContextType.MANIFEST,
                    url: r,
                    deliveryDirectives: null,
                  });
                }),
                (e.onLevelLoading = function (t, e) {
                  var r = e.id,
                    i = e.level,
                    n = e.url,
                    a = e.deliveryDirectives;
                  this.load({
                    id: r,
                    groupId: null,
                    level: i,
                    responseType: "text",
                    type: V.PlaylistContextType.LEVEL,
                    url: n,
                    deliveryDirectives: a,
                  });
                }),
                (e.onAudioTrackLoading = function (t, e) {
                  var r = e.id,
                    i = e.groupId,
                    n = e.url,
                    a = e.deliveryDirectives;
                  this.load({
                    id: r,
                    groupId: i,
                    level: null,
                    responseType: "text",
                    type: V.PlaylistContextType.AUDIO_TRACK,
                    url: n,
                    deliveryDirectives: a,
                  });
                }),
                (e.onSubtitleTrackLoading = function (t, e) {
                  var r = e.id,
                    i = e.groupId,
                    n = e.url,
                    a = e.deliveryDirectives;
                  this.load({
                    id: r,
                    groupId: i,
                    level: null,
                    responseType: "text",
                    type: V.PlaylistContextType.SUBTITLE_TRACK,
                    url: n,
                    deliveryDirectives: a,
                  });
                }),
                (e.load = function (t) {
                  var e,
                    r,
                    i,
                    n,
                    a,
                    s,
                    o = this.hls.config,
                    u = this.getInternalLoader(t);
                  if (u) {
                    var d = u.context;
                    if (d && d.url === t.url)
                      return void l.logger.trace(
                        "[playlist-loader]: playlist request ongoing"
                      );
                    l.logger.log(
                      "[playlist-loader]: aborting previous loader for type: " +
                        t.type
                    ),
                      u.abort();
                  }
                  switch (t.type) {
                    case V.PlaylistContextType.MANIFEST:
                      (r = o.manifestLoadingMaxRetry),
                        (i = o.manifestLoadingTimeOut),
                        (n = o.manifestLoadingRetryDelay),
                        (a = o.manifestLoadingMaxRetryTimeout);
                      break;
                    case V.PlaylistContextType.LEVEL:
                    case V.PlaylistContextType.AUDIO_TRACK:
                    case V.PlaylistContextType.SUBTITLE_TRACK:
                      (r = 0), (i = o.levelLoadingTimeOut);
                      break;
                    default:
                      (r = o.levelLoadingMaxRetry),
                        (i = o.levelLoadingTimeOut),
                        (n = o.levelLoadingRetryDelay),
                        (a = o.levelLoadingMaxRetryTimeout);
                  }
                  if (
                    ((u = this.createInternalLoader(t)),
                    null !== (e = t.deliveryDirectives) &&
                      void 0 !== e &&
                      e.part &&
                      (t.type === V.PlaylistContextType.LEVEL &&
                      null !== t.level
                        ? (s = this.hls.levels[t.level].details)
                        : t.type === V.PlaylistContextType.AUDIO_TRACK &&
                          null !== t.id
                        ? (s = this.hls.audioTracks[t.id].details)
                        : t.type === V.PlaylistContextType.SUBTITLE_TRACK &&
                          null !== t.id &&
                          (s = this.hls.subtitleTracks[t.id].details),
                      s))
                  ) {
                    var h = s.partTarget,
                      c = s.targetduration;
                    h && c && (i = Math.min(1e3 * Math.max(3 * h, 0.8 * c), i));
                  }
                  var f = {
                      timeout: i,
                      maxRetry: r,
                      retryDelay: n,
                      maxRetryDelay: a,
                      highWaterMark: 0,
                    },
                    g = {
                      onSuccess: this.loadsuccess.bind(this),
                      onError: this.loaderror.bind(this),
                      onTimeout: this.loadtimeout.bind(this),
                    };
                  u.load(t, f, g);
                }),
                (e.loadsuccess = function (t, e, r, i) {
                  void 0 === i && (i = null), this.resetInternalLoader(r.type);
                  var n = t.data;
                  0 === n.indexOf("#EXTM3U")
                    ? ((e.parsing.start = performance.now()),
                      n.indexOf("#EXTINF:") > 0 ||
                      n.indexOf("#EXT-X-TARGETDURATION:") > 0
                        ? this.handleTrackOrLevelPlaylist(t, e, r, i)
                        : this.handleMasterPlaylist(t, e, r, i))
                    : this.handleManifestParsingError(
                        t,
                        r,
                        "no EXTM3U delimiter",
                        i
                      );
                }),
                (e.loaderror = function (t, e, r) {
                  void 0 === r && (r = null),
                    this.handleNetworkError(e, r, !1, t);
                }),
                (e.loadtimeout = function (t, e, r) {
                  void 0 === r && (r = null), this.handleNetworkError(e, r, !0);
                }),
                (e.handleMasterPlaylist = function (t, e, r, i) {
                  var n = this.hls,
                    a = t.data,
                    o = Y(t, r),
                    u = N.parseMasterPlaylist(a, o),
                    d = u.levels,
                    c = u.sessionData,
                    f = u.sessionKeys;
                  if (d.length) {
                    var g = d.map(function (t) {
                        return { id: t.attrs.AUDIO, audioCodec: t.audioCodec };
                      }),
                      v = d.map(function (t) {
                        return {
                          id: t.attrs.SUBTITLES,
                          textCodec: t.textCodec,
                        };
                      }),
                      p = N.parseMasterPlaylistMedia(a, o, "AUDIO", g),
                      m = N.parseMasterPlaylistMedia(a, o, "SUBTITLES", v),
                      y = N.parseMasterPlaylistMedia(a, o, "CLOSED-CAPTIONS");
                    p.length &&
                      (p.some(function (t) {
                        return !t.url;
                      }) ||
                        !d[0].audioCodec ||
                        d[0].attrs.AUDIO ||
                        (l.logger.log(
                          "[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one"
                        ),
                        p.unshift({
                          type: "main",
                          name: "main",
                          default: !1,
                          autoselect: !1,
                          forced: !1,
                          id: -1,
                          attrs: new h({}),
                          bitrate: 0,
                          url: "",
                        }))),
                      n.trigger(s.Events.MANIFEST_LOADED, {
                        levels: d,
                        audioTracks: p,
                        subtitles: m,
                        captions: y,
                        url: o,
                        stats: e,
                        networkDetails: i,
                        sessionData: c,
                        sessionKeys: f,
                      });
                  } else
                    this.handleManifestParsingError(
                      t,
                      r,
                      "no level found in manifest",
                      i
                    );
                }),
                (e.handleTrackOrLevelPlaylist = function (t, e, r, i) {
                  var n = this.hls,
                    l = r.id,
                    u = r.level,
                    d = r.type,
                    c = Y(t, r),
                    f = (0, a.isFiniteNumber)(l) ? l : 0,
                    g = (0, a.isFiniteNumber)(u) ? u : f,
                    v = (function (t) {
                      switch (t.type) {
                        case V.PlaylistContextType.AUDIO_TRACK:
                          return V.PlaylistLevelType.AUDIO;
                        case V.PlaylistContextType.SUBTITLE_TRACK:
                          return V.PlaylistLevelType.SUBTITLE;
                        default:
                          return V.PlaylistLevelType.MAIN;
                      }
                    })(r),
                    p = N.parseLevelPlaylist(t.data, c, g, v, f);
                  if (p.fragments.length) {
                    if (d === V.PlaylistContextType.MANIFEST) {
                      var m = {
                        attrs: new h({}),
                        bitrate: 0,
                        details: p,
                        name: "",
                        url: c,
                      };
                      n.trigger(s.Events.MANIFEST_LOADED, {
                        levels: [m],
                        audioTracks: [],
                        url: c,
                        stats: e,
                        networkDetails: i,
                        sessionData: null,
                        sessionKeys: null,
                      });
                    }
                    (e.parsing.end = performance.now()),
                      (r.levelDetails = p),
                      this.handlePlaylistLoaded(t, e, r, i);
                  } else
                    n.trigger(s.Events.ERROR, {
                      type: o.ErrorTypes.NETWORK_ERROR,
                      details: o.ErrorDetails.LEVEL_EMPTY_ERROR,
                      fatal: !1,
                      url: c,
                      reason: "no fragments found in level",
                      level: "number" == typeof r.level ? r.level : void 0,
                    });
                }),
                (e.handleManifestParsingError = function (t, e, r, i) {
                  this.hls.trigger(s.Events.ERROR, {
                    type: o.ErrorTypes.NETWORK_ERROR,
                    details: o.ErrorDetails.MANIFEST_PARSING_ERROR,
                    fatal: e.type === V.PlaylistContextType.MANIFEST,
                    url: t.url,
                    reason: r,
                    response: t,
                    context: e,
                    networkDetails: i,
                  });
                }),
                (e.handleNetworkError = function (t, e, r, i) {
                  void 0 === r && (r = !1),
                    l.logger.warn(
                      "[playlist-loader]: A network " +
                        (r ? "timeout" : "error") +
                        " occurred while loading " +
                        t.type +
                        " level: " +
                        t.level +
                        " id: " +
                        t.id +
                        ' group-id: "' +
                        t.groupId +
                        '"'
                    );
                  var n = o.ErrorDetails.UNKNOWN,
                    a = !1,
                    u = this.getInternalLoader(t);
                  switch (t.type) {
                    case V.PlaylistContextType.MANIFEST:
                      (n = r
                        ? o.ErrorDetails.MANIFEST_LOAD_TIMEOUT
                        : o.ErrorDetails.MANIFEST_LOAD_ERROR),
                        (a = !0);
                      break;
                    case V.PlaylistContextType.LEVEL:
                      (n = r
                        ? o.ErrorDetails.LEVEL_LOAD_TIMEOUT
                        : o.ErrorDetails.LEVEL_LOAD_ERROR),
                        (a = !1);
                      break;
                    case V.PlaylistContextType.AUDIO_TRACK:
                      (n = r
                        ? o.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT
                        : o.ErrorDetails.AUDIO_TRACK_LOAD_ERROR),
                        (a = !1);
                      break;
                    case V.PlaylistContextType.SUBTITLE_TRACK:
                      (n = r
                        ? o.ErrorDetails.SUBTITLE_TRACK_LOAD_TIMEOUT
                        : o.ErrorDetails.SUBTITLE_LOAD_ERROR),
                        (a = !1);
                  }
                  u && this.resetInternalLoader(t.type);
                  var d = {
                    type: o.ErrorTypes.NETWORK_ERROR,
                    details: n,
                    fatal: a,
                    url: t.url,
                    loader: u,
                    context: t,
                    networkDetails: e,
                  };
                  i && (d.response = i), this.hls.trigger(s.Events.ERROR, d);
                }),
                (e.handlePlaylistLoaded = function (t, e, r, i) {
                  var n = r.type,
                    a = r.level,
                    o = r.id,
                    l = r.groupId,
                    u = r.loader,
                    d = r.levelDetails,
                    h = r.deliveryDirectives;
                  if (null != d && d.targetduration) {
                    if (u)
                      switch (
                        (d.live &&
                          (u.getCacheAge &&
                            (d.ageHeader = u.getCacheAge() || 0),
                          (u.getCacheAge && !isNaN(d.ageHeader)) ||
                            (d.ageHeader = 0)),
                        n)
                      ) {
                        case V.PlaylistContextType.MANIFEST:
                        case V.PlaylistContextType.LEVEL:
                          this.hls.trigger(s.Events.LEVEL_LOADED, {
                            details: d,
                            level: a || 0,
                            id: o || 0,
                            stats: e,
                            networkDetails: i,
                            deliveryDirectives: h,
                          });
                          break;
                        case V.PlaylistContextType.AUDIO_TRACK:
                          this.hls.trigger(s.Events.AUDIO_TRACK_LOADED, {
                            details: d,
                            id: o || 0,
                            groupId: l || "",
                            stats: e,
                            networkDetails: i,
                            deliveryDirectives: h,
                          });
                          break;
                        case V.PlaylistContextType.SUBTITLE_TRACK:
                          this.hls.trigger(s.Events.SUBTITLE_TRACK_LOADED, {
                            details: d,
                            id: o || 0,
                            groupId: l || "",
                            stats: e,
                            networkDetails: i,
                            deliveryDirectives: h,
                          });
                      }
                  } else
                    this.handleManifestParsingError(
                      t,
                      r,
                      "invalid target duration",
                      i
                    );
                }),
                t
              );
            })();
            function q(t, e) {
              var r;
              try {
                r = new Event("addtrack");
              } catch (t) {
                (r = document.createEvent("Event")).initEvent(
                  "addtrack",
                  !1,
                  !1
                );
              }
              (r.track = t), e.dispatchEvent(r);
            }
            function X(t, e) {
              var r = t.mode;
              if (
                ("disabled" === r && (t.mode = "hidden"),
                t.cues && !t.cues.getCueById(e.id))
              )
                try {
                  if ((t.addCue(e), !t.cues.getCueById(e.id)))
                    throw new Error("addCue is failed for: " + e);
                } catch (r) {
                  l.logger.debug("[texttrack-utils]: " + r);
                  var i = new self.TextTrackCue(e.startTime, e.endTime, e.text);
                  (i.id = e.id), t.addCue(i);
                }
              "disabled" === r && (t.mode = r);
            }
            function z(t) {
              var e = t.mode;
              if (("disabled" === e && (t.mode = "hidden"), t.cues))
                for (var r = t.cues.length; r--; ) t.removeCue(t.cues[r]);
              "disabled" === e && (t.mode = e);
            }
            function Q(t, e, r, i) {
              var n = t.mode;
              if (
                ("disabled" === n && (t.mode = "hidden"),
                t.cues && t.cues.length > 0)
              )
                for (
                  var a = (function (t, e, r) {
                      var i = [],
                        n = (function (t, e) {
                          if (e < t[0].startTime) return 0;
                          var r = t.length - 1;
                          if (e > t[r].endTime) return -1;
                          for (var i = 0, n = r; i <= n; ) {
                            var a = Math.floor((n + i) / 2);
                            if (e < t[a].startTime) n = a - 1;
                            else {
                              if (!(e > t[a].startTime && i < r)) return a;
                              i = a + 1;
                            }
                          }
                          return t[i].startTime - e < e - t[n].startTime
                            ? i
                            : n;
                        })(t, e);
                      if (n > -1)
                        for (var a = n, s = t.length; a < s; a++) {
                          var o = t[a];
                          if (o.startTime >= e && o.endTime <= r) i.push(o);
                          else if (o.startTime > r) return i;
                        }
                      return i;
                    })(t.cues, e, r),
                    s = 0;
                  s < a.length;
                  s++
                )
                  (i && !i(a[s])) || t.removeCue(a[s]);
              "disabled" === n && (t.mode = n);
            }
            var $ = r(181),
              J = r(856);
            function Z() {
              return self.WebKitDataCue || self.VTTCue || self.TextTrackCue;
            }
            var tt = (function () {
              var t = Z();
              try {
                new t(0, Number.POSITIVE_INFINITY, "");
              } catch (t) {
                return Number.MAX_VALUE;
              }
              return Number.POSITIVE_INFINITY;
            })();
            function et(t, e) {
              return t.getTime() / 1e3 - e;
            }
            const rt = (function () {
              function t(t) {
                (this.hls = void 0),
                  (this.id3Track = null),
                  (this.media = null),
                  (this.dateRangeCuesAppended = {}),
                  (this.hls = t),
                  this._registerListeners();
              }
              var e = t.prototype;
              return (
                (e.destroy = function () {
                  this._unregisterListeners(),
                    (this.id3Track = null),
                    (this.media = null),
                    (this.dateRangeCuesAppended = {}),
                    (this.hls = null);
                }),
                (e._registerListeners = function () {
                  var t = this.hls;
                  t.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                    t.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this),
                    t.on(
                      s.Events.MANIFEST_LOADING,
                      this.onManifestLoading,
                      this
                    ),
                    t.on(
                      s.Events.FRAG_PARSING_METADATA,
                      this.onFragParsingMetadata,
                      this
                    ),
                    t.on(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this),
                    t.on(s.Events.LEVEL_UPDATED, this.onLevelUpdated, this);
                }),
                (e._unregisterListeners = function () {
                  var t = this.hls;
                  t.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                    t.off(
                      s.Events.MEDIA_DETACHING,
                      this.onMediaDetaching,
                      this
                    ),
                    t.off(
                      s.Events.MANIFEST_LOADING,
                      this.onManifestLoading,
                      this
                    ),
                    t.off(
                      s.Events.FRAG_PARSING_METADATA,
                      this.onFragParsingMetadata,
                      this
                    ),
                    t.off(
                      s.Events.BUFFER_FLUSHING,
                      this.onBufferFlushing,
                      this
                    ),
                    t.off(s.Events.LEVEL_UPDATED, this.onLevelUpdated, this);
                }),
                (e.onMediaAttached = function (t, e) {
                  this.media = e.media;
                }),
                (e.onMediaDetaching = function () {
                  this.id3Track &&
                    (z(this.id3Track),
                    (this.id3Track = null),
                    (this.media = null),
                    (this.dateRangeCuesAppended = {}));
                }),
                (e.onManifestLoading = function () {
                  this.dateRangeCuesAppended = {};
                }),
                (e.createTrack = function (t) {
                  var e = this.getID3Track(t.textTracks);
                  return (e.mode = "hidden"), e;
                }),
                (e.getID3Track = function (t) {
                  if (this.media) {
                    for (var e = 0; e < t.length; e++) {
                      var r = t[e];
                      if ("metadata" === r.kind && "id3" === r.label)
                        return q(r, this.media), r;
                    }
                    return this.media.addTextTrack("metadata", "id3");
                  }
                }),
                (e.onFragParsingMetadata = function (t, e) {
                  if (this.media) {
                    var r = this.hls.config,
                      i = r.enableEmsgMetadataCues,
                      n = r.enableID3MetadataCues;
                    if (i || n) {
                      var a = e.samples;
                      this.id3Track ||
                        (this.id3Track = this.createTrack(this.media));
                      for (var s = Z(), o = 0; o < a.length; o++) {
                        var l = a[o].type;
                        if ((l !== J.MetadataSchema.emsg || i) && n) {
                          var u = $.getID3Frames(a[o].data);
                          if (u) {
                            var d = a[o].pts,
                              h = d + a[o].duration;
                            h > tt && (h = tt), h - d <= 0 && (h = d + 0.25);
                            for (var c = 0; c < u.length; c++) {
                              var f = u[c];
                              if (!$.isTimeStampFrame(f)) {
                                this.updateId3CueEnds(d);
                                var g = new s(d, h, "");
                                (g.value = f),
                                  l && (g.type = l),
                                  this.id3Track.addCue(g);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }),
                (e.updateId3CueEnds = function (t) {
                  var e,
                    r =
                      null === (e = this.id3Track) || void 0 === e
                        ? void 0
                        : e.cues;
                  if (r)
                    for (var i = r.length; i--; ) {
                      var n = r[i];
                      n.startTime < t && n.endTime === tt && (n.endTime = t);
                    }
                }),
                (e.onBufferFlushing = function (t, e) {
                  var r = e.startOffset,
                    i = e.endOffset,
                    n = e.type,
                    a = this.id3Track,
                    s = this.hls;
                  if (s) {
                    var o = s.config,
                      l = o.enableEmsgMetadataCues,
                      u = o.enableID3MetadataCues;
                    a &&
                      (l || u) &&
                      Q(
                        a,
                        r,
                        i,
                        "audio" === n
                          ? function (t) {
                              return t.type === J.MetadataSchema.audioId3 && u;
                            }
                          : "video" === n
                          ? function (t) {
                              return t.type === J.MetadataSchema.emsg && l;
                            }
                          : function (t) {
                              return (
                                (t.type === J.MetadataSchema.audioId3 && u) ||
                                (t.type === J.MetadataSchema.emsg && l)
                              );
                            }
                      );
                  }
                }),
                (e.onLevelUpdated = function (t, e) {
                  var r = this,
                    n = e.details;
                  if (
                    this.media &&
                    n.hasProgramDateTime &&
                    this.hls.config.enableDateRangeMetadataCues
                  ) {
                    var s = this.dateRangeCuesAppended,
                      o = this.id3Track,
                      l = n.dateRanges,
                      u = Object.keys(l);
                    if (o)
                      for (
                        var d = Object.keys(s).filter(function (t) {
                            return !u.includes(t);
                          }),
                          h = function (t) {
                            var e = d[t];
                            Object.keys(s[e].cues).forEach(function (t) {
                              o.removeCue(s[e].cues[t]);
                            }),
                              delete s[e];
                          },
                          c = d.length;
                        c--;

                      )
                        h(c);
                    var f = n.fragments[n.fragments.length - 1];
                    if (
                      0 !== u.length &&
                      (0, a.isFiniteNumber)(
                        null == f ? void 0 : f.programDateTime
                      )
                    ) {
                      this.id3Track ||
                        (this.id3Track = this.createTrack(this.media));
                      for (
                        var g = f.programDateTime / 1e3 - f.start,
                          v = Z(),
                          p = function (t) {
                            var e = u[t],
                              n = l[e],
                              a = s[e],
                              o = (null == a ? void 0 : a.cues) || {},
                              d = (null == a ? void 0 : a.durationKnown) || !1,
                              h = et(n.startDate, g),
                              c = tt,
                              f = n.endDate;
                            if (f) (c = et(f, g)), (d = !0);
                            else if (n.endOnNext && !d) {
                              var p = u
                                .reduce(function (t, e) {
                                  var r = l[e];
                                  return (
                                    r.class === n.class &&
                                      r.id !== e &&
                                      r.startDate > n.startDate &&
                                      t.push(r),
                                    t
                                  );
                                }, [])
                                .sort(function (t, e) {
                                  return (
                                    t.startDate.getTime() -
                                    e.startDate.getTime()
                                  );
                                })[0];
                              p && ((c = et(p.startDate, g)), (d = !0));
                            }
                            for (
                              var m, y = Object.keys(n.attr), E = 0;
                              E < y.length;
                              E++
                            ) {
                              var T = y[E];
                              if (
                                T !== i.ID &&
                                T !== i.CLASS &&
                                T !== i.START_DATE &&
                                T !== i.DURATION &&
                                T !== i.END_DATE &&
                                T !== i.END_ON_NEXT
                              ) {
                                var S = o[T];
                                if (S) d && !a.durationKnown && (S.endTime = c);
                                else {
                                  var b = n.attr[T];
                                  (S = new v(h, c, "")),
                                    (T !== i.SCTE35_OUT && T !== i.SCTE35_IN) ||
                                      ((m = b),
                                      (b = Uint8Array.from(
                                        m
                                          .replace(/^0x/, "")
                                          .replace(
                                            /([\da-fA-F]{2}) ?/g,
                                            "0x$1 "
                                          )
                                          .replace(/ +$/, "")
                                          .split(" ")
                                      ).buffer)),
                                    (S.value = { key: T, data: b }),
                                    (S.type = J.MetadataSchema.dateRange),
                                    r.id3Track.addCue(S),
                                    (o[T] = S);
                                }
                              }
                            }
                            s[e] = { cues: o, dateRange: n, durationKnown: d };
                          },
                          m = 0;
                        m < u.length;
                        m++
                      )
                        p(m);
                    }
                  }
                }),
                t
              );
            })();
            function it(t, e) {
              for (var r = 0; r < e.length; r++) {
                var i = e[r];
                (i.enumerable = i.enumerable || !1),
                  (i.configurable = !0),
                  "value" in i && (i.writable = !0),
                  Object.defineProperty(
                    t,
                    (void 0,
                    "symbol" ==
                    typeof (n = (function (t, e) {
                      if ("object" != typeof t || null === t) return t;
                      var r = t[Symbol.toPrimitive];
                      if (void 0 !== r) {
                        var i = r.call(t, e);
                        if ("object" != typeof i) return i;
                        throw new TypeError(
                          "@@toPrimitive must return a primitive value."
                        );
                      }
                      return String(t);
                    })(i.key, "string"))
                      ? n
                      : String(n)),
                    i
                  );
              }
              var n;
            }
            var nt = (function () {
              function t(t) {
                var e = this;
                (this.hls = void 0),
                  (this.config = void 0),
                  (this.media = null),
                  (this.levelDetails = null),
                  (this.currentTime = 0),
                  (this.stallCount = 0),
                  (this._latency = null),
                  (this.timeupdateHandler = function () {
                    return e.timeupdate();
                  }),
                  (this.hls = t),
                  (this.config = t.config),
                  this.registerListeners();
              }
              var e,
                r,
                i = t.prototype;
              return (
                (i.destroy = function () {
                  this.unregisterListeners(),
                    this.onMediaDetaching(),
                    (this.levelDetails = null),
                    (this.hls = this.timeupdateHandler = null);
                }),
                (i.registerListeners = function () {
                  this.hls.on(
                    s.Events.MEDIA_ATTACHED,
                    this.onMediaAttached,
                    this
                  ),
                    this.hls.on(
                      s.Events.MEDIA_DETACHING,
                      this.onMediaDetaching,
                      this
                    ),
                    this.hls.on(
                      s.Events.MANIFEST_LOADING,
                      this.onManifestLoading,
                      this
                    ),
                    this.hls.on(
                      s.Events.LEVEL_UPDATED,
                      this.onLevelUpdated,
                      this
                    ),
                    this.hls.on(s.Events.ERROR, this.onError, this);
                }),
                (i.unregisterListeners = function () {
                  this.hls.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached),
                    this.hls.off(
                      s.Events.MEDIA_DETACHING,
                      this.onMediaDetaching
                    ),
                    this.hls.off(
                      s.Events.MANIFEST_LOADING,
                      this.onManifestLoading
                    ),
                    this.hls.off(s.Events.LEVEL_UPDATED, this.onLevelUpdated),
                    this.hls.off(s.Events.ERROR, this.onError);
                }),
                (i.onMediaAttached = function (t, e) {
                  (this.media = e.media),
                    this.media.addEventListener(
                      "timeupdate",
                      this.timeupdateHandler
                    );
                }),
                (i.onMediaDetaching = function () {
                  this.media &&
                    (this.media.removeEventListener(
                      "timeupdate",
                      this.timeupdateHandler
                    ),
                    (this.media = null));
                }),
                (i.onManifestLoading = function () {
                  (this.levelDetails = null),
                    (this._latency = null),
                    (this.stallCount = 0);
                }),
                (i.onLevelUpdated = function (t, e) {
                  var r = e.details;
                  (this.levelDetails = r),
                    r.advanced && this.timeupdate(),
                    !r.live &&
                      this.media &&
                      this.media.removeEventListener(
                        "timeupdate",
                        this.timeupdateHandler
                      );
                }),
                (i.onError = function (t, e) {
                  e.details === o.ErrorDetails.BUFFER_STALLED_ERROR &&
                    (this.stallCount++,
                    l.logger.warn(
                      "[playback-rate-controller]: Stall detected, adjusting target latency"
                    ));
                }),
                (i.timeupdate = function () {
                  var t = this.media,
                    e = this.levelDetails;
                  if (t && e) {
                    this.currentTime = t.currentTime;
                    var r = this.computeLatency();
                    if (null !== r) {
                      this._latency = r;
                      var i = this.config,
                        n = i.lowLatencyMode,
                        a = i.maxLiveSyncPlaybackRate;
                      if (n && 1 !== a) {
                        var s = this.targetLatency;
                        if (null !== s) {
                          var o = r - s,
                            l =
                              o <
                              Math.min(this.maxLatency, s + e.targetduration);
                          if (
                            e.live &&
                            l &&
                            o > 0.05 &&
                            this.forwardBufferLength > 1
                          ) {
                            var u = Math.min(2, Math.max(1, a)),
                              d =
                                Math.round(
                                  (2 /
                                    (1 +
                                      Math.exp(-0.75 * o - this.edgeStalled))) *
                                    20
                                ) / 20;
                            t.playbackRate = Math.min(u, Math.max(1, d));
                          } else
                            1 !== t.playbackRate &&
                              0 !== t.playbackRate &&
                              (t.playbackRate = 1);
                        }
                      }
                    }
                  }
                }),
                (i.estimateLiveEdge = function () {
                  var t = this.levelDetails;
                  return null === t ? null : t.edge + t.age;
                }),
                (i.computeLatency = function () {
                  var t = this.estimateLiveEdge();
                  return null === t ? null : t - this.currentTime;
                }),
                (e = t),
                (r = [
                  {
                    key: "latency",
                    get: function () {
                      return this._latency || 0;
                    },
                  },
                  {
                    key: "maxLatency",
                    get: function () {
                      var t = this.config,
                        e = this.levelDetails;
                      return void 0 !== t.liveMaxLatencyDuration
                        ? t.liveMaxLatencyDuration
                        : e
                        ? t.liveMaxLatencyDurationCount * e.targetduration
                        : 0;
                    },
                  },
                  {
                    key: "targetLatency",
                    get: function () {
                      var t = this.levelDetails;
                      if (null === t) return null;
                      var e = t.holdBack,
                        r = t.partHoldBack,
                        i = t.targetduration,
                        n = this.config,
                        a = n.liveSyncDuration,
                        s = n.liveSyncDurationCount,
                        o = n.lowLatencyMode,
                        l = this.hls.userConfig,
                        u = (o && r) || e;
                      (l.liveSyncDuration ||
                        l.liveSyncDurationCount ||
                        0 === u) &&
                        (u = void 0 !== a ? a : s * i);
                      var d = i;
                      return u + Math.min(1 * this.stallCount, d);
                    },
                  },
                  {
                    key: "liveSyncPosition",
                    get: function () {
                      var t = this.estimateLiveEdge(),
                        e = this.targetLatency,
                        r = this.levelDetails;
                      if (null === t || null === e || null === r) return null;
                      var i = r.edge,
                        n = t - e - this.edgeStalled,
                        a = i - r.totalduration,
                        s =
                          i -
                          ((this.config.lowLatencyMode && r.partTarget) ||
                            r.targetduration);
                      return Math.min(Math.max(a, n), s);
                    },
                  },
                  {
                    key: "drift",
                    get: function () {
                      var t = this.levelDetails;
                      return null === t ? 1 : t.drift;
                    },
                  },
                  {
                    key: "edgeStalled",
                    get: function () {
                      var t = this.levelDetails;
                      if (null === t) return 0;
                      var e =
                        3 *
                        ((this.config.lowLatencyMode && t.partTarget) ||
                          t.targetduration);
                      return Math.max(t.age - e, 0);
                    },
                  },
                  {
                    key: "forwardBufferLength",
                    get: function () {
                      var t = this.media,
                        e = this.levelDetails;
                      if (!t || !e) return 0;
                      var r = t.buffered.length;
                      return (
                        (r ? t.buffered.end(r - 1) : e.edge) - this.currentTime
                      );
                    },
                  },
                ]) && it(e.prototype, r),
                Object.defineProperty(e, "prototype", { writable: !1 }),
                t
              );
            })();
            function at(t, e) {
              for (var r = 0; r < e.length; r++) {
                var i = e[r];
                (i.enumerable = i.enumerable || !1),
                  (i.configurable = !0),
                  "value" in i && (i.writable = !0),
                  Object.defineProperty(
                    t,
                    (void 0,
                    "symbol" ==
                    typeof (n = (function (t, e) {
                      if ("object" != typeof t || null === t) return t;
                      var r = t[Symbol.toPrimitive];
                      if (void 0 !== r) {
                        var i = r.call(t, e);
                        if ("object" != typeof i) return i;
                        throw new TypeError(
                          "@@toPrimitive must return a primitive value."
                        );
                      }
                      return String(t);
                    })(i.key, "string"))
                      ? n
                      : String(n)),
                    i
                  );
              }
              var n;
            }
            var st,
              ot = ["NONE", "TYPE-0", "TYPE-1", "TYPE-2", null];
            !(function (t) {
              (t.No = ""), (t.Yes = "YES"), (t.v2 = "v2");
            })(st || (st = {}));
            var lt = (function () {
                function t(t, e, r) {
                  (this.msn = void 0),
                    (this.part = void 0),
                    (this.skip = void 0),
                    (this.msn = t),
                    (this.part = e),
                    (this.skip = r);
                }
                return (
                  (t.prototype.addDirectives = function (t) {
                    var e = new self.URL(t);
                    return (
                      void 0 !== this.msn &&
                        e.searchParams.set("_HLS_msn", this.msn.toString()),
                      void 0 !== this.part &&
                        e.searchParams.set("_HLS_part", this.part.toString()),
                      this.skip && e.searchParams.set("_HLS_skip", this.skip),
                      e.href
                    );
                  }),
                  t
                );
              })(),
              ut = (function () {
                function t(t) {
                  (this.attrs = void 0),
                    (this.audioCodec = void 0),
                    (this.bitrate = void 0),
                    (this.codecSet = void 0),
                    (this.height = void 0),
                    (this.id = void 0),
                    (this.name = void 0),
                    (this.videoCodec = void 0),
                    (this.width = void 0),
                    (this.unknownCodecs = void 0),
                    (this.audioGroupIds = void 0),
                    (this.details = void 0),
                    (this.fragmentError = 0),
                    (this.loadError = 0),
                    (this.loaded = void 0),
                    (this.realBitrate = 0),
                    (this.textGroupIds = void 0),
                    (this.url = void 0),
                    (this._urlId = 0),
                    (this.url = [t.url]),
                    (this.attrs = t.attrs),
                    (this.bitrate = t.bitrate),
                    t.details && (this.details = t.details),
                    (this.id = t.id || 0),
                    (this.name = t.name),
                    (this.width = t.width || 0),
                    (this.height = t.height || 0),
                    (this.audioCodec = t.audioCodec),
                    (this.videoCodec = t.videoCodec),
                    (this.unknownCodecs = t.unknownCodecs),
                    (this.codecSet = [t.videoCodec, t.audioCodec]
                      .filter(function (t) {
                        return t;
                      })
                      .join(",")
                      .replace(/\.[^.,]+/g, ""));
                }
                var e, r;
                return (
                  (e = t),
                  (r = [
                    {
                      key: "maxBitrate",
                      get: function () {
                        return Math.max(this.realBitrate, this.bitrate);
                      },
                    },
                    {
                      key: "uri",
                      get: function () {
                        return this.url[this._urlId] || "";
                      },
                    },
                    {
                      key: "urlId",
                      get: function () {
                        return this._urlId;
                      },
                      set: function (t) {
                        var e = t % this.url.length;
                        this._urlId !== e &&
                          ((this.details = void 0), (this._urlId = e));
                      },
                    },
                  ]) && at(e.prototype, r),
                  Object.defineProperty(e, "prototype", { writable: !1 }),
                  t
                );
              })();
            function dt() {
              return (
                (dt = Object.assign
                  ? Object.assign.bind()
                  : function (t) {
                      for (var e = 1; e < arguments.length; e++) {
                        var r = arguments[e];
                        for (var i in r)
                          Object.prototype.hasOwnProperty.call(r, i) &&
                            (t[i] = r[i]);
                      }
                      return t;
                    }),
                dt.apply(this, arguments)
              );
            }
            function ht(t, e, r) {
              switch (e) {
                case "audio":
                  t.audioGroupIds || (t.audioGroupIds = []),
                    t.audioGroupIds.push(r);
                  break;
                case "text":
                  t.textGroupIds || (t.textGroupIds = []),
                    t.textGroupIds.push(r);
              }
            }
            function ct(t) {
              var e = {};
              t.forEach(function (t) {
                var r = t.groupId || "";
                (t.id = e[r] = e[r] || 0), e[r]++;
              });
            }
            function ft(t, e) {
              var r = e.startPTS;
              if ((0, a.isFiniteNumber)(r)) {
                var i,
                  n = 0;
                e.sn > t.sn
                  ? ((n = r - t.start), (i = t))
                  : ((n = t.start - r), (i = e)),
                  i.duration !== n && (i.duration = n);
              } else
                e.sn > t.sn
                  ? t.cc === e.cc && t.minEndPTS
                    ? (e.start = t.start + (t.minEndPTS - t.start))
                    : (e.start = t.start + t.duration)
                  : (e.start = Math.max(t.start - e.duration, 0));
            }
            function gt(t, e, r, i, n, s) {
              i - r <= 0 &&
                (l.logger.warn("Fragment should have a positive duration", e),
                (i = r + e.duration),
                (s = n + e.duration));
              var o = r,
                u = i,
                d = e.startPTS,
                h = e.endPTS;
              if ((0, a.isFiniteNumber)(d)) {
                var c = Math.abs(d - r);
                (0, a.isFiniteNumber)(e.deltaPTS)
                  ? (e.deltaPTS = Math.max(c, e.deltaPTS))
                  : (e.deltaPTS = c),
                  (o = Math.max(r, d)),
                  (r = Math.min(r, d)),
                  (n = Math.min(n, e.startDTS)),
                  (u = Math.min(i, h)),
                  (i = Math.max(i, h)),
                  (s = Math.max(s, e.endDTS));
              }
              e.duration = i - r;
              var f = r - e.start;
              (e.start = e.startPTS = r),
                (e.maxStartPTS = o),
                (e.startDTS = n),
                (e.endPTS = i),
                (e.minEndPTS = u),
                (e.endDTS = s);
              var g,
                v = e.sn;
              if (!t || v < t.startSN || v > t.endSN) return 0;
              var p = v - t.startSN,
                m = t.fragments;
              for (m[p] = e, g = p; g > 0; g--) ft(m[g], m[g - 1]);
              for (g = p; g < m.length - 1; g++) ft(m[g], m[g + 1]);
              return (
                t.fragmentHint && ft(m[m.length - 1], t.fragmentHint),
                (t.PTSKnown = t.alignedSliding = !0),
                f
              );
            }
            function vt(t, e) {
              var r = e.startSN + e.skippedSegments - t.startSN,
                i = t.fragments;
              r < 0 || r >= i.length || pt(e, i[r].start);
            }
            function pt(t, e) {
              if (e) {
                for (
                  var r = t.fragments, i = t.skippedSegments;
                  i < r.length;
                  i++
                )
                  r[i].start += e;
                t.fragmentHint && (t.fragmentHint.start += e);
              }
            }
            var mt = (function () {
              function t(t, e) {
                (this.hls = void 0),
                  (this.timer = -1),
                  (this.requestScheduled = -1),
                  (this.canLoad = !1),
                  (this.retryCount = 0),
                  (this.log = void 0),
                  (this.warn = void 0),
                  (this.log = l.logger.log.bind(l.logger, e + ":")),
                  (this.warn = l.logger.warn.bind(l.logger, e + ":")),
                  (this.hls = t);
              }
              var e = t.prototype;
              return (
                (e.destroy = function () {
                  this.clearTimer(), (this.hls = this.log = this.warn = null);
                }),
                (e.onError = function (t, e) {
                  !e.fatal ||
                    (e.type !== o.ErrorTypes.NETWORK_ERROR &&
                      e.type !== o.ErrorTypes.KEY_SYSTEM_ERROR) ||
                    this.stopLoad();
                }),
                (e.clearTimer = function () {
                  clearTimeout(this.timer), (this.timer = -1);
                }),
                (e.startLoad = function () {
                  (this.canLoad = !0),
                    (this.retryCount = 0),
                    (this.requestScheduled = -1),
                    this.loadPlaylist();
                }),
                (e.stopLoad = function () {
                  (this.canLoad = !1), this.clearTimer();
                }),
                (e.switchParams = function (t, e) {
                  var r = null == e ? void 0 : e.renditionReports;
                  if (r)
                    for (var i = 0; i < r.length; i++) {
                      var n = r[i],
                        a = void 0;
                      try {
                        a = new self.URL(n.URI, e.url).href;
                      } catch (t) {
                        l.logger.warn(
                          "Could not construct new URL for Rendition Report: " +
                            t
                        ),
                          (a = n.URI || "");
                      }
                      if (a === t.slice(-a.length)) {
                        var s =
                            parseInt(n["LAST-MSN"]) ||
                            (null == e ? void 0 : e.lastPartSn),
                          o =
                            parseInt(n["LAST-PART"]) ||
                            (null == e ? void 0 : e.lastPartIndex);
                        if (this.hls.config.lowLatencyMode) {
                          var u = Math.min(
                            e.age - e.partTarget,
                            e.targetduration
                          );
                          o >= 0 && u > e.partTarget && (o += 1);
                        }
                        return new lt(s, o >= 0 ? o : void 0, st.No);
                      }
                    }
                }),
                (e.loadPlaylist = function (t) {
                  -1 === this.requestScheduled &&
                    (this.requestScheduled = self.performance.now());
                }),
                (e.shouldLoadTrack = function (t) {
                  return (
                    this.canLoad &&
                    t &&
                    !!t.url &&
                    (!t.details || t.details.live)
                  );
                }),
                (e.playlistLoaded = function (t, e, r) {
                  var i = this,
                    n = e.details,
                    s = e.stats,
                    o = self.performance.now(),
                    u = s.loading.first ? Math.max(0, o - s.loading.first) : 0;
                  if (
                    ((n.advancedDateTime = Date.now() - u),
                    n.live || (null != r && r.live))
                  ) {
                    if (
                      (n.reloaded(r),
                      r &&
                        this.log(
                          "live playlist " +
                            t +
                            " " +
                            (n.advanced
                              ? "REFRESHED " +
                                n.lastPartSn +
                                "-" +
                                n.lastPartIndex
                              : "MISSED")
                        ),
                      r &&
                        n.fragments.length > 0 &&
                        (function (t, e) {
                          for (
                            var r = null, i = t.fragments, n = i.length - 1;
                            n >= 0;
                            n--
                          ) {
                            var s = i[n].initSegment;
                            if (s) {
                              r = s;
                              break;
                            }
                          }
                          t.fragmentHint && delete t.fragmentHint.endPTS;
                          var o,
                            u,
                            d,
                            h,
                            c,
                            f = 0;
                          if (
                            ((function (t, e, r) {
                              for (
                                var i = e.skippedSegments,
                                  n =
                                    Math.max(t.startSN, e.startSN) - e.startSN,
                                  a =
                                    (t.fragmentHint ? 1 : 0) +
                                    (i ? e.endSN : Math.min(t.endSN, e.endSN)) -
                                    e.startSN,
                                  s = e.startSN - t.startSN,
                                  o = e.fragmentHint
                                    ? e.fragments.concat(e.fragmentHint)
                                    : e.fragments,
                                  l = t.fragmentHint
                                    ? t.fragments.concat(t.fragmentHint)
                                    : t.fragments,
                                  u = n;
                                u <= a;
                                u++
                              ) {
                                var d = l[s + u],
                                  h = o[u];
                                i && !h && u < i && (h = e.fragments[u] = d),
                                  d && h && r(d, h);
                              }
                            })(t, e, function (t, i) {
                              t.relurl && (f = t.cc - i.cc),
                                (0, a.isFiniteNumber)(t.startPTS) &&
                                  (0, a.isFiniteNumber)(t.endPTS) &&
                                  ((i.start = i.startPTS = t.startPTS),
                                  (i.startDTS = t.startDTS),
                                  (i.appendedPTS = t.appendedPTS),
                                  (i.maxStartPTS = t.maxStartPTS),
                                  (i.endPTS = t.endPTS),
                                  (i.endDTS = t.endDTS),
                                  (i.minEndPTS = t.minEndPTS),
                                  (i.duration = t.endPTS - t.startPTS),
                                  i.duration && (o = i),
                                  (e.PTSKnown = e.alignedSliding = !0)),
                                (i.elementaryStreams = t.elementaryStreams),
                                (i.loader = t.loader),
                                (i.stats = t.stats),
                                (i.urlId = t.urlId),
                                t.initSegment &&
                                  ((i.initSegment = t.initSegment),
                                  (r = t.initSegment));
                            }),
                            r &&
                              (e.fragmentHint
                                ? e.fragments.concat(e.fragmentHint)
                                : e.fragments
                              ).forEach(function (t) {
                                var e;
                                (t.initSegment &&
                                  t.initSegment.relurl !==
                                    (null === (e = r) || void 0 === e
                                      ? void 0
                                      : e.relurl)) ||
                                  (t.initSegment = r);
                              }),
                            e.skippedSegments)
                          )
                            if (
                              ((e.deltaUpdateFailed = e.fragments.some(
                                function (t) {
                                  return !t;
                                }
                              )),
                              e.deltaUpdateFailed)
                            ) {
                              l.logger.warn(
                                "[level-helper] Previous playlist missing segments skipped in delta playlist"
                              );
                              for (var v = e.skippedSegments; v--; )
                                e.fragments.shift();
                              (e.startSN = e.fragments[0].sn),
                                (e.startCC = e.fragments[0].cc);
                            } else
                              e.canSkipDateRanges &&
                                (e.dateRanges =
                                  ((u = t.dateRanges),
                                  (d = e.dateRanges),
                                  (h = e.recentlyRemovedDateranges),
                                  (c = dt({}, u)),
                                  h &&
                                    h.forEach(function (t) {
                                      delete c[t];
                                    }),
                                  Object.keys(d).forEach(function (t) {
                                    var e = new g(d[t].attr, c[t]);
                                    e.isValid
                                      ? (c[t] = e)
                                      : l.logger.warn(
                                          'Ignoring invalid Playlist Delta Update DATERANGE tag: "' +
                                            JSON.stringify(d[t].attr) +
                                            '"'
                                        );
                                  }),
                                  c));
                          var p = e.fragments;
                          if (f) {
                            l.logger.warn(
                              "discontinuity sliding from playlist, take drift into account"
                            );
                            for (var m = 0; m < p.length; m++) p[m].cc += f;
                          }
                          e.skippedSegments && (e.startCC = e.fragments[0].cc),
                            (function (t, e, r) {
                              if (t && e)
                                for (
                                  var i = 0, n = 0, a = t.length;
                                  n <= a;
                                  n++
                                ) {
                                  var s = t[n],
                                    o = e[n + i];
                                  s &&
                                  o &&
                                  s.index === o.index &&
                                  s.fragment.sn === o.fragment.sn
                                    ? ((l = s),
                                      ((u = o).elementaryStreams =
                                        l.elementaryStreams),
                                      (u.stats = l.stats))
                                    : i--;
                                }
                              var l, u;
                            })(t.partList, e.partList),
                            o
                              ? gt(
                                  e,
                                  o,
                                  o.startPTS,
                                  o.endPTS,
                                  o.startDTS,
                                  o.endDTS
                                )
                              : vt(t, e),
                            p.length && (e.totalduration = e.edge - p[0].start),
                            (e.driftStartTime = t.driftStartTime),
                            (e.driftStart = t.driftStart);
                          var y = e.advancedDateTime;
                          if (e.advanced && y) {
                            var E = e.edge;
                            e.driftStart ||
                              ((e.driftStartTime = y), (e.driftStart = E)),
                              (e.driftEndTime = y),
                              (e.driftEnd = E);
                          } else
                            (e.driftEndTime = t.driftEndTime),
                              (e.driftEnd = t.driftEnd),
                              (e.advancedDateTime = t.advancedDateTime);
                        })(r, n),
                      !this.canLoad || !n.live)
                    )
                      return;
                    var d,
                      h = void 0,
                      c = void 0;
                    if (n.canBlockReload && n.endSN && n.advanced) {
                      var f = this.hls.config.lowLatencyMode,
                        v = n.lastPartSn,
                        p = n.endSN,
                        m = n.lastPartIndex,
                        y = v === p;
                      -1 !== m
                        ? ((h = y ? p + 1 : v), (c = y ? (f ? 0 : m) : m + 1))
                        : (h = p + 1);
                      var E = n.age,
                        T = E + n.ageHeader,
                        S = Math.min(T - n.partTarget, 1.5 * n.targetduration);
                      if (S > 0) {
                        if (r && S > r.tuneInGoal)
                          this.warn(
                            "CDN Tune-in goal increased from: " +
                              r.tuneInGoal +
                              " to: " +
                              S +
                              " with playlist age: " +
                              n.age
                          ),
                            (S = 0);
                        else {
                          var b = Math.floor(S / n.targetduration);
                          (h += b),
                            void 0 !== c &&
                              (c += Math.round(
                                (S % n.targetduration) / n.partTarget
                              )),
                            this.log(
                              "CDN Tune-in age: " +
                                n.ageHeader +
                                "s last advanced " +
                                E.toFixed(2) +
                                "s goal: " +
                                S +
                                " skip sn " +
                                b +
                                " to part " +
                                c
                            );
                        }
                        n.tuneInGoal = S;
                      }
                      if (
                        ((d = this.getDeliveryDirectives(
                          n,
                          e.deliveryDirectives,
                          h,
                          c
                        )),
                        f || !y)
                      )
                        return void this.loadPlaylist(d);
                    } else
                      d = this.getDeliveryDirectives(
                        n,
                        e.deliveryDirectives,
                        h,
                        c
                      );
                    var L = this.hls.mainForwardBufferInfo,
                      A = L ? L.end - L.len : 0,
                      D = (function (t, e) {
                        void 0 === e && (e = 1 / 0);
                        var r = 1e3 * t.targetduration;
                        if (t.updated) {
                          var i = t.fragments;
                          if (i.length && 4 * r > e) {
                            var n = 1e3 * i[i.length - 1].duration;
                            n < r && (r = n);
                          }
                        } else r /= 2;
                        return Math.round(r);
                      })(n, 1e3 * (n.edge - A));
                    n.updated
                      ? o > this.requestScheduled + D &&
                        (this.requestScheduled = s.loading.start)
                      : (this.requestScheduled = -1),
                      void 0 !== h && n.canBlockReload
                        ? (this.requestScheduled =
                            s.loading.first + D - (1e3 * n.partTarget || 1e3))
                        : (this.requestScheduled =
                            (-1 === this.requestScheduled
                              ? o
                              : this.requestScheduled) + D);
                    var k = this.requestScheduled - o;
                    (k = Math.max(0, k)),
                      this.log(
                        "reload live playlist " +
                          t +
                          " in " +
                          Math.round(k) +
                          " ms"
                      ),
                      (this.timer = self.setTimeout(function () {
                        return i.loadPlaylist(d);
                      }, k));
                  } else this.clearTimer();
                }),
                (e.getDeliveryDirectives = function (t, e, r, i) {
                  var n = (function (t, e) {
                    var r = t.canSkipUntil,
                      i = t.canSkipDateRanges,
                      n = t.endSN;
                    return r && (void 0 !== e ? e - n : 0) < r
                      ? i
                        ? st.v2
                        : st.Yes
                      : st.No;
                  })(t, r);
                  return (
                    null != e &&
                      e.skip &&
                      t.deltaUpdateFailed &&
                      ((r = e.msn), (i = e.part), (n = st.No)),
                    new lt(r, i, n)
                  );
                }),
                (e.retryLoadingOrFail = function (t) {
                  var e,
                    r = this,
                    i = this.hls.config,
                    n = this.retryCount < i.levelLoadingMaxRetry;
                  if (n)
                    if (
                      ((this.requestScheduled = -1),
                      this.retryCount++,
                      t.details.indexOf("LoadTimeOut") > -1 &&
                        null !== (e = t.context) &&
                        void 0 !== e &&
                        e.deliveryDirectives)
                    )
                      this.warn(
                        "retry playlist loading #" +
                          this.retryCount +
                          ' after "' +
                          t.details +
                          '"'
                      ),
                        this.loadPlaylist();
                    else {
                      var a = Math.min(
                        Math.pow(2, this.retryCount) * i.levelLoadingRetryDelay,
                        i.levelLoadingMaxRetryTimeout
                      );
                      (this.timer = self.setTimeout(function () {
                        return r.loadPlaylist();
                      }, a)),
                        this.warn(
                          "retry playlist loading #" +
                            this.retryCount +
                            " in " +
                            a +
                            ' ms after "' +
                            t.details +
                            '"'
                        );
                    }
                  else
                    this.warn('cannot recover from error "' + t.details + '"'),
                      this.clearTimer(),
                      (t.fatal = !0);
                  return n;
                }),
                t
              );
            })();
            function yt() {
              return (
                (yt = Object.assign
                  ? Object.assign.bind()
                  : function (t) {
                      for (var e = 1; e < arguments.length; e++) {
                        var r = arguments[e];
                        for (var i in r)
                          Object.prototype.hasOwnProperty.call(r, i) &&
                            (t[i] = r[i]);
                      }
                      return t;
                    }),
                yt.apply(this, arguments)
              );
            }
            function Et(t, e) {
              for (var r = 0; r < e.length; r++) {
                var i = e[r];
                (i.enumerable = i.enumerable || !1),
                  (i.configurable = !0),
                  "value" in i && (i.writable = !0),
                  Object.defineProperty(
                    t,
                    (void 0,
                    "symbol" ==
                    typeof (n = (function (t, e) {
                      if ("object" != typeof t || null === t) return t;
                      var r = t[Symbol.toPrimitive];
                      if (void 0 !== r) {
                        var i = r.call(t, e);
                        if ("object" != typeof i) return i;
                        throw new TypeError(
                          "@@toPrimitive must return a primitive value."
                        );
                      }
                      return String(t);
                    })(i.key, "string"))
                      ? n
                      : String(n)),
                    i
                  );
              }
              var n;
            }
            function Tt(t, e) {
              return (
                (Tt = Object.setPrototypeOf
                  ? Object.setPrototypeOf.bind()
                  : function (t, e) {
                      return (t.__proto__ = e), t;
                    }),
                Tt(t, e)
              );
            }
            var St,
              bt = /chrome|firefox/.test(navigator.userAgent.toLowerCase()),
              Lt = (function (t) {
                var e, r;
                function i(e) {
                  var r;
                  return (
                    ((r =
                      t.call(this, e, "[level-controller]") || this)._levels =
                      []),
                    (r._firstLevel = -1),
                    (r._startLevel = void 0),
                    (r.currentLevelIndex = -1),
                    (r.manualLevelIndex = -1),
                    (r.onParsedComplete = void 0),
                    r._registerListeners(),
                    r
                  );
                }
                (r = t),
                  ((e = i).prototype = Object.create(r.prototype)),
                  (e.prototype.constructor = e),
                  Tt(e, r);
                var n,
                  a,
                  l = i.prototype;
                return (
                  (l._registerListeners = function () {
                    var t = this.hls;
                    t.on(s.Events.MANIFEST_LOADED, this.onManifestLoaded, this),
                      t.on(s.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                      t.on(
                        s.Events.AUDIO_TRACK_SWITCHED,
                        this.onAudioTrackSwitched,
                        this
                      ),
                      t.on(s.Events.FRAG_LOADED, this.onFragLoaded, this),
                      t.on(s.Events.ERROR, this.onError, this);
                  }),
                  (l._unregisterListeners = function () {
                    var t = this.hls;
                    t.off(
                      s.Events.MANIFEST_LOADED,
                      this.onManifestLoaded,
                      this
                    ),
                      t.off(s.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                      t.off(
                        s.Events.AUDIO_TRACK_SWITCHED,
                        this.onAudioTrackSwitched,
                        this
                      ),
                      t.off(s.Events.FRAG_LOADED, this.onFragLoaded, this),
                      t.off(s.Events.ERROR, this.onError, this);
                  }),
                  (l.destroy = function () {
                    this._unregisterListeners(),
                      (this.manualLevelIndex = -1),
                      (this._levels.length = 0),
                      t.prototype.destroy.call(this);
                  }),
                  (l.startLoad = function () {
                    this._levels.forEach(function (t) {
                      t.loadError = 0;
                    }),
                      t.prototype.startLoad.call(this);
                  }),
                  (l.onManifestLoaded = function (t, e) {
                    var r,
                      i,
                      n = [],
                      a = [],
                      l = [],
                      u = {},
                      d = !1,
                      h = !1,
                      c = !1;
                    if (
                      (e.levels.forEach(function (t) {
                        var e = t.attrs;
                        (d = d || !(!t.width || !t.height)),
                          (h = h || !!t.videoCodec),
                          (c = c || !!t.audioCodec),
                          bt &&
                            t.audioCodec &&
                            -1 !== t.audioCodec.indexOf("mp4a.40.34") &&
                            (t.audioCodec = void 0);
                        var r =
                          t.bitrate +
                          "-" +
                          t.attrs.RESOLUTION +
                          "-" +
                          t.attrs.CODECS;
                        (i = u[r])
                          ? i.url.push(t.url)
                          : ((i = new ut(t)), (u[r] = i), n.push(i)),
                          e &&
                            (e.AUDIO && ht(i, "audio", e.AUDIO),
                            e.SUBTITLES && ht(i, "text", e.SUBTITLES));
                      }),
                      (d || h) &&
                        c &&
                        (n = n.filter(function (t) {
                          var e = t.videoCodec,
                            r = t.width,
                            i = t.height;
                          return !!e || !(!r || !i);
                        })),
                      (n = n.filter(function (t) {
                        var e = t.audioCodec,
                          r = t.videoCodec;
                        return (!e || _(e, "audio")) && (!r || _(r, "video"));
                      })),
                      e.audioTracks &&
                        ct(
                          (a = e.audioTracks.filter(function (t) {
                            return !t.audioCodec || _(t.audioCodec, "audio");
                          }))
                        ),
                      e.subtitles && ct((l = e.subtitles)),
                      n.length > 0)
                    ) {
                      (r = n[0].bitrate),
                        n.sort(function (t, e) {
                          return t.attrs["HDCP-LEVEL"] !== e.attrs["HDCP-LEVEL"]
                            ? (t.attrs["HDCP-LEVEL"] || "") >
                              (e.attrs["HDCP-LEVEL"] || "")
                              ? 1
                              : -1
                            : t.bitrate !== e.bitrate
                            ? t.bitrate - e.bitrate
                            : t.attrs.SCORE !== e.attrs.SCORE
                            ? t.attrs.decimalFloatingPoint("SCORE") -
                              e.attrs.decimalFloatingPoint("SCORE")
                            : d && t.height !== e.height
                            ? t.height - e.height
                            : 0;
                        }),
                        (this._levels = n);
                      for (var f = 0; f < n.length; f++)
                        if (n[f].bitrate === r) {
                          (this._firstLevel = f),
                            this.log(
                              "manifest loaded, " +
                                n.length +
                                " level(s) found, first bitrate: " +
                                r
                            );
                          break;
                        }
                      var g = c && !h,
                        v = {
                          levels: n,
                          audioTracks: a,
                          subtitleTracks: l,
                          sessionData: e.sessionData,
                          sessionKeys: e.sessionKeys,
                          firstLevel: this._firstLevel,
                          stats: e.stats,
                          audio: c,
                          video: h,
                          altAudio:
                            !g &&
                            a.some(function (t) {
                              return !!t.url;
                            }),
                        };
                      this.hls.trigger(s.Events.MANIFEST_PARSED, v),
                        (this.hls.config.autoStartLoad ||
                          this.hls.forceStartLoad) &&
                          this.hls.startLoad(this.hls.config.startPosition);
                    } else
                      this.hls.trigger(s.Events.ERROR, {
                        type: o.ErrorTypes.MEDIA_ERROR,
                        details:
                          o.ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR,
                        fatal: !0,
                        url: e.url,
                        reason:
                          "no level with compatible codecs found in manifest",
                      });
                  }),
                  (l.onError = function (e, r) {
                    var i, n;
                    if ((t.prototype.onError.call(this, e, r), !r.fatal)) {
                      var a = r.context,
                        s = this._levels[this.currentLevelIndex];
                      if (
                        a &&
                        ((a.type === V.PlaylistContextType.AUDIO_TRACK &&
                          s.audioGroupIds &&
                          a.groupId === s.audioGroupIds[s.urlId]) ||
                          (a.type === V.PlaylistContextType.SUBTITLE_TRACK &&
                            s.textGroupIds &&
                            a.groupId === s.textGroupIds[s.urlId]))
                      )
                        this.redundantFailover(this.currentLevelIndex);
                      else {
                        var l,
                          u = !1,
                          d = !0;
                        switch (r.details) {
                          case o.ErrorDetails.FRAG_LOAD_ERROR:
                          case o.ErrorDetails.FRAG_LOAD_TIMEOUT:
                          case o.ErrorDetails.KEY_LOAD_ERROR:
                          case o.ErrorDetails.KEY_LOAD_TIMEOUT:
                            if (r.frag) {
                              var h =
                                  r.frag.type === V.PlaylistLevelType.MAIN
                                    ? r.frag.level
                                    : this.currentLevelIndex,
                                c = this._levels[h];
                              c
                                ? (c.fragmentError++,
                                  c.fragmentError >
                                    this.hls.config.fragLoadingMaxRetry &&
                                    (l = h))
                                : (l = h);
                            }
                            break;
                          case o.ErrorDetails
                            .KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED:
                            var f = s.attrs["HDCP-LEVEL"];
                            f &&
                              ((this.hls.maxHdcpLevel = ot[ot.indexOf(f) - 1]),
                              this.warn(
                                'Restricting playback to HDCP-LEVEL of "' +
                                  this.hls.maxHdcpLevel +
                                  '" or lower'
                              ));
                          case o.ErrorDetails.FRAG_PARSING_ERROR:
                          case o.ErrorDetails.KEY_SYSTEM_NO_SESSION:
                            (l =
                              (null === (i = r.frag) || void 0 === i
                                ? void 0
                                : i.type) === V.PlaylistLevelType.MAIN
                                ? r.frag.level
                                : this.currentLevelIndex),
                              (r.levelRetry = !1);
                            break;
                          case o.ErrorDetails.LEVEL_LOAD_ERROR:
                          case o.ErrorDetails.LEVEL_LOAD_TIMEOUT:
                            a &&
                              (a.deliveryDirectives && (d = !1), (l = a.level)),
                              (u = !0);
                            break;
                          case o.ErrorDetails.REMUX_ALLOC_ERROR:
                            (l =
                              null != (n = r.level)
                                ? n
                                : this.currentLevelIndex),
                              (u = !0);
                        }
                        void 0 !== l && this.recoverLevel(r, l, u, d);
                      }
                    }
                  }),
                  (l.recoverLevel = function (t, e, r, i) {
                    var n = t.details,
                      a = this._levels[e];
                    if ((a.loadError++, r)) {
                      if (!this.retryLoadingOrFail(t))
                        return void (this.currentLevelIndex = -1);
                      t.levelRetry = !0;
                    }
                    if (i) {
                      var s = a.url.length;
                      if (s > 1 && a.loadError < s)
                        (t.levelRetry = !0), this.redundantFailover(e);
                      else if (-1 === this.manualLevelIndex) {
                        for (
                          var o = -1, l = this._levels, u = l.length;
                          u--;

                        ) {
                          var d = (u + this.currentLevelIndex) % l.length;
                          if (
                            d !== this.currentLevelIndex &&
                            0 === l[d].loadError
                          ) {
                            o = d;
                            break;
                          }
                        }
                        o > -1 && this.currentLevelIndex !== o
                          ? (this.warn(n + ": switch to " + o),
                            (t.levelRetry = !0),
                            (this.hls.nextAutoLevel = o))
                          : !1 === t.levelRetry && (t.fatal = !0);
                      }
                    }
                  }),
                  (l.redundantFailover = function (t) {
                    var e = this._levels[t],
                      r = e.url.length;
                    if (r > 1) {
                      var i = (e.urlId + 1) % r;
                      this.warn("Switching to redundant URL-id " + i),
                        this._levels.forEach(function (t) {
                          t.urlId = i;
                        }),
                        (this.level = t);
                    }
                  }),
                  (l.onFragLoaded = function (t, e) {
                    var r = e.frag;
                    if (void 0 !== r && r.type === V.PlaylistLevelType.MAIN) {
                      var i = this._levels[r.level];
                      void 0 !== i &&
                        ((i.fragmentError = 0), (i.loadError = 0));
                    }
                  }),
                  (l.onLevelLoaded = function (t, e) {
                    var r,
                      i,
                      n = e.level,
                      a = e.details,
                      s = this._levels[n];
                    if (!s)
                      return (
                        this.warn("Invalid level index " + n),
                        void (
                          null !== (i = e.deliveryDirectives) &&
                          void 0 !== i &&
                          i.skip &&
                          (a.deltaUpdateFailed = !0)
                        )
                      );
                    n === this.currentLevelIndex
                      ? (0 === s.fragmentError &&
                          ((s.loadError = 0), (this.retryCount = 0)),
                        this.playlistLoaded(n, e, s.details))
                      : null !== (r = e.deliveryDirectives) &&
                        void 0 !== r &&
                        r.skip &&
                        (a.deltaUpdateFailed = !0);
                  }),
                  (l.onAudioTrackSwitched = function (t, e) {
                    var r = this.hls.levels[this.currentLevelIndex];
                    if (r && r.audioGroupIds) {
                      for (
                        var i = -1,
                          n = this.hls.audioTracks[e.id].groupId,
                          a = 0;
                        a < r.audioGroupIds.length;
                        a++
                      )
                        if (r.audioGroupIds[a] === n) {
                          i = a;
                          break;
                        }
                      i !== r.urlId && ((r.urlId = i), this.startLoad());
                    }
                  }),
                  (l.loadPlaylist = function (e) {
                    t.prototype.loadPlaylist.call(this);
                    var r = this.currentLevelIndex,
                      i = this._levels[r];
                    if (this.canLoad && i && i.url.length > 0) {
                      var n = i.urlId,
                        a = i.url[n];
                      if (e)
                        try {
                          a = e.addDirectives(a);
                        } catch (t) {
                          this.warn(
                            "Could not construct new URL with HLS Delivery Directives: " +
                              t
                          );
                        }
                      this.log(
                        "Attempt loading level index " +
                          r +
                          (void 0 !== (null == e ? void 0 : e.msn)
                            ? " at sn " + e.msn + " part " + e.part
                            : "") +
                          " with URL-id " +
                          n +
                          " " +
                          a
                      ),
                        this.clearTimer(),
                        this.hls.trigger(s.Events.LEVEL_LOADING, {
                          url: a,
                          level: r,
                          id: n,
                          deliveryDirectives: e || null,
                        });
                    }
                  }),
                  (l.removeLevel = function (t, e) {
                    var r = function (t, r) {
                        return r !== e;
                      },
                      i = this._levels
                        .filter(function (i, n) {
                          return (
                            n !== t ||
                            (i.url.length > 1 &&
                              void 0 !== e &&
                              ((i.url = i.url.filter(r)),
                              i.audioGroupIds &&
                                (i.audioGroupIds = i.audioGroupIds.filter(r)),
                              i.textGroupIds &&
                                (i.textGroupIds = i.textGroupIds.filter(r)),
                              (i.urlId = 0),
                              !0))
                          );
                        })
                        .map(function (t, e) {
                          var r = t.details;
                          return (
                            null != r &&
                              r.fragments &&
                              r.fragments.forEach(function (t) {
                                t.level = e;
                              }),
                            t
                          );
                        });
                    (this._levels = i),
                      this.hls.trigger(s.Events.LEVELS_UPDATED, { levels: i });
                  }),
                  (n = i),
                  (a = [
                    {
                      key: "levels",
                      get: function () {
                        return 0 === this._levels.length ? null : this._levels;
                      },
                    },
                    {
                      key: "level",
                      get: function () {
                        return this.currentLevelIndex;
                      },
                      set: function (t) {
                        var e,
                          r = this._levels;
                        if (
                          0 !== r.length &&
                          (this.currentLevelIndex !== t ||
                            null === (e = r[t]) ||
                            void 0 === e ||
                            !e.details)
                        ) {
                          if (t < 0 || t >= r.length) {
                            var i = t < 0;
                            if (
                              (this.hls.trigger(s.Events.ERROR, {
                                type: o.ErrorTypes.OTHER_ERROR,
                                details: o.ErrorDetails.LEVEL_SWITCH_ERROR,
                                level: t,
                                fatal: i,
                                reason: "invalid level idx",
                              }),
                              i)
                            )
                              return;
                            t = Math.min(t, r.length - 1);
                          }
                          this.clearTimer();
                          var n = this.currentLevelIndex,
                            a = r[n],
                            l = r[t];
                          this.log("switching to level " + t + " from " + n),
                            (this.currentLevelIndex = t);
                          var u = yt({}, l, {
                            level: t,
                            maxBitrate: l.maxBitrate,
                            uri: l.uri,
                            urlId: l.urlId,
                          });
                          delete u._urlId,
                            this.hls.trigger(s.Events.LEVEL_SWITCHING, u);
                          var d = l.details;
                          if (!d || d.live) {
                            var h = this.switchParams(
                              l.uri,
                              null == a ? void 0 : a.details
                            );
                            this.loadPlaylist(h);
                          }
                        }
                      },
                    },
                    {
                      key: "manualLevel",
                      get: function () {
                        return this.manualLevelIndex;
                      },
                      set: function (t) {
                        (this.manualLevelIndex = t),
                          void 0 === this._startLevel && (this._startLevel = t),
                          -1 !== t && (this.level = t);
                      },
                    },
                    {
                      key: "firstLevel",
                      get: function () {
                        return this._firstLevel;
                      },
                      set: function (t) {
                        this._firstLevel = t;
                      },
                    },
                    {
                      key: "startLevel",
                      get: function () {
                        if (void 0 === this._startLevel) {
                          var t = this.hls.config.startLevel;
                          return void 0 !== t ? t : this._firstLevel;
                        }
                        return this._startLevel;
                      },
                      set: function (t) {
                        this._startLevel = t;
                      },
                    },
                    {
                      key: "nextLoadLevel",
                      get: function () {
                        return -1 !== this.manualLevelIndex
                          ? this.manualLevelIndex
                          : this.hls.nextAutoLevel;
                      },
                      set: function (t) {
                        (this.level = t),
                          -1 === this.manualLevelIndex &&
                            (this.hls.nextAutoLevel = t);
                      },
                    },
                  ]) && Et(n.prototype, a),
                  Object.defineProperty(n, "prototype", { writable: !1 }),
                  i
                );
              })(mt);
            !(function (t) {
              (t.NOT_LOADED = "NOT_LOADED"),
                (t.APPENDING = "APPENDING"),
                (t.PARTIAL = "PARTIAL"),
                (t.OK = "OK");
            })(St || (St = {}));
            var At = (function () {
              function t(t) {
                (this.activeFragment = null),
                  (this.activeParts = null),
                  (this.endListFragments = Object.create(null)),
                  (this.fragments = Object.create(null)),
                  (this.timeRanges = Object.create(null)),
                  (this.bufferPadding = 0.2),
                  (this.hls = void 0),
                  (this.hls = t),
                  this._registerListeners();
              }
              var e = t.prototype;
              return (
                (e._registerListeners = function () {
                  var t = this.hls;
                  t.on(s.Events.BUFFER_APPENDED, this.onBufferAppended, this),
                    t.on(s.Events.FRAG_BUFFERED, this.onFragBuffered, this),
                    t.on(s.Events.FRAG_LOADED, this.onFragLoaded, this);
                }),
                (e._unregisterListeners = function () {
                  var t = this.hls;
                  t.off(s.Events.BUFFER_APPENDED, this.onBufferAppended, this),
                    t.off(s.Events.FRAG_BUFFERED, this.onFragBuffered, this),
                    t.off(s.Events.FRAG_LOADED, this.onFragLoaded, this);
                }),
                (e.destroy = function () {
                  this._unregisterListeners(),
                    (this.fragments =
                      this.endListFragments =
                      this.timeRanges =
                      this.activeFragment =
                      this.activeParts =
                        null);
                }),
                (e.getAppendedFrag = function (t, e) {
                  if (e === V.PlaylistLevelType.MAIN) {
                    var r = this.activeFragment,
                      i = this.activeParts;
                    if (!r) return null;
                    if (i)
                      for (var n = i.length; n--; ) {
                        var a = i[n],
                          s = a ? a.end : r.appendedPTS;
                        if (a.start <= t && void 0 !== s && t <= s)
                          return (
                            n > 9 && (this.activeParts = i.slice(n - 9)), a
                          );
                      }
                    else if (
                      r.start <= t &&
                      void 0 !== r.appendedPTS &&
                      t <= r.appendedPTS
                    )
                      return r;
                  }
                  return this.getBufferedFrag(t, e);
                }),
                (e.getBufferedFrag = function (t, e) {
                  for (
                    var r = this.fragments, i = Object.keys(r), n = i.length;
                    n--;

                  ) {
                    var a = r[i[n]];
                    if (
                      (null == a ? void 0 : a.body.type) === e &&
                      a.buffered
                    ) {
                      var s = a.body;
                      if (s.start <= t && t <= s.end) return s;
                    }
                  }
                  return null;
                }),
                (e.detectEvictedFragments = function (t, e, r) {
                  var i = this;
                  this.timeRanges && (this.timeRanges[t] = e),
                    Object.keys(this.fragments).forEach(function (n) {
                      var a = i.fragments[n];
                      if (a)
                        if (a.buffered || a.loaded) {
                          var s = a.range[t];
                          s &&
                            s.time.some(function (t) {
                              var r = !i.isTimeBuffered(
                                t.startPTS,
                                t.endPTS,
                                e
                              );
                              return r && i.removeFragment(a.body), r;
                            });
                        } else a.body.type === r && i.removeFragment(a.body);
                    });
                }),
                (e.detectPartialFragments = function (t) {
                  var e = this,
                    r = this.timeRanges,
                    i = t.frag,
                    n = t.part;
                  if (r && "initSegment" !== i.sn) {
                    var a = kt(i),
                      s = this.fragments[a];
                    s &&
                      (Object.keys(r).forEach(function (t) {
                        var a = i.elementaryStreams[t];
                        if (a) {
                          var o = r[t],
                            l = null !== n || !0 === a.partial;
                          s.range[t] = e.getBufferedTimes(i, n, l, o);
                        }
                      }),
                      (s.loaded = null),
                      Object.keys(s.range).length
                        ? ((s.buffered = !0),
                          s.body.endList &&
                            (this.endListFragments[s.body.type] = s))
                        : this.removeFragment(s.body));
                  }
                }),
                (e.fragBuffered = function (t) {
                  var e = kt(t),
                    r = this.fragments[e];
                  r && ((r.loaded = null), (r.buffered = !0));
                }),
                (e.getBufferedTimes = function (t, e, r, i) {
                  for (
                    var n = { time: [], partial: r },
                      a = e ? e.start : t.start,
                      s = e ? e.end : t.end,
                      o = t.minEndPTS || s,
                      l = t.maxStartPTS || a,
                      u = 0;
                    u < i.length;
                    u++
                  ) {
                    var d = i.start(u) - this.bufferPadding,
                      h = i.end(u) + this.bufferPadding;
                    if (l >= d && o <= h) {
                      n.time.push({
                        startPTS: Math.max(a, i.start(u)),
                        endPTS: Math.min(s, i.end(u)),
                      });
                      break;
                    }
                    if (a < h && s > d)
                      (n.partial = !0),
                        n.time.push({
                          startPTS: Math.max(a, i.start(u)),
                          endPTS: Math.min(s, i.end(u)),
                        });
                    else if (s <= d) break;
                  }
                  return n;
                }),
                (e.getPartialFragment = function (t) {
                  var e,
                    r,
                    i,
                    n = null,
                    a = 0,
                    s = this.bufferPadding,
                    o = this.fragments;
                  return (
                    Object.keys(o).forEach(function (l) {
                      var u = o[l];
                      u &&
                        Dt(u) &&
                        ((r = u.body.start - s),
                        (i = u.body.end + s),
                        t >= r &&
                          t <= i &&
                          ((e = Math.min(t - r, i - t)),
                          a <= e && ((n = u.body), (a = e))));
                    }),
                    n
                  );
                }),
                (e.isEndListAppended = function (t) {
                  var e = this.endListFragments[t];
                  return void 0 !== e && (e.buffered || Dt(e));
                }),
                (e.getState = function (t) {
                  var e = kt(t),
                    r = this.fragments[e];
                  return r
                    ? r.buffered
                      ? Dt(r)
                        ? St.PARTIAL
                        : St.OK
                      : St.APPENDING
                    : St.NOT_LOADED;
                }),
                (e.isTimeBuffered = function (t, e, r) {
                  for (var i, n, a = 0; a < r.length; a++) {
                    if (
                      ((i = r.start(a) - this.bufferPadding),
                      (n = r.end(a) + this.bufferPadding),
                      t >= i && e <= n)
                    )
                      return !0;
                    if (e <= i) return !1;
                  }
                  return !1;
                }),
                (e.onFragLoaded = function (t, e) {
                  var r = e.frag,
                    i = e.part;
                  if ("initSegment" !== r.sn && !r.bitrateTest && !i) {
                    var n = kt(r);
                    this.fragments[n] = {
                      body: r,
                      loaded: e,
                      buffered: !1,
                      range: Object.create(null),
                    };
                  }
                }),
                (e.onBufferAppended = function (t, e) {
                  var r = this,
                    i = e.frag,
                    n = e.part,
                    a = e.timeRanges;
                  if (i.type === V.PlaylistLevelType.MAIN)
                    if (
                      (this.activeFragment !== i &&
                        ((this.activeFragment = i), (i.appendedPTS = void 0)),
                      n)
                    ) {
                      var s = this.activeParts;
                      s || (this.activeParts = s = []), s.push(n);
                    } else this.activeParts = null;
                  (this.timeRanges = a),
                    Object.keys(a).forEach(function (t) {
                      var e = a[t];
                      if (
                        (r.detectEvictedFragments(t, e),
                        !n && i.type === V.PlaylistLevelType.MAIN)
                      ) {
                        var s = i.elementaryStreams[t];
                        if (!s) return;
                        for (var o = 0; o < e.length; o++) {
                          var l = e.end(o);
                          l <= s.endPTS && l > s.startPTS
                            ? (i.appendedPTS = Math.max(l, i.appendedPTS || 0))
                            : (i.appendedPTS = s.endPTS);
                        }
                      }
                    });
                }),
                (e.onFragBuffered = function (t, e) {
                  this.detectPartialFragments(e);
                }),
                (e.hasFragment = function (t) {
                  var e = kt(t);
                  return !!this.fragments[e];
                }),
                (e.removeFragmentsInRange = function (t, e, r) {
                  var i = this;
                  Object.keys(this.fragments).forEach(function (n) {
                    var a = i.fragments[n];
                    if (a && a.buffered) {
                      var s = a.body;
                      s.type === r &&
                        s.start < e &&
                        s.end > t &&
                        i.removeFragment(s);
                    }
                  });
                }),
                (e.removeFragment = function (t) {
                  var e = kt(t);
                  (t.stats.loaded = 0),
                    t.clearElementaryStreamInfo(),
                    (t.appendedPTS = void 0),
                    delete this.fragments[e],
                    t.endList && delete this.endListFragments[t.type];
                }),
                (e.removeAllFragments = function () {
                  (this.fragments = Object.create(null)),
                    (this.endListFragments = Object.create(null)),
                    (this.activeFragment = null),
                    (this.activeParts = null);
                }),
                t
              );
            })();
            function Dt(t) {
              var e, r;
              return (
                t.buffered &&
                ((null === (e = t.range.video) || void 0 === e
                  ? void 0
                  : e.partial) ||
                  (null === (r = t.range.audio) || void 0 === r
                    ? void 0
                    : r.partial))
              );
            }
            function kt(t) {
              return t.type + "_" + t.level + "_" + t.urlId + "_" + t.sn;
            }
            function Rt(t) {
              var e = "function" == typeof Map ? new Map() : void 0;
              return (
                (Rt = function (t) {
                  if (
                    null === t ||
                    ((r = t),
                    -1 === Function.toString.call(r).indexOf("[native code]"))
                  )
                    return t;
                  var r;
                  if ("function" != typeof t)
                    throw new TypeError(
                      "Super expression must either be null or a function"
                    );
                  if (void 0 !== e) {
                    if (e.has(t)) return e.get(t);
                    e.set(t, i);
                  }
                  function i() {
                    return It(t, arguments, _t(this).constructor);
                  }
                  return (
                    (i.prototype = Object.create(t.prototype, {
                      constructor: {
                        value: i,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                      },
                    })),
                    Ct(i, t)
                  );
                }),
                Rt(t)
              );
            }
            function It(t, e, r) {
              return (
                (It = wt()
                  ? Reflect.construct.bind()
                  : function (t, e, r) {
                      var i = [null];
                      i.push.apply(i, e);
                      var n = new (Function.bind.apply(t, i))();
                      return r && Ct(n, r.prototype), n;
                    }),
                It.apply(null, arguments)
              );
            }
            function wt() {
              if ("undefined" == typeof Reflect || !Reflect.construct)
                return !1;
              if (Reflect.construct.sham) return !1;
              if ("function" == typeof Proxy) return !0;
              try {
                return (
                  Boolean.prototype.valueOf.call(
                    Reflect.construct(Boolean, [], function () {})
                  ),
                  !0
                );
              } catch (t) {
                return !1;
              }
            }
            function Ct(t, e) {
              return (
                (Ct = Object.setPrototypeOf
                  ? Object.setPrototypeOf.bind()
                  : function (t, e) {
                      return (t.__proto__ = e), t;
                    }),
                Ct(t, e)
              );
            }
            function _t(t) {
              return (
                (_t = Object.setPrototypeOf
                  ? Object.getPrototypeOf.bind()
                  : function (t) {
                      return t.__proto__ || Object.getPrototypeOf(t);
                    }),
                _t(t)
              );
            }
            var Pt = Math.pow(2, 17),
              Ot = (function () {
                function t(t) {
                  (this.config = void 0),
                    (this.loader = null),
                    (this.partLoadTimeout = -1),
                    (this.config = t);
                }
                var e = t.prototype;
                return (
                  (e.destroy = function () {
                    this.loader &&
                      (this.loader.destroy(), (this.loader = null));
                  }),
                  (e.abort = function () {
                    this.loader && this.loader.abort();
                  }),
                  (e.load = function (t, e) {
                    var r = this,
                      i = t.url;
                    if (!i)
                      return Promise.reject(
                        new Ft(
                          {
                            type: o.ErrorTypes.NETWORK_ERROR,
                            details: o.ErrorDetails.FRAG_LOAD_ERROR,
                            fatal: !1,
                            frag: t,
                            networkDetails: null,
                          },
                          "Fragment does not have a " +
                            (i ? "part list" : "url")
                        )
                      );
                    this.abort();
                    var n = this.config,
                      a = n.fLoader,
                      s = n.loader;
                    return new Promise(function (i, l) {
                      r.loader && r.loader.destroy();
                      var u = (r.loader = t.loader = a ? new a(n) : new s(n)),
                        d = xt(t),
                        h = {
                          timeout: n.fragLoadingTimeOut,
                          maxRetry: 0,
                          retryDelay: 0,
                          maxRetryDelay: n.fragLoadingMaxRetryTimeout,
                          highWaterMark: "initSegment" === t.sn ? 1 / 0 : Pt,
                        };
                      (t.stats = u.stats),
                        u.load(d, h, {
                          onSuccess: function (e, n, a, s) {
                            r.resetLoader(t, u);
                            var o = e.data;
                            a.resetIV &&
                              t.decryptdata &&
                              ((t.decryptdata.iv = new Uint8Array(
                                o.slice(0, 16)
                              )),
                              (o = o.slice(16))),
                              i({
                                frag: t,
                                part: null,
                                payload: o,
                                networkDetails: s,
                              });
                          },
                          onError: function (e, i, n) {
                            r.resetLoader(t, u),
                              l(
                                new Ft({
                                  type: o.ErrorTypes.NETWORK_ERROR,
                                  details: o.ErrorDetails.FRAG_LOAD_ERROR,
                                  fatal: !1,
                                  frag: t,
                                  response: e,
                                  networkDetails: n,
                                })
                              );
                          },
                          onAbort: function (e, i, n) {
                            r.resetLoader(t, u),
                              l(
                                new Ft({
                                  type: o.ErrorTypes.NETWORK_ERROR,
                                  details: o.ErrorDetails.INTERNAL_ABORTED,
                                  fatal: !1,
                                  frag: t,
                                  networkDetails: n,
                                })
                              );
                          },
                          onTimeout: function (e, i, n) {
                            r.resetLoader(t, u),
                              l(
                                new Ft({
                                  type: o.ErrorTypes.NETWORK_ERROR,
                                  details: o.ErrorDetails.FRAG_LOAD_TIMEOUT,
                                  fatal: !1,
                                  frag: t,
                                  networkDetails: n,
                                })
                              );
                          },
                          onProgress: function (r, i, n, a) {
                            e &&
                              e({
                                frag: t,
                                part: null,
                                payload: n,
                                networkDetails: a,
                              });
                          },
                        });
                    });
                  }),
                  (e.loadPart = function (t, e, r) {
                    var i = this;
                    this.abort();
                    var n = this.config,
                      a = n.fLoader,
                      s = n.loader;
                    return new Promise(function (l, u) {
                      i.loader && i.loader.destroy();
                      var d = (i.loader = t.loader = a ? new a(n) : new s(n)),
                        h = xt(t, e),
                        c = {
                          timeout: n.fragLoadingTimeOut,
                          maxRetry: 0,
                          retryDelay: 0,
                          maxRetryDelay: n.fragLoadingMaxRetryTimeout,
                          highWaterMark: Pt,
                        };
                      (e.stats = d.stats),
                        d.load(h, c, {
                          onSuccess: function (n, a, s, o) {
                            i.resetLoader(t, d), i.updateStatsFromPart(t, e);
                            var u = {
                              frag: t,
                              part: e,
                              payload: n.data,
                              networkDetails: o,
                            };
                            r(u), l(u);
                          },
                          onError: function (r, n, a) {
                            i.resetLoader(t, d),
                              u(
                                new Ft({
                                  type: o.ErrorTypes.NETWORK_ERROR,
                                  details: o.ErrorDetails.FRAG_LOAD_ERROR,
                                  fatal: !1,
                                  frag: t,
                                  part: e,
                                  response: r,
                                  networkDetails: a,
                                })
                              );
                          },
                          onAbort: function (r, n, a) {
                            (t.stats.aborted = e.stats.aborted),
                              i.resetLoader(t, d),
                              u(
                                new Ft({
                                  type: o.ErrorTypes.NETWORK_ERROR,
                                  details: o.ErrorDetails.INTERNAL_ABORTED,
                                  fatal: !1,
                                  frag: t,
                                  part: e,
                                  networkDetails: a,
                                })
                              );
                          },
                          onTimeout: function (r, n, a) {
                            i.resetLoader(t, d),
                              u(
                                new Ft({
                                  type: o.ErrorTypes.NETWORK_ERROR,
                                  details: o.ErrorDetails.FRAG_LOAD_TIMEOUT,
                                  fatal: !1,
                                  frag: t,
                                  part: e,
                                  networkDetails: a,
                                })
                              );
                          },
                        });
                    });
                  }),
                  (e.updateStatsFromPart = function (t, e) {
                    var r = t.stats,
                      i = e.stats,
                      n = i.total;
                    if (((r.loaded += i.loaded), n)) {
                      var a = Math.round(t.duration / e.duration),
                        s = Math.min(Math.round(r.loaded / n), a),
                        o = (a - s) * Math.round(r.loaded / s);
                      r.total = r.loaded + o;
                    } else r.total = Math.max(r.loaded, r.total);
                    var l = r.loading,
                      u = i.loading;
                    l.start
                      ? (l.first += u.first - u.start)
                      : ((l.start = u.start), (l.first = u.first)),
                      (l.end = u.end);
                  }),
                  (e.resetLoader = function (t, e) {
                    (t.loader = null),
                      this.loader === e &&
                        (self.clearTimeout(this.partLoadTimeout),
                        (this.loader = null)),
                      e.destroy();
                  }),
                  t
                );
              })();
            function xt(t, e) {
              void 0 === e && (e = null);
              var r = e || t,
                i = {
                  frag: t,
                  part: e,
                  responseType: "arraybuffer",
                  url: r.url,
                  headers: {},
                  rangeStart: 0,
                  rangeEnd: 0,
                },
                n = r.byteRangeStartOffset,
                s = r.byteRangeEndOffset;
              if ((0, a.isFiniteNumber)(n) && (0, a.isFiniteNumber)(s)) {
                var o,
                  l = n,
                  u = s;
                if (
                  "initSegment" === t.sn &&
                  "AES-128" ===
                    (null === (o = t.decryptdata) || void 0 === o
                      ? void 0
                      : o.method)
                ) {
                  var d = s - n;
                  d % 16 && (u = s + (16 - (d % 16))),
                    0 !== n && ((i.resetIV = !0), (l = n - 16));
                }
                (i.rangeStart = l), (i.rangeEnd = u);
              }
              return i;
            }
            var Ft = (function (t) {
                var e, r;
                function i(e) {
                  for (
                    var r,
                      i = arguments.length,
                      n = new Array(i > 1 ? i - 1 : 0),
                      a = 1;
                    a < i;
                    a++
                  )
                    n[a - 1] = arguments[a];
                  return (
                    ((r = t.call.apply(t, [this].concat(n)) || this).data =
                      void 0),
                    (r.data = e),
                    r
                  );
                }
                return (
                  (r = t),
                  ((e = i).prototype = Object.create(r.prototype)),
                  (e.prototype.constructor = e),
                  Ct(e, r),
                  i
                );
              })(Rt(Error)),
              Mt = (function () {
                function t(t) {
                  (this.config = void 0),
                    (this.keyUriToKeyInfo = {}),
                    (this.emeController = null),
                    (this.config = t);
                }
                var e = t.prototype;
                return (
                  (e.abort = function () {
                    for (var t in this.keyUriToKeyInfo) {
                      var e = this.keyUriToKeyInfo[t].loader;
                      e && e.abort();
                    }
                  }),
                  (e.detach = function () {
                    for (var t in this.keyUriToKeyInfo) {
                      var e = this.keyUriToKeyInfo[t];
                      (e.mediaKeySessionContext ||
                        e.decryptdata.isCommonEncryption) &&
                        delete this.keyUriToKeyInfo[t];
                    }
                  }),
                  (e.destroy = function () {
                    for (var t in (this.detach(), this.keyUriToKeyInfo)) {
                      var e = this.keyUriToKeyInfo[t].loader;
                      e && e.destroy();
                    }
                    this.keyUriToKeyInfo = {};
                  }),
                  (e.createKeyLoadError = function (t, e, r, i) {
                    return (
                      void 0 === e && (e = o.ErrorDetails.KEY_LOAD_ERROR),
                      new Ft({
                        type: o.ErrorTypes.NETWORK_ERROR,
                        details: e,
                        fatal: !1,
                        frag: t,
                        networkDetails: r,
                      })
                    );
                  }),
                  (e.loadClear = function (t, e) {
                    var r = this;
                    if (this.emeController && this.config.emeEnabled)
                      for (
                        var i = t.sn,
                          n = t.cc,
                          a = function (t) {
                            var a = e[t];
                            if (n <= a.cc && ("initSegment" === i || i < a.sn))
                              return (
                                r.emeController
                                  .selectKeySystemFormat(a)
                                  .then(function (t) {
                                    a.setKeyFormat(t);
                                  }),
                                "break"
                              );
                          },
                          s = 0;
                        s < e.length && "break" !== a(s);
                        s++
                      );
                  }),
                  (e.load = function (t) {
                    var e = this;
                    return !t.decryptdata && t.encrypted && this.emeController
                      ? this.emeController
                          .selectKeySystemFormat(t)
                          .then(function (r) {
                            return e.loadInternal(t, r);
                          })
                      : this.loadInternal(t);
                  }),
                  (e.loadInternal = function (t, e) {
                    var r, i;
                    e && t.setKeyFormat(e);
                    var n = t.decryptdata;
                    if (!n) {
                      var a = e
                        ? "Expected frag.decryptdata to be defined after setting format " +
                          e
                        : "Missing decryption data on fragment in onKeyLoading";
                      return Promise.reject(
                        this.createKeyLoadError(
                          t,
                          o.ErrorDetails.KEY_LOAD_ERROR,
                          null,
                          a
                        )
                      );
                    }
                    var s = n.uri;
                    if (!s)
                      return Promise.reject(
                        this.createKeyLoadError(
                          t,
                          o.ErrorDetails.KEY_LOAD_ERROR,
                          null,
                          'Invalid key URI: "' + s + '"'
                        )
                      );
                    var l,
                      u = this.keyUriToKeyInfo[s];
                    if (null !== (r = u) && void 0 !== r && r.decryptdata.key)
                      return (
                        (n.key = u.decryptdata.key),
                        Promise.resolve({ frag: t, keyInfo: u })
                      );
                    if (null !== (i = u) && void 0 !== i && i.keyLoadPromise)
                      switch (
                        null === (l = u.mediaKeySessionContext) || void 0 === l
                          ? void 0
                          : l.keyStatus
                      ) {
                        case void 0:
                        case "status-pending":
                        case "usable":
                        case "usable-in-future":
                          return u.keyLoadPromise.then(function (e) {
                            return (
                              (n.key = e.keyInfo.decryptdata.key),
                              { frag: t, keyInfo: u }
                            );
                          });
                      }
                    switch (
                      ((u = this.keyUriToKeyInfo[s] =
                        {
                          decryptdata: n,
                          keyLoadPromise: null,
                          loader: null,
                          mediaKeySessionContext: null,
                        }),
                      n.method)
                    ) {
                      case "ISO-23001-7":
                      case "SAMPLE-AES":
                      case "SAMPLE-AES-CENC":
                      case "SAMPLE-AES-CTR":
                        return "identity" === n.keyFormat
                          ? this.loadKeyHTTP(u, t)
                          : this.loadKeyEME(u, t);
                      case "AES-128":
                        return this.loadKeyHTTP(u, t);
                      default:
                        return Promise.reject(
                          this.createKeyLoadError(
                            t,
                            o.ErrorDetails.KEY_LOAD_ERROR,
                            null,
                            'Key supplied with unsupported METHOD: "' +
                              n.method +
                              '"'
                          )
                        );
                    }
                  }),
                  (e.loadKeyEME = function (t, e) {
                    var r = { frag: e, keyInfo: t };
                    if (this.emeController && this.config.emeEnabled) {
                      var i = this.emeController.loadKey(r);
                      if (i)
                        return (t.keyLoadPromise = i.then(function (e) {
                          return (t.mediaKeySessionContext = e), r;
                        })).catch(function (e) {
                          throw ((t.keyLoadPromise = null), e);
                        });
                    }
                    return Promise.resolve(r);
                  }),
                  (e.loadKeyHTTP = function (t, e) {
                    var r = this,
                      i = this.config,
                      n = new (0, i.loader)(i);
                    return (
                      (e.keyLoader = t.loader = n),
                      (t.keyLoadPromise = new Promise(function (a, s) {
                        var l = {
                            keyInfo: t,
                            frag: e,
                            responseType: "arraybuffer",
                            url: t.decryptdata.uri,
                          },
                          u = {
                            timeout: i.fragLoadingTimeOut,
                            maxRetry: 0,
                            retryDelay: i.fragLoadingRetryDelay,
                            maxRetryDelay: i.fragLoadingMaxRetryTimeout,
                            highWaterMark: 0,
                          },
                          d = {
                            onSuccess: function (t, e, i, n) {
                              var l = i.frag,
                                u = i.keyInfo,
                                d = i.url;
                              if (!l.decryptdata || u !== r.keyUriToKeyInfo[d])
                                return s(
                                  r.createKeyLoadError(
                                    l,
                                    o.ErrorDetails.KEY_LOAD_ERROR,
                                    n,
                                    "after key load, decryptdata unset or changed"
                                  )
                                );
                              (u.decryptdata.key = l.decryptdata.key =
                                new Uint8Array(t.data)),
                                (l.keyLoader = null),
                                (u.loader = null),
                                a({ frag: l, keyInfo: u });
                            },
                            onError: function (t, i, n) {
                              r.resetLoader(i),
                                s(
                                  r.createKeyLoadError(
                                    e,
                                    o.ErrorDetails.KEY_LOAD_ERROR,
                                    n
                                  )
                                );
                            },
                            onTimeout: function (t, i, n) {
                              r.resetLoader(i),
                                s(
                                  r.createKeyLoadError(
                                    e,
                                    o.ErrorDetails.KEY_LOAD_TIMEOUT,
                                    n
                                  )
                                );
                            },
                            onAbort: function (t, i, n) {
                              r.resetLoader(i),
                                s(
                                  r.createKeyLoadError(
                                    e,
                                    o.ErrorDetails.INTERNAL_ABORTED,
                                    n
                                  )
                                );
                            },
                          };
                        n.load(l, u, d);
                      }))
                    );
                  }),
                  (e.resetLoader = function (t) {
                    var e = t.frag,
                      r = t.keyInfo,
                      i = t.url,
                      n = r.loader;
                    e.keyLoader === n &&
                      ((e.keyLoader = null), (r.loader = null)),
                      delete this.keyUriToKeyInfo[i],
                      n && n.destroy();
                  }),
                  t
                );
              })(),
              Nt = (function () {
                function t() {
                  (this._boundTick = void 0),
                    (this._tickTimer = null),
                    (this._tickInterval = null),
                    (this._tickCallCount = 0),
                    (this._boundTick = this.tick.bind(this));
                }
                var e = t.prototype;
                return (
                  (e.destroy = function () {
                    this.onHandlerDestroying(), this.onHandlerDestroyed();
                  }),
                  (e.onHandlerDestroying = function () {
                    this.clearNextTick(), this.clearInterval();
                  }),
                  (e.onHandlerDestroyed = function () {}),
                  (e.hasInterval = function () {
                    return !!this._tickInterval;
                  }),
                  (e.hasNextTick = function () {
                    return !!this._tickTimer;
                  }),
                  (e.setInterval = function (t) {
                    return (
                      !this._tickInterval &&
                      ((this._tickInterval = self.setInterval(
                        this._boundTick,
                        t
                      )),
                      !0)
                    );
                  }),
                  (e.clearInterval = function () {
                    return (
                      !!this._tickInterval &&
                      (self.clearInterval(this._tickInterval),
                      (this._tickInterval = null),
                      !0)
                    );
                  }),
                  (e.clearNextTick = function () {
                    return (
                      !!this._tickTimer &&
                      (self.clearTimeout(this._tickTimer),
                      (this._tickTimer = null),
                      !0)
                    );
                  }),
                  (e.tick = function () {
                    this._tickCallCount++,
                      1 === this._tickCallCount &&
                        (this.doTick(),
                        this._tickCallCount > 1 && this.tickImmediate(),
                        (this._tickCallCount = 0));
                  }),
                  (e.tickImmediate = function () {
                    this.clearNextTick(),
                      (this._tickTimer = self.setTimeout(this._boundTick, 0));
                  }),
                  (e.doTick = function () {}),
                  t
                );
              })(),
              Ut = {
                length: 0,
                start: function () {
                  return 0;
                },
                end: function () {
                  return 0;
                },
              },
              Bt = (function () {
                function t() {}
                return (
                  (t.isBuffered = function (e, r) {
                    try {
                      if (e)
                        for (var i = t.getBuffered(e), n = 0; n < i.length; n++)
                          if (r >= i.start(n) && r <= i.end(n)) return !0;
                    } catch (t) {}
                    return !1;
                  }),
                  (t.bufferInfo = function (e, r, i) {
                    try {
                      if (e) {
                        var n,
                          a = t.getBuffered(e),
                          s = [];
                        for (n = 0; n < a.length; n++)
                          s.push({ start: a.start(n), end: a.end(n) });
                        return this.bufferedInfo(s, r, i);
                      }
                    } catch (t) {}
                    return { len: 0, start: r, end: r, nextStart: void 0 };
                  }),
                  (t.bufferedInfo = function (t, e, r) {
                    (e = Math.max(0, e)),
                      t.sort(function (t, e) {
                        return t.start - e.start || e.end - t.end;
                      });
                    var i = [];
                    if (r)
                      for (var n = 0; n < t.length; n++) {
                        var a = i.length;
                        if (a) {
                          var s = i[a - 1].end;
                          t[n].start - s < r
                            ? t[n].end > s && (i[a - 1].end = t[n].end)
                            : i.push(t[n]);
                        } else i.push(t[n]);
                      }
                    else i = t;
                    for (var o, l = 0, u = e, d = e, h = 0; h < i.length; h++) {
                      var c = i[h].start,
                        f = i[h].end;
                      if (e + r >= c && e < f) (u = c), (l = (d = f) - e);
                      else if (e + r < c) {
                        o = c;
                        break;
                      }
                    }
                    return { len: l, start: u || 0, end: d || 0, nextStart: o };
                  }),
                  (t.getBuffered = function (t) {
                    try {
                      return t.buffered;
                    } catch (t) {
                      return (
                        l.logger.log("failed to get media.buffered", t), Ut
                      );
                    }
                  }),
                  t
                );
              })(),
              Gt = function (t, e, r, i, n, a) {
                void 0 === i && (i = 0),
                  void 0 === n && (n = -1),
                  void 0 === a && (a = !1),
                  (this.level = void 0),
                  (this.sn = void 0),
                  (this.part = void 0),
                  (this.id = void 0),
                  (this.size = void 0),
                  (this.partial = void 0),
                  (this.transmuxing = {
                    start: 0,
                    executeStart: 0,
                    executeEnd: 0,
                    end: 0,
                  }),
                  (this.buffering = {
                    audio: { start: 0, executeStart: 0, executeEnd: 0, end: 0 },
                    video: { start: 0, executeStart: 0, executeEnd: 0, end: 0 },
                    audiovideo: {
                      start: 0,
                      executeStart: 0,
                      executeEnd: 0,
                      end: 0,
                    },
                  }),
                  (this.level = t),
                  (this.sn = e),
                  (this.id = r),
                  (this.size = i),
                  (this.part = n),
                  (this.partial = a);
              };
            function Kt(t, e) {
              for (var r = null, i = 0, n = t.length; i < n; i++) {
                var a = t[i];
                if (a && a.cc === e) {
                  r = a;
                  break;
                }
              }
              return r;
            }
            function Ht(t, e) {
              if (t) {
                var r = t.start + e;
                (t.start = t.startPTS = r), (t.endPTS = r + t.duration);
              }
            }
            function jt(t, e) {
              for (var r = e.fragments, i = 0, n = r.length; i < n; i++)
                Ht(r[i], t);
              e.fragmentHint && Ht(e.fragmentHint, t), (e.alignedSliding = !0);
            }
            function Vt(t, e) {
              if (t.hasProgramDateTime && e.hasProgramDateTime) {
                var r = t.fragments,
                  i = e.fragments;
                if (r.length && i.length) {
                  var n = i[Math.round(i.length / 2) - 1],
                    a = Kt(r, n.cc) || r[Math.round(r.length / 2) - 1],
                    s = n.programDateTime,
                    o = a.programDateTime;
                  null !== s &&
                    null !== o &&
                    jt((o - s) / 1e3 - (a.start - n.start), t);
                }
              }
            }
            const Yt = function (t, e) {
              for (var r = 0, i = t.length - 1, n = null, a = null; r <= i; ) {
                var s = e((a = t[(n = ((r + i) / 2) | 0)]));
                if (s > 0) r = n + 1;
                else {
                  if (!(s < 0)) return a;
                  i = n - 1;
                }
              }
              return null;
            };
            function Wt(t, e, r, i) {
              void 0 === r && (r = 0), void 0 === i && (i = 0);
              var n = null;
              if (
                (t
                  ? (n = e[t.sn - e[0].sn + 1] || null)
                  : 0 === r && 0 === e[0].start && (n = e[0]),
                n && 0 === qt(r, i, n))
              )
                return n;
              var a = Yt(e, qt.bind(null, r, i));
              return !a || (a === t && n) ? n : a;
            }
            function qt(t, e, r) {
              if (
                (void 0 === t && (t = 0),
                void 0 === e && (e = 0),
                r.start <= t && r.start + r.duration > t)
              )
                return 0;
              var i = Math.min(e, r.duration + (r.deltaPTS ? r.deltaPTS : 0));
              return r.start + r.duration - i <= t
                ? 1
                : r.start - i > t && r.start
                ? -1
                : 0;
            }
            function Xt(t, e, r) {
              var i =
                1e3 * Math.min(e, r.duration + (r.deltaPTS ? r.deltaPTS : 0));
              return (r.endProgramDateTime || 0) - i > t;
            }
            var zt = r(21);
            const Qt = function (t) {
              for (var e = "", r = t.length, i = 0; i < r; i++)
                e +=
                  "[" + t.start(i).toFixed(3) + "-" + t.end(i).toFixed(3) + "]";
              return e;
            };
            function $t(t, e) {
              for (var r = 0; r < e.length; r++) {
                var i = e[r];
                (i.enumerable = i.enumerable || !1),
                  (i.configurable = !0),
                  "value" in i && (i.writable = !0),
                  Object.defineProperty(
                    t,
                    (void 0,
                    "symbol" ==
                    typeof (n = (function (t, e) {
                      if ("object" != typeof t || null === t) return t;
                      var r = t[Symbol.toPrimitive];
                      if (void 0 !== r) {
                        var i = r.call(t, e);
                        if ("object" != typeof i) return i;
                        throw new TypeError(
                          "@@toPrimitive must return a primitive value."
                        );
                      }
                      return String(t);
                    })(i.key, "string"))
                      ? n
                      : String(n)),
                    i
                  );
              }
              var n;
            }
            function Jt(t, e) {
              return (
                (Jt = Object.setPrototypeOf
                  ? Object.setPrototypeOf.bind()
                  : function (t, e) {
                      return (t.__proto__ = e), t;
                    }),
                Jt(t, e)
              );
            }
            var Zt = "STOPPED",
              te = "IDLE",
              ee = "KEY_LOADING",
              re = "FRAG_LOADING",
              ie = "FRAG_LOADING_WAITING_RETRY",
              ne = "WAITING_TRACK",
              ae = "PARSING",
              se = "PARSED",
              oe = "ENDED",
              le = "ERROR",
              ue = "WAITING_INIT_PTS",
              de = "WAITING_LEVEL",
              he = (function (t) {
                var e, r;
                function i(e, r, i, n) {
                  var a;
                  return (
                    ((a = t.call(this) || this).hls = void 0),
                    (a.fragPrevious = null),
                    (a.fragCurrent = null),
                    (a.fragmentTracker = void 0),
                    (a.transmuxer = null),
                    (a._state = Zt),
                    (a.media = null),
                    (a.mediaBuffer = null),
                    (a.config = void 0),
                    (a.bitrateTest = !1),
                    (a.lastCurrentTime = 0),
                    (a.nextLoadPosition = 0),
                    (a.startPosition = 0),
                    (a.loadedmetadata = !1),
                    (a.fragLoadError = 0),
                    (a.retryDate = 0),
                    (a.levels = null),
                    (a.fragmentLoader = void 0),
                    (a.keyLoader = void 0),
                    (a.levelLastLoaded = null),
                    (a.startFragRequested = !1),
                    (a.decrypter = void 0),
                    (a.initPTS = []),
                    (a.onvseeking = null),
                    (a.onvended = null),
                    (a.logPrefix = ""),
                    (a.log = void 0),
                    (a.warn = void 0),
                    (a.logPrefix = n),
                    (a.log = l.logger.log.bind(l.logger, n + ":")),
                    (a.warn = l.logger.warn.bind(l.logger, n + ":")),
                    (a.hls = e),
                    (a.fragmentLoader = new Ot(e.config)),
                    (a.keyLoader = i),
                    (a.fragmentTracker = r),
                    (a.config = e.config),
                    (a.decrypter = new zt.default(e.config)),
                    e.on(
                      s.Events.LEVEL_SWITCHING,
                      a.onLevelSwitching,
                      (function (t) {
                        if (void 0 === t)
                          throw new ReferenceError(
                            "this hasn't been initialised - super() hasn't been called"
                          );
                        return t;
                      })(a)
                    ),
                    a
                  );
                }
                (r = t),
                  ((e = i).prototype = Object.create(r.prototype)),
                  (e.prototype.constructor = e),
                  Jt(e, r);
                var n,
                  u,
                  d = i.prototype;
                return (
                  (d.doTick = function () {
                    this.onTickEnd();
                  }),
                  (d.onTickEnd = function () {}),
                  (d.startLoad = function (t) {}),
                  (d.stopLoad = function () {
                    this.fragmentLoader.abort(), this.keyLoader.abort();
                    var t = this.fragCurrent;
                    t &&
                      (t.abortRequests(),
                      this.fragmentTracker.removeFragment(t)),
                      this.resetTransmuxer(),
                      (this.fragCurrent = null),
                      (this.fragPrevious = null),
                      this.clearInterval(),
                      this.clearNextTick(),
                      (this.state = Zt);
                  }),
                  (d._streamEnded = function (t, e) {
                    if (e.live || t.nextStart || !t.end || !this.media)
                      return !1;
                    var r = e.partList;
                    if (null != r && r.length) {
                      var i = r[r.length - 1];
                      return Bt.isBuffered(
                        this.media,
                        i.start + i.duration / 2
                      );
                    }
                    var n = e.fragments[e.fragments.length - 1].type;
                    return this.fragmentTracker.isEndListAppended(n);
                  }),
                  (d.getLevelDetails = function () {
                    var t;
                    if (this.levels && null !== this.levelLastLoaded)
                      return null === (t = this.levels[this.levelLastLoaded]) ||
                        void 0 === t
                        ? void 0
                        : t.details;
                  }),
                  (d.onMediaAttached = function (t, e) {
                    var r = (this.media = this.mediaBuffer = e.media);
                    (this.onvseeking = this.onMediaSeeking.bind(this)),
                      (this.onvended = this.onMediaEnded.bind(this)),
                      r.addEventListener("seeking", this.onvseeking),
                      r.addEventListener("ended", this.onvended);
                    var i = this.config;
                    this.levels &&
                      i.autoStartLoad &&
                      this.state === Zt &&
                      this.startLoad(i.startPosition);
                  }),
                  (d.onMediaDetaching = function () {
                    var t = this.media;
                    null != t &&
                      t.ended &&
                      (this.log(
                        "MSE detaching and video ended, reset startPosition"
                      ),
                      (this.startPosition = this.lastCurrentTime = 0)),
                      t &&
                        this.onvseeking &&
                        this.onvended &&
                        (t.removeEventListener("seeking", this.onvseeking),
                        t.removeEventListener("ended", this.onvended),
                        (this.onvseeking = this.onvended = null)),
                      this.keyLoader && this.keyLoader.detach(),
                      (this.media = this.mediaBuffer = null),
                      (this.loadedmetadata = !1),
                      this.fragmentTracker.removeAllFragments(),
                      this.stopLoad();
                  }),
                  (d.onMediaSeeking = function () {
                    var t = this.config,
                      e = this.fragCurrent,
                      r = this.media,
                      i = this.mediaBuffer,
                      n = this.state,
                      s = r ? r.currentTime : 0,
                      o = Bt.bufferInfo(i || r, s, t.maxBufferHole);
                    if (
                      (this.log(
                        "media seeking to " +
                          ((0, a.isFiniteNumber)(s) ? s.toFixed(3) : s) +
                          ", state: " +
                          n
                      ),
                      this.state === oe)
                    )
                      this.resetLoadingState();
                    else if (e) {
                      var l = t.maxFragLookUpTolerance,
                        u = e.start - l,
                        d = e.start + e.duration + l;
                      if (!o.len || d < o.start || u > o.end) {
                        var h = s > d;
                        (s < u || h) &&
                          (h &&
                            e.loader &&
                            (this.log(
                              "seeking outside of buffer while fragment load in progress, cancel fragment load"
                            ),
                            e.abortRequests()),
                          this.resetLoadingState());
                      }
                    }
                    r && (this.lastCurrentTime = s),
                      this.loadedmetadata ||
                        o.len ||
                        (this.nextLoadPosition = this.startPosition = s),
                      this.tickImmediate();
                  }),
                  (d.onMediaEnded = function () {
                    this.startPosition = this.lastCurrentTime = 0;
                  }),
                  (d.onLevelSwitching = function (t, e) {
                    this.fragLoadError = 0;
                  }),
                  (d.onHandlerDestroying = function () {
                    this.stopLoad(), t.prototype.onHandlerDestroying.call(this);
                  }),
                  (d.onHandlerDestroyed = function () {
                    (this.state = Zt),
                      this.hls.off(
                        s.Events.LEVEL_SWITCHING,
                        this.onLevelSwitching,
                        this
                      ),
                      this.fragmentLoader && this.fragmentLoader.destroy(),
                      this.keyLoader && this.keyLoader.destroy(),
                      this.decrypter && this.decrypter.destroy(),
                      (this.hls =
                        this.log =
                        this.warn =
                        this.decrypter =
                        this.keyLoader =
                        this.fragmentLoader =
                        this.fragmentTracker =
                          null),
                      t.prototype.onHandlerDestroyed.call(this);
                  }),
                  (d.loadFragment = function (t, e, r) {
                    this._loadFragForPlayback(t, e, r);
                  }),
                  (d._loadFragForPlayback = function (t, e, r) {
                    var i = this;
                    this._doFragLoad(t, e, r, function (e) {
                      if (i.fragContextChanged(t))
                        return (
                          i.warn(
                            "Fragment " +
                              t.sn +
                              (e.part ? " p: " + e.part.index : "") +
                              " of level " +
                              t.level +
                              " was dropped during download."
                          ),
                          void i.fragmentTracker.removeFragment(t)
                        );
                      t.stats.chunkCount++, i._handleFragmentLoadProgress(e);
                    })
                      .then(function (e) {
                        if (e) {
                          i.fragLoadError = 0;
                          var r = i.state;
                          i.fragContextChanged(t)
                            ? (r === re || (!i.fragCurrent && r === ae)) &&
                              (i.fragmentTracker.removeFragment(t),
                              (i.state = te))
                            : ("payload" in e &&
                                (i.log(
                                  "Loaded fragment " +
                                    t.sn +
                                    " of level " +
                                    t.level
                                ),
                                i.hls.trigger(s.Events.FRAG_LOADED, e)),
                              i._handleFragmentLoadComplete(e));
                        }
                      })
                      .catch(function (e) {
                        i.state !== Zt &&
                          i.state !== le &&
                          (i.warn(e), i.resetFragmentLoading(t));
                      });
                  }),
                  (d.flushMainBuffer = function (t, e, r) {
                    if ((void 0 === r && (r = null), t - e)) {
                      var i = { startOffset: t, endOffset: e, type: r };
                      (this.fragLoadError = 0),
                        this.hls.trigger(s.Events.BUFFER_FLUSHING, i);
                    }
                  }),
                  (d._loadInitSegment = function (t, e) {
                    var r = this;
                    this._doFragLoad(t, e)
                      .then(function (e) {
                        if (!e || r.fragContextChanged(t) || !r.levels)
                          throw new Error("init load aborted");
                        return e;
                      })
                      .then(function (e) {
                        var i = r.hls,
                          n = e.payload,
                          a = t.decryptdata;
                        if (
                          n &&
                          n.byteLength > 0 &&
                          a &&
                          a.key &&
                          a.iv &&
                          "AES-128" === a.method
                        ) {
                          var o = self.performance.now();
                          return r.decrypter
                            .decrypt(
                              new Uint8Array(n),
                              a.key.buffer,
                              a.iv.buffer
                            )
                            .then(function (r) {
                              var n = self.performance.now();
                              return (
                                i.trigger(s.Events.FRAG_DECRYPTED, {
                                  frag: t,
                                  payload: r,
                                  stats: { tstart: o, tdecrypt: n },
                                }),
                                (e.payload = r),
                                e
                              );
                            });
                        }
                        return e;
                      })
                      .then(function (e) {
                        var i = r.fragCurrent,
                          n = r.hls,
                          a = r.levels;
                        if (!a)
                          throw new Error("init load aborted, missing levels");
                        a[t.level].details;
                        var o = t.stats;
                        (r.state = te),
                          (r.fragLoadError = 0),
                          (t.data = new Uint8Array(e.payload)),
                          (o.parsing.start = o.buffering.start =
                            self.performance.now()),
                          (o.parsing.end = o.buffering.end =
                            self.performance.now()),
                          e.frag === i &&
                            n.trigger(s.Events.FRAG_BUFFERED, {
                              stats: o,
                              frag: i,
                              part: null,
                              id: t.type,
                            }),
                          r.tick();
                      })
                      .catch(function (e) {
                        r.state !== Zt &&
                          r.state !== le &&
                          (r.warn(e), r.resetFragmentLoading(t));
                      });
                  }),
                  (d.fragContextChanged = function (t) {
                    var e = this.fragCurrent;
                    return (
                      !t ||
                      !e ||
                      t.level !== e.level ||
                      t.sn !== e.sn ||
                      t.urlId !== e.urlId
                    );
                  }),
                  (d.fragBufferedComplete = function (t, e) {
                    var r,
                      i,
                      n,
                      a,
                      s = this.mediaBuffer ? this.mediaBuffer : this.media;
                    this.log(
                      "Buffered " +
                        t.type +
                        " sn: " +
                        t.sn +
                        (e ? " part: " + e.index : "") +
                        " of " +
                        ("[stream-controller]" === this.logPrefix
                          ? "level"
                          : "track") +
                        " " +
                        t.level +
                        " (frag:[" +
                        (null != (r = t.startPTS) ? r : NaN).toFixed(3) +
                        "-" +
                        (null != (i = t.endPTS) ? i : NaN).toFixed(3) +
                        "] > buffer:" +
                        (s ? Qt(Bt.getBuffered(s)) : "(detached)") +
                        ")"
                    ),
                      (this.state = te),
                      s &&
                        (!this.loadedmetadata &&
                          t.type == V.PlaylistLevelType.MAIN &&
                          s.buffered.length &&
                          (null === (n = this.fragCurrent) || void 0 === n
                            ? void 0
                            : n.sn) ===
                            (null === (a = this.fragPrevious) || void 0 === a
                              ? void 0
                              : a.sn) &&
                          ((this.loadedmetadata = !0), this.seekToStartPos()),
                        this.tick());
                  }),
                  (d.seekToStartPos = function () {}),
                  (d._handleFragmentLoadComplete = function (t) {
                    var e = this.transmuxer;
                    if (e) {
                      var r = t.frag,
                        i = t.part,
                        n = t.partsLoaded,
                        a =
                          !n ||
                          0 === n.length ||
                          n.some(function (t) {
                            return !t;
                          }),
                        s = new Gt(
                          r.level,
                          r.sn,
                          r.stats.chunkCount + 1,
                          0,
                          i ? i.index : -1,
                          !a
                        );
                      e.flush(s);
                    }
                  }),
                  (d._handleFragmentLoadProgress = function (t) {}),
                  (d._doFragLoad = function (t, e, r, i) {
                    var n,
                      o = this;
                    if ((void 0 === r && (r = null), !this.levels))
                      throw new Error("frag load aborted, missing levels");
                    var l = null;
                    if (
                      (!t.encrypted ||
                      (null !== (n = t.decryptdata) && void 0 !== n && n.key)
                        ? !t.encrypted &&
                          e.encryptedFragments.length &&
                          this.keyLoader.loadClear(t, e.encryptedFragments)
                        : (this.log(
                            "Loading key for " +
                              t.sn +
                              " of [" +
                              e.startSN +
                              "-" +
                              e.endSN +
                              "], " +
                              ("[stream-controller]" === this.logPrefix
                                ? "level"
                                : "track") +
                              " " +
                              t.level
                          ),
                          (this.state = ee),
                          (this.fragCurrent = t),
                          (l = this.keyLoader.load(t).then(function (t) {
                            if (!o.fragContextChanged(t.frag))
                              return (
                                o.hls.trigger(s.Events.KEY_LOADED, t),
                                o.state === ee && (o.state = te),
                                t
                              );
                          })),
                          this.hls.trigger(s.Events.KEY_LOADING, { frag: t }),
                          this.throwIfFragContextChanged("KEY_LOADING")),
                      (r = Math.max(t.start, r || 0)),
                      this.config.lowLatencyMode && e)
                    ) {
                      var u = e.partList;
                      if (u && i) {
                        r > t.end && e.fragmentHint && (t = e.fragmentHint);
                        var d = this.getNextPart(u, t, r);
                        if (d > -1) {
                          var h = u[d];
                          return (
                            this.log(
                              "Loading part sn: " +
                                t.sn +
                                " p: " +
                                h.index +
                                " cc: " +
                                t.cc +
                                " of playlist [" +
                                e.startSN +
                                "-" +
                                e.endSN +
                                "] parts [0-" +
                                d +
                                "-" +
                                (u.length - 1) +
                                "] " +
                                ("[stream-controller]" === this.logPrefix
                                  ? "level"
                                  : "track") +
                                ": " +
                                t.level +
                                ", target: " +
                                parseFloat(r.toFixed(3))
                            ),
                            (this.nextLoadPosition = h.start + h.duration),
                            (this.state = re),
                            this.hls.trigger(s.Events.FRAG_LOADING, {
                              frag: t,
                              part: u[d],
                              targetBufferTime: r,
                            }),
                            this.throwIfFragContextChanged(
                              "FRAG_LOADING parts"
                            ),
                            l
                              ? l
                                  .then(function (e) {
                                    return !e || o.fragContextChanged(e.frag)
                                      ? null
                                      : o.doFragPartsLoad(t, u, d, i);
                                  })
                                  .catch(function (t) {
                                    return o.handleFragLoadError(t);
                                  })
                              : this.doFragPartsLoad(t, u, d, i).catch(
                                  function (t) {
                                    return o.handleFragLoadError(t);
                                  }
                                )
                          );
                        }
                        if (!t.url || this.loadedEndOfParts(u, r))
                          return Promise.resolve(null);
                      }
                    }
                    this.log(
                      "Loading fragment " +
                        t.sn +
                        " cc: " +
                        t.cc +
                        " " +
                        (e ? "of [" + e.startSN + "-" + e.endSN + "] " : "") +
                        ("[stream-controller]" === this.logPrefix
                          ? "level"
                          : "track") +
                        ": " +
                        t.level +
                        ", target: " +
                        parseFloat(r.toFixed(3))
                    ),
                      (0, a.isFiniteNumber)(t.sn) &&
                        !this.bitrateTest &&
                        (this.nextLoadPosition = t.start + t.duration),
                      (this.state = re),
                      this.hls.trigger(s.Events.FRAG_LOADING, {
                        frag: t,
                        targetBufferTime: r,
                      }),
                      this.throwIfFragContextChanged("FRAG_LOADING");
                    var c = this.config.progressive;
                    return c && l
                      ? l
                          .then(function (e) {
                            return !e ||
                              o.fragContextChanged(null == e ? void 0 : e.frag)
                              ? null
                              : o.fragmentLoader.load(t, i);
                          })
                          .catch(function (t) {
                            return o.handleFragLoadError(t);
                          })
                      : Promise.all([
                          this.fragmentLoader.load(t, c ? i : void 0),
                          l,
                        ])
                          .then(function (t) {
                            var e = t[0];
                            return !c && e && i && i(e), e;
                          })
                          .catch(function (t) {
                            return o.handleFragLoadError(t);
                          });
                  }),
                  (d.throwIfFragContextChanged = function (t) {
                    if (null === this.fragCurrent)
                      throw new Error(
                        "frag load aborted, context changed in " + t
                      );
                  }),
                  (d.doFragPartsLoad = function (t, e, r, i) {
                    var n = this;
                    return new Promise(function (a, o) {
                      var l = [];
                      !(function r(u) {
                        var d = e[u];
                        n.fragmentLoader
                          .loadPart(t, d, i)
                          .then(function (i) {
                            l[d.index] = i;
                            var o = i.part;
                            n.hls.trigger(s.Events.FRAG_LOADED, i);
                            var h = e[u + 1];
                            if (!h || h.fragment !== t)
                              return a({ frag: t, part: o, partsLoaded: l });
                            r(u + 1);
                          })
                          .catch(o);
                      })(r);
                    });
                  }),
                  (d.handleFragLoadError = function (t) {
                    if ("data" in t) {
                      var e = t.data;
                      t.data && e.details === o.ErrorDetails.INTERNAL_ABORTED
                        ? this.handleFragLoadAborted(e.frag, e.part)
                        : this.hls.trigger(s.Events.ERROR, e);
                    } else
                      this.hls.trigger(s.Events.ERROR, {
                        type: o.ErrorTypes.OTHER_ERROR,
                        details: o.ErrorDetails.INTERNAL_EXCEPTION,
                        err: t,
                        fatal: !0,
                      });
                    return null;
                  }),
                  (d._handleTransmuxerFlush = function (t) {
                    var e = this.getCurrentContext(t);
                    if (e && this.state === ae) {
                      var r = e.frag,
                        i = e.part,
                        n = e.level,
                        a = self.performance.now();
                      (r.stats.parsing.end = a),
                        i && (i.stats.parsing.end = a),
                        this.updateLevelTiming(r, i, n, t.partial);
                    } else
                      this.fragCurrent ||
                        this.state === Zt ||
                        this.state === le ||
                        (this.state = te);
                  }),
                  (d.getCurrentContext = function (t) {
                    var e = this.levels,
                      r = t.level,
                      i = t.sn,
                      n = t.part;
                    if (!e || !e[r])
                      return (
                        this.warn(
                          "Levels object was unset while buffering fragment " +
                            i +
                            " of level " +
                            r +
                            ". The current chunk will not be buffered."
                        ),
                        null
                      );
                    var a = e[r],
                      s =
                        n > -1
                          ? (function (t, e, r) {
                              if (!t || !t.details) return null;
                              var i = t.details.partList;
                              if (i)
                                for (var n = i.length; n--; ) {
                                  var a = i[n];
                                  if (a.index === r && a.fragment.sn === e)
                                    return a;
                                }
                              return null;
                            })(a, i, n)
                          : null,
                      o = s
                        ? s.fragment
                        : (function (t, e, r) {
                            if (!t || !t.details) return null;
                            var i = t.details,
                              n = i.fragments[e - i.startSN];
                            return (
                              n ||
                              ((n = i.fragmentHint) && n.sn === e
                                ? n
                                : e < i.startSN && r && r.sn === e
                                ? r
                                : null)
                            );
                          })(a, i, this.fragCurrent);
                    return o ? { frag: o, part: s, level: a } : null;
                  }),
                  (d.bufferFragmentData = function (t, e, r, i) {
                    if (t && this.state === ae) {
                      var n = t.data1,
                        a = t.data2,
                        o = n;
                      if (
                        (n && a && (o = (0, R.appendUint8Array)(n, a)),
                        o && o.length)
                      ) {
                        var l = {
                          type: t.type,
                          frag: e,
                          part: r,
                          chunkMeta: i,
                          parent: e.type,
                          data: o,
                        };
                        this.hls.trigger(s.Events.BUFFER_APPENDING, l),
                          t.dropped &&
                            t.independent &&
                            !r &&
                            this.flushBufferGap(e);
                      }
                    }
                  }),
                  (d.flushBufferGap = function (t) {
                    var e = this.media;
                    if (e)
                      if (Bt.isBuffered(e, e.currentTime)) {
                        var r = e.currentTime,
                          i = Bt.bufferInfo(e, r, 0),
                          n = t.duration,
                          a = Math.min(
                            2 * this.config.maxFragLookUpTolerance,
                            0.25 * n
                          ),
                          s = Math.max(Math.min(t.start - a, i.end - a), r + a);
                        t.start - s > a && this.flushMainBuffer(s, t.start);
                      } else this.flushMainBuffer(0, t.start);
                  }),
                  (d.getFwdBufferInfo = function (t, e) {
                    var r = this.config,
                      i = this.getLoadPosition();
                    if (!(0, a.isFiniteNumber)(i)) return null;
                    var n = Bt.bufferInfo(t, i, r.maxBufferHole);
                    if (0 === n.len && void 0 !== n.nextStart) {
                      var s = this.fragmentTracker.getBufferedFrag(i, e);
                      if (s && n.nextStart < s.end)
                        return Bt.bufferInfo(
                          t,
                          i,
                          Math.max(n.nextStart, r.maxBufferHole)
                        );
                    }
                    return n;
                  }),
                  (d.getMaxBufferLength = function (t) {
                    var e,
                      r = this.config;
                    return (
                      (e = t
                        ? Math.max((8 * r.maxBufferSize) / t, r.maxBufferLength)
                        : r.maxBufferLength),
                      Math.min(e, r.maxMaxBufferLength)
                    );
                  }),
                  (d.reduceMaxBufferLength = function (t) {
                    var e = this.config,
                      r = t || e.maxBufferLength;
                    return (
                      e.maxMaxBufferLength >= r &&
                      ((e.maxMaxBufferLength /= 2),
                      this.warn(
                        "Reduce max buffer length to " +
                          e.maxMaxBufferLength +
                          "s"
                      ),
                      !0)
                    );
                  }),
                  (d.getNextFragment = function (t, e) {
                    var r = e.fragments,
                      i = r.length;
                    if (!i) return null;
                    var n,
                      a = this.config,
                      s = r[0].start;
                    if (e.live) {
                      var o = a.initialLiveManifestSize;
                      if (i < o)
                        return (
                          this.warn(
                            "Not enough fragments to start playback (have: " +
                              i +
                              ", need: " +
                              o +
                              ")"
                          ),
                          null
                        );
                      e.PTSKnown ||
                        this.startFragRequested ||
                        -1 !== this.startPosition ||
                        ((n = this.getInitialLiveFragment(e, r)),
                        (this.startPosition = n
                          ? this.hls.liveSyncPosition || n.start
                          : t));
                    } else t <= s && (n = r[0]);
                    if (!n) {
                      var l = a.lowLatencyMode ? e.partEnd : e.fragmentEnd;
                      n = this.getFragmentAtPosition(t, l, e);
                    }
                    return this.mapToInitFragWhenRequired(n);
                  }),
                  (d.mapToInitFragWhenRequired = function (t) {
                    return null == t ||
                      !t.initSegment ||
                      (null != t && t.initSegment.data) ||
                      this.bitrateTest
                      ? t
                      : t.initSegment;
                  }),
                  (d.getNextPart = function (t, e, r) {
                    for (
                      var i = -1, n = !1, a = !0, s = 0, o = t.length;
                      s < o;
                      s++
                    ) {
                      var l = t[s];
                      if (((a = a && !l.independent), i > -1 && r < l.start))
                        break;
                      var u = l.loaded;
                      u
                        ? (i = -1)
                        : (n || l.independent || a) &&
                          l.fragment === e &&
                          (i = s),
                        (n = u);
                    }
                    return i;
                  }),
                  (d.loadedEndOfParts = function (t, e) {
                    var r = t[t.length - 1];
                    return r && e > r.start && r.loaded;
                  }),
                  (d.getInitialLiveFragment = function (t, e) {
                    var r = this.fragPrevious,
                      i = null;
                    if (r) {
                      if (
                        (t.hasProgramDateTime &&
                          (this.log(
                            "Live playlist, switching playlist, load frag with same PDT: " +
                              r.programDateTime
                          ),
                          (i = (function (t, e, r) {
                            if (
                              null === e ||
                              !Array.isArray(t) ||
                              !t.length ||
                              !(0, a.isFiniteNumber)(e)
                            )
                              return null;
                            if (e < (t[0].programDateTime || 0)) return null;
                            if (e >= (t[t.length - 1].endProgramDateTime || 0))
                              return null;
                            r = r || 0;
                            for (var i = 0; i < t.length; ++i) {
                              var n = t[i];
                              if (Xt(e, r, n)) return n;
                            }
                            return null;
                          })(
                            e,
                            r.endProgramDateTime,
                            this.config.maxFragLookUpTolerance
                          ))),
                        !i)
                      ) {
                        var n = r.sn + 1;
                        if (n >= t.startSN && n <= t.endSN) {
                          var s = e[n - t.startSN];
                          r.cc === s.cc &&
                            ((i = s),
                            this.log(
                              "Live playlist, switching playlist, load frag with next SN: " +
                                i.sn
                            ));
                        }
                        i ||
                          ((i = (function (t, e) {
                            return Yt(t, function (t) {
                              return t.cc < e ? 1 : t.cc > e ? -1 : 0;
                            });
                          })(e, r.cc)),
                          i &&
                            this.log(
                              "Live playlist, switching playlist, load frag with same CC: " +
                                i.sn
                            ));
                      }
                    } else {
                      var o = this.hls.liveSyncPosition;
                      null !== o &&
                        (i = this.getFragmentAtPosition(
                          o,
                          this.bitrateTest ? t.fragmentEnd : t.edge,
                          t
                        ));
                    }
                    return i;
                  }),
                  (d.getFragmentAtPosition = function (t, e, r) {
                    var i,
                      n = this.config,
                      a = this.fragPrevious,
                      s = r.fragments,
                      o = r.endSN,
                      l = r.fragmentHint,
                      u = n.maxFragLookUpTolerance,
                      d = !!(n.lowLatencyMode && r.partList && l);
                    if (
                      (d &&
                        l &&
                        !this.bitrateTest &&
                        ((s = s.concat(l)), (o = l.sn)),
                      (i =
                        t < e
                          ? Wt(a, s, t, t > e - u ? 0 : u)
                          : s[s.length - 1]))
                    ) {
                      var h = i.sn - r.startSN;
                      if (
                        (this.fragmentTracker.getState(i) === St.OK && (a = i),
                        a && i.sn === a.sn && !d && a && i.level === a.level)
                      ) {
                        var c = s[h + 1];
                        i.sn < o && this.fragmentTracker.getState(c) !== St.OK
                          ? (this.log(
                              "SN " +
                                i.sn +
                                " just loaded, load next one: " +
                                c.sn
                            ),
                            (i = c))
                          : (i = null);
                      }
                    }
                    return i;
                  }),
                  (d.synchronizeToLiveEdge = function (t) {
                    var e = this.config,
                      r = this.media;
                    if (r) {
                      var i = this.hls.liveSyncPosition,
                        n = r.currentTime,
                        a = t.fragments[0].start,
                        s = t.edge,
                        o = n >= a - e.maxFragLookUpTolerance && n <= s;
                      if (null !== i && r.duration > i && (n < i || !o)) {
                        var l =
                          void 0 !== e.liveMaxLatencyDuration
                            ? e.liveMaxLatencyDuration
                            : e.liveMaxLatencyDurationCount * t.targetduration;
                        ((!o && r.readyState < 4) || n < s - l) &&
                          (this.loadedmetadata || (this.nextLoadPosition = i),
                          r.readyState &&
                            (this.warn(
                              "Playback: " +
                                n.toFixed(3) +
                                " is located too far from the end of live sliding playlist: " +
                                s +
                                ", reset currentTime to : " +
                                i.toFixed(3)
                            ),
                            (r.currentTime = i)));
                      }
                    }
                  }),
                  (d.alignPlaylists = function (t, e) {
                    var r = this.levels,
                      i = this.levelLastLoaded,
                      n = this.fragPrevious,
                      s = null !== i ? r[i] : null,
                      o = t.fragments.length;
                    if (!o)
                      return this.warn("No fragments in live playlist"), 0;
                    var u = t.fragments[0].start,
                      d = !e,
                      h = t.alignedSliding && (0, a.isFiniteNumber)(u);
                    if (d || (!h && !u)) {
                      !(function (t, e, r) {
                        e &&
                          ((function (t, e, r) {
                            if (
                              (function (t, e, r) {
                                return !(
                                  !e.details ||
                                  !(
                                    r.endCC > r.startCC ||
                                    (t && t.cc < r.startCC)
                                  )
                                );
                              })(t, r, e)
                            ) {
                              var i = (function (t, e, r) {
                                void 0 === r && (r = 0);
                                var i = t.fragments,
                                  n = e.fragments;
                                if (n.length && i.length) {
                                  var a = Kt(i, n[0].cc);
                                  if (a && (!a || a.startPTS)) return a;
                                  l.logger.log(
                                    "No frag in previous level to align on"
                                  );
                                } else l.logger.log("No fragments to align");
                              })(r.details, e);
                              i &&
                                (0, a.isFiniteNumber)(i.start) &&
                                (l.logger.log(
                                  "Adjusting PTS using last level due to CC increase within current level " +
                                    e.url
                                ),
                                jt(i.start, e));
                            }
                          })(t, r, e),
                          !r.alignedSliding &&
                            e.details &&
                            (function (t, e) {
                              if (
                                e.fragments.length &&
                                t.hasProgramDateTime &&
                                e.hasProgramDateTime
                              ) {
                                var r = e.fragments[0].programDateTime,
                                  i = t.fragments[0].programDateTime,
                                  n = (i - r) / 1e3 + e.fragments[0].start;
                                n &&
                                  (0, a.isFiniteNumber)(n) &&
                                  (l.logger.log(
                                    "Adjusting PTS using programDateTime delta " +
                                      (i - r) +
                                      "ms, sliding:" +
                                      n.toFixed(3) +
                                      " " +
                                      t.url +
                                      " "
                                  ),
                                  jt(n, t));
                              }
                            })(r, e.details),
                          r.alignedSliding ||
                            !e.details ||
                            r.skippedSegments ||
                            vt(e.details, r));
                      })(n, s, t);
                      var c = t.fragments[0].start;
                      return (
                        this.log(
                          "Live playlist sliding: " +
                            c.toFixed(2) +
                            " start-sn: " +
                            (e ? e.startSN : "na") +
                            "->" +
                            t.startSN +
                            " prev-sn: " +
                            (n ? n.sn : "na") +
                            " fragments: " +
                            o
                        ),
                        c
                      );
                    }
                    return u;
                  }),
                  (d.waitForCdnTuneIn = function (t) {
                    return (
                      t.live &&
                      t.canBlockReload &&
                      t.partTarget &&
                      t.tuneInGoal > Math.max(t.partHoldBack, 3 * t.partTarget)
                    );
                  }),
                  (d.setStartPosition = function (t, e) {
                    var r = this.startPosition;
                    if (
                      (r < e && (r = -1),
                      -1 === r || -1 === this.lastCurrentTime)
                    ) {
                      var i = t.startTimeOffset;
                      (0, a.isFiniteNumber)(i)
                        ? ((r = e + i),
                          i < 0 && (r += t.totalduration),
                          (r = Math.min(Math.max(e, r), e + t.totalduration)),
                          this.log(
                            "Start time offset " +
                              i +
                              " found in playlist, adjust startPosition to " +
                              r
                          ),
                          (this.startPosition = r))
                        : t.live
                        ? (r = this.hls.liveSyncPosition || e)
                        : (this.startPosition = r = 0),
                        (this.lastCurrentTime = r);
                    }
                    this.nextLoadPosition = r;
                  }),
                  (d.getLoadPosition = function () {
                    var t = this.media,
                      e = 0;
                    return (
                      this.loadedmetadata && t
                        ? (e = t.currentTime)
                        : this.nextLoadPosition && (e = this.nextLoadPosition),
                      e
                    );
                  }),
                  (d.handleFragLoadAborted = function (t, e) {
                    this.transmuxer &&
                      "initSegment" !== t.sn &&
                      t.stats.aborted &&
                      (this.warn(
                        "Fragment " +
                          t.sn +
                          (e ? " part" + e.index : "") +
                          " of level " +
                          t.level +
                          " was aborted"
                      ),
                      this.resetFragmentLoading(t));
                  }),
                  (d.resetFragmentLoading = function (t) {
                    (this.fragCurrent &&
                      (this.fragContextChanged(t) || this.state === ie)) ||
                      (this.state = te);
                  }),
                  (d.onFragmentOrKeyLoadError = function (t, e) {
                    if (e.fatal) return this.stopLoad(), void (this.state = le);
                    var r = this.config;
                    if (e.chunkMeta) {
                      var i = this.getCurrentContext(e.chunkMeta);
                      i &&
                        ((e.frag = i.frag),
                        (e.levelRetry = !0),
                        (this.fragLoadError = r.fragLoadingMaxRetry));
                    }
                    var n = e.frag;
                    if (n && n.type === t)
                      if (
                        (this.fragCurrent,
                        this.fragLoadError + 1 <= r.fragLoadingMaxRetry)
                      ) {
                        this.loadedmetadata ||
                          ((this.startFragRequested = !1),
                          (this.nextLoadPosition = this.startPosition));
                        var a = Math.min(
                          Math.pow(2, this.fragLoadError) *
                            r.fragLoadingRetryDelay,
                          r.fragLoadingMaxRetryTimeout
                        );
                        this.warn(
                          "Fragment " +
                            n.sn +
                            " of " +
                            t +
                            " " +
                            n.level +
                            " failed to load, retrying in " +
                            a +
                            "ms"
                        ),
                          (this.retryDate = self.performance.now() + a),
                          this.fragLoadError++,
                          (this.state = ie);
                      } else
                        e.levelRetry
                          ? (t === V.PlaylistLevelType.AUDIO &&
                              (this.fragCurrent = null),
                            (this.fragLoadError = 0),
                            (this.state = te))
                          : (l.logger.error(
                              e.details +
                                " reaches max retry, redispatch as fatal ..."
                            ),
                            (e.fatal = !0),
                            this.hls.stopLoad(),
                            (this.state = le));
                  }),
                  (d.afterBufferFlushed = function (t, e, r) {
                    if (t) {
                      var i = Bt.getBuffered(t);
                      this.fragmentTracker.detectEvictedFragments(e, i, r),
                        this.state === oe && this.resetLoadingState();
                    }
                  }),
                  (d.resetLoadingState = function () {
                    this.log("Reset loading state"),
                      (this.fragCurrent = null),
                      (this.fragPrevious = null),
                      (this.state = te);
                  }),
                  (d.resetStartWhenNotLoaded = function (t) {
                    if (!this.loadedmetadata) {
                      this.startFragRequested = !1;
                      var e = this.levels ? this.levels[t].details : null;
                      null != e && e.live
                        ? ((this.startPosition = -1),
                          this.setStartPosition(e, 0),
                          this.resetLoadingState())
                        : (this.nextLoadPosition = this.startPosition);
                    }
                  }),
                  (d.updateLevelTiming = function (t, e, r, i) {
                    var n = this,
                      a = r.details;
                    Object.keys(t.elementaryStreams).reduce(function (e, o) {
                      var l = t.elementaryStreams[o];
                      if (l) {
                        var u = l.endPTS - l.startPTS;
                        if (u <= 0)
                          return (
                            n.warn(
                              "Could not parse fragment " +
                                t.sn +
                                " " +
                                o +
                                " duration reliably (" +
                                u +
                                ")"
                            ),
                            e || !1
                          );
                        var d = i
                          ? 0
                          : gt(
                              a,
                              t,
                              l.startPTS,
                              l.endPTS,
                              l.startDTS,
                              l.endDTS
                            );
                        return (
                          n.hls.trigger(s.Events.LEVEL_PTS_UPDATED, {
                            details: a,
                            level: r,
                            drift: d,
                            type: o,
                            frag: t,
                            start: l.startPTS,
                            end: l.endPTS,
                          }),
                          !0
                        );
                      }
                      return e;
                    }, !1) ||
                      (this.warn(
                        "Found no media in fragment " +
                          t.sn +
                          " of level " +
                          r.id +
                          " resetting transmuxer to fallback to playlist timing"
                      ),
                      this.resetTransmuxer()),
                      (this.state = se),
                      this.hls.trigger(s.Events.FRAG_PARSED, {
                        frag: t,
                        part: e,
                      });
                  }),
                  (d.resetTransmuxer = function () {
                    this.transmuxer &&
                      (this.transmuxer.destroy(), (this.transmuxer = null));
                  }),
                  (n = i),
                  (u = [
                    {
                      key: "state",
                      get: function () {
                        return this._state;
                      },
                      set: function (t) {
                        var e = this._state;
                        e !== t && ((this._state = t), this.log(e + "->" + t));
                      },
                    },
                  ]) && $t(n.prototype, u),
                  Object.defineProperty(n, "prototype", { writable: !1 }),
                  i
                );
              })(Nt);
            function ce() {
              return self.MediaSource || self.WebKitMediaSource;
            }
            function fe() {
              return self.SourceBuffer || self.WebKitSourceBuffer;
            }
            var ge = function () {
                var t = ENTRY_MODULE,
                  e = {},
                  r = function r(i) {
                    var n = e[i];
                    if (void 0 !== n) return n.exports;
                    var a = (e[i] = { exports: {} });
                    return t[i].call(a.exports, a, a.exports, r), a.exports;
                  };
                (r.m = t),
                  (r.n = function (t) {
                    var e =
                      t && t.__esModule
                        ? function () {
                            return t.default;
                          }
                        : function () {
                            return t;
                          };
                    return r.d(e, { a: e }), e;
                  }),
                  (r.d = function (t, e) {
                    for (var i in e)
                      r.o(e, i) &&
                        !r.o(t, i) &&
                        Object.defineProperty(t, i, {
                          enumerable: !0,
                          get: e[i],
                        });
                  }),
                  (r.o = function (t, e) {
                    return Object.prototype.hasOwnProperty.call(t, e);
                  }),
                  (r.r = function (t) {
                    "undefined" != typeof Symbol &&
                      Symbol.toStringTag &&
                      Object.defineProperty(t, Symbol.toStringTag, {
                        value: "Module",
                      }),
                      Object.defineProperty(t, "__esModule", { value: !0 });
                  });
                var i = r(ENTRY_MODULE);
                return i.default || i;
              }
                .toString()
                .split("ENTRY_MODULE"),
              ve = "\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)";
            function pe(t) {
              return (t + "").replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
            }
            function me(t, e, i) {
              var n = {};
              n[i] = [];
              var a = e.toString().replace(/^"[^"]+"/, "function"),
                s =
                  a.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/) ||
                  a.match(/^\(\w+,\s*\w+,\s*(\w+)\)\s?\=\s?\>/);
              if (!s) return n;
              for (
                var o,
                  l = s[1],
                  u = new RegExp("(\\\\n|\\W)" + pe(l) + ve, "g");
                (o = u.exec(a));

              )
                "dll-reference" !== o[3] && n[i].push(o[3]);
              for (
                u = new RegExp(
                  "\\(" +
                    pe(l) +
                    '\\("(dll-reference\\s([\\.|\\-|\\+|\\w|/|@]+))"\\)\\)' +
                    ve,
                  "g"
                );
                (o = u.exec(a));

              )
                t[o[2]] || (n[i].push(o[1]), (t[o[2]] = r(o[1]).m)),
                  (n[o[2]] = n[o[2]] || []),
                  n[o[2]].push(o[4]);
              for (var d, h = Object.keys(n), c = 0; c < h.length; c++)
                for (var f = 0; f < n[h[c]].length; f++)
                  (d = n[h[c]][f]),
                    isNaN(1 * d) || (n[h[c]][f] = 1 * n[h[c]][f]);
              return n;
            }
            function ye(t) {
              return Object.keys(t).reduce(function (e, r) {
                return e || t[r].length > 0;
              }, !1);
            }
            function Ee(t, e, r, i) {
              var n = t[i]
                .map(function (t) {
                  return (
                    '"' +
                    t +
                    '": ' +
                    e[i][t].toString().replace(/^"[^"]+"/, "function")
                  );
                })
                .join(",");
              return ge[0] + "{" + n + "}" + ge[1] + '"' + r + '"' + ge[2];
            }
            var Te = r(544),
              Se = r(729),
              be = r.n(Se),
              Le = ce() || {
                isTypeSupported: function () {
                  return !1;
                },
              },
              Ae = (function () {
                function t(t, e, i, n) {
                  var a = this;
                  (this.hls = void 0),
                    (this.id = void 0),
                    (this.observer = void 0),
                    (this.frag = null),
                    (this.part = null),
                    (this.useWorker = void 0),
                    (this.worker = void 0),
                    (this.onwmsg = void 0),
                    (this.transmuxer = null),
                    (this.onTransmuxComplete = void 0),
                    (this.onFlush = void 0);
                  var u = t.config;
                  (this.hls = t),
                    (this.id = e),
                    (this.useWorker = !!u.enableWorker),
                    (this.onTransmuxComplete = i),
                    (this.onFlush = n);
                  var d = function (t, e) {
                    ((e = e || {}).frag = a.frag),
                      (e.id = a.id),
                      a.hls.trigger(t, e);
                  };
                  (this.observer = new Se.EventEmitter()),
                    this.observer.on(s.Events.FRAG_DECRYPTED, d),
                    this.observer.on(s.Events.ERROR, d);
                  var h = {
                      mp4: Le.isTypeSupported("video/mp4"),
                      mpeg: Le.isTypeSupported("audio/mpeg"),
                      mp3: Le.isTypeSupported('audio/mp4; codecs="mp3"'),
                    },
                    c = navigator.vendor;
                  if (this.useWorker && "undefined" != typeof Worker) {
                    var f;
                    l.logger.log("demuxing in webworker");
                    try {
                      (f = this.worker =
                        (function (t, e) {
                          e = e || {};
                          var i = { main: r.m },
                            n = e.all
                              ? { main: Object.keys(i.main) }
                              : (function (t, e) {
                                  for (
                                    var r = { main: [e] },
                                      i = { main: [] },
                                      n = { main: {} };
                                    ye(r);

                                  )
                                    for (
                                      var a = Object.keys(r), s = 0;
                                      s < a.length;
                                      s++
                                    ) {
                                      var o = a[s],
                                        l = r[o].pop();
                                      if (
                                        ((n[o] = n[o] || {}),
                                        !n[o][l] && t[o][l])
                                      ) {
                                        (n[o][l] = !0),
                                          (i[o] = i[o] || []),
                                          i[o].push(l);
                                        for (
                                          var u = me(t, t[o][l], o),
                                            d = Object.keys(u),
                                            h = 0;
                                          h < d.length;
                                          h++
                                        )
                                          (r[d[h]] = r[d[h]] || []),
                                            (r[d[h]] = r[d[h]].concat(u[d[h]]));
                                      }
                                    }
                                  return i;
                                })(i, t),
                            a = "";
                          Object.keys(n)
                            .filter(function (t) {
                              return "main" !== t;
                            })
                            .forEach(function (t) {
                              for (var e = 0; n[t][e]; ) e++;
                              n[t].push(e),
                                (i[t][e] =
                                  "(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })"),
                                (a =
                                  a +
                                  "var " +
                                  t +
                                  " = (" +
                                  Ee(n, i, e, modules) +
                                  ")();\n");
                            }),
                            (a =
                              a +
                              "new ((" +
                              Ee(n, i, t, "main") +
                              ")())(self);");
                          var s = new window.Blob([a], {
                              type: "text/javascript",
                            }),
                            o = (
                              window.URL ||
                              window.webkitURL ||
                              window.mozURL ||
                              window.msURL
                            ).createObjectURL(s),
                            l = new window.Worker(o);
                          return (l.objectURL = o), l;
                        })(182)),
                        (this.onwmsg = this.onWorkerMessage.bind(this)),
                        f.addEventListener("message", this.onwmsg),
                        (f.onerror = function (t) {
                          (a.useWorker = !1),
                            l.logger.warn(
                              "Exception in webworker, fallback to inline"
                            ),
                            a.hls.trigger(s.Events.ERROR, {
                              type: o.ErrorTypes.OTHER_ERROR,
                              details: o.ErrorDetails.INTERNAL_EXCEPTION,
                              fatal: !1,
                              event: "demuxerWorker",
                              error: new Error(
                                t.message +
                                  "  (" +
                                  t.filename +
                                  ":" +
                                  t.lineno +
                                  ")"
                              ),
                            });
                        }),
                        f.postMessage({
                          cmd: "init",
                          typeSupported: h,
                          vendor: c,
                          id: e,
                          config: JSON.stringify(u),
                        });
                    } catch (t) {
                      l.logger.warn("Error in worker:", t),
                        l.logger.error(
                          "Error while initializing DemuxerWorker, fallback to inline"
                        ),
                        f && self.URL.revokeObjectURL(f.objectURL),
                        (this.transmuxer = new Te.default(
                          this.observer,
                          h,
                          u,
                          c,
                          e
                        )),
                        (this.worker = null);
                    }
                  } else
                    this.transmuxer = new Te.default(this.observer, h, u, c, e);
                }
                var e = t.prototype;
                return (
                  (e.destroy = function () {
                    var t = this.worker;
                    if (t)
                      t.removeEventListener("message", this.onwmsg),
                        t.terminate(),
                        (this.worker = null),
                        (this.onwmsg = void 0);
                    else {
                      var e = this.transmuxer;
                      e && (e.destroy(), (this.transmuxer = null));
                    }
                    var r = this.observer;
                    r && r.removeAllListeners(),
                      (this.frag = null),
                      (this.observer = null),
                      (this.hls = null);
                  }),
                  (e.push = function (t, e, r, i, n, a, s, o, u, d) {
                    var h,
                      c,
                      f = this;
                    u.transmuxing.start = self.performance.now();
                    var g = this.transmuxer,
                      v = this.worker,
                      p = a ? a.start : n.start,
                      m = n.decryptdata,
                      y = this.frag,
                      E = !(y && n.cc === y.cc),
                      T = !(y && u.level === y.level),
                      S = y ? u.sn - y.sn : -1,
                      b = this.part ? u.part - this.part.index : -1,
                      L =
                        0 === S &&
                        u.id > 1 &&
                        u.id === (null == y ? void 0 : y.stats.chunkCount),
                      A =
                        !T &&
                        (1 === S || (0 === S && (1 === b || (L && b <= 0)))),
                      D = self.performance.now();
                    (T || S || 0 === n.stats.parsing.start) &&
                      (n.stats.parsing.start = D),
                      !a || (!b && A) || (a.stats.parsing.start = D);
                    var k = !(
                        y &&
                        (null === (h = n.initSegment) || void 0 === h
                          ? void 0
                          : h.url) ===
                          (null === (c = y.initSegment) || void 0 === c
                            ? void 0
                            : c.url)
                      ),
                      R = new Te.TransmuxState(E, A, o, T, p, k);
                    if (!A || E || k) {
                      l.logger.log(
                        "[transmuxer-interface, " +
                          n.type +
                          "]: Starting new transmux session for sn: " +
                          u.sn +
                          " p: " +
                          u.part +
                          " level: " +
                          u.level +
                          " id: " +
                          u.id +
                          "\n        discontinuity: " +
                          E +
                          "\n        trackSwitch: " +
                          T +
                          "\n        contiguous: " +
                          A +
                          "\n        accurateTimeOffset: " +
                          o +
                          "\n        timeOffset: " +
                          p +
                          "\n        initSegmentChange: " +
                          k
                      );
                      var I = new Te.TransmuxConfig(r, i, e, s, d);
                      this.configureTransmuxer(I);
                    }
                    if (((this.frag = n), (this.part = a), v))
                      v.postMessage(
                        {
                          cmd: "demux",
                          data: t,
                          decryptdata: m,
                          chunkMeta: u,
                          state: R,
                        },
                        t instanceof ArrayBuffer ? [t] : []
                      );
                    else if (g) {
                      var w = g.push(t, m, u, R);
                      (0, Te.isPromise)(w)
                        ? ((g.async = !0),
                          w
                            .then(function (t) {
                              f.handleTransmuxComplete(t);
                            })
                            .catch(function (t) {
                              f.transmuxerError(
                                t,
                                u,
                                "transmuxer-interface push error"
                              );
                            }))
                        : ((g.async = !1), this.handleTransmuxComplete(w));
                    }
                  }),
                  (e.flush = function (t) {
                    var e = this;
                    t.transmuxing.start = self.performance.now();
                    var r = this.transmuxer,
                      i = this.worker;
                    if (i) i.postMessage({ cmd: "flush", chunkMeta: t });
                    else if (r) {
                      var n = r.flush(t);
                      (0, Te.isPromise)(n) || r.async
                        ? ((0, Te.isPromise)(n) || (n = Promise.resolve(n)),
                          n
                            .then(function (r) {
                              e.handleFlushResult(r, t);
                            })
                            .catch(function (r) {
                              e.transmuxerError(
                                r,
                                t,
                                "transmuxer-interface flush error"
                              );
                            }))
                        : this.handleFlushResult(n, t);
                    }
                  }),
                  (e.transmuxerError = function (t, e, r) {
                    this.hls &&
                      this.hls.trigger(s.Events.ERROR, {
                        type: o.ErrorTypes.MEDIA_ERROR,
                        details: o.ErrorDetails.FRAG_PARSING_ERROR,
                        chunkMeta: e,
                        fatal: !1,
                        error: t,
                        err: t,
                        reason: r,
                      });
                  }),
                  (e.handleFlushResult = function (t, e) {
                    var r = this;
                    t.forEach(function (t) {
                      r.handleTransmuxComplete(t);
                    }),
                      this.onFlush(e);
                  }),
                  (e.onWorkerMessage = function (t) {
                    var e = t.data,
                      r = this.hls;
                    switch (e.event) {
                      case "init":
                        self.URL.revokeObjectURL(this.worker.objectURL);
                        break;
                      case "transmuxComplete":
                        this.handleTransmuxComplete(e.data);
                        break;
                      case "flush":
                        this.onFlush(e.data);
                        break;
                      case "workerLog":
                        l.logger[e.data.logType] &&
                          l.logger[e.data.logType](e.data.message);
                        break;
                      default:
                        (e.data = e.data || {}),
                          (e.data.frag = this.frag),
                          (e.data.id = this.id),
                          r.trigger(e.event, e.data);
                    }
                  }),
                  (e.configureTransmuxer = function (t) {
                    var e = this.worker,
                      r = this.transmuxer;
                    e
                      ? e.postMessage({ cmd: "configure", config: t })
                      : r && r.configure(t);
                  }),
                  (e.handleTransmuxComplete = function (t) {
                    (t.chunkMeta.transmuxing.end = self.performance.now()),
                      this.onTransmuxComplete(t);
                  }),
                  t
                );
              })(),
              De = (function () {
                function t(t, e, r, i) {
                  (this.config = void 0),
                    (this.media = null),
                    (this.fragmentTracker = void 0),
                    (this.hls = void 0),
                    (this.nudgeRetry = 0),
                    (this.stallReported = !1),
                    (this.stalled = null),
                    (this.moved = !1),
                    (this.seeking = !1),
                    (this.config = t),
                    (this.media = e),
                    (this.fragmentTracker = r),
                    (this.hls = i);
                }
                var e = t.prototype;
                return (
                  (e.destroy = function () {
                    (this.media = null),
                      (this.hls = this.fragmentTracker = null);
                  }),
                  (e.poll = function (t, e) {
                    var r = this.config,
                      i = this.media,
                      n = this.stalled;
                    if (null !== i) {
                      var a = i.currentTime,
                        s = i.seeking,
                        o = this.seeking && !s,
                        u = !this.seeking && s;
                      if (((this.seeking = s), a === t)) {
                        if (
                          ((u || o) && (this.stalled = null),
                          !(
                            (i.paused && !s) ||
                            i.ended ||
                            0 === i.playbackRate
                          ) && Bt.getBuffered(i).length)
                        ) {
                          var d = Bt.bufferInfo(i, a, 0),
                            h = d.len > 0,
                            c = d.nextStart || 0;
                          if (h || c) {
                            if (s) {
                              var f = d.len > 2,
                                g =
                                  !c ||
                                  (e && e.start <= a) ||
                                  (c - a > 2 &&
                                    !this.fragmentTracker.getPartialFragment(
                                      a
                                    ));
                              if (f || g) return;
                              this.moved = !1;
                            }
                            if (!this.moved && null !== this.stalled) {
                              var v,
                                p = Math.max(c, d.start || 0) - a,
                                m = this.hls.levels
                                  ? this.hls.levels[this.hls.currentLevel]
                                  : null,
                                y = (
                                  null == m ||
                                  null === (v = m.details) ||
                                  void 0 === v
                                    ? void 0
                                    : v.live
                                )
                                  ? 2 * m.details.targetduration
                                  : 2;
                              if (p > 0 && p <= y)
                                return void this._trySkipBufferHole(null);
                            }
                            var E = self.performance.now();
                            if (null !== n) {
                              var T = E - n;
                              if (
                                s ||
                                !(T >= 250) ||
                                (this._reportStall(d), this.media)
                              ) {
                                var S = Bt.bufferInfo(i, a, r.maxBufferHole);
                                this._tryFixBufferStall(S, T);
                              }
                            } else this.stalled = E;
                          }
                        }
                      } else if (((this.moved = !0), null !== n)) {
                        if (this.stallReported) {
                          var b = self.performance.now() - n;
                          l.logger.warn(
                            "playback not stuck anymore @" +
                              a +
                              ", after " +
                              Math.round(b) +
                              "ms"
                          ),
                            (this.stallReported = !1);
                        }
                        (this.stalled = null), (this.nudgeRetry = 0);
                      }
                    }
                  }),
                  (e._tryFixBufferStall = function (t, e) {
                    var r = this.config,
                      i = this.fragmentTracker,
                      n = this.media;
                    if (null !== n) {
                      var a = n.currentTime,
                        s = i.getPartialFragment(a);
                      if (s && (this._trySkipBufferHole(s) || !this.media))
                        return;
                      t.len > r.maxBufferHole &&
                        e > 1e3 * r.highBufferWatchdogPeriod &&
                        (l.logger.warn(
                          "Trying to nudge playhead over buffer-hole"
                        ),
                        (this.stalled = null),
                        this._tryNudgeBuffer());
                    }
                  }),
                  (e._reportStall = function (t) {
                    var e = this.hls,
                      r = this.media;
                    !this.stallReported &&
                      r &&
                      ((this.stallReported = !0),
                      l.logger.warn(
                        "Playback stalling at @" +
                          r.currentTime +
                          " due to low buffer (" +
                          JSON.stringify(t) +
                          ")"
                      ),
                      e.trigger(s.Events.ERROR, {
                        type: o.ErrorTypes.MEDIA_ERROR,
                        details: o.ErrorDetails.BUFFER_STALLED_ERROR,
                        fatal: !1,
                        buffer: t.len,
                      }));
                  }),
                  (e._trySkipBufferHole = function (t) {
                    var e = this.config,
                      r = this.hls,
                      i = this.media;
                    if (null === i) return 0;
                    for (
                      var n = i.currentTime,
                        a = 0,
                        u = Bt.getBuffered(i),
                        d = 0;
                      d < u.length;
                      d++
                    ) {
                      var h = u.start(d);
                      if (n + e.maxBufferHole >= a && n < h) {
                        var c = Math.max(h + 0.05, i.currentTime + 0.1);
                        return (
                          l.logger.warn(
                            "skipping hole, adjusting currentTime from " +
                              n +
                              " to " +
                              c
                          ),
                          (this.moved = !0),
                          (this.stalled = null),
                          (i.currentTime = c),
                          t &&
                            r.trigger(s.Events.ERROR, {
                              type: o.ErrorTypes.MEDIA_ERROR,
                              details: o.ErrorDetails.BUFFER_SEEK_OVER_HOLE,
                              fatal: !1,
                              reason:
                                "fragment loaded with buffer holes, seeking from " +
                                n +
                                " to " +
                                c,
                              frag: t,
                            }),
                          c
                        );
                      }
                      a = u.end(d);
                    }
                    return 0;
                  }),
                  (e._tryNudgeBuffer = function () {
                    var t = this.config,
                      e = this.hls,
                      r = this.media,
                      i = this.nudgeRetry;
                    if (null !== r) {
                      var n = r.currentTime;
                      if ((this.nudgeRetry++, i < t.nudgeMaxRetry)) {
                        var a = n + (i + 1) * t.nudgeOffset;
                        l.logger.warn(
                          "Nudging 'currentTime' from " + n + " to " + a
                        ),
                          (r.currentTime = a),
                          e.trigger(s.Events.ERROR, {
                            type: o.ErrorTypes.MEDIA_ERROR,
                            details: o.ErrorDetails.BUFFER_NUDGE_ON_STALL,
                            fatal: !1,
                          });
                      } else
                        l.logger.error(
                          "Playhead still not moving while enough data buffered @" +
                            n +
                            " after " +
                            t.nudgeMaxRetry +
                            " nudges"
                        ),
                          e.trigger(s.Events.ERROR, {
                            type: o.ErrorTypes.MEDIA_ERROR,
                            details: o.ErrorDetails.BUFFER_STALLED_ERROR,
                            fatal: !0,
                          });
                    }
                  }),
                  t
                );
              })();
            function ke(t, e) {
              for (var r = 0; r < e.length; r++) {
                var i = e[r];
                (i.enumerable = i.enumerable || !1),
                  (i.configurable = !0),
                  "value" in i && (i.writable = !0),
                  Object.defineProperty(
                    t,
                    (void 0,
                    "symbol" ==
                    typeof (n = (function (t, e) {
                      if ("object" != typeof t || null === t) return t;
                      var r = t[Symbol.toPrimitive];
                      if (void 0 !== r) {
                        var i = r.call(t, e);
                        if ("object" != typeof i) return i;
                        throw new TypeError(
                          "@@toPrimitive must return a primitive value."
                        );
                      }
                      return String(t);
                    })(i.key, "string"))
                      ? n
                      : String(n)),
                    i
                  );
              }
              var n;
            }
            function Re(t, e) {
              return (
                (Re = Object.setPrototypeOf
                  ? Object.setPrototypeOf.bind()
                  : function (t, e) {
                      return (t.__proto__ = e), t;
                    }),
                Re(t, e)
              );
            }
            var Ie = (function (t) {
              var e, r;
              function i(e, r, i) {
                var n;
                return (
                  ((n =
                    t.call(this, e, r, i, "[stream-controller]") ||
                    this).audioCodecSwap = !1),
                  (n.gapController = null),
                  (n.level = -1),
                  (n._forceStartLoad = !1),
                  (n.altAudio = !1),
                  (n.audioOnly = !1),
                  (n.fragPlaying = null),
                  (n.onvplaying = null),
                  (n.onvseeked = null),
                  (n.fragLastKbps = 0),
                  (n.couldBacktrack = !1),
                  (n.backtrackFragment = null),
                  (n.audioCodecSwitch = !1),
                  (n.videoBuffer = null),
                  n._registerListeners(),
                  n
                );
              }
              (r = t),
                ((e = i).prototype = Object.create(r.prototype)),
                (e.prototype.constructor = e),
                Re(e, r);
              var n,
                l,
                u = i.prototype;
              return (
                (u._registerListeners = function () {
                  var t = this.hls;
                  t.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                    t.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this),
                    t.on(
                      s.Events.MANIFEST_LOADING,
                      this.onManifestLoading,
                      this
                    ),
                    t.on(s.Events.MANIFEST_PARSED, this.onManifestParsed, this),
                    t.on(s.Events.LEVEL_LOADING, this.onLevelLoading, this),
                    t.on(s.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                    t.on(
                      s.Events.FRAG_LOAD_EMERGENCY_ABORTED,
                      this.onFragLoadEmergencyAborted,
                      this
                    ),
                    t.on(s.Events.ERROR, this.onError, this),
                    t.on(
                      s.Events.AUDIO_TRACK_SWITCHING,
                      this.onAudioTrackSwitching,
                      this
                    ),
                    t.on(
                      s.Events.AUDIO_TRACK_SWITCHED,
                      this.onAudioTrackSwitched,
                      this
                    ),
                    t.on(s.Events.BUFFER_CREATED, this.onBufferCreated, this),
                    t.on(s.Events.BUFFER_FLUSHED, this.onBufferFlushed, this),
                    t.on(s.Events.LEVELS_UPDATED, this.onLevelsUpdated, this),
                    t.on(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
                }),
                (u._unregisterListeners = function () {
                  var t = this.hls;
                  t.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                    t.off(
                      s.Events.MEDIA_DETACHING,
                      this.onMediaDetaching,
                      this
                    ),
                    t.off(
                      s.Events.MANIFEST_LOADING,
                      this.onManifestLoading,
                      this
                    ),
                    t.off(
                      s.Events.MANIFEST_PARSED,
                      this.onManifestParsed,
                      this
                    ),
                    t.off(s.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                    t.off(
                      s.Events.FRAG_LOAD_EMERGENCY_ABORTED,
                      this.onFragLoadEmergencyAborted,
                      this
                    ),
                    t.off(s.Events.ERROR, this.onError, this),
                    t.off(
                      s.Events.AUDIO_TRACK_SWITCHING,
                      this.onAudioTrackSwitching,
                      this
                    ),
                    t.off(
                      s.Events.AUDIO_TRACK_SWITCHED,
                      this.onAudioTrackSwitched,
                      this
                    ),
                    t.off(s.Events.BUFFER_CREATED, this.onBufferCreated, this),
                    t.off(s.Events.BUFFER_FLUSHED, this.onBufferFlushed, this),
                    t.off(s.Events.LEVELS_UPDATED, this.onLevelsUpdated, this),
                    t.off(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
                }),
                (u.onHandlerDestroying = function () {
                  this._unregisterListeners(), this.onMediaDetaching();
                }),
                (u.startLoad = function (t) {
                  if (this.levels) {
                    var e = this.lastCurrentTime,
                      r = this.hls;
                    if (
                      (this.stopLoad(),
                      this.setInterval(100),
                      (this.level = -1),
                      (this.fragLoadError = 0),
                      !this.startFragRequested)
                    ) {
                      var i = r.startLevel;
                      -1 === i &&
                        (r.config.testBandwidth && this.levels.length > 1
                          ? ((i = 0), (this.bitrateTest = !0))
                          : (i = r.nextAutoLevel)),
                        (this.level = r.nextLoadLevel = i),
                        (this.loadedmetadata = !1);
                    }
                    e > 0 &&
                      -1 === t &&
                      (this.log(
                        "Override startPosition with lastCurrentTime @" +
                          e.toFixed(3)
                      ),
                      (t = e)),
                      (this.state = te),
                      (this.nextLoadPosition =
                        this.startPosition =
                        this.lastCurrentTime =
                          t),
                      this.tick();
                  } else (this._forceStartLoad = !0), (this.state = Zt);
                }),
                (u.stopLoad = function () {
                  (this._forceStartLoad = !1), t.prototype.stopLoad.call(this);
                }),
                (u.doTick = function () {
                  switch (this.state) {
                    case te:
                      this.doTickIdle();
                      break;
                    case de:
                      var t,
                        e = this.levels,
                        r = this.level,
                        i =
                          null == e || null === (t = e[r]) || void 0 === t
                            ? void 0
                            : t.details;
                      if (
                        i &&
                        (!i.live || this.levelLastLoaded === this.level)
                      ) {
                        if (this.waitForCdnTuneIn(i)) break;
                        this.state = te;
                        break;
                      }
                      break;
                    case ie:
                      var n,
                        a = self.performance.now(),
                        s = this.retryDate;
                      (!s ||
                        a >= s ||
                        (null !== (n = this.media) &&
                          void 0 !== n &&
                          n.seeking)) &&
                        (this.log(
                          "retryDate reached, switch back to IDLE state"
                        ),
                        this.resetStartWhenNotLoaded(this.level),
                        (this.state = te));
                  }
                  this.onTickEnd();
                }),
                (u.onTickEnd = function () {
                  t.prototype.onTickEnd.call(this),
                    this.checkBuffer(),
                    this.checkFragmentChanged();
                }),
                (u.doTickIdle = function () {
                  var t = this.hls,
                    e = this.levelLastLoaded,
                    r = this.levels,
                    i = this.media,
                    n = t.config,
                    a = t.nextLoadLevel;
                  if (
                    null !== e &&
                    (i || (!this.startFragRequested && n.startFragPrefetch)) &&
                    (!this.altAudio || !this.audioOnly) &&
                    r &&
                    r[a]
                  ) {
                    var o = r[a],
                      l = this.getMainFwdBufferInfo();
                    if (null !== l) {
                      var u = this.getLevelDetails();
                      if (u && this._streamEnded(l, u)) {
                        var d = {};
                        return (
                          this.altAudio && (d.type = "video"),
                          this.hls.trigger(s.Events.BUFFER_EOS, d),
                          void (this.state = oe)
                        );
                      }
                      this.level = t.nextLoadLevel = a;
                      var h = o.details;
                      if (
                        !h ||
                        this.state === de ||
                        (h.live && this.levelLastLoaded !== a)
                      )
                        return (this.level = a), void (this.state = de);
                      if (!(l.len >= this.getMaxBufferLength(o.maxBitrate))) {
                        this.backtrackFragment &&
                          this.backtrackFragment.start > l.end &&
                          (this.backtrackFragment = null);
                        var c = this.backtrackFragment
                            ? this.backtrackFragment.start
                            : l.end,
                          f = this.getNextFragment(c, h);
                        if (
                          this.couldBacktrack &&
                          !this.fragPrevious &&
                          f &&
                          "initSegment" !== f.sn &&
                          this.fragmentTracker.getState(f) !== St.OK
                        ) {
                          var g,
                            p =
                              (null != (g = this.backtrackFragment) ? g : f)
                                .sn - h.startSN,
                            m = h.fragments[p - 1];
                          m &&
                            f.cc === m.cc &&
                            ((f = m), this.fragmentTracker.removeFragment(m));
                        } else
                          this.backtrackFragment &&
                            l.len &&
                            (this.backtrackFragment = null);
                        if (
                          f &&
                          this.fragmentTracker.getState(f) === St.OK &&
                          this.nextLoadPosition > c
                        ) {
                          var y =
                              this.audioOnly && !this.altAudio
                                ? v.ElementaryStreamTypes.AUDIO
                                : v.ElementaryStreamTypes.VIDEO,
                            E =
                              (y === v.ElementaryStreamTypes.VIDEO
                                ? this.videoBuffer
                                : this.mediaBuffer) || this.media;
                          E &&
                            this.afterBufferFlushed(
                              E,
                              y,
                              V.PlaylistLevelType.MAIN
                            ),
                            (f = this.getNextFragment(
                              this.nextLoadPosition,
                              h
                            ));
                        }
                        f &&
                          (!f.initSegment ||
                            f.initSegment.data ||
                            this.bitrateTest ||
                            (f = f.initSegment),
                          this.loadFragment(f, h, c));
                      }
                    }
                  }
                }),
                (u.loadFragment = function (e, r, i) {
                  var n,
                    a = this.fragmentTracker.getState(e);
                  (this.fragCurrent = e),
                    a === St.NOT_LOADED
                      ? "initSegment" === e.sn
                        ? this._loadInitSegment(e, r)
                        : this.bitrateTest
                        ? (this.log(
                            "Fragment " +
                              e.sn +
                              " of level " +
                              e.level +
                              " is being downloaded to test bitrate and will not be buffered"
                          ),
                          this._loadBitrateTestFrag(e, r))
                        : ((this.startFragRequested = !0),
                          t.prototype.loadFragment.call(this, e, r, i))
                      : a === St.APPENDING
                      ? this.reduceMaxBufferLength(e.duration) &&
                        this.fragmentTracker.removeFragment(e)
                      : 0 ===
                          (null === (n = this.media) || void 0 === n
                            ? void 0
                            : n.buffered.length) &&
                        this.fragmentTracker.removeAllFragments();
                }),
                (u.getAppendedFrag = function (t) {
                  var e = this.fragmentTracker.getAppendedFrag(
                    t,
                    V.PlaylistLevelType.MAIN
                  );
                  return e && "fragment" in e ? e.fragment : e;
                }),
                (u.getBufferedFrag = function (t) {
                  return this.fragmentTracker.getBufferedFrag(
                    t,
                    V.PlaylistLevelType.MAIN
                  );
                }),
                (u.followingBufferedFrag = function (t) {
                  return t ? this.getBufferedFrag(t.end + 0.5) : null;
                }),
                (u.immediateLevelSwitch = function () {
                  this.abortCurrentFrag(),
                    this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
                }),
                (u.nextLevelSwitch = function () {
                  var t = this.levels,
                    e = this.media;
                  if (null != e && e.readyState) {
                    var r,
                      i = this.getAppendedFrag(e.currentTime);
                    if (
                      (i && i.start > 1 && this.flushMainBuffer(0, i.start - 1),
                      !e.paused && t)
                    ) {
                      var n = t[this.hls.nextLoadLevel],
                        a = this.fragLastKbps;
                      r =
                        a && this.fragCurrent
                          ? (this.fragCurrent.duration * n.maxBitrate) /
                              (1e3 * a) +
                            1
                          : 0;
                    } else r = 0;
                    var s = this.getBufferedFrag(e.currentTime + r);
                    if (s) {
                      var o = this.followingBufferedFrag(s);
                      if (o) {
                        this.abortCurrentFrag();
                        var l = o.maxStartPTS ? o.maxStartPTS : o.start,
                          u = o.duration,
                          d = Math.max(
                            s.end,
                            l +
                              Math.min(
                                Math.max(
                                  u - this.config.maxFragLookUpTolerance,
                                  0.5 * u
                                ),
                                0.75 * u
                              )
                          );
                        this.flushMainBuffer(d, Number.POSITIVE_INFINITY);
                      }
                    }
                  }
                }),
                (u.abortCurrentFrag = function () {
                  var t = this.fragCurrent;
                  switch (
                    ((this.fragCurrent = null),
                    (this.backtrackFragment = null),
                    t && t.abortRequests(),
                    this.state)
                  ) {
                    case ee:
                    case re:
                    case ie:
                    case ae:
                    case se:
                      this.state = te;
                  }
                  this.nextLoadPosition = this.getLoadPosition();
                }),
                (u.flushMainBuffer = function (e, r) {
                  t.prototype.flushMainBuffer.call(
                    this,
                    e,
                    r,
                    this.altAudio ? "video" : null
                  );
                }),
                (u.onMediaAttached = function (e, r) {
                  t.prototype.onMediaAttached.call(this, e, r);
                  var i = r.media;
                  (this.onvplaying = this.onMediaPlaying.bind(this)),
                    (this.onvseeked = this.onMediaSeeked.bind(this)),
                    i.addEventListener("playing", this.onvplaying),
                    i.addEventListener("seeked", this.onvseeked),
                    (this.gapController = new De(
                      this.config,
                      i,
                      this.fragmentTracker,
                      this.hls
                    ));
                }),
                (u.onMediaDetaching = function () {
                  var e = this.media;
                  e &&
                    this.onvplaying &&
                    this.onvseeked &&
                    (e.removeEventListener("playing", this.onvplaying),
                    e.removeEventListener("seeked", this.onvseeked),
                    (this.onvplaying = this.onvseeked = null),
                    (this.videoBuffer = null)),
                    (this.fragPlaying = null),
                    this.gapController &&
                      (this.gapController.destroy(),
                      (this.gapController = null)),
                    t.prototype.onMediaDetaching.call(this);
                }),
                (u.onMediaPlaying = function () {
                  this.tick();
                }),
                (u.onMediaSeeked = function () {
                  var t = this.media,
                    e = t ? t.currentTime : null;
                  (0, a.isFiniteNumber)(e) &&
                    this.log("Media seeked to " + e.toFixed(3)),
                    this.tick();
                }),
                (u.onManifestLoading = function () {
                  this.log("Trigger BUFFER_RESET"),
                    this.hls.trigger(s.Events.BUFFER_RESET, void 0),
                    this.fragmentTracker.removeAllFragments(),
                    (this.couldBacktrack = !1),
                    (this.startPosition = this.lastCurrentTime = 0),
                    (this.fragPlaying = null),
                    (this.backtrackFragment = null);
                }),
                (u.onManifestParsed = function (t, e) {
                  var r,
                    i,
                    n,
                    a = !1,
                    s = !1;
                  e.levels.forEach(function (t) {
                    (r = t.audioCodec) &&
                      (-1 !== r.indexOf("mp4a.40.2") && (a = !0),
                      -1 !== r.indexOf("mp4a.40.5") && (s = !0));
                  }),
                    (this.audioCodecSwitch =
                      a &&
                      s &&
                      !(
                        "function" ==
                        typeof (null == (n = fe()) ||
                        null === (i = n.prototype) ||
                        void 0 === i
                          ? void 0
                          : i.changeType)
                      )),
                    this.audioCodecSwitch &&
                      this.log(
                        "Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC"
                      ),
                    (this.levels = e.levels),
                    (this.startFragRequested = !1);
                }),
                (u.onLevelLoading = function (t, e) {
                  var r = this.levels;
                  if (r && this.state === te) {
                    var i = r[e.level];
                    (!i.details ||
                      (i.details.live && this.levelLastLoaded !== e.level) ||
                      this.waitForCdnTuneIn(i.details)) &&
                      (this.state = de);
                  }
                }),
                (u.onLevelLoaded = function (t, e) {
                  var r,
                    i = this.levels,
                    n = e.level,
                    a = e.details,
                    o = a.totalduration;
                  if (i) {
                    this.log(
                      "Level " +
                        n +
                        " loaded [" +
                        a.startSN +
                        "," +
                        a.endSN +
                        "], cc [" +
                        a.startCC +
                        ", " +
                        a.endCC +
                        "] duration:" +
                        o
                    );
                    var l = this.fragCurrent;
                    !l ||
                      (this.state !== re && this.state !== ie) ||
                      (l.level !== e.level &&
                        l.loader &&
                        ((this.state = te),
                        (this.backtrackFragment = null),
                        l.abortRequests()));
                    var u = i[n],
                      d = 0;
                    if (
                      a.live ||
                      (null !== (r = u.details) && void 0 !== r && r.live)
                    ) {
                      if (
                        (a.fragments[0] || (a.deltaUpdateFailed = !0),
                        a.deltaUpdateFailed)
                      )
                        return;
                      d = this.alignPlaylists(a, u.details);
                    }
                    if (
                      ((u.details = a),
                      (this.levelLastLoaded = n),
                      this.hls.trigger(s.Events.LEVEL_UPDATED, {
                        details: a,
                        level: n,
                      }),
                      this.state === de)
                    ) {
                      if (this.waitForCdnTuneIn(a)) return;
                      this.state = te;
                    }
                    this.startFragRequested
                      ? a.live && this.synchronizeToLiveEdge(a)
                      : this.setStartPosition(a, d),
                      this.tick();
                  } else
                    this.warn("Levels were reset while loading level " + n);
                }),
                (u._handleFragmentLoadProgress = function (t) {
                  var e,
                    r = t.frag,
                    i = t.part,
                    n = t.payload,
                    a = this.levels;
                  if (a) {
                    var s = a[r.level],
                      o = s.details;
                    if (o) {
                      var l = s.videoCodec,
                        u = o.PTSKnown || !o.live,
                        d =
                          null === (e = r.initSegment) || void 0 === e
                            ? void 0
                            : e.data,
                        h = this._getAudioCodec(s),
                        c = (this.transmuxer =
                          this.transmuxer ||
                          new Ae(
                            this.hls,
                            V.PlaylistLevelType.MAIN,
                            this._handleTransmuxComplete.bind(this),
                            this._handleTransmuxerFlush.bind(this)
                          )),
                        f = i ? i.index : -1,
                        g = -1 !== f,
                        v = new Gt(
                          r.level,
                          r.sn,
                          r.stats.chunkCount,
                          n.byteLength,
                          f,
                          g
                        ),
                        p = this.initPTS[r.cc];
                      c.push(n, d, h, l, r, i, o.totalduration, u, v, p);
                    } else
                      this.warn(
                        "Dropping fragment " +
                          r.sn +
                          " of level " +
                          r.level +
                          " after level details were reset"
                      );
                  } else
                    this.warn(
                      "Levels were reset while fragment load was in progress. Fragment " +
                        r.sn +
                        " of level " +
                        r.level +
                        " will not be buffered"
                    );
                }),
                (u.onAudioTrackSwitching = function (t, e) {
                  var r = this.altAudio,
                    i = !!e.url,
                    n = e.id;
                  if (!i) {
                    if (this.mediaBuffer !== this.media) {
                      this.log(
                        "Switching on main audio, use media.buffered to schedule main fragment loading"
                      ),
                        (this.mediaBuffer = this.media);
                      var a = this.fragCurrent;
                      a &&
                        (this.log(
                          "Switching to main audio track, cancel main fragment load"
                        ),
                        a.abortRequests()),
                        this.resetTransmuxer(),
                        this.resetLoadingState();
                    } else this.audioOnly && this.resetTransmuxer();
                    var o = this.hls;
                    r &&
                      o.trigger(s.Events.BUFFER_FLUSHING, {
                        startOffset: 0,
                        endOffset: Number.POSITIVE_INFINITY,
                        type: "audio",
                      }),
                      o.trigger(s.Events.AUDIO_TRACK_SWITCHED, { id: n });
                  }
                }),
                (u.onAudioTrackSwitched = function (t, e) {
                  var r = e.id,
                    i = !!this.hls.audioTracks[r].url;
                  if (i) {
                    var n = this.videoBuffer;
                    n &&
                      this.mediaBuffer !== n &&
                      (this.log(
                        "Switching on alternate audio, use video.buffered to schedule main fragment loading"
                      ),
                      (this.mediaBuffer = n));
                  }
                  (this.altAudio = i), this.tick();
                }),
                (u.onBufferCreated = function (t, e) {
                  var r,
                    i,
                    n = e.tracks,
                    a = !1;
                  for (var s in n) {
                    var o = n[s];
                    if ("main" === o.id) {
                      if (((i = s), (r = o), "video" === s)) {
                        var l = n[s];
                        l && (this.videoBuffer = l.buffer);
                      }
                    } else a = !0;
                  }
                  a && r
                    ? (this.log(
                        "Alternate track found, use " +
                          i +
                          ".buffered to schedule main fragment loading"
                      ),
                      (this.mediaBuffer = r.buffer))
                    : (this.mediaBuffer = this.media);
                }),
                (u.onFragBuffered = function (t, e) {
                  var r = e.frag,
                    i = e.part;
                  if (!r || r.type === V.PlaylistLevelType.MAIN) {
                    if (this.fragContextChanged(r))
                      return (
                        this.warn(
                          "Fragment " +
                            r.sn +
                            (i ? " p: " + i.index : "") +
                            " of level " +
                            r.level +
                            " finished buffering, but was aborted. state: " +
                            this.state
                        ),
                        void (this.state === se && (this.state = te))
                      );
                    var n = i ? i.stats : r.stats;
                    (this.fragLastKbps = Math.round(
                      (8 * n.total) / (n.buffering.end - n.loading.first)
                    )),
                      "initSegment" !== r.sn && (this.fragPrevious = r),
                      this.fragBufferedComplete(r, i);
                  }
                }),
                (u.onError = function (t, e) {
                  if (e.type !== o.ErrorTypes.KEY_SYSTEM_ERROR)
                    switch (e.details) {
                      case o.ErrorDetails.FRAG_LOAD_ERROR:
                      case o.ErrorDetails.FRAG_LOAD_TIMEOUT:
                      case o.ErrorDetails.FRAG_PARSING_ERROR:
                      case o.ErrorDetails.KEY_LOAD_ERROR:
                      case o.ErrorDetails.KEY_LOAD_TIMEOUT:
                        this.onFragmentOrKeyLoadError(
                          V.PlaylistLevelType.MAIN,
                          e
                        );
                        break;
                      case o.ErrorDetails.LEVEL_LOAD_ERROR:
                      case o.ErrorDetails.LEVEL_LOAD_TIMEOUT:
                        this.state !== le &&
                          (e.fatal
                            ? (this.warn("" + e.details), (this.state = le))
                            : e.levelRetry ||
                              this.state !== de ||
                              (this.state = te));
                        break;
                      case o.ErrorDetails.BUFFER_FULL_ERROR:
                        if (
                          "main" === e.parent &&
                          (this.state === ae || this.state === se)
                        ) {
                          var r = !0,
                            i = this.getFwdBufferInfo(
                              this.media,
                              V.PlaylistLevelType.MAIN
                            );
                          i &&
                            i.len > 0.5 &&
                            (r = !this.reduceMaxBufferLength(i.len)),
                            r &&
                              (this.warn(
                                "buffer full error also media.currentTime is not buffered, flush main"
                              ),
                              this.immediateLevelSwitch()),
                            this.resetLoadingState();
                        }
                    }
                  else
                    this.onFragmentOrKeyLoadError(V.PlaylistLevelType.MAIN, e);
                }),
                (u.checkBuffer = function () {
                  var t = this.media,
                    e = this.gapController;
                  if (t && e && t.readyState) {
                    if (this.loadedmetadata || !Bt.getBuffered(t).length) {
                      var r = this.state !== te ? this.fragCurrent : null;
                      e.poll(this.lastCurrentTime, r);
                    }
                    this.lastCurrentTime = t.currentTime;
                  }
                }),
                (u.onFragLoadEmergencyAborted = function () {
                  (this.state = te),
                    this.loadedmetadata ||
                      ((this.startFragRequested = !1),
                      (this.nextLoadPosition = this.startPosition)),
                    this.tickImmediate();
                }),
                (u.onBufferFlushed = function (t, e) {
                  var r = e.type;
                  if (
                    r !== v.ElementaryStreamTypes.AUDIO ||
                    (this.audioOnly && !this.altAudio)
                  ) {
                    var i =
                      (r === v.ElementaryStreamTypes.VIDEO
                        ? this.videoBuffer
                        : this.mediaBuffer) || this.media;
                    this.afterBufferFlushed(i, r, V.PlaylistLevelType.MAIN);
                  }
                }),
                (u.onLevelsUpdated = function (t, e) {
                  this.levels = e.levels;
                }),
                (u.swapAudioCodec = function () {
                  this.audioCodecSwap = !this.audioCodecSwap;
                }),
                (u.seekToStartPos = function () {
                  var t = this.media;
                  if (t) {
                    var e = t.currentTime,
                      r = this.startPosition;
                    if (r >= 0 && e < r) {
                      if (t.seeking)
                        return void this.log(
                          "could not seek to " + r + ", already seeking at " + e
                        );
                      var i = Bt.getBuffered(t),
                        n = (i.length ? i.start(0) : 0) - r;
                      n > 0 &&
                        (n < this.config.maxBufferHole ||
                          n < this.config.maxFragLookUpTolerance) &&
                        (this.log(
                          "adjusting start position by " +
                            n +
                            " to match buffer start"
                        ),
                        (r += n),
                        (this.startPosition = r)),
                        this.log(
                          "seek to target start position " +
                            r +
                            " from current time " +
                            e
                        ),
                        (t.currentTime = r);
                    }
                  }
                }),
                (u._getAudioCodec = function (t) {
                  var e = this.config.defaultAudioCodec || t.audioCodec;
                  return (
                    this.audioCodecSwap &&
                      e &&
                      (this.log("Swapping audio codec"),
                      (e =
                        -1 !== e.indexOf("mp4a.40.5")
                          ? "mp4a.40.2"
                          : "mp4a.40.5")),
                    e
                  );
                }),
                (u._loadBitrateTestFrag = function (t, e) {
                  var r = this;
                  (t.bitrateTest = !0),
                    this._doFragLoad(t, e).then(function (e) {
                      var i = r.hls;
                      if (e && !r.fragContextChanged(t)) {
                        (r.fragLoadError = 0),
                          (r.state = te),
                          (r.startFragRequested = !1),
                          (r.bitrateTest = !1);
                        var n = t.stats;
                        (n.parsing.start =
                          n.parsing.end =
                          n.buffering.start =
                          n.buffering.end =
                            self.performance.now()),
                          i.trigger(s.Events.FRAG_LOADED, e),
                          (t.bitrateTest = !1);
                      }
                    });
                }),
                (u._handleTransmuxComplete = function (t) {
                  var e,
                    r = "main",
                    i = this.hls,
                    n = t.remuxResult,
                    o = t.chunkMeta,
                    l = this.getCurrentContext(o);
                  if (!l)
                    return (
                      this.warn(
                        "The loading context changed while buffering fragment " +
                          o.sn +
                          " of level " +
                          o.level +
                          ". This chunk will not be buffered."
                      ),
                      void this.resetStartWhenNotLoaded(o.level)
                    );
                  var u = l.frag,
                    d = l.part,
                    h = l.level,
                    c = n.video,
                    f = n.text,
                    g = n.id3,
                    p = n.initSegment,
                    m = h.details,
                    y = this.altAudio ? void 0 : n.audio;
                  if (!this.fragContextChanged(u)) {
                    if (((this.state = ae), p)) {
                      p.tracks &&
                        (this._bufferInitSegment(h, p.tracks, u, o),
                        i.trigger(s.Events.FRAG_PARSING_INIT_SEGMENT, {
                          frag: u,
                          id: r,
                          tracks: p.tracks,
                        }));
                      var E = p.initPTS,
                        T = p.timescale;
                      (0, a.isFiniteNumber)(E) &&
                        ((this.initPTS[u.cc] = E),
                        i.trigger(s.Events.INIT_PTS_FOUND, {
                          frag: u,
                          id: r,
                          initPTS: E,
                          timescale: T,
                        }));
                    }
                    if (c && !1 !== n.independent) {
                      if (m) {
                        var S = c.startPTS,
                          b = c.endPTS,
                          L = c.startDTS,
                          A = c.endDTS;
                        if (d)
                          d.elementaryStreams[c.type] = {
                            startPTS: S,
                            endPTS: b,
                            startDTS: L,
                            endDTS: A,
                          };
                        else if (
                          (c.firstKeyFrame &&
                            c.independent &&
                            1 === o.id &&
                            (this.couldBacktrack = !0),
                          c.dropped && c.independent)
                        ) {
                          var D = this.getMainFwdBufferInfo();
                          if (
                            (D ? D.end : this.getLoadPosition()) +
                              this.config.maxBufferHole <
                            (c.firstKeyFramePTS ? c.firstKeyFramePTS : S) -
                              this.config.maxBufferHole
                          )
                            return void this.backtrack(u);
                          u.setElementaryStreamInfo(
                            c.type,
                            u.start,
                            b,
                            u.start,
                            A,
                            !0
                          );
                        }
                        u.setElementaryStreamInfo(c.type, S, b, L, A),
                          this.backtrackFragment &&
                            (this.backtrackFragment = u),
                          this.bufferFragmentData(c, u, d, o);
                      }
                    } else if (!1 === n.independent)
                      return void this.backtrack(u);
                    if (y) {
                      var k = y.startPTS,
                        R = y.endPTS,
                        I = y.startDTS,
                        w = y.endDTS;
                      d &&
                        (d.elementaryStreams[v.ElementaryStreamTypes.AUDIO] = {
                          startPTS: k,
                          endPTS: R,
                          startDTS: I,
                          endDTS: w,
                        }),
                        u.setElementaryStreamInfo(
                          v.ElementaryStreamTypes.AUDIO,
                          k,
                          R,
                          I,
                          w
                        ),
                        this.bufferFragmentData(y, u, d, o);
                    }
                    if (
                      m &&
                      null != g &&
                      null !== (e = g.samples) &&
                      void 0 !== e &&
                      e.length
                    ) {
                      var C = {
                        id: r,
                        frag: u,
                        details: m,
                        samples: g.samples,
                      };
                      i.trigger(s.Events.FRAG_PARSING_METADATA, C);
                    }
                    if (m && f) {
                      var _ = {
                        id: r,
                        frag: u,
                        details: m,
                        samples: f.samples,
                      };
                      i.trigger(s.Events.FRAG_PARSING_USERDATA, _);
                    }
                  }
                }),
                (u._bufferInitSegment = function (t, e, r, i) {
                  var n = this;
                  if (this.state === ae) {
                    (this.audioOnly = !!e.audio && !e.video),
                      this.altAudio && !this.audioOnly && delete e.audio;
                    var a = e.audio,
                      o = e.video,
                      l = e.audiovideo;
                    if (a) {
                      var u = t.audioCodec,
                        d = navigator.userAgent.toLowerCase();
                      this.audioCodecSwitch &&
                        (u &&
                          (u =
                            -1 !== u.indexOf("mp4a.40.5")
                              ? "mp4a.40.2"
                              : "mp4a.40.5"),
                        1 !== a.metadata.channelCount &&
                          -1 === d.indexOf("firefox") &&
                          (u = "mp4a.40.5")),
                        -1 !== d.indexOf("android") &&
                          "audio/mpeg" !== a.container &&
                          ((u = "mp4a.40.2"),
                          this.log("Android: force audio codec to " + u)),
                        t.audioCodec &&
                          t.audioCodec !== u &&
                          this.log(
                            'Swapping manifest audio codec "' +
                              t.audioCodec +
                              '" for "' +
                              u +
                              '"'
                          ),
                        (a.levelCodec = u),
                        (a.id = "main"),
                        this.log(
                          "Init audio buffer, container:" +
                            a.container +
                            ", codecs[selected/level/parsed]=[" +
                            (u || "") +
                            "/" +
                            (t.audioCodec || "") +
                            "/" +
                            a.codec +
                            "]"
                        );
                    }
                    o &&
                      ((o.levelCodec = t.videoCodec),
                      (o.id = "main"),
                      this.log(
                        "Init video buffer, container:" +
                          o.container +
                          ", codecs[level/parsed]=[" +
                          (t.videoCodec || "") +
                          "/" +
                          o.codec +
                          "]"
                      )),
                      l &&
                        this.log(
                          "Init audiovideo buffer, container:" +
                            l.container +
                            ", codecs[level/parsed]=[" +
                            (t.attrs.CODECS || "") +
                            "/" +
                            l.codec +
                            "]"
                        ),
                      this.hls.trigger(s.Events.BUFFER_CODECS, e),
                      Object.keys(e).forEach(function (t) {
                        var a = e[t].initSegment;
                        null != a &&
                          a.byteLength &&
                          n.hls.trigger(s.Events.BUFFER_APPENDING, {
                            type: t,
                            data: a,
                            frag: r,
                            part: null,
                            chunkMeta: i,
                            parent: r.type,
                          });
                      }),
                      this.tick();
                  }
                }),
                (u.getMainFwdBufferInfo = function () {
                  return this.getFwdBufferInfo(
                    this.mediaBuffer ? this.mediaBuffer : this.media,
                    V.PlaylistLevelType.MAIN
                  );
                }),
                (u.backtrack = function (t) {
                  (this.couldBacktrack = !0),
                    (this.backtrackFragment = t),
                    this.resetTransmuxer(),
                    this.flushBufferGap(t),
                    this.fragmentTracker.removeFragment(t),
                    (this.fragPrevious = null),
                    (this.nextLoadPosition = t.start),
                    (this.state = te);
                }),
                (u.checkFragmentChanged = function () {
                  var t = this.media,
                    e = null;
                  if (t && t.readyState > 1 && !1 === t.seeking) {
                    var r = t.currentTime;
                    if (
                      (Bt.isBuffered(t, r)
                        ? (e = this.getAppendedFrag(r))
                        : Bt.isBuffered(t, r + 0.1) &&
                          (e = this.getAppendedFrag(r + 0.1)),
                      e)
                    ) {
                      this.backtrackFragment = null;
                      var i = this.fragPlaying,
                        n = e.level;
                      (i &&
                        e.sn === i.sn &&
                        i.level === n &&
                        e.urlId === i.urlId) ||
                        ((this.fragPlaying = e),
                        this.hls.trigger(s.Events.FRAG_CHANGED, { frag: e }),
                        (i && i.level === n) ||
                          this.hls.trigger(s.Events.LEVEL_SWITCHED, {
                            level: n,
                          }));
                    }
                  }
                }),
                (n = i),
                (l = [
                  {
                    key: "nextLevel",
                    get: function () {
                      var t = this.nextBufferedFrag;
                      return t ? t.level : -1;
                    },
                  },
                  {
                    key: "currentFrag",
                    get: function () {
                      var t = this.media;
                      return t
                        ? this.fragPlaying ||
                            this.getAppendedFrag(t.currentTime)
                        : null;
                    },
                  },
                  {
                    key: "currentProgramDateTime",
                    get: function () {
                      var t = this.media;
                      if (t) {
                        var e = t.currentTime,
                          r = this.currentFrag;
                        if (
                          r &&
                          (0, a.isFiniteNumber)(e) &&
                          (0, a.isFiniteNumber)(r.programDateTime)
                        ) {
                          var i = r.programDateTime + 1e3 * (e - r.start);
                          return new Date(i);
                        }
                      }
                      return null;
                    },
                  },
                  {
                    key: "currentLevel",
                    get: function () {
                      var t = this.currentFrag;
                      return t ? t.level : -1;
                    },
                  },
                  {
                    key: "nextBufferedFrag",
                    get: function () {
                      var t = this.currentFrag;
                      return t ? this.followingBufferedFrag(t) : null;
                    },
                  },
                  {
                    key: "forceStartLoad",
                    get: function () {
                      return this._forceStartLoad;
                    },
                  },
                ]) && ke(n.prototype, l),
                Object.defineProperty(n, "prototype", { writable: !1 }),
                i
              );
            })(he);
            const we = (function () {
                function t(t, e, r) {
                  void 0 === e && (e = 0),
                    void 0 === r && (r = 0),
                    (this.halfLife = void 0),
                    (this.alpha_ = void 0),
                    (this.estimate_ = void 0),
                    (this.totalWeight_ = void 0),
                    (this.halfLife = t),
                    (this.alpha_ = t ? Math.exp(Math.log(0.5) / t) : 0),
                    (this.estimate_ = e),
                    (this.totalWeight_ = r);
                }
                var e = t.prototype;
                return (
                  (e.sample = function (t, e) {
                    var r = Math.pow(this.alpha_, t);
                    (this.estimate_ = e * (1 - r) + r * this.estimate_),
                      (this.totalWeight_ += t);
                  }),
                  (e.getTotalWeight = function () {
                    return this.totalWeight_;
                  }),
                  (e.getEstimate = function () {
                    if (this.alpha_) {
                      var t = 1 - Math.pow(this.alpha_, this.totalWeight_);
                      if (t) return this.estimate_ / t;
                    }
                    return this.estimate_;
                  }),
                  t
                );
              })(),
              Ce = (function () {
                function t(t, e, r) {
                  (this.defaultEstimate_ = void 0),
                    (this.minWeight_ = void 0),
                    (this.minDelayMs_ = void 0),
                    (this.slow_ = void 0),
                    (this.fast_ = void 0),
                    (this.defaultEstimate_ = r),
                    (this.minWeight_ = 0.001),
                    (this.minDelayMs_ = 50),
                    (this.slow_ = new we(t)),
                    (this.fast_ = new we(e));
                }
                var e = t.prototype;
                return (
                  (e.update = function (t, e) {
                    var r = this.slow_,
                      i = this.fast_;
                    this.slow_.halfLife !== t &&
                      (this.slow_ = new we(
                        t,
                        r.getEstimate(),
                        r.getTotalWeight()
                      )),
                      this.fast_.halfLife !== e &&
                        (this.fast_ = new we(
                          e,
                          i.getEstimate(),
                          i.getTotalWeight()
                        ));
                  }),
                  (e.sample = function (t, e) {
                    var r = (t = Math.max(t, this.minDelayMs_)) / 1e3,
                      i = (8 * e) / r;
                    this.fast_.sample(r, i), this.slow_.sample(r, i);
                  }),
                  (e.canEstimate = function () {
                    var t = this.fast_;
                    return t && t.getTotalWeight() >= this.minWeight_;
                  }),
                  (e.getEstimate = function () {
                    return this.canEstimate()
                      ? Math.min(
                          this.fast_.getEstimate(),
                          this.slow_.getEstimate()
                        )
                      : this.defaultEstimate_;
                  }),
                  (e.destroy = function () {}),
                  t
                );
              })();
            function _e(t, e) {
              for (var r = 0; r < e.length; r++) {
                var i = e[r];
                (i.enumerable = i.enumerable || !1),
                  (i.configurable = !0),
                  "value" in i && (i.writable = !0),
                  Object.defineProperty(
                    t,
                    (void 0,
                    "symbol" ==
                    typeof (n = (function (t, e) {
                      if ("object" != typeof t || null === t) return t;
                      var r = t[Symbol.toPrimitive];
                      if (void 0 !== r) {
                        var i = r.call(t, e);
                        if ("object" != typeof i) return i;
                        throw new TypeError(
                          "@@toPrimitive must return a primitive value."
                        );
                      }
                      return String(t);
                    })(i.key, "string"))
                      ? n
                      : String(n)),
                    i
                  );
              }
              var n;
            }
            const Pe = (function () {
              function t(t) {
                (this.hls = void 0),
                  (this.lastLoadedFragLevel = 0),
                  (this._nextAutoLevel = -1),
                  (this.timer = void 0),
                  (this.onCheck = this._abandonRulesCheck.bind(this)),
                  (this.fragCurrent = null),
                  (this.partCurrent = null),
                  (this.bitrateTestDelay = 0),
                  (this.bwEstimator = void 0),
                  (this.hls = t);
                var e = t.config;
                (this.bwEstimator = new Ce(
                  e.abrEwmaSlowVoD,
                  e.abrEwmaFastVoD,
                  e.abrEwmaDefaultEstimate
                )),
                  this.registerListeners();
              }
              var e,
                r,
                i = t.prototype;
              return (
                (i.registerListeners = function () {
                  var t = this.hls;
                  t.on(s.Events.FRAG_LOADING, this.onFragLoading, this),
                    t.on(s.Events.FRAG_LOADED, this.onFragLoaded, this),
                    t.on(s.Events.FRAG_BUFFERED, this.onFragBuffered, this),
                    t.on(s.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                    t.on(s.Events.ERROR, this.onError, this);
                }),
                (i.unregisterListeners = function () {
                  var t = this.hls;
                  t.off(s.Events.FRAG_LOADING, this.onFragLoading, this),
                    t.off(s.Events.FRAG_LOADED, this.onFragLoaded, this),
                    t.off(s.Events.FRAG_BUFFERED, this.onFragBuffered, this),
                    t.off(s.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                    t.off(s.Events.ERROR, this.onError, this);
                }),
                (i.destroy = function () {
                  this.unregisterListeners(),
                    this.clearTimer(),
                    (this.hls = this.onCheck = null),
                    (this.fragCurrent = this.partCurrent = null);
                }),
                (i.onFragLoading = function (t, e) {
                  var r,
                    i = e.frag;
                  i.type === V.PlaylistLevelType.MAIN &&
                    (this.timer ||
                      ((this.fragCurrent = i),
                      (this.partCurrent = null != (r = e.part) ? r : null),
                      (this.timer = self.setInterval(this.onCheck, 100))));
                }),
                (i.onLevelLoaded = function (t, e) {
                  var r = this.hls.config;
                  e.details.live
                    ? this.bwEstimator.update(
                        r.abrEwmaSlowLive,
                        r.abrEwmaFastLive
                      )
                    : this.bwEstimator.update(
                        r.abrEwmaSlowVoD,
                        r.abrEwmaFastVoD
                      );
                }),
                (i._abandonRulesCheck = function () {
                  var t = this.fragCurrent,
                    e = this.partCurrent,
                    r = this.hls,
                    i = r.autoLevelEnabled,
                    n = r.media;
                  if (t && n) {
                    var o = e ? e.stats : t.stats,
                      u = e ? e.duration : t.duration;
                    if (
                      o.aborted ||
                      (o.loaded && o.loaded === o.total) ||
                      0 === t.level
                    )
                      return this.clearTimer(), void (this._nextAutoLevel = -1);
                    if (i && !n.paused && n.playbackRate && n.readyState) {
                      var d = r.mainForwardBufferInfo;
                      if (null !== d) {
                        var h = performance.now() - o.loading.start,
                          c = Math.abs(n.playbackRate);
                        if (!(h <= (500 * u) / c)) {
                          var f = o.loaded && o.loading.first,
                            g = this.bwEstimator.getEstimate(),
                            v = r.levels,
                            p = r.minAutoLevel,
                            m = v[t.level],
                            y =
                              o.total ||
                              Math.max(
                                o.loaded,
                                Math.round((u * m.maxBitrate) / 8)
                              ),
                            E = f ? (1e3 * o.loaded) / h : 0,
                            T = E ? (y - o.loaded) / E : (8 * y) / g,
                            S = d.len / c;
                          if (!(T <= S)) {
                            var b,
                              L = Number.POSITIVE_INFINITY;
                            for (b = t.level - 1; b > p; b--) {
                              var A = v[b].maxBitrate;
                              if (
                                (L = E ? (u * A) / (6.4 * E) : (u * A) / g) < S
                              )
                                break;
                            }
                            L >= T ||
                              (l.logger.warn(
                                "Fragment " +
                                  t.sn +
                                  (e ? " part " + e.index : "") +
                                  " of level " +
                                  t.level +
                                  " is loading too slowly and will cause an underbuffer; aborting and switching to level " +
                                  b +
                                  "\n      Current BW estimate: " +
                                  ((0, a.isFiniteNumber)(g)
                                    ? (g / 1024).toFixed(3)
                                    : "Unknown") +
                                  " Kb/s\n      Estimated load time for current fragment: " +
                                  T.toFixed(3) +
                                  " s\n      Estimated load time for the next fragment: " +
                                  L.toFixed(3) +
                                  " s\n      Time to underbuffer: " +
                                  S.toFixed(3) +
                                  " s"
                              ),
                              (r.nextLoadLevel = b),
                              f && this.bwEstimator.sample(h, o.loaded),
                              this.clearTimer(),
                              (t.loader || t.keyLoader) &&
                                ((this.fragCurrent = this.partCurrent = null),
                                t.abortRequests()),
                              r.trigger(s.Events.FRAG_LOAD_EMERGENCY_ABORTED, {
                                frag: t,
                                part: e,
                                stats: o,
                              }));
                          }
                        }
                      }
                    }
                  }
                }),
                (i.onFragLoaded = function (t, e) {
                  var r = e.frag,
                    i = e.part;
                  if (
                    r.type === V.PlaylistLevelType.MAIN &&
                    (0, a.isFiniteNumber)(r.sn)
                  ) {
                    var n = i ? i.stats : r.stats,
                      o = i ? i.duration : r.duration;
                    if (
                      (this.clearTimer(),
                      (this.lastLoadedFragLevel = r.level),
                      (this._nextAutoLevel = -1),
                      this.hls.config.abrMaxWithRealBitrate)
                    ) {
                      var l = this.hls.levels[r.level],
                        u = (l.loaded ? l.loaded.bytes : 0) + n.loaded,
                        d = (l.loaded ? l.loaded.duration : 0) + o;
                      (l.loaded = { bytes: u, duration: d }),
                        (l.realBitrate = Math.round((8 * u) / d));
                    }
                    if (r.bitrateTest) {
                      var h = { stats: n, frag: r, part: i, id: r.type };
                      this.onFragBuffered(s.Events.FRAG_BUFFERED, h);
                    }
                  }
                }),
                (i.onFragBuffered = function (t, e) {
                  var r = e.frag,
                    i = e.part,
                    n = i ? i.stats : r.stats;
                  if (
                    !n.aborted &&
                    r.type === V.PlaylistLevelType.MAIN &&
                    "initSegment" !== r.sn
                  ) {
                    var a = n.parsing.end - n.loading.start;
                    this.bwEstimator.sample(a, n.loaded),
                      (n.bwEstimate = this.bwEstimator.getEstimate()),
                      r.bitrateTest
                        ? (this.bitrateTestDelay = a / 1e3)
                        : (this.bitrateTestDelay = 0);
                  }
                }),
                (i.onError = function (t, e) {
                  var r;
                  if (
                    (null === (r = e.frag) || void 0 === r
                      ? void 0
                      : r.type) === V.PlaylistLevelType.MAIN
                  ) {
                    if (e.type === o.ErrorTypes.KEY_SYSTEM_ERROR)
                      return void this.clearTimer();
                    switch (e.details) {
                      case o.ErrorDetails.FRAG_LOAD_ERROR:
                      case o.ErrorDetails.FRAG_LOAD_TIMEOUT:
                      case o.ErrorDetails.KEY_LOAD_ERROR:
                      case o.ErrorDetails.KEY_LOAD_TIMEOUT:
                        this.clearTimer();
                    }
                  }
                }),
                (i.clearTimer = function () {
                  self.clearInterval(this.timer), (this.timer = void 0);
                }),
                (i.getNextABRAutoLevel = function () {
                  var t = this.fragCurrent,
                    e = this.partCurrent,
                    r = this.hls,
                    i = r.maxAutoLevel,
                    n = r.config,
                    a = r.minAutoLevel,
                    s = r.media,
                    o = e ? e.duration : t ? t.duration : 0,
                    u =
                      s && 0 !== s.playbackRate ? Math.abs(s.playbackRate) : 1,
                    d = this.bwEstimator
                      ? this.bwEstimator.getEstimate()
                      : n.abrEwmaDefaultEstimate,
                    h = r.mainForwardBufferInfo,
                    c = (h ? h.len : 0) / u,
                    f = this.findBestLevel(
                      d,
                      a,
                      i,
                      c,
                      n.abrBandWidthFactor,
                      n.abrBandWidthUpFactor
                    );
                  if (f >= 0) return f;
                  l.logger.trace(
                    (c ? "rebuffering expected" : "buffer is empty") +
                      ", finding optimal quality level"
                  );
                  var g = o
                      ? Math.min(o, n.maxStarvationDelay)
                      : n.maxStarvationDelay,
                    v = n.abrBandWidthFactor,
                    p = n.abrBandWidthUpFactor;
                  if (!c) {
                    var m = this.bitrateTestDelay;
                    m &&
                      ((g =
                        (o
                          ? Math.min(o, n.maxLoadingDelay)
                          : n.maxLoadingDelay) - m),
                      l.logger.trace(
                        "bitrate test took " +
                          Math.round(1e3 * m) +
                          "ms, set first fragment max fetchDuration to " +
                          Math.round(1e3 * g) +
                          " ms"
                      ),
                      (v = p = 1));
                  }
                  return (
                    (f = this.findBestLevel(d, a, i, c + g, v, p)),
                    Math.max(f, 0)
                  );
                }),
                (i.findBestLevel = function (t, e, r, i, n, s) {
                  for (
                    var o,
                      u = this.fragCurrent,
                      d = this.partCurrent,
                      h = this.lastLoadedFragLevel,
                      c = this.hls.levels,
                      f = c[h],
                      g = !(
                        null == f ||
                        null === (o = f.details) ||
                        void 0 === o ||
                        !o.live
                      ),
                      v = null == f ? void 0 : f.codecSet,
                      p = d ? d.duration : u ? u.duration : 0,
                      m = r;
                    m >= e;
                    m--
                  ) {
                    var y = c[m];
                    if (y && (!v || y.codecSet === v)) {
                      var E,
                        T = y.details,
                        S =
                          (d
                            ? null == T
                              ? void 0
                              : T.partTarget
                            : null == T
                            ? void 0
                            : T.averagetargetduration) || p;
                      E = m <= h ? n * t : s * t;
                      var b = c[m].maxBitrate,
                        L = (b * S) / E;
                      if (
                        (l.logger.trace(
                          "level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: " +
                            m +
                            "/" +
                            Math.round(E) +
                            "/" +
                            b +
                            "/" +
                            S +
                            "/" +
                            i +
                            "/" +
                            L
                        ),
                        E > b &&
                          (0 === L ||
                            !(0, a.isFiniteNumber)(L) ||
                            (g && !this.bitrateTestDelay) ||
                            L < i))
                      )
                        return m;
                    }
                  }
                  return -1;
                }),
                (e = t),
                (r = [
                  {
                    key: "nextAutoLevel",
                    get: function () {
                      var t = this._nextAutoLevel,
                        e = this.bwEstimator;
                      if (-1 !== t && !e.canEstimate()) return t;
                      var r = this.getNextABRAutoLevel();
                      return -1 !== t && this.hls.levels[r].loadError
                        ? t
                        : (-1 !== t && (r = Math.min(t, r)), r);
                    },
                    set: function (t) {
                      this._nextAutoLevel = t;
                    },
                  },
                ]) && _e(e.prototype, r),
                Object.defineProperty(e, "prototype", { writable: !1 }),
                t
              );
            })();
            var Oe = (function () {
              function t() {
                (this.chunks = []), (this.dataLength = 0);
              }
              var e = t.prototype;
              return (
                (e.push = function (t) {
                  this.chunks.push(t), (this.dataLength += t.length);
                }),
                (e.flush = function () {
                  var t,
                    e = this.chunks,
                    r = this.dataLength;
                  return e.length
                    ? ((t =
                        1 === e.length
                          ? e[0]
                          : (function (t, e) {
                              for (
                                var r = new Uint8Array(e), i = 0, n = 0;
                                n < t.length;
                                n++
                              ) {
                                var a = t[n];
                                r.set(a, i), (i += a.length);
                              }
                              return r;
                            })(e, r)),
                      this.reset(),
                      t)
                    : new Uint8Array(0);
                }),
                (e.reset = function () {
                  (this.chunks.length = 0), (this.dataLength = 0);
                }),
                t
              );
            })();
            function xe() {
              return (
                (xe = Object.assign
                  ? Object.assign.bind()
                  : function (t) {
                      for (var e = 1; e < arguments.length; e++) {
                        var r = arguments[e];
                        for (var i in r)
                          Object.prototype.hasOwnProperty.call(r, i) &&
                            (t[i] = r[i]);
                      }
                      return t;
                    }),
                xe.apply(this, arguments)
              );
            }
            function Fe(t, e) {
              return (
                (Fe = Object.setPrototypeOf
                  ? Object.setPrototypeOf.bind()
                  : function (t, e) {
                      return (t.__proto__ = e), t;
                    }),
                Fe(t, e)
              );
            }
            var Me = (function (t) {
              var e, r;
              function i(e, r, i) {
                var n;
                return (
                  ((n =
                    t.call(this, e, r, i, "[audio-stream-controller]") ||
                    this).videoBuffer = null),
                  (n.videoTrackCC = -1),
                  (n.waitingVideoCC = -1),
                  (n.audioSwitch = !1),
                  (n.trackId = -1),
                  (n.waitingData = null),
                  (n.mainDetails = null),
                  (n.bufferFlushed = !1),
                  (n.cachedTrackLoadedData = null),
                  n._registerListeners(),
                  n
                );
              }
              (r = t),
                ((e = i).prototype = Object.create(r.prototype)),
                (e.prototype.constructor = e),
                Fe(e, r);
              var n = i.prototype;
              return (
                (n.onHandlerDestroying = function () {
                  this._unregisterListeners(), (this.mainDetails = null);
                }),
                (n._registerListeners = function () {
                  var t = this.hls;
                  t.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                    t.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this),
                    t.on(
                      s.Events.MANIFEST_LOADING,
                      this.onManifestLoading,
                      this
                    ),
                    t.on(s.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                    t.on(
                      s.Events.AUDIO_TRACKS_UPDATED,
                      this.onAudioTracksUpdated,
                      this
                    ),
                    t.on(
                      s.Events.AUDIO_TRACK_SWITCHING,
                      this.onAudioTrackSwitching,
                      this
                    ),
                    t.on(
                      s.Events.AUDIO_TRACK_LOADED,
                      this.onAudioTrackLoaded,
                      this
                    ),
                    t.on(s.Events.ERROR, this.onError, this),
                    t.on(s.Events.BUFFER_RESET, this.onBufferReset, this),
                    t.on(s.Events.BUFFER_CREATED, this.onBufferCreated, this),
                    t.on(s.Events.BUFFER_FLUSHED, this.onBufferFlushed, this),
                    t.on(s.Events.INIT_PTS_FOUND, this.onInitPtsFound, this),
                    t.on(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
                }),
                (n._unregisterListeners = function () {
                  var t = this.hls;
                  t.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                    t.off(
                      s.Events.MEDIA_DETACHING,
                      this.onMediaDetaching,
                      this
                    ),
                    t.off(
                      s.Events.MANIFEST_LOADING,
                      this.onManifestLoading,
                      this
                    ),
                    t.off(s.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                    t.off(
                      s.Events.AUDIO_TRACKS_UPDATED,
                      this.onAudioTracksUpdated,
                      this
                    ),
                    t.off(
                      s.Events.AUDIO_TRACK_SWITCHING,
                      this.onAudioTrackSwitching,
                      this
                    ),
                    t.off(
                      s.Events.AUDIO_TRACK_LOADED,
                      this.onAudioTrackLoaded,
                      this
                    ),
                    t.off(s.Events.ERROR, this.onError, this),
                    t.off(s.Events.BUFFER_RESET, this.onBufferReset, this),
                    t.off(s.Events.BUFFER_CREATED, this.onBufferCreated, this),
                    t.off(s.Events.BUFFER_FLUSHED, this.onBufferFlushed, this),
                    t.off(s.Events.INIT_PTS_FOUND, this.onInitPtsFound, this),
                    t.off(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
                }),
                (n.onInitPtsFound = function (t, e) {
                  var r = e.frag,
                    i = e.id,
                    n = e.initPTS;
                  if ("main" === i) {
                    var a = r.cc;
                    (this.initPTS[r.cc] = n),
                      this.log(
                        "InitPTS for cc: " + a + " found from main: " + n
                      ),
                      (this.videoTrackCC = a),
                      this.state === ue && this.tick();
                  }
                }),
                (n.startLoad = function (t) {
                  if (!this.levels)
                    return (this.startPosition = t), void (this.state = Zt);
                  var e = this.lastCurrentTime;
                  this.stopLoad(),
                    this.setInterval(100),
                    (this.fragLoadError = 0),
                    e > 0 && -1 === t
                      ? (this.log(
                          "Override startPosition with lastCurrentTime @" +
                            e.toFixed(3)
                        ),
                        (t = e),
                        (this.state = te))
                      : ((this.loadedmetadata = !1), (this.state = ne)),
                    (this.nextLoadPosition =
                      this.startPosition =
                      this.lastCurrentTime =
                        t),
                    this.tick();
                }),
                (n.doTick = function () {
                  switch (this.state) {
                    case te:
                      this.doTickIdle();
                      break;
                    case ne:
                      var e,
                        r = this.levels,
                        i = this.trackId,
                        n =
                          null == r || null === (e = r[i]) || void 0 === e
                            ? void 0
                            : e.details;
                      if (n) {
                        if (this.waitForCdnTuneIn(n)) break;
                        this.state = ue;
                      }
                      break;
                    case ie:
                      var a,
                        s = performance.now(),
                        o = this.retryDate;
                      (!o ||
                        s >= o ||
                        (null !== (a = this.media) &&
                          void 0 !== a &&
                          a.seeking)) &&
                        (this.log(
                          "RetryDate reached, switch back to IDLE state"
                        ),
                        this.resetStartWhenNotLoaded(this.trackId),
                        (this.state = te));
                      break;
                    case ue:
                      var l = this.waitingData;
                      if (l) {
                        var u = l.frag,
                          d = l.part,
                          h = l.cache,
                          c = l.complete;
                        if (void 0 !== this.initPTS[u.cc]) {
                          (this.waitingData = null),
                            (this.waitingVideoCC = -1),
                            (this.state = re);
                          var f = {
                            frag: u,
                            part: d,
                            payload: h.flush(),
                            networkDetails: null,
                          };
                          this._handleFragmentLoadProgress(f),
                            c &&
                              t.prototype._handleFragmentLoadComplete.call(
                                this,
                                f
                              );
                        } else if (this.videoTrackCC !== this.waitingVideoCC)
                          this.log(
                            "Waiting fragment cc (" +
                              u.cc +
                              ") cancelled because video is at cc " +
                              this.videoTrackCC
                          ),
                            this.clearWaitingFragment();
                        else {
                          var g = this.getLoadPosition(),
                            v = Bt.bufferInfo(
                              this.mediaBuffer,
                              g,
                              this.config.maxBufferHole
                            );
                          qt(v.end, this.config.maxFragLookUpTolerance, u) <
                            0 &&
                            (this.log(
                              "Waiting fragment cc (" +
                                u.cc +
                                ") @ " +
                                u.start +
                                " cancelled because another fragment at " +
                                v.end +
                                " is needed"
                            ),
                            this.clearWaitingFragment());
                        }
                      } else this.state = te;
                  }
                  this.onTickEnd();
                }),
                (n.clearWaitingFragment = function () {
                  var t = this.waitingData;
                  t &&
                    (this.fragmentTracker.removeFragment(t.frag),
                    (this.waitingData = null),
                    (this.waitingVideoCC = -1),
                    (this.state = te));
                }),
                (n.resetLoadingState = function () {
                  this.clearWaitingFragment(),
                    t.prototype.resetLoadingState.call(this);
                }),
                (n.onTickEnd = function () {
                  var t = this.media;
                  t && t.readyState && (this.lastCurrentTime = t.currentTime);
                }),
                (n.doTickIdle = function () {
                  var t = this.hls,
                    e = this.levels,
                    r = this.media,
                    i = this.trackId,
                    n = t.config;
                  if (
                    e &&
                    e[i] &&
                    (r || (!this.startFragRequested && n.startFragPrefetch))
                  ) {
                    var a = e[i].details;
                    if (
                      !a ||
                      (a.live && this.levelLastLoaded !== i) ||
                      this.waitForCdnTuneIn(a)
                    )
                      this.state = ne;
                    else {
                      var o = this.mediaBuffer ? this.mediaBuffer : this.media;
                      this.bufferFlushed &&
                        o &&
                        ((this.bufferFlushed = !1),
                        this.afterBufferFlushed(
                          o,
                          v.ElementaryStreamTypes.AUDIO,
                          V.PlaylistLevelType.AUDIO
                        ));
                      var l = this.getFwdBufferInfo(
                        o,
                        V.PlaylistLevelType.AUDIO
                      );
                      if (null !== l) {
                        var u = this.audioSwitch;
                        if (!u && this._streamEnded(l, a))
                          return (
                            t.trigger(s.Events.BUFFER_EOS, { type: "audio" }),
                            void (this.state = oe)
                          );
                        var d = this.getFwdBufferInfo(
                          this.videoBuffer ? this.videoBuffer : this.media,
                          V.PlaylistLevelType.MAIN
                        );
                        if (
                          !(
                            l.len >=
                            this.getMaxBufferLength(null == d ? void 0 : d.len)
                          ) ||
                          u
                        ) {
                          var h = a.fragments[0].start,
                            c = l.end;
                          if (u && r) {
                            var f = this.getLoadPosition();
                            (c = f),
                              a.PTSKnown &&
                                f < h &&
                                (l.end > h || l.nextStart) &&
                                (this.log(
                                  "Alt audio track ahead of main track, seek to start of alt audio track"
                                ),
                                (r.currentTime = h + 0.05));
                          }
                          if (
                            !(d && c > d.end + a.targetduration) &&
                            ((d && d.len) || !l.len)
                          ) {
                            var g = this.getNextFragment(c, a);
                            g
                              ? this.loadFragment(g, a, c)
                              : (this.bufferFlushed = !0);
                          }
                        }
                      }
                    }
                  }
                }),
                (n.getMaxBufferLength = function (e) {
                  var r = t.prototype.getMaxBufferLength.call(this);
                  return e ? Math.max(r, e) : r;
                }),
                (n.onMediaDetaching = function () {
                  (this.videoBuffer = null),
                    t.prototype.onMediaDetaching.call(this);
                }),
                (n.onAudioTracksUpdated = function (t, e) {
                  var r = e.audioTracks;
                  this.resetTransmuxer(),
                    (this.levels = r.map(function (t) {
                      return new ut(t);
                    }));
                }),
                (n.onAudioTrackSwitching = function (t, e) {
                  var r = !!e.url;
                  this.trackId = e.id;
                  var i = this.fragCurrent;
                  i && i.abortRequests(),
                    (this.fragCurrent = null),
                    this.clearWaitingFragment(),
                    r ? this.setInterval(100) : this.resetTransmuxer(),
                    r
                      ? ((this.audioSwitch = !0), (this.state = te))
                      : (this.state = Zt),
                    this.tick();
                }),
                (n.onManifestLoading = function () {
                  (this.mainDetails = null),
                    this.fragmentTracker.removeAllFragments(),
                    (this.startPosition = this.lastCurrentTime = 0),
                    (this.bufferFlushed = !1);
                }),
                (n.onLevelLoaded = function (t, e) {
                  (this.mainDetails = e.details),
                    null !== this.cachedTrackLoadedData &&
                      (this.hls.trigger(
                        s.Events.AUDIO_TRACK_LOADED,
                        this.cachedTrackLoadedData
                      ),
                      (this.cachedTrackLoadedData = null));
                }),
                (n.onAudioTrackLoaded = function (t, e) {
                  var r;
                  if (null != this.mainDetails) {
                    var i = this.levels,
                      n = e.details,
                      a = e.id;
                    if (i) {
                      this.log(
                        "Track " +
                          a +
                          " loaded [" +
                          n.startSN +
                          "," +
                          n.endSN +
                          "],duration:" +
                          n.totalduration
                      );
                      var s = i[a],
                        o = 0;
                      if (
                        n.live ||
                        (null !== (r = s.details) && void 0 !== r && r.live)
                      ) {
                        var l = this.mainDetails;
                        if (
                          (n.fragments[0] || (n.deltaUpdateFailed = !0),
                          n.deltaUpdateFailed || !l)
                        )
                          return;
                        !s.details &&
                        n.hasProgramDateTime &&
                        l.hasProgramDateTime
                          ? (Vt(n, l), (o = n.fragments[0].start))
                          : (o = this.alignPlaylists(n, s.details));
                      }
                      (s.details = n),
                        (this.levelLastLoaded = a),
                        this.startFragRequested ||
                          (!this.mainDetails && n.live) ||
                          this.setStartPosition(s.details, o),
                        this.state !== ne ||
                          this.waitForCdnTuneIn(n) ||
                          (this.state = te),
                        this.tick();
                    } else
                      this.warn(
                        "Audio tracks were reset while loading level " + a
                      );
                  } else this.cachedTrackLoadedData = e;
                }),
                (n._handleFragmentLoadProgress = function (t) {
                  var e,
                    r = t.frag,
                    i = t.part,
                    n = t.payload,
                    a = this.config,
                    s = this.trackId,
                    o = this.levels;
                  if (o) {
                    var l = o[s],
                      u = l.details,
                      d = a.defaultAudioCodec || l.audioCodec || "mp4a.40.2",
                      h = this.transmuxer;
                    h ||
                      (h = this.transmuxer =
                        new Ae(
                          this.hls,
                          V.PlaylistLevelType.AUDIO,
                          this._handleTransmuxComplete.bind(this),
                          this._handleTransmuxerFlush.bind(this)
                        ));
                    var c = this.initPTS[r.cc],
                      f =
                        null === (e = r.initSegment) || void 0 === e
                          ? void 0
                          : e.data;
                    if (void 0 !== c) {
                      var g = i ? i.index : -1,
                        v = -1 !== g,
                        p = new Gt(
                          r.level,
                          r.sn,
                          r.stats.chunkCount,
                          n.byteLength,
                          g,
                          v
                        );
                      h.push(n, f, d, "", r, i, u.totalduration, !1, p, c);
                    } else
                      this.log(
                        "Unknown video PTS for cc " +
                          r.cc +
                          ", waiting for video PTS before demuxing audio frag " +
                          r.sn +
                          " of [" +
                          u.startSN +
                          " ," +
                          u.endSN +
                          "],track " +
                          s
                      ),
                        (this.waitingData = this.waitingData || {
                          frag: r,
                          part: i,
                          cache: new Oe(),
                          complete: !1,
                        }).cache.push(new Uint8Array(n)),
                        (this.waitingVideoCC = this.videoTrackCC),
                        (this.state = ue);
                  } else
                    this.warn(
                      "Audio tracks were reset while fragment load was in progress. Fragment " +
                        r.sn +
                        " of level " +
                        r.level +
                        " will not be buffered"
                    );
                }),
                (n._handleFragmentLoadComplete = function (e) {
                  this.waitingData
                    ? (this.waitingData.complete = !0)
                    : t.prototype._handleFragmentLoadComplete.call(this, e);
                }),
                (n.onBufferReset = function () {
                  (this.mediaBuffer = this.videoBuffer = null),
                    (this.loadedmetadata = !1);
                }),
                (n.onBufferCreated = function (t, e) {
                  var r = e.tracks.audio;
                  r && (this.mediaBuffer = r.buffer || null),
                    e.tracks.video &&
                      (this.videoBuffer = e.tracks.video.buffer || null);
                }),
                (n.onFragBuffered = function (t, e) {
                  var r,
                    i = e.frag,
                    n = e.part;
                  i.type === V.PlaylistLevelType.AUDIO
                    ? this.fragContextChanged(i)
                      ? this.warn(
                          "Fragment " +
                            i.sn +
                            (n ? " p: " + n.index : "") +
                            " of level " +
                            i.level +
                            " finished buffering, but was aborted. state: " +
                            this.state +
                            ", audioSwitch: " +
                            this.audioSwitch
                        )
                      : ("initSegment" !== i.sn &&
                          ((this.fragPrevious = i),
                          this.audioSwitch &&
                            ((this.audioSwitch = !1),
                            this.hls.trigger(s.Events.AUDIO_TRACK_SWITCHED, {
                              id: this.trackId,
                            }))),
                        this.fragBufferedComplete(i, n))
                    : this.loadedmetadata ||
                      i.type !== V.PlaylistLevelType.MAIN ||
                      (null !== (r = this.videoBuffer || this.media) &&
                        void 0 !== r &&
                        r.buffered.length &&
                        (this.loadedmetadata = !0));
                }),
                (n.onError = function (e, r) {
                  if (r.type !== o.ErrorTypes.KEY_SYSTEM_ERROR)
                    switch (r.details) {
                      case o.ErrorDetails.FRAG_LOAD_ERROR:
                      case o.ErrorDetails.FRAG_LOAD_TIMEOUT:
                      case o.ErrorDetails.FRAG_PARSING_ERROR:
                      case o.ErrorDetails.KEY_LOAD_ERROR:
                      case o.ErrorDetails.KEY_LOAD_TIMEOUT:
                        this.onFragmentOrKeyLoadError(
                          V.PlaylistLevelType.AUDIO,
                          r
                        );
                        break;
                      case o.ErrorDetails.AUDIO_TRACK_LOAD_ERROR:
                      case o.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:
                        this.state !== le &&
                          this.state !== Zt &&
                          ((this.state = r.fatal ? le : te),
                          this.warn(
                            r.details +
                              " while loading frag, switching to " +
                              this.state +
                              " state"
                          ));
                        break;
                      case o.ErrorDetails.BUFFER_FULL_ERROR:
                        if (
                          "audio" === r.parent &&
                          (this.state === ae || this.state === se)
                        ) {
                          var i = !0,
                            n = this.getFwdBufferInfo(
                              this.mediaBuffer,
                              V.PlaylistLevelType.AUDIO
                            );
                          n &&
                            n.len > 0.5 &&
                            (i = !this.reduceMaxBufferLength(n.len)),
                            i &&
                              (this.warn(
                                "Buffer full error also media.currentTime is not buffered, flush audio buffer"
                              ),
                              (this.fragCurrent = null),
                              t.prototype.flushMainBuffer.call(
                                this,
                                0,
                                Number.POSITIVE_INFINITY,
                                "audio"
                              )),
                            this.resetLoadingState();
                        }
                    }
                  else
                    this.onFragmentOrKeyLoadError(V.PlaylistLevelType.AUDIO, r);
                }),
                (n.onBufferFlushed = function (t, e) {
                  e.type === v.ElementaryStreamTypes.AUDIO &&
                    ((this.bufferFlushed = !0),
                    this.state === oe && (this.state = te));
                }),
                (n._handleTransmuxComplete = function (t) {
                  var e,
                    r = "audio",
                    i = this.hls,
                    n = t.remuxResult,
                    a = t.chunkMeta,
                    o = this.getCurrentContext(a);
                  if (!o)
                    return (
                      this.warn(
                        "The loading context changed while buffering fragment " +
                          a.sn +
                          " of level " +
                          a.level +
                          ". This chunk will not be buffered."
                      ),
                      void this.resetStartWhenNotLoaded(a.level)
                    );
                  var l = o.frag,
                    u = o.part,
                    d = o.level.details,
                    h = n.audio,
                    c = n.text,
                    f = n.id3,
                    g = n.initSegment;
                  if (!this.fragContextChanged(l) && d) {
                    if (
                      ((this.state = ae),
                      this.audioSwitch && h && this.completeAudioSwitch(),
                      null != g &&
                        g.tracks &&
                        (this._bufferInitSegment(g.tracks, l, a),
                        i.trigger(s.Events.FRAG_PARSING_INIT_SEGMENT, {
                          frag: l,
                          id: r,
                          tracks: g.tracks,
                        })),
                      h)
                    ) {
                      var p = h.startPTS,
                        m = h.endPTS,
                        y = h.startDTS,
                        E = h.endDTS;
                      u &&
                        (u.elementaryStreams[v.ElementaryStreamTypes.AUDIO] = {
                          startPTS: p,
                          endPTS: m,
                          startDTS: y,
                          endDTS: E,
                        }),
                        l.setElementaryStreamInfo(
                          v.ElementaryStreamTypes.AUDIO,
                          p,
                          m,
                          y,
                          E
                        ),
                        this.bufferFragmentData(h, l, u, a);
                    }
                    if (
                      null != f &&
                      null !== (e = f.samples) &&
                      void 0 !== e &&
                      e.length
                    ) {
                      var T = xe({ id: r, frag: l, details: d }, f);
                      i.trigger(s.Events.FRAG_PARSING_METADATA, T);
                    }
                    if (c) {
                      var S = xe({ id: r, frag: l, details: d }, c);
                      i.trigger(s.Events.FRAG_PARSING_USERDATA, S);
                    }
                  }
                }),
                (n._bufferInitSegment = function (t, e, r) {
                  if (this.state === ae) {
                    t.video && delete t.video;
                    var i = t.audio;
                    if (i) {
                      (i.levelCodec = i.codec),
                        (i.id = "audio"),
                        this.log(
                          "Init audio buffer, container:" +
                            i.container +
                            ", codecs[parsed]=[" +
                            i.codec +
                            "]"
                        ),
                        this.hls.trigger(s.Events.BUFFER_CODECS, t);
                      var n = i.initSegment;
                      if (null != n && n.byteLength) {
                        var a = {
                          type: "audio",
                          frag: e,
                          part: null,
                          chunkMeta: r,
                          parent: e.type,
                          data: n,
                        };
                        this.hls.trigger(s.Events.BUFFER_APPENDING, a);
                      }
                      this.tick();
                    }
                  }
                }),
                (n.loadFragment = function (e, r, i) {
                  var n = this.fragmentTracker.getState(e);
                  (this.fragCurrent = e),
                    (this.audioSwitch ||
                      n === St.NOT_LOADED ||
                      n === St.PARTIAL) &&
                      ("initSegment" === e.sn
                        ? this._loadInitSegment(e, r)
                        : r.live && !(0, a.isFiniteNumber)(this.initPTS[e.cc])
                        ? (this.log(
                            "Waiting for video PTS in continuity counter " +
                              e.cc +
                              " of live stream before loading audio fragment " +
                              e.sn +
                              " of level " +
                              this.trackId
                          ),
                          (this.state = ue))
                        : ((this.startFragRequested = !0),
                          t.prototype.loadFragment.call(this, e, r, i)));
                }),
                (n.completeAudioSwitch = function () {
                  var e = this.hls,
                    r = this.media,
                    i = this.trackId;
                  r &&
                    (this.log("Switching audio track : flushing all audio"),
                    t.prototype.flushMainBuffer.call(
                      this,
                      0,
                      Number.POSITIVE_INFINITY,
                      "audio"
                    )),
                    (this.audioSwitch = !1),
                    e.trigger(s.Events.AUDIO_TRACK_SWITCHED, { id: i });
                }),
                i
              );
            })(he);
            const Ne = Me;
            function Ue(t, e) {
              for (var r = 0; r < e.length; r++) {
                var i = e[r];
                (i.enumerable = i.enumerable || !1),
                  (i.configurable = !0),
                  "value" in i && (i.writable = !0),
                  Object.defineProperty(
                    t,
                    (void 0,
                    "symbol" ==
                    typeof (n = (function (t, e) {
                      if ("object" != typeof t || null === t) return t;
                      var r = t[Symbol.toPrimitive];
                      if (void 0 !== r) {
                        var i = r.call(t, e);
                        if ("object" != typeof i) return i;
                        throw new TypeError(
                          "@@toPrimitive must return a primitive value."
                        );
                      }
                      return String(t);
                    })(i.key, "string"))
                      ? n
                      : String(n)),
                    i
                  );
              }
              var n;
            }
            function Be(t, e) {
              return (
                (Be = Object.setPrototypeOf
                  ? Object.setPrototypeOf.bind()
                  : function (t, e) {
                      return (t.__proto__ = e), t;
                    }),
                Be(t, e)
              );
            }
            const Ge = (function (t) {
              var e, r;
              function i(e) {
                var r;
                return (
                  ((r =
                    t.call(this, e, "[audio-track-controller]") ||
                    this).tracks = []),
                  (r.groupId = null),
                  (r.tracksInGroup = []),
                  (r.trackId = -1),
                  (r.trackName = ""),
                  (r.selectDefaultTrack = !0),
                  r.registerListeners(),
                  r
                );
              }
              (r = t),
                ((e = i).prototype = Object.create(r.prototype)),
                (e.prototype.constructor = e),
                Be(e, r);
              var n,
                a,
                l = i.prototype;
              return (
                (l.registerListeners = function () {
                  var t = this.hls;
                  t.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this),
                    t.on(s.Events.MANIFEST_PARSED, this.onManifestParsed, this),
                    t.on(s.Events.LEVEL_LOADING, this.onLevelLoading, this),
                    t.on(s.Events.LEVEL_SWITCHING, this.onLevelSwitching, this),
                    t.on(
                      s.Events.AUDIO_TRACK_LOADED,
                      this.onAudioTrackLoaded,
                      this
                    ),
                    t.on(s.Events.ERROR, this.onError, this);
                }),
                (l.unregisterListeners = function () {
                  var t = this.hls;
                  t.off(
                    s.Events.MANIFEST_LOADING,
                    this.onManifestLoading,
                    this
                  ),
                    t.off(
                      s.Events.MANIFEST_PARSED,
                      this.onManifestParsed,
                      this
                    ),
                    t.off(s.Events.LEVEL_LOADING, this.onLevelLoading, this),
                    t.off(
                      s.Events.LEVEL_SWITCHING,
                      this.onLevelSwitching,
                      this
                    ),
                    t.off(
                      s.Events.AUDIO_TRACK_LOADED,
                      this.onAudioTrackLoaded,
                      this
                    ),
                    t.off(s.Events.ERROR, this.onError, this);
                }),
                (l.destroy = function () {
                  this.unregisterListeners(),
                    (this.tracks.length = 0),
                    (this.tracksInGroup.length = 0),
                    t.prototype.destroy.call(this);
                }),
                (l.onManifestLoading = function () {
                  (this.tracks = []),
                    (this.groupId = null),
                    (this.tracksInGroup = []),
                    (this.trackId = -1),
                    (this.trackName = ""),
                    (this.selectDefaultTrack = !0);
                }),
                (l.onManifestParsed = function (t, e) {
                  this.tracks = e.audioTracks || [];
                }),
                (l.onAudioTrackLoaded = function (t, e) {
                  var r = e.id,
                    i = e.details,
                    n = this.tracksInGroup[r];
                  if (n) {
                    var a = n.details;
                    (n.details = e.details),
                      this.log(
                        "audioTrack " +
                          r +
                          " loaded [" +
                          i.startSN +
                          "-" +
                          i.endSN +
                          "]"
                      ),
                      r === this.trackId &&
                        ((this.retryCount = 0), this.playlistLoaded(r, e, a));
                  } else this.warn("Invalid audio track id " + r);
                }),
                (l.onLevelLoading = function (t, e) {
                  this.switchLevel(e.level);
                }),
                (l.onLevelSwitching = function (t, e) {
                  this.switchLevel(e.level);
                }),
                (l.switchLevel = function (t) {
                  var e = this.hls.levels[t];
                  if (null != e && e.audioGroupIds) {
                    var r = e.audioGroupIds[e.urlId];
                    if (this.groupId !== r) {
                      this.groupId = r;
                      var i = this.tracks.filter(function (t) {
                        return !r || t.groupId === r;
                      });
                      this.selectDefaultTrack &&
                        !i.some(function (t) {
                          return t.default;
                        }) &&
                        (this.selectDefaultTrack = !1),
                        (this.tracksInGroup = i);
                      var n = { audioTracks: i };
                      this.log(
                        "Updating audio tracks, " +
                          i.length +
                          ' track(s) found in "' +
                          r +
                          '" group-id'
                      ),
                        this.hls.trigger(s.Events.AUDIO_TRACKS_UPDATED, n),
                        this.selectInitialTrack();
                    }
                  }
                }),
                (l.onError = function (e, r) {
                  t.prototype.onError.call(this, e, r),
                    !r.fatal &&
                      r.context &&
                      r.context.type === V.PlaylistContextType.AUDIO_TRACK &&
                      r.context.id === this.trackId &&
                      r.context.groupId === this.groupId &&
                      this.retryLoadingOrFail(r);
                }),
                (l.setAudioTrack = function (t) {
                  var e = this.tracksInGroup;
                  if (t < 0 || t >= e.length)
                    this.warn("Invalid id passed to audio-track controller");
                  else {
                    this.clearTimer();
                    var r = e[this.trackId];
                    this.log("Now switching to audio-track index " + t);
                    var i = e[t],
                      n = i.id,
                      a = i.groupId,
                      o = void 0 === a ? "" : a,
                      l = i.name,
                      u = i.type,
                      d = i.url;
                    if (
                      ((this.trackId = t),
                      (this.trackName = l),
                      (this.selectDefaultTrack = !1),
                      this.hls.trigger(s.Events.AUDIO_TRACK_SWITCHING, {
                        id: n,
                        groupId: o,
                        name: l,
                        type: u,
                        url: d,
                      }),
                      !i.details || i.details.live)
                    ) {
                      var h = this.switchParams(
                        i.url,
                        null == r ? void 0 : r.details
                      );
                      this.loadPlaylist(h);
                    }
                  }
                }),
                (l.selectInitialTrack = function () {
                  this.tracksInGroup;
                  var t = this.trackName,
                    e = this.findTrackId(t) || this.findTrackId();
                  -1 !== e
                    ? this.setAudioTrack(e)
                    : (this.warn(
                        "No track found for running audio group-ID: " +
                          this.groupId
                      ),
                      this.hls.trigger(s.Events.ERROR, {
                        type: o.ErrorTypes.MEDIA_ERROR,
                        details: o.ErrorDetails.AUDIO_TRACK_LOAD_ERROR,
                        fatal: !0,
                      }));
                }),
                (l.findTrackId = function (t) {
                  for (var e = this.tracksInGroup, r = 0; r < e.length; r++) {
                    var i = e[r];
                    if (
                      (!this.selectDefaultTrack || i.default) &&
                      (!t || t === i.name)
                    )
                      return i.id;
                  }
                  return -1;
                }),
                (l.loadPlaylist = function (e) {
                  t.prototype.loadPlaylist.call(this);
                  var r = this.tracksInGroup[this.trackId];
                  if (this.shouldLoadTrack(r)) {
                    var i = r.id,
                      n = r.groupId,
                      a = r.url;
                    if (e)
                      try {
                        a = e.addDirectives(a);
                      } catch (t) {
                        this.warn(
                          "Could not construct new URL with HLS Delivery Directives: " +
                            t
                        );
                      }
                    this.log("loading audio-track playlist for id: " + i),
                      this.clearTimer(),
                      this.hls.trigger(s.Events.AUDIO_TRACK_LOADING, {
                        url: a,
                        id: i,
                        groupId: n,
                        deliveryDirectives: e || null,
                      });
                  }
                }),
                (n = i),
                (a = [
                  {
                    key: "audioTracks",
                    get: function () {
                      return this.tracksInGroup;
                    },
                  },
                  {
                    key: "audioTrack",
                    get: function () {
                      return this.trackId;
                    },
                    set: function (t) {
                      (this.selectDefaultTrack = !1), this.setAudioTrack(t);
                    },
                  },
                ]) && Ue(n.prototype, a),
                Object.defineProperty(n, "prototype", { writable: !1 }),
                i
              );
            })(mt);
            function Ke(t, e) {
              for (var r = 0; r < e.length; r++) {
                var i = e[r];
                (i.enumerable = i.enumerable || !1),
                  (i.configurable = !0),
                  "value" in i && (i.writable = !0),
                  Object.defineProperty(
                    t,
                    (void 0,
                    "symbol" ==
                    typeof (n = (function (t, e) {
                      if ("object" != typeof t || null === t) return t;
                      var r = t[Symbol.toPrimitive];
                      if (void 0 !== r) {
                        var i = r.call(t, e);
                        if ("object" != typeof i) return i;
                        throw new TypeError(
                          "@@toPrimitive must return a primitive value."
                        );
                      }
                      return String(t);
                    })(i.key, "string"))
                      ? n
                      : String(n)),
                    i
                  );
              }
              var n;
            }
            function He(t, e) {
              return (
                (He = Object.setPrototypeOf
                  ? Object.setPrototypeOf.bind()
                  : function (t, e) {
                      return (t.__proto__ = e), t;
                    }),
                He(t, e)
              );
            }
            var je = (function (t) {
                var e, r;
                function i(e, r, i) {
                  var n;
                  return (
                    ((n =
                      t.call(this, e, r, i, "[subtitle-stream-controller]") ||
                      this).levels = []),
                    (n.currentTrackId = -1),
                    (n.tracksBuffered = []),
                    (n.mainDetails = null),
                    n._registerListeners(),
                    n
                  );
                }
                (r = t),
                  ((e = i).prototype = Object.create(r.prototype)),
                  (e.prototype.constructor = e),
                  He(e, r);
                var n,
                  a,
                  o = i.prototype;
                return (
                  (o.onHandlerDestroying = function () {
                    this._unregisterListeners(), (this.mainDetails = null);
                  }),
                  (o._registerListeners = function () {
                    var t = this.hls;
                    t.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                      t.on(
                        s.Events.MEDIA_DETACHING,
                        this.onMediaDetaching,
                        this
                      ),
                      t.on(
                        s.Events.MANIFEST_LOADING,
                        this.onManifestLoading,
                        this
                      ),
                      t.on(s.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                      t.on(s.Events.ERROR, this.onError, this),
                      t.on(
                        s.Events.SUBTITLE_TRACKS_UPDATED,
                        this.onSubtitleTracksUpdated,
                        this
                      ),
                      t.on(
                        s.Events.SUBTITLE_TRACK_SWITCH,
                        this.onSubtitleTrackSwitch,
                        this
                      ),
                      t.on(
                        s.Events.SUBTITLE_TRACK_LOADED,
                        this.onSubtitleTrackLoaded,
                        this
                      ),
                      t.on(
                        s.Events.SUBTITLE_FRAG_PROCESSED,
                        this.onSubtitleFragProcessed,
                        this
                      ),
                      t.on(
                        s.Events.BUFFER_FLUSHING,
                        this.onBufferFlushing,
                        this
                      ),
                      t.on(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
                  }),
                  (o._unregisterListeners = function () {
                    var t = this.hls;
                    t.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                      t.off(
                        s.Events.MEDIA_DETACHING,
                        this.onMediaDetaching,
                        this
                      ),
                      t.off(
                        s.Events.MANIFEST_LOADING,
                        this.onManifestLoading,
                        this
                      ),
                      t.off(s.Events.LEVEL_LOADED, this.onLevelLoaded, this),
                      t.off(s.Events.ERROR, this.onError, this),
                      t.off(
                        s.Events.SUBTITLE_TRACKS_UPDATED,
                        this.onSubtitleTracksUpdated,
                        this
                      ),
                      t.off(
                        s.Events.SUBTITLE_TRACK_SWITCH,
                        this.onSubtitleTrackSwitch,
                        this
                      ),
                      t.off(
                        s.Events.SUBTITLE_TRACK_LOADED,
                        this.onSubtitleTrackLoaded,
                        this
                      ),
                      t.off(
                        s.Events.SUBTITLE_FRAG_PROCESSED,
                        this.onSubtitleFragProcessed,
                        this
                      ),
                      t.off(
                        s.Events.BUFFER_FLUSHING,
                        this.onBufferFlushing,
                        this
                      ),
                      t.off(s.Events.FRAG_BUFFERED, this.onFragBuffered, this);
                  }),
                  (o.startLoad = function (t) {
                    this.stopLoad(),
                      (this.state = te),
                      this.setInterval(500),
                      (this.nextLoadPosition =
                        this.startPosition =
                        this.lastCurrentTime =
                          t),
                      this.tick();
                  }),
                  (o.onManifestLoading = function () {
                    (this.mainDetails = null),
                      this.fragmentTracker.removeAllFragments();
                  }),
                  (o.onLevelLoaded = function (t, e) {
                    this.mainDetails = e.details;
                  }),
                  (o.onSubtitleFragProcessed = function (t, e) {
                    var r = e.frag,
                      i = e.success;
                    if (((this.fragPrevious = r), (this.state = te), i)) {
                      var n = this.tracksBuffered[this.currentTrackId];
                      if (n) {
                        for (var a, s = r.start, o = 0; o < n.length; o++)
                          if (s >= n[o].start && s <= n[o].end) {
                            a = n[o];
                            break;
                          }
                        var l = r.start + r.duration;
                        a
                          ? (a.end = l)
                          : ((a = { start: s, end: l }), n.push(a)),
                          this.fragmentTracker.fragBuffered(r);
                      }
                    }
                  }),
                  (o.onBufferFlushing = function (t, e) {
                    var r = e.startOffset,
                      i = e.endOffset;
                    if (0 === r && i !== Number.POSITIVE_INFINITY) {
                      var n = this.currentTrackId,
                        a = this.levels;
                      if (!a.length || !a[n] || !a[n].details) return;
                      var s = i - a[n].details.targetduration;
                      if (s <= 0) return;
                      (e.endOffsetSubtitles = Math.max(0, s)),
                        this.tracksBuffered.forEach(function (t) {
                          for (var e = 0; e < t.length; )
                            if (t[e].end <= s) t.shift();
                            else {
                              if (!(t[e].start < s)) break;
                              (t[e].start = s), e++;
                            }
                        }),
                        this.fragmentTracker.removeFragmentsInRange(
                          r,
                          s,
                          V.PlaylistLevelType.SUBTITLE
                        );
                    }
                  }),
                  (o.onFragBuffered = function (t, e) {
                    var r;
                    this.loadedmetadata ||
                      e.frag.type !== V.PlaylistLevelType.MAIN ||
                      (null !== (r = this.media) &&
                        void 0 !== r &&
                        r.buffered.length &&
                        (this.loadedmetadata = !0));
                  }),
                  (o.onError = function (t, e) {
                    var r = e.frag;
                    r &&
                      r.type === V.PlaylistLevelType.SUBTITLE &&
                      (this.fragCurrent && this.fragCurrent.abortRequests(),
                      (this.state = te));
                  }),
                  (o.onSubtitleTracksUpdated = function (t, e) {
                    var r = this,
                      i = e.subtitleTracks;
                    (this.tracksBuffered = []),
                      (this.levels = i.map(function (t) {
                        return new ut(t);
                      })),
                      this.fragmentTracker.removeAllFragments(),
                      (this.fragPrevious = null),
                      this.levels.forEach(function (t) {
                        r.tracksBuffered[t.id] = [];
                      }),
                      (this.mediaBuffer = null);
                  }),
                  (o.onSubtitleTrackSwitch = function (t, e) {
                    if (
                      ((this.currentTrackId = e.id),
                      this.levels.length && -1 !== this.currentTrackId)
                    ) {
                      var r = this.levels[this.currentTrackId];
                      null != r && r.details
                        ? (this.mediaBuffer = this.mediaBufferTimeRanges)
                        : (this.mediaBuffer = null),
                        r && this.setInterval(500);
                    } else this.clearInterval();
                  }),
                  (o.onSubtitleTrackLoaded = function (t, e) {
                    var r,
                      i = e.details,
                      n = e.id,
                      a = this.currentTrackId,
                      s = this.levels;
                    if (s.length) {
                      var o = s[a];
                      if (!(n >= s.length || n !== a) && o) {
                        this.mediaBuffer = this.mediaBufferTimeRanges;
                        var l = 0;
                        if (
                          i.live ||
                          (null !== (r = o.details) && void 0 !== r && r.live)
                        ) {
                          var u = this.mainDetails;
                          if (i.deltaUpdateFailed || !u) return;
                          var d = u.fragments[0];
                          o.details
                            ? 0 === (l = this.alignPlaylists(i, o.details)) &&
                              d &&
                              pt(i, (l = d.start))
                            : i.hasProgramDateTime && u.hasProgramDateTime
                            ? (Vt(i, u), (l = i.fragments[0].start))
                            : d && pt(i, (l = d.start));
                        }
                        (o.details = i),
                          (this.levelLastLoaded = n),
                          this.startFragRequested ||
                            (!this.mainDetails && i.live) ||
                            this.setStartPosition(o.details, l),
                          this.tick(),
                          i.live &&
                            !this.fragCurrent &&
                            this.media &&
                            this.state === te &&
                            (Wt(null, i.fragments, this.media.currentTime, 0) ||
                              (this.warn(
                                "Subtitle playlist not aligned with playback"
                              ),
                              (o.details = void 0)));
                      }
                    }
                  }),
                  (o._handleFragmentLoadComplete = function (t) {
                    var e = this,
                      r = t.frag,
                      i = t.payload,
                      n = r.decryptdata,
                      a = this.hls;
                    if (
                      !this.fragContextChanged(r) &&
                      i &&
                      i.byteLength > 0 &&
                      n &&
                      n.key &&
                      n.iv &&
                      "AES-128" === n.method
                    ) {
                      var o = performance.now();
                      this.decrypter
                        .decrypt(new Uint8Array(i), n.key.buffer, n.iv.buffer)
                        .then(function (t) {
                          var e = performance.now();
                          a.trigger(s.Events.FRAG_DECRYPTED, {
                            frag: r,
                            payload: t,
                            stats: { tstart: o, tdecrypt: e },
                          });
                        })
                        .catch(function (t) {
                          e.warn(t.name + ": " + t.message), (e.state = te);
                        });
                    }
                  }),
                  (o.doTick = function () {
                    if (this.media) {
                      if (this.state === te) {
                        var t = this.currentTrackId,
                          e = this.levels;
                        if (!e.length || !e[t] || !e[t].details) return;
                        var r = e[t].details,
                          i = r.targetduration,
                          n = this.config,
                          a = this.getLoadPosition(),
                          s = Bt.bufferedInfo(
                            this.tracksBuffered[this.currentTrackId] || [],
                            a - i,
                            n.maxBufferHole
                          ),
                          o = s.end,
                          l = s.len,
                          u = this.getFwdBufferInfo(
                            this.media,
                            V.PlaylistLevelType.MAIN
                          );
                        if (
                          l >
                          this.getMaxBufferLength(null == u ? void 0 : u.len) +
                            i
                        )
                          return;
                        var d = r.fragments,
                          h = d.length,
                          c = r.edge,
                          f = null,
                          g = this.fragPrevious;
                        if (o < c) {
                          var v = n.maxFragLookUpTolerance;
                          !(f = Wt(g, d, Math.max(d[0].start, o), v)) &&
                            g &&
                            g.start < d[0].start &&
                            (f = d[0]);
                        } else f = d[h - 1];
                        if (!f) return;
                        (f = this.mapToInitFragWhenRequired(f)),
                          this.fragmentTracker.getState(f) === St.NOT_LOADED &&
                            this.loadFragment(f, r, o);
                      }
                    } else this.state = te;
                  }),
                  (o.getMaxBufferLength = function (e) {
                    var r = t.prototype.getMaxBufferLength.call(this);
                    return e ? Math.max(r, e) : r;
                  }),
                  (o.loadFragment = function (e, r, i) {
                    (this.fragCurrent = e),
                      "initSegment" === e.sn
                        ? this._loadInitSegment(e, r)
                        : ((this.startFragRequested = !0),
                          t.prototype.loadFragment.call(this, e, r, i));
                  }),
                  (n = i),
                  (a = [
                    {
                      key: "mediaBufferTimeRanges",
                      get: function () {
                        return new Ve(
                          this.tracksBuffered[this.currentTrackId] || []
                        );
                      },
                    },
                  ]) && Ke(n.prototype, a),
                  Object.defineProperty(n, "prototype", { writable: !1 }),
                  i
                );
              })(he),
              Ve = function (t) {
                this.buffered = void 0;
                var e = function (e, r, i) {
                  if ((r >>>= 0) > i - 1)
                    throw new DOMException(
                      "Failed to execute '" +
                        e +
                        "' on 'TimeRanges': The index provided (" +
                        r +
                        ") is greater than the maximum bound (" +
                        i +
                        ")"
                    );
                  return t[r][e];
                };
                this.buffered = {
                  get length() {
                    return t.length;
                  },
                  end: function (r) {
                    return e("end", r, t.length);
                  },
                  start: function (r) {
                    return e("start", r, t.length);
                  },
                };
              };
            function Ye(t, e) {
              for (var r = 0; r < e.length; r++) {
                var i = e[r];
                (i.enumerable = i.enumerable || !1),
                  (i.configurable = !0),
                  "value" in i && (i.writable = !0),
                  Object.defineProperty(
                    t,
                    (void 0,
                    "symbol" ==
                    typeof (n = (function (t, e) {
                      if ("object" != typeof t || null === t) return t;
                      var r = t[Symbol.toPrimitive];
                      if (void 0 !== r) {
                        var i = r.call(t, e);
                        if ("object" != typeof i) return i;
                        throw new TypeError(
                          "@@toPrimitive must return a primitive value."
                        );
                      }
                      return String(t);
                    })(i.key, "string"))
                      ? n
                      : String(n)),
                    i
                  );
              }
              var n;
            }
            function We(t, e) {
              return (
                (We = Object.setPrototypeOf
                  ? Object.setPrototypeOf.bind()
                  : function (t, e) {
                      return (t.__proto__ = e), t;
                    }),
                We(t, e)
              );
            }
            function qe(t) {
              for (var e = [], r = 0; r < t.length; r++) {
                var i = t[r];
                ("subtitles" !== i.kind && "captions" !== i.kind) ||
                  !i.label ||
                  e.push(t[r]);
              }
              return e;
            }
            const Xe = (function (t) {
              var e, r;
              function i(e) {
                var r;
                return (
                  ((r =
                    t.call(this, e, "[subtitle-track-controller]") ||
                    this).media = null),
                  (r.tracks = []),
                  (r.groupId = null),
                  (r.tracksInGroup = []),
                  (r.trackId = -1),
                  (r.selectDefaultTrack = !0),
                  (r.queuedDefaultTrack = -1),
                  (r.trackChangeListener = function () {
                    return r.onTextTracksChanged();
                  }),
                  (r.asyncPollTrackChange = function () {
                    return r.pollTrackChange(0);
                  }),
                  (r.useTextTrackPolling = !1),
                  (r.subtitlePollingInterval = -1),
                  (r._subtitleDisplay = !0),
                  r.registerListeners(),
                  r
                );
              }
              (r = t),
                ((e = i).prototype = Object.create(r.prototype)),
                (e.prototype.constructor = e),
                We(e, r);
              var n,
                a,
                o = i.prototype;
              return (
                (o.destroy = function () {
                  this.unregisterListeners(),
                    (this.tracks.length = 0),
                    (this.tracksInGroup.length = 0),
                    (this.trackChangeListener = this.asyncPollTrackChange =
                      null),
                    t.prototype.destroy.call(this);
                }),
                (o.registerListeners = function () {
                  var t = this.hls;
                  t.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                    t.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this),
                    t.on(
                      s.Events.MANIFEST_LOADING,
                      this.onManifestLoading,
                      this
                    ),
                    t.on(s.Events.MANIFEST_PARSED, this.onManifestParsed, this),
                    t.on(s.Events.LEVEL_LOADING, this.onLevelLoading, this),
                    t.on(s.Events.LEVEL_SWITCHING, this.onLevelSwitching, this),
                    t.on(
                      s.Events.SUBTITLE_TRACK_LOADED,
                      this.onSubtitleTrackLoaded,
                      this
                    ),
                    t.on(s.Events.ERROR, this.onError, this);
                }),
                (o.unregisterListeners = function () {
                  var t = this.hls;
                  t.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                    t.off(
                      s.Events.MEDIA_DETACHING,
                      this.onMediaDetaching,
                      this
                    ),
                    t.off(
                      s.Events.MANIFEST_LOADING,
                      this.onManifestLoading,
                      this
                    ),
                    t.off(
                      s.Events.MANIFEST_PARSED,
                      this.onManifestParsed,
                      this
                    ),
                    t.off(s.Events.LEVEL_LOADING, this.onLevelLoading, this),
                    t.off(
                      s.Events.LEVEL_SWITCHING,
                      this.onLevelSwitching,
                      this
                    ),
                    t.off(
                      s.Events.SUBTITLE_TRACK_LOADED,
                      this.onSubtitleTrackLoaded,
                      this
                    ),
                    t.off(s.Events.ERROR, this.onError, this);
                }),
                (o.onMediaAttached = function (t, e) {
                  (this.media = e.media),
                    this.media &&
                      (this.queuedDefaultTrack > -1 &&
                        ((this.subtitleTrack = this.queuedDefaultTrack),
                        (this.queuedDefaultTrack = -1)),
                      (this.useTextTrackPolling = !(
                        this.media.textTracks &&
                        "onchange" in this.media.textTracks
                      )),
                      this.useTextTrackPolling
                        ? this.pollTrackChange(500)
                        : this.media.textTracks.addEventListener(
                            "change",
                            this.asyncPollTrackChange
                          ));
                }),
                (o.pollTrackChange = function (t) {
                  self.clearInterval(this.subtitlePollingInterval),
                    (this.subtitlePollingInterval = self.setInterval(
                      this.trackChangeListener,
                      t
                    ));
                }),
                (o.onMediaDetaching = function () {
                  this.media &&
                    (self.clearInterval(this.subtitlePollingInterval),
                    this.useTextTrackPolling ||
                      this.media.textTracks.removeEventListener(
                        "change",
                        this.asyncPollTrackChange
                      ),
                    this.trackId > -1 &&
                      (this.queuedDefaultTrack = this.trackId),
                    qe(this.media.textTracks).forEach(function (t) {
                      z(t);
                    }),
                    (this.subtitleTrack = -1),
                    (this.media = null));
                }),
                (o.onManifestLoading = function () {
                  (this.tracks = []),
                    (this.groupId = null),
                    (this.tracksInGroup = []),
                    (this.trackId = -1),
                    (this.selectDefaultTrack = !0);
                }),
                (o.onManifestParsed = function (t, e) {
                  this.tracks = e.subtitleTracks;
                }),
                (o.onSubtitleTrackLoaded = function (t, e) {
                  var r = e.id,
                    i = e.details,
                    n = this.trackId,
                    a = this.tracksInGroup[n];
                  if (a) {
                    var s = a.details;
                    (a.details = e.details),
                      this.log(
                        "subtitle track " +
                          r +
                          " loaded [" +
                          i.startSN +
                          "-" +
                          i.endSN +
                          "]"
                      ),
                      r === this.trackId &&
                        ((this.retryCount = 0), this.playlistLoaded(r, e, s));
                  } else this.warn("Invalid subtitle track id " + r);
                }),
                (o.onLevelLoading = function (t, e) {
                  this.switchLevel(e.level);
                }),
                (o.onLevelSwitching = function (t, e) {
                  this.switchLevel(e.level);
                }),
                (o.switchLevel = function (t) {
                  var e = this.hls.levels[t];
                  if (null != e && e.textGroupIds) {
                    var r = e.textGroupIds[e.urlId];
                    if (this.groupId !== r) {
                      var i = this.tracksInGroup
                          ? this.tracksInGroup[this.trackId]
                          : void 0,
                        n = this.tracks.filter(function (t) {
                          return !r || t.groupId === r;
                        });
                      this.tracksInGroup = n;
                      var a =
                        this.findTrackId(null == i ? void 0 : i.name) ||
                        this.findTrackId();
                      this.groupId = r;
                      var o = { subtitleTracks: n };
                      this.log(
                        "Updating subtitle tracks, " +
                          n.length +
                          ' track(s) found in "' +
                          r +
                          '" group-id'
                      ),
                        this.hls.trigger(s.Events.SUBTITLE_TRACKS_UPDATED, o),
                        -1 !== a && this.setSubtitleTrack(a, i);
                    }
                  }
                }),
                (o.findTrackId = function (t) {
                  for (var e = this.tracksInGroup, r = 0; r < e.length; r++) {
                    var i = e[r];
                    if (
                      (!this.selectDefaultTrack || i.default) &&
                      (!t || t === i.name)
                    )
                      return i.id;
                  }
                  return -1;
                }),
                (o.onError = function (e, r) {
                  t.prototype.onError.call(this, e, r),
                    !r.fatal &&
                      r.context &&
                      r.context.type === V.PlaylistContextType.SUBTITLE_TRACK &&
                      r.context.id === this.trackId &&
                      r.context.groupId === this.groupId &&
                      this.retryLoadingOrFail(r);
                }),
                (o.loadPlaylist = function (e) {
                  t.prototype.loadPlaylist.call(this);
                  var r = this.tracksInGroup[this.trackId];
                  if (this.shouldLoadTrack(r)) {
                    var i = r.id,
                      n = r.groupId,
                      a = r.url;
                    if (e)
                      try {
                        a = e.addDirectives(a);
                      } catch (t) {
                        this.warn(
                          "Could not construct new URL with HLS Delivery Directives: " +
                            t
                        );
                      }
                    this.log("Loading subtitle playlist for id " + i),
                      this.hls.trigger(s.Events.SUBTITLE_TRACK_LOADING, {
                        url: a,
                        id: i,
                        groupId: n,
                        deliveryDirectives: e || null,
                      });
                  }
                }),
                (o.toggleTrackModes = function (t) {
                  var e = this,
                    r = this.media,
                    i = this.trackId;
                  if (r) {
                    var n = qe(r.textTracks),
                      a = n.filter(function (t) {
                        return t.groupId === e.groupId;
                      });
                    if (-1 === t)
                      [].slice.call(n).forEach(function (t) {
                        t.mode = "disabled";
                      });
                    else {
                      var s = a[i];
                      s && (s.mode = "disabled");
                    }
                    var o = a[t];
                    o && (o.mode = this.subtitleDisplay ? "showing" : "hidden");
                  }
                }),
                (o.setSubtitleTrack = function (t, e) {
                  var r,
                    i = this.tracksInGroup;
                  if (this.media) {
                    if (
                      (this.trackId !== t && this.toggleTrackModes(t),
                      !(
                        (this.trackId === t &&
                          (-1 === t ||
                            (null !== (r = i[t]) &&
                              void 0 !== r &&
                              r.details))) ||
                        t < -1 ||
                        t >= i.length
                      ))
                    ) {
                      this.clearTimer();
                      var n = i[t];
                      if (
                        (this.log("Switching to subtitle track " + t),
                        (this.trackId = t),
                        n)
                      ) {
                        var a = n.id,
                          o = n.groupId,
                          l = void 0 === o ? "" : o,
                          u = n.name,
                          d = n.type,
                          h = n.url;
                        this.hls.trigger(s.Events.SUBTITLE_TRACK_SWITCH, {
                          id: a,
                          groupId: l,
                          name: u,
                          type: d,
                          url: h,
                        });
                        var c = this.switchParams(
                          n.url,
                          null == e ? void 0 : e.details
                        );
                        this.loadPlaylist(c);
                      } else
                        this.hls.trigger(s.Events.SUBTITLE_TRACK_SWITCH, {
                          id: t,
                        });
                    }
                  } else this.queuedDefaultTrack = t;
                }),
                (o.onTextTracksChanged = function () {
                  if (
                    (this.useTextTrackPolling ||
                      self.clearInterval(this.subtitlePollingInterval),
                    this.media && this.hls.config.renderTextTracksNatively)
                  ) {
                    for (
                      var t = -1, e = qe(this.media.textTracks), r = 0;
                      r < e.length;
                      r++
                    )
                      if ("hidden" === e[r].mode) t = r;
                      else if ("showing" === e[r].mode) {
                        t = r;
                        break;
                      }
                    this.subtitleTrack !== t && (this.subtitleTrack = t);
                  }
                }),
                (n = i),
                (a = [
                  {
                    key: "subtitleDisplay",
                    get: function () {
                      return this._subtitleDisplay;
                    },
                    set: function (t) {
                      (this._subtitleDisplay = t),
                        this.trackId > -1 &&
                          this.toggleTrackModes(this.trackId);
                    },
                  },
                  {
                    key: "subtitleTracks",
                    get: function () {
                      return this.tracksInGroup;
                    },
                  },
                  {
                    key: "subtitleTrack",
                    get: function () {
                      return this.trackId;
                    },
                    set: function (t) {
                      this.selectDefaultTrack = !1;
                      var e = this.tracksInGroup
                        ? this.tracksInGroup[this.trackId]
                        : void 0;
                      this.setSubtitleTrack(t, e);
                    },
                  },
                ]) && Ye(n.prototype, a),
                Object.defineProperty(n, "prototype", { writable: !1 }),
                i
              );
            })(mt);
            var ze,
              Qe = (function () {
                function t(t) {
                  (this.buffers = void 0),
                    (this.queues = { video: [], audio: [], audiovideo: [] }),
                    (this.buffers = t);
                }
                var e = t.prototype;
                return (
                  (e.append = function (t, e) {
                    var r = this.queues[e];
                    r.push(t),
                      1 === r.length && this.buffers[e] && this.executeNext(e);
                  }),
                  (e.insertAbort = function (t, e) {
                    this.queues[e].unshift(t), this.executeNext(e);
                  }),
                  (e.appendBlocker = function (t) {
                    var e,
                      r = new Promise(function (t) {
                        e = t;
                      }),
                      i = {
                        execute: e,
                        onStart: function () {},
                        onComplete: function () {},
                        onError: function () {},
                      };
                    return this.append(i, t), r;
                  }),
                  (e.executeNext = function (t) {
                    var e = this.buffers,
                      r = this.queues,
                      i = e[t],
                      n = r[t];
                    if (n.length) {
                      var a = n[0];
                      try {
                        a.execute();
                      } catch (e) {
                        l.logger.warn(
                          "[buffer-operation-queue]: Unhandled exception executing the current operation"
                        ),
                          a.onError(e),
                          (i && i.updating) || (n.shift(), this.executeNext(t));
                      }
                    }
                  }),
                  (e.shiftAndExecuteNext = function (t) {
                    this.queues[t].shift(), this.executeNext(t);
                  }),
                  (e.current = function (t) {
                    return this.queues[t][0];
                  }),
                  t
                );
              })(),
              $e = ce(),
              Je = /([ha]vc.)(?:\.[^.,]+)+/,
              Ze = (function () {
                function t(t) {
                  var e = this;
                  (this.details = null),
                    (this._objectUrl = null),
                    (this.operationQueue = void 0),
                    (this.listeners = void 0),
                    (this.hls = void 0),
                    (this.bufferCodecEventsExpected = 0),
                    (this._bufferCodecEventsTotal = 0),
                    (this.media = null),
                    (this.mediaSource = null),
                    (this.lastMpegAudioChunk = null),
                    (this.appendError = 0),
                    (this.tracks = {}),
                    (this.pendingTracks = {}),
                    (this.sourceBuffer = void 0),
                    (this._onMediaSourceOpen = function () {
                      var t = e.media,
                        r = e.mediaSource;
                      l.logger.log("[buffer-controller]: Media source opened"),
                        t &&
                          (t.removeEventListener("emptied", e._onMediaEmptied),
                          e.updateMediaElementDuration(),
                          e.hls.trigger(s.Events.MEDIA_ATTACHED, { media: t })),
                        r &&
                          r.removeEventListener(
                            "sourceopen",
                            e._onMediaSourceOpen
                          ),
                        e.checkPendingTracks();
                    }),
                    (this._onMediaSourceClose = function () {
                      l.logger.log("[buffer-controller]: Media source closed");
                    }),
                    (this._onMediaSourceEnded = function () {
                      l.logger.log("[buffer-controller]: Media source ended");
                    }),
                    (this._onMediaEmptied = function () {
                      var t = e.media,
                        r = e._objectUrl;
                      t &&
                        t.src !== r &&
                        l.logger.error(
                          "Media element src was set while attaching MediaSource (" +
                            r +
                            " > " +
                            t.src +
                            ")"
                        );
                    }),
                    (this.hls = t),
                    this._initSourceBuffer(),
                    this.registerListeners();
                }
                var e = t.prototype;
                return (
                  (e.hasSourceTypes = function () {
                    return (
                      this.getSourceBufferTypes().length > 0 ||
                      Object.keys(this.pendingTracks).length > 0
                    );
                  }),
                  (e.destroy = function () {
                    this.unregisterListeners(),
                      (this.details = null),
                      (this.lastMpegAudioChunk = null);
                  }),
                  (e.registerListeners = function () {
                    var t = this.hls;
                    t.on(s.Events.MEDIA_ATTACHING, this.onMediaAttaching, this),
                      t.on(
                        s.Events.MEDIA_DETACHING,
                        this.onMediaDetaching,
                        this
                      ),
                      t.on(
                        s.Events.MANIFEST_PARSED,
                        this.onManifestParsed,
                        this
                      ),
                      t.on(s.Events.BUFFER_RESET, this.onBufferReset, this),
                      t.on(
                        s.Events.BUFFER_APPENDING,
                        this.onBufferAppending,
                        this
                      ),
                      t.on(s.Events.BUFFER_CODECS, this.onBufferCodecs, this),
                      t.on(s.Events.BUFFER_EOS, this.onBufferEos, this),
                      t.on(
                        s.Events.BUFFER_FLUSHING,
                        this.onBufferFlushing,
                        this
                      ),
                      t.on(s.Events.LEVEL_UPDATED, this.onLevelUpdated, this),
                      t.on(s.Events.FRAG_PARSED, this.onFragParsed, this),
                      t.on(s.Events.FRAG_CHANGED, this.onFragChanged, this);
                  }),
                  (e.unregisterListeners = function () {
                    var t = this.hls;
                    t.off(
                      s.Events.MEDIA_ATTACHING,
                      this.onMediaAttaching,
                      this
                    ),
                      t.off(
                        s.Events.MEDIA_DETACHING,
                        this.onMediaDetaching,
                        this
                      ),
                      t.off(
                        s.Events.MANIFEST_PARSED,
                        this.onManifestParsed,
                        this
                      ),
                      t.off(s.Events.BUFFER_RESET, this.onBufferReset, this),
                      t.off(
                        s.Events.BUFFER_APPENDING,
                        this.onBufferAppending,
                        this
                      ),
                      t.off(s.Events.BUFFER_CODECS, this.onBufferCodecs, this),
                      t.off(s.Events.BUFFER_EOS, this.onBufferEos, this),
                      t.off(
                        s.Events.BUFFER_FLUSHING,
                        this.onBufferFlushing,
                        this
                      ),
                      t.off(s.Events.LEVEL_UPDATED, this.onLevelUpdated, this),
                      t.off(s.Events.FRAG_PARSED, this.onFragParsed, this),
                      t.off(s.Events.FRAG_CHANGED, this.onFragChanged, this);
                  }),
                  (e._initSourceBuffer = function () {
                    (this.sourceBuffer = {}),
                      (this.operationQueue = new Qe(this.sourceBuffer)),
                      (this.listeners = {
                        audio: [],
                        video: [],
                        audiovideo: [],
                      }),
                      (this.lastMpegAudioChunk = null);
                  }),
                  (e.onManifestParsed = function (t, e) {
                    var r = 2;
                    ((e.audio && !e.video) || !e.altAudio) && (r = 1),
                      (this.bufferCodecEventsExpected =
                        this._bufferCodecEventsTotal =
                          r),
                      (this.details = null),
                      l.logger.log(
                        this.bufferCodecEventsExpected +
                          " bufferCodec event(s) expected"
                      );
                  }),
                  (e.onMediaAttaching = function (t, e) {
                    var r = (this.media = e.media);
                    if (r && $e) {
                      var i = (this.mediaSource = new $e());
                      i.addEventListener("sourceopen", this._onMediaSourceOpen),
                        i.addEventListener(
                          "sourceended",
                          this._onMediaSourceEnded
                        ),
                        i.addEventListener(
                          "sourceclose",
                          this._onMediaSourceClose
                        ),
                        (r.src = self.URL.createObjectURL(i)),
                        (this._objectUrl = r.src),
                        r.addEventListener("emptied", this._onMediaEmptied);
                    }
                  }),
                  (e.onMediaDetaching = function () {
                    var t = this.media,
                      e = this.mediaSource,
                      r = this._objectUrl;
                    if (e) {
                      if (
                        (l.logger.log(
                          "[buffer-controller]: media source detaching"
                        ),
                        "open" === e.readyState)
                      )
                        try {
                          e.endOfStream();
                        } catch (t) {
                          l.logger.warn(
                            "[buffer-controller]: onMediaDetaching: " +
                              t.message +
                              " while calling endOfStream"
                          );
                        }
                      this.onBufferReset(),
                        e.removeEventListener(
                          "sourceopen",
                          this._onMediaSourceOpen
                        ),
                        e.removeEventListener(
                          "sourceended",
                          this._onMediaSourceEnded
                        ),
                        e.removeEventListener(
                          "sourceclose",
                          this._onMediaSourceClose
                        ),
                        t &&
                          (t.removeEventListener(
                            "emptied",
                            this._onMediaEmptied
                          ),
                          r && self.URL.revokeObjectURL(r),
                          t.src === r
                            ? (t.removeAttribute("src"), t.load())
                            : l.logger.warn(
                                "[buffer-controller]: media.src was changed by a third party - skip cleanup"
                              )),
                        (this.mediaSource = null),
                        (this.media = null),
                        (this._objectUrl = null),
                        (this.bufferCodecEventsExpected =
                          this._bufferCodecEventsTotal),
                        (this.pendingTracks = {}),
                        (this.tracks = {});
                    }
                    this.hls.trigger(s.Events.MEDIA_DETACHED, void 0);
                  }),
                  (e.onBufferReset = function () {
                    var t = this;
                    this.getSourceBufferTypes().forEach(function (e) {
                      var r = t.sourceBuffer[e];
                      try {
                        r &&
                          (t.removeBufferListeners(e),
                          t.mediaSource && t.mediaSource.removeSourceBuffer(r),
                          (t.sourceBuffer[e] = void 0));
                      } catch (t) {
                        l.logger.warn(
                          "[buffer-controller]: Failed to reset the " +
                            e +
                            " buffer",
                          t
                        );
                      }
                    }),
                      this._initSourceBuffer();
                  }),
                  (e.onBufferCodecs = function (t, e) {
                    var r = this,
                      i = this.getSourceBufferTypes().length;
                    Object.keys(e).forEach(function (t) {
                      if (i) {
                        var n = r.tracks[t];
                        if (n && "function" == typeof n.buffer.changeType) {
                          var a = e[t],
                            s = a.id,
                            o = a.codec,
                            u = a.levelCodec,
                            d = a.container,
                            h = a.metadata,
                            c = (n.levelCodec || n.codec).replace(Je, "$1"),
                            f = (u || o).replace(Je, "$1");
                          if (c !== f) {
                            var g = d + ";codecs=" + (u || o);
                            r.appendChangeType(t, g),
                              l.logger.log(
                                "[buffer-controller]: switching codec " +
                                  c +
                                  " to " +
                                  f
                              ),
                              (r.tracks[t] = {
                                buffer: n.buffer,
                                codec: o,
                                container: d,
                                levelCodec: u,
                                metadata: h,
                                id: s,
                              });
                          }
                        }
                      } else r.pendingTracks[t] = e[t];
                    }),
                      i ||
                        ((this.bufferCodecEventsExpected = Math.max(
                          this.bufferCodecEventsExpected - 1,
                          0
                        )),
                        this.mediaSource &&
                          "open" === this.mediaSource.readyState &&
                          this.checkPendingTracks());
                  }),
                  (e.appendChangeType = function (t, e) {
                    var r = this,
                      i = this.operationQueue,
                      n = {
                        execute: function () {
                          var n = r.sourceBuffer[t];
                          n &&
                            (l.logger.log(
                              "[buffer-controller]: changing " +
                                t +
                                " sourceBuffer type to " +
                                e
                            ),
                            n.changeType(e)),
                            i.shiftAndExecuteNext(t);
                        },
                        onStart: function () {},
                        onComplete: function () {},
                        onError: function (e) {
                          l.logger.warn(
                            "[buffer-controller]: Failed to change " +
                              t +
                              " SourceBuffer type",
                            e
                          );
                        },
                      };
                    i.append(n, t);
                  }),
                  (e.onBufferAppending = function (t, e) {
                    var r = this,
                      i = this.hls,
                      n = this.operationQueue,
                      a = this.tracks,
                      u = e.data,
                      d = e.type,
                      h = e.frag,
                      c = e.part,
                      f = e.chunkMeta,
                      g = f.buffering[d],
                      v = self.performance.now();
                    g.start = v;
                    var p = h.stats.buffering,
                      m = c ? c.stats.buffering : null;
                    0 === p.start && (p.start = v),
                      m && 0 === m.start && (m.start = v);
                    var y = a.audio,
                      E = !1;
                    "audio" === d &&
                      "audio/mpeg" === (null == y ? void 0 : y.container) &&
                      ((E =
                        !this.lastMpegAudioChunk ||
                        1 === f.id ||
                        this.lastMpegAudioChunk.sn !== f.sn),
                      (this.lastMpegAudioChunk = f));
                    var T = h.start,
                      S = {
                        execute: function () {
                          if (((g.executeStart = self.performance.now()), E)) {
                            var t = r.sourceBuffer[d];
                            if (t) {
                              var e = T - t.timestampOffset;
                              Math.abs(e) >= 0.1 &&
                                (l.logger.log(
                                  "[buffer-controller]: Updating audio SourceBuffer timestampOffset to " +
                                    T +
                                    " (delta: " +
                                    e +
                                    ") sn: " +
                                    h.sn +
                                    ")"
                                ),
                                (t.timestampOffset = T));
                            }
                          }
                          r.appendExecutor(u, d);
                        },
                        onStart: function () {},
                        onComplete: function () {
                          var t = self.performance.now();
                          (g.executeEnd = g.end = t),
                            0 === p.first && (p.first = t),
                            m && 0 === m.first && (m.first = t);
                          var e = r.sourceBuffer,
                            i = {};
                          for (var n in e) i[n] = Bt.getBuffered(e[n]);
                          (r.appendError = 0),
                            r.hls.trigger(s.Events.BUFFER_APPENDED, {
                              type: d,
                              frag: h,
                              part: c,
                              chunkMeta: f,
                              parent: h.type,
                              timeRanges: i,
                            });
                        },
                        onError: function (t) {
                          l.logger.error(
                            "[buffer-controller]: Error encountered while trying to append to the " +
                              d +
                              " SourceBuffer",
                            t
                          );
                          var e = {
                            type: o.ErrorTypes.MEDIA_ERROR,
                            parent: h.type,
                            details: o.ErrorDetails.BUFFER_APPEND_ERROR,
                            err: t,
                            fatal: !1,
                          };
                          t.code === DOMException.QUOTA_EXCEEDED_ERR
                            ? (e.details = o.ErrorDetails.BUFFER_FULL_ERROR)
                            : (r.appendError++,
                              (e.details = o.ErrorDetails.BUFFER_APPEND_ERROR),
                              r.appendError > i.config.appendErrorMaxRetry &&
                                (l.logger.error(
                                  "[buffer-controller]: Failed " +
                                    i.config.appendErrorMaxRetry +
                                    " times to append segment in sourceBuffer"
                                ),
                                (e.fatal = !0),
                                i.stopLoad())),
                            i.trigger(s.Events.ERROR, e);
                        },
                      };
                    n.append(S, d);
                  }),
                  (e.onBufferFlushing = function (t, e) {
                    var r = this,
                      i = this.operationQueue,
                      n = function (t) {
                        return {
                          execute: r.removeExecutor.bind(
                            r,
                            t,
                            e.startOffset,
                            e.endOffset
                          ),
                          onStart: function () {},
                          onComplete: function () {
                            r.hls.trigger(s.Events.BUFFER_FLUSHED, { type: t });
                          },
                          onError: function (e) {
                            l.logger.warn(
                              "[buffer-controller]: Failed to remove from " +
                                t +
                                " SourceBuffer",
                              e
                            );
                          },
                        };
                      };
                    e.type
                      ? i.append(n(e.type), e.type)
                      : this.getSourceBufferTypes().forEach(function (t) {
                          i.append(n(t), t);
                        });
                  }),
                  (e.onFragParsed = function (t, e) {
                    var r = this,
                      i = e.frag,
                      n = e.part,
                      a = [],
                      o = n ? n.elementaryStreams : i.elementaryStreams;
                    o[v.ElementaryStreamTypes.AUDIOVIDEO]
                      ? a.push("audiovideo")
                      : (o[v.ElementaryStreamTypes.AUDIO] && a.push("audio"),
                        o[v.ElementaryStreamTypes.VIDEO] && a.push("video")),
                      0 === a.length &&
                        l.logger.warn(
                          "Fragments must have at least one ElementaryStreamType set. type: " +
                            i.type +
                            " level: " +
                            i.level +
                            " sn: " +
                            i.sn
                        ),
                      this.blockBuffers(function () {
                        var t = self.performance.now();
                        (i.stats.buffering.end = t),
                          n && (n.stats.buffering.end = t);
                        var e = n ? n.stats : i.stats;
                        r.hls.trigger(s.Events.FRAG_BUFFERED, {
                          frag: i,
                          part: n,
                          stats: e,
                          id: i.type,
                        });
                      }, a);
                  }),
                  (e.onFragChanged = function (t, e) {
                    this.flushBackBuffer();
                  }),
                  (e.onBufferEos = function (t, e) {
                    var r = this;
                    this.getSourceBufferTypes().reduce(function (t, i) {
                      var n = r.sourceBuffer[i];
                      return (
                        !n ||
                          (e.type && e.type !== i) ||
                          ((n.ending = !0),
                          n.ended ||
                            ((n.ended = !0),
                            l.logger.log(
                              "[buffer-controller]: " +
                                i +
                                " sourceBuffer now EOS"
                            ))),
                        t && !(n && !n.ended)
                      );
                    }, !0) &&
                      (l.logger.log(
                        "[buffer-controller]: Queueing mediaSource.endOfStream()"
                      ),
                      this.blockBuffers(function () {
                        r.getSourceBufferTypes().forEach(function (t) {
                          var e = r.sourceBuffer[t];
                          e && (e.ending = !1);
                        });
                        var t = r.mediaSource;
                        t && "open" === t.readyState
                          ? (l.logger.log(
                              "[buffer-controller]: Calling mediaSource.endOfStream()"
                            ),
                            t.endOfStream())
                          : t &&
                            l.logger.info(
                              "[buffer-controller]: Could not call mediaSource.endOfStream(). mediaSource.readyState: " +
                                t.readyState
                            );
                      }));
                  }),
                  (e.onLevelUpdated = function (t, e) {
                    var r = e.details;
                    r.fragments.length &&
                      ((this.details = r),
                      this.getSourceBufferTypes().length
                        ? this.blockBuffers(
                            this.updateMediaElementDuration.bind(this)
                          )
                        : this.updateMediaElementDuration());
                  }),
                  (e.flushBackBuffer = function () {
                    var t = this.hls,
                      e = this.details,
                      r = this.media,
                      i = this.sourceBuffer;
                    if (r && null !== e) {
                      var n = this.getSourceBufferTypes();
                      if (n.length) {
                        var o =
                          e.live && null !== t.config.liveBackBufferLength
                            ? t.config.liveBackBufferLength
                            : t.config.backBufferLength;
                        if ((0, a.isFiniteNumber)(o) && !(o < 0)) {
                          var u = r.currentTime,
                            d = e.levelTargetDuration,
                            h = Math.max(o, d),
                            c = Math.floor(u / d) * d - h;
                          n.forEach(function (r) {
                            var n = i[r];
                            if (n) {
                              var a = Bt.getBuffered(n);
                              if (a.length > 0 && c > a.start(0)) {
                                if (
                                  (t.trigger(s.Events.BACK_BUFFER_REACHED, {
                                    bufferEnd: c,
                                  }),
                                  e.live)
                                )
                                  t.trigger(s.Events.LIVE_BACK_BUFFER_REACHED, {
                                    bufferEnd: c,
                                  });
                                else if (
                                  n.ended &&
                                  a.end(a.length - 1) - u < 2 * d
                                )
                                  return void l.logger.info(
                                    "[buffer-controller]: Cannot flush " +
                                      r +
                                      " back buffer while SourceBuffer is in ended state"
                                  );
                                t.trigger(s.Events.BUFFER_FLUSHING, {
                                  startOffset: 0,
                                  endOffset: c,
                                  type: r,
                                });
                              }
                            }
                          });
                        }
                      }
                    }
                  }),
                  (e.updateMediaElementDuration = function () {
                    if (
                      this.details &&
                      this.media &&
                      this.mediaSource &&
                      "open" === this.mediaSource.readyState
                    ) {
                      var t = this.details,
                        e = this.hls,
                        r = this.media,
                        i = this.mediaSource,
                        n = t.fragments[0].start + t.totalduration,
                        s = r.duration,
                        o = (0, a.isFiniteNumber)(i.duration) ? i.duration : 0;
                      t.live && e.config.liveDurationInfinity
                        ? (l.logger.log(
                            "[buffer-controller]: Media Source duration is set to Infinity"
                          ),
                          (i.duration = 1 / 0),
                          this.updateSeekableRange(t))
                        : ((n > o && n > s) || !(0, a.isFiniteNumber)(s)) &&
                          (l.logger.log(
                            "[buffer-controller]: Updating Media Source duration to " +
                              n.toFixed(3)
                          ),
                          (i.duration = n));
                    }
                  }),
                  (e.updateSeekableRange = function (t) {
                    var e = this.mediaSource,
                      r = t.fragments;
                    if (
                      r.length &&
                      t.live &&
                      null != e &&
                      e.setLiveSeekableRange
                    ) {
                      var i = Math.max(0, r[0].start),
                        n = Math.max(i, i + t.totalduration);
                      e.setLiveSeekableRange(i, n);
                    }
                  }),
                  (e.checkPendingTracks = function () {
                    var t = this.bufferCodecEventsExpected,
                      e = this.operationQueue,
                      r = this.pendingTracks,
                      i = Object.keys(r).length;
                    if ((i && !t) || 2 === i) {
                      this.createSourceBuffers(r), (this.pendingTracks = {});
                      var n = this.getSourceBufferTypes();
                      if (0 === n.length)
                        return void this.hls.trigger(s.Events.ERROR, {
                          type: o.ErrorTypes.MEDIA_ERROR,
                          details:
                            o.ErrorDetails.BUFFER_INCOMPATIBLE_CODECS_ERROR,
                          fatal: !0,
                          reason:
                            "could not create source buffer for media codec(s)",
                        });
                      n.forEach(function (t) {
                        e.executeNext(t);
                      });
                    }
                  }),
                  (e.createSourceBuffers = function (t) {
                    var e = this.sourceBuffer,
                      r = this.mediaSource;
                    if (!r)
                      throw Error(
                        "createSourceBuffers called when mediaSource was null"
                      );
                    var i = 0;
                    for (var n in t)
                      if (!e[n]) {
                        var a = t[n];
                        if (!a)
                          throw Error(
                            "source buffer exists for track " +
                              n +
                              ", however track does not"
                          );
                        var u = a.levelCodec || a.codec,
                          d = a.container + ";codecs=" + u;
                        l.logger.log(
                          "[buffer-controller]: creating sourceBuffer(" +
                            d +
                            ")"
                        );
                        try {
                          var h = (e[n] = r.addSourceBuffer(d)),
                            c = n;
                          this.addBufferListener(
                            c,
                            "updatestart",
                            this._onSBUpdateStart
                          ),
                            this.addBufferListener(
                              c,
                              "updateend",
                              this._onSBUpdateEnd
                            ),
                            this.addBufferListener(
                              c,
                              "error",
                              this._onSBUpdateError
                            ),
                            (this.tracks[n] = {
                              buffer: h,
                              codec: u,
                              container: a.container,
                              levelCodec: a.levelCodec,
                              metadata: a.metadata,
                              id: a.id,
                            }),
                            i++;
                        } catch (t) {
                          l.logger.error(
                            "[buffer-controller]: error while trying to add sourceBuffer: " +
                              t.message
                          ),
                            this.hls.trigger(s.Events.ERROR, {
                              type: o.ErrorTypes.MEDIA_ERROR,
                              details: o.ErrorDetails.BUFFER_ADD_CODEC_ERROR,
                              fatal: !1,
                              error: t,
                              mimeType: d,
                            });
                        }
                      }
                    i &&
                      this.hls.trigger(s.Events.BUFFER_CREATED, {
                        tracks: this.tracks,
                      });
                  }),
                  (e._onSBUpdateStart = function (t) {
                    this.operationQueue.current(t).onStart();
                  }),
                  (e._onSBUpdateEnd = function (t) {
                    var e = this.operationQueue;
                    e.current(t).onComplete(), e.shiftAndExecuteNext(t);
                  }),
                  (e._onSBUpdateError = function (t, e) {
                    l.logger.error(
                      "[buffer-controller]: " + t + " SourceBuffer error",
                      e
                    ),
                      this.hls.trigger(s.Events.ERROR, {
                        type: o.ErrorTypes.MEDIA_ERROR,
                        details: o.ErrorDetails.BUFFER_APPENDING_ERROR,
                        fatal: !1,
                      });
                    var r = this.operationQueue.current(t);
                    r && r.onError(e);
                  }),
                  (e.removeExecutor = function (t, e, r) {
                    var i = this.media,
                      n = this.mediaSource,
                      s = this.operationQueue,
                      o = this.sourceBuffer[t];
                    if (!i || !n || !o)
                      return (
                        l.logger.warn(
                          "[buffer-controller]: Attempting to remove from the " +
                            t +
                            " SourceBuffer, but it does not exist"
                        ),
                        void s.shiftAndExecuteNext(t)
                      );
                    var u = (0, a.isFiniteNumber)(i.duration)
                        ? i.duration
                        : 1 / 0,
                      d = (0, a.isFiniteNumber)(n.duration)
                        ? n.duration
                        : 1 / 0,
                      h = Math.max(0, e),
                      c = Math.min(r, u, d);
                    c > h && !o.ending
                      ? ((o.ended = !1),
                        l.logger.log(
                          "[buffer-controller]: Removing [" +
                            h +
                            "," +
                            c +
                            "] from the " +
                            t +
                            " SourceBuffer"
                        ),
                        o.remove(h, c))
                      : s.shiftAndExecuteNext(t);
                  }),
                  (e.appendExecutor = function (t, e) {
                    var r = this.operationQueue,
                      i = this.sourceBuffer[e];
                    if (!i)
                      return (
                        l.logger.warn(
                          "[buffer-controller]: Attempting to append to the " +
                            e +
                            " SourceBuffer, but it does not exist"
                        ),
                        void r.shiftAndExecuteNext(e)
                      );
                    (i.ended = !1), i.appendBuffer(t);
                  }),
                  (e.blockBuffers = function (t, e) {
                    var r = this;
                    if (
                      (void 0 === e && (e = this.getSourceBufferTypes()),
                      !e.length)
                    )
                      return (
                        l.logger.log(
                          "[buffer-controller]: Blocking operation requested, but no SourceBuffers exist"
                        ),
                        void Promise.resolve().then(t)
                      );
                    var i = this.operationQueue,
                      n = e.map(function (t) {
                        return i.appendBlocker(t);
                      });
                    Promise.all(n).then(function () {
                      t(),
                        e.forEach(function (t) {
                          var e = r.sourceBuffer[t];
                          (e && e.updating) || i.shiftAndExecuteNext(t);
                        });
                    });
                  }),
                  (e.getSourceBufferTypes = function () {
                    return Object.keys(this.sourceBuffer);
                  }),
                  (e.addBufferListener = function (t, e, r) {
                    var i = this.sourceBuffer[t];
                    if (i) {
                      var n = r.bind(this, t);
                      this.listeners[t].push({ event: e, listener: n }),
                        i.addEventListener(e, n);
                    }
                  }),
                  (e.removeBufferListeners = function (t) {
                    var e = this.sourceBuffer[t];
                    e &&
                      this.listeners[t].forEach(function (t) {
                        e.removeEventListener(t.event, t.listener);
                      });
                  }),
                  t
                );
              })(),
              tr = {
                42: 225,
                92: 233,
                94: 237,
                95: 243,
                96: 250,
                123: 231,
                124: 247,
                125: 209,
                126: 241,
                127: 9608,
                128: 174,
                129: 176,
                130: 189,
                131: 191,
                132: 8482,
                133: 162,
                134: 163,
                135: 9834,
                136: 224,
                137: 32,
                138: 232,
                139: 226,
                140: 234,
                141: 238,
                142: 244,
                143: 251,
                144: 193,
                145: 201,
                146: 211,
                147: 218,
                148: 220,
                149: 252,
                150: 8216,
                151: 161,
                152: 42,
                153: 8217,
                154: 9473,
                155: 169,
                156: 8480,
                157: 8226,
                158: 8220,
                159: 8221,
                160: 192,
                161: 194,
                162: 199,
                163: 200,
                164: 202,
                165: 203,
                166: 235,
                167: 206,
                168: 207,
                169: 239,
                170: 212,
                171: 217,
                172: 249,
                173: 219,
                174: 171,
                175: 187,
                176: 195,
                177: 227,
                178: 205,
                179: 204,
                180: 236,
                181: 210,
                182: 242,
                183: 213,
                184: 245,
                185: 123,
                186: 125,
                187: 92,
                188: 94,
                189: 95,
                190: 124,
                191: 8764,
                192: 196,
                193: 228,
                194: 214,
                195: 246,
                196: 223,
                197: 165,
                198: 164,
                199: 9475,
                200: 197,
                201: 229,
                202: 216,
                203: 248,
                204: 9487,
                205: 9491,
                206: 9495,
                207: 9499,
              },
              er = function (t) {
                var e = t;
                return (
                  tr.hasOwnProperty(t) && (e = tr[t]), String.fromCharCode(e)
                );
              },
              rr = 15,
              ir = 100,
              nr = {
                17: 1,
                18: 3,
                21: 5,
                22: 7,
                23: 9,
                16: 11,
                19: 12,
                20: 14,
              },
              ar = { 17: 2, 18: 4, 21: 6, 22: 8, 23: 10, 19: 13, 20: 15 },
              sr = {
                25: 1,
                26: 3,
                29: 5,
                30: 7,
                31: 9,
                24: 11,
                27: 12,
                28: 14,
              },
              or = { 25: 2, 26: 4, 29: 6, 30: 8, 31: 10, 27: 13, 28: 15 },
              lr = [
                "white",
                "green",
                "blue",
                "cyan",
                "red",
                "yellow",
                "magenta",
                "black",
                "transparent",
              ];
            !(function (t) {
              (t[(t.ERROR = 0)] = "ERROR"),
                (t[(t.TEXT = 1)] = "TEXT"),
                (t[(t.WARNING = 2)] = "WARNING"),
                (t[(t.INFO = 2)] = "INFO"),
                (t[(t.DEBUG = 3)] = "DEBUG"),
                (t[(t.DATA = 3)] = "DATA");
            })(ze || (ze = {}));
            var ur = (function () {
                function t() {
                  (this.time = null), (this.verboseLevel = ze.ERROR);
                }
                return (
                  (t.prototype.log = function (t, e) {
                    if (this.verboseLevel >= t) {
                      var r = "function" == typeof e ? e() : e;
                      l.logger.log(this.time + " [" + t + "] " + r);
                    }
                  }),
                  t
                );
              })(),
              dr = function (t) {
                for (var e = [], r = 0; r < t.length; r++)
                  e.push(t[r].toString(16));
                return e;
              },
              hr = (function () {
                function t(t, e, r, i, n) {
                  (this.foreground = void 0),
                    (this.underline = void 0),
                    (this.italics = void 0),
                    (this.background = void 0),
                    (this.flash = void 0),
                    (this.foreground = t || "white"),
                    (this.underline = e || !1),
                    (this.italics = r || !1),
                    (this.background = i || "black"),
                    (this.flash = n || !1);
                }
                var e = t.prototype;
                return (
                  (e.reset = function () {
                    (this.foreground = "white"),
                      (this.underline = !1),
                      (this.italics = !1),
                      (this.background = "black"),
                      (this.flash = !1);
                  }),
                  (e.setStyles = function (t) {
                    for (
                      var e = [
                          "foreground",
                          "underline",
                          "italics",
                          "background",
                          "flash",
                        ],
                        r = 0;
                      r < e.length;
                      r++
                    ) {
                      var i = e[r];
                      t.hasOwnProperty(i) && (this[i] = t[i]);
                    }
                  }),
                  (e.isDefault = function () {
                    return (
                      "white" === this.foreground &&
                      !this.underline &&
                      !this.italics &&
                      "black" === this.background &&
                      !this.flash
                    );
                  }),
                  (e.equals = function (t) {
                    return (
                      this.foreground === t.foreground &&
                      this.underline === t.underline &&
                      this.italics === t.italics &&
                      this.background === t.background &&
                      this.flash === t.flash
                    );
                  }),
                  (e.copy = function (t) {
                    (this.foreground = t.foreground),
                      (this.underline = t.underline),
                      (this.italics = t.italics),
                      (this.background = t.background),
                      (this.flash = t.flash);
                  }),
                  (e.toString = function () {
                    return (
                      "color=" +
                      this.foreground +
                      ", underline=" +
                      this.underline +
                      ", italics=" +
                      this.italics +
                      ", background=" +
                      this.background +
                      ", flash=" +
                      this.flash
                    );
                  }),
                  t
                );
              })(),
              cr = (function () {
                function t(t, e, r, i, n, a) {
                  (this.uchar = void 0),
                    (this.penState = void 0),
                    (this.uchar = t || " "),
                    (this.penState = new hr(e, r, i, n, a));
                }
                var e = t.prototype;
                return (
                  (e.reset = function () {
                    (this.uchar = " "), this.penState.reset();
                  }),
                  (e.setChar = function (t, e) {
                    (this.uchar = t), this.penState.copy(e);
                  }),
                  (e.setPenState = function (t) {
                    this.penState.copy(t);
                  }),
                  (e.equals = function (t) {
                    return (
                      this.uchar === t.uchar && this.penState.equals(t.penState)
                    );
                  }),
                  (e.copy = function (t) {
                    (this.uchar = t.uchar), this.penState.copy(t.penState);
                  }),
                  (e.isEmpty = function () {
                    return " " === this.uchar && this.penState.isDefault();
                  }),
                  t
                );
              })(),
              fr = (function () {
                function t(t) {
                  (this.chars = void 0),
                    (this.pos = void 0),
                    (this.currPenState = void 0),
                    (this.cueStartTime = void 0),
                    (this.logger = void 0),
                    (this.chars = []);
                  for (var e = 0; e < ir; e++) this.chars.push(new cr());
                  (this.logger = t),
                    (this.pos = 0),
                    (this.currPenState = new hr());
                }
                var e = t.prototype;
                return (
                  (e.equals = function (t) {
                    for (var e = !0, r = 0; r < ir; r++)
                      if (!this.chars[r].equals(t.chars[r])) {
                        e = !1;
                        break;
                      }
                    return e;
                  }),
                  (e.copy = function (t) {
                    for (var e = 0; e < ir; e++) this.chars[e].copy(t.chars[e]);
                  }),
                  (e.isEmpty = function () {
                    for (var t = !0, e = 0; e < ir; e++)
                      if (!this.chars[e].isEmpty()) {
                        t = !1;
                        break;
                      }
                    return t;
                  }),
                  (e.setCursor = function (t) {
                    this.pos !== t && (this.pos = t),
                      this.pos < 0
                        ? (this.logger.log(
                            ze.DEBUG,
                            "Negative cursor position " + this.pos
                          ),
                          (this.pos = 0))
                        : this.pos > ir &&
                          (this.logger.log(
                            ze.DEBUG,
                            "Too large cursor position " + this.pos
                          ),
                          (this.pos = ir));
                  }),
                  (e.moveCursor = function (t) {
                    var e = this.pos + t;
                    if (t > 1)
                      for (var r = this.pos + 1; r < e + 1; r++)
                        this.chars[r].setPenState(this.currPenState);
                    this.setCursor(e);
                  }),
                  (e.backSpace = function () {
                    this.moveCursor(-1),
                      this.chars[this.pos].setChar(" ", this.currPenState);
                  }),
                  (e.insertChar = function (t) {
                    var e = this;
                    t >= 144 && this.backSpace();
                    var r = er(t);
                    this.pos >= ir
                      ? this.logger.log(ze.ERROR, function () {
                          return (
                            "Cannot insert " +
                            t.toString(16) +
                            " (" +
                            r +
                            ") at position " +
                            e.pos +
                            ". Skipping it!"
                          );
                        })
                      : (this.chars[this.pos].setChar(r, this.currPenState),
                        this.moveCursor(1));
                  }),
                  (e.clearFromPos = function (t) {
                    var e;
                    for (e = t; e < ir; e++) this.chars[e].reset();
                  }),
                  (e.clear = function () {
                    this.clearFromPos(0),
                      (this.pos = 0),
                      this.currPenState.reset();
                  }),
                  (e.clearToEndOfRow = function () {
                    this.clearFromPos(this.pos);
                  }),
                  (e.getTextString = function () {
                    for (var t = [], e = !0, r = 0; r < ir; r++) {
                      var i = this.chars[r].uchar;
                      " " !== i && (e = !1), t.push(i);
                    }
                    return e ? "" : t.join("");
                  }),
                  (e.setPenStyles = function (t) {
                    this.currPenState.setStyles(t),
                      this.chars[this.pos].setPenState(this.currPenState);
                  }),
                  t
                );
              })(),
              gr = (function () {
                function t(t) {
                  (this.rows = void 0),
                    (this.currRow = void 0),
                    (this.nrRollUpRows = void 0),
                    (this.lastOutputScreen = void 0),
                    (this.logger = void 0),
                    (this.rows = []);
                  for (var e = 0; e < rr; e++) this.rows.push(new fr(t));
                  (this.logger = t),
                    (this.currRow = 14),
                    (this.nrRollUpRows = null),
                    (this.lastOutputScreen = null),
                    this.reset();
                }
                var e = t.prototype;
                return (
                  (e.reset = function () {
                    for (var t = 0; t < rr; t++) this.rows[t].clear();
                    this.currRow = 14;
                  }),
                  (e.equals = function (t) {
                    for (var e = !0, r = 0; r < rr; r++)
                      if (!this.rows[r].equals(t.rows[r])) {
                        e = !1;
                        break;
                      }
                    return e;
                  }),
                  (e.copy = function (t) {
                    for (var e = 0; e < rr; e++) this.rows[e].copy(t.rows[e]);
                  }),
                  (e.isEmpty = function () {
                    for (var t = !0, e = 0; e < rr; e++)
                      if (!this.rows[e].isEmpty()) {
                        t = !1;
                        break;
                      }
                    return t;
                  }),
                  (e.backSpace = function () {
                    this.rows[this.currRow].backSpace();
                  }),
                  (e.clearToEndOfRow = function () {
                    this.rows[this.currRow].clearToEndOfRow();
                  }),
                  (e.insertChar = function (t) {
                    this.rows[this.currRow].insertChar(t);
                  }),
                  (e.setPen = function (t) {
                    this.rows[this.currRow].setPenStyles(t);
                  }),
                  (e.moveCursor = function (t) {
                    this.rows[this.currRow].moveCursor(t);
                  }),
                  (e.setCursor = function (t) {
                    this.logger.log(ze.INFO, "setCursor: " + t),
                      this.rows[this.currRow].setCursor(t);
                  }),
                  (e.setPAC = function (t) {
                    this.logger.log(ze.INFO, function () {
                      return "pacData = " + JSON.stringify(t);
                    });
                    var e = t.row - 1;
                    if (
                      (this.nrRollUpRows &&
                        e < this.nrRollUpRows - 1 &&
                        (e = this.nrRollUpRows - 1),
                      this.nrRollUpRows && this.currRow !== e)
                    ) {
                      for (var r = 0; r < rr; r++) this.rows[r].clear();
                      var i = this.currRow + 1 - this.nrRollUpRows,
                        n = this.lastOutputScreen;
                      if (n) {
                        var a = n.rows[i].cueStartTime,
                          s = this.logger.time;
                        if (a && null !== s && a < s)
                          for (var o = 0; o < this.nrRollUpRows; o++)
                            this.rows[e - this.nrRollUpRows + o + 1].copy(
                              n.rows[i + o]
                            );
                      }
                    }
                    this.currRow = e;
                    var l = this.rows[this.currRow];
                    if (null !== t.indent) {
                      var u = t.indent,
                        d = Math.max(u - 1, 0);
                      l.setCursor(t.indent),
                        (t.color = l.chars[d].penState.foreground);
                    }
                    var h = {
                      foreground: t.color,
                      underline: t.underline,
                      italics: t.italics,
                      background: "black",
                      flash: !1,
                    };
                    this.setPen(h);
                  }),
                  (e.setBkgData = function (t) {
                    this.logger.log(ze.INFO, function () {
                      return "bkgData = " + JSON.stringify(t);
                    }),
                      this.backSpace(),
                      this.setPen(t),
                      this.insertChar(32);
                  }),
                  (e.setRollUpRows = function (t) {
                    this.nrRollUpRows = t;
                  }),
                  (e.rollUp = function () {
                    var t = this;
                    if (null !== this.nrRollUpRows) {
                      this.logger.log(ze.TEXT, function () {
                        return t.getDisplayText();
                      });
                      var e = this.currRow + 1 - this.nrRollUpRows,
                        r = this.rows.splice(e, 1)[0];
                      r.clear(),
                        this.rows.splice(this.currRow, 0, r),
                        this.logger.log(ze.INFO, "Rolling up");
                    } else
                      this.logger.log(
                        ze.DEBUG,
                        "roll_up but nrRollUpRows not set yet"
                      );
                  }),
                  (e.getDisplayText = function (t) {
                    t = t || !1;
                    for (var e = [], r = "", i = -1, n = 0; n < rr; n++) {
                      var a = this.rows[n].getTextString();
                      a &&
                        ((i = n + 1),
                        t
                          ? e.push("Row " + i + ": '" + a + "'")
                          : e.push(a.trim()));
                    }
                    return (
                      e.length > 0 &&
                        (r = t ? "[" + e.join(" | ") + "]" : e.join("\n")),
                      r
                    );
                  }),
                  (e.getTextAndFormat = function () {
                    return this.rows;
                  }),
                  t
                );
              })(),
              vr = (function () {
                function t(t, e, r) {
                  (this.chNr = void 0),
                    (this.outputFilter = void 0),
                    (this.mode = void 0),
                    (this.verbose = void 0),
                    (this.displayedMemory = void 0),
                    (this.nonDisplayedMemory = void 0),
                    (this.lastOutputScreen = void 0),
                    (this.currRollUpRow = void 0),
                    (this.writeScreen = void 0),
                    (this.cueStartTime = void 0),
                    (this.logger = void 0),
                    (this.chNr = t),
                    (this.outputFilter = e),
                    (this.mode = null),
                    (this.verbose = 0),
                    (this.displayedMemory = new gr(r)),
                    (this.nonDisplayedMemory = new gr(r)),
                    (this.lastOutputScreen = new gr(r)),
                    (this.currRollUpRow = this.displayedMemory.rows[14]),
                    (this.writeScreen = this.displayedMemory),
                    (this.mode = null),
                    (this.cueStartTime = null),
                    (this.logger = r);
                }
                var e = t.prototype;
                return (
                  (e.reset = function () {
                    (this.mode = null),
                      this.displayedMemory.reset(),
                      this.nonDisplayedMemory.reset(),
                      this.lastOutputScreen.reset(),
                      this.outputFilter.reset(),
                      (this.currRollUpRow = this.displayedMemory.rows[14]),
                      (this.writeScreen = this.displayedMemory),
                      (this.mode = null),
                      (this.cueStartTime = null);
                  }),
                  (e.getHandler = function () {
                    return this.outputFilter;
                  }),
                  (e.setHandler = function (t) {
                    this.outputFilter = t;
                  }),
                  (e.setPAC = function (t) {
                    this.writeScreen.setPAC(t);
                  }),
                  (e.setBkgData = function (t) {
                    this.writeScreen.setBkgData(t);
                  }),
                  (e.setMode = function (t) {
                    t !== this.mode &&
                      ((this.mode = t),
                      this.logger.log(ze.INFO, function () {
                        return "MODE=" + t;
                      }),
                      "MODE_POP-ON" === this.mode
                        ? (this.writeScreen = this.nonDisplayedMemory)
                        : ((this.writeScreen = this.displayedMemory),
                          this.writeScreen.reset()),
                      "MODE_ROLL-UP" !== this.mode &&
                        ((this.displayedMemory.nrRollUpRows = null),
                        (this.nonDisplayedMemory.nrRollUpRows = null)),
                      (this.mode = t));
                  }),
                  (e.insertChars = function (t) {
                    for (var e = this, r = 0; r < t.length; r++)
                      this.writeScreen.insertChar(t[r]);
                    var i =
                      this.writeScreen === this.displayedMemory
                        ? "DISP"
                        : "NON_DISP";
                    this.logger.log(ze.INFO, function () {
                      return i + ": " + e.writeScreen.getDisplayText(!0);
                    }),
                      ("MODE_PAINT-ON" !== this.mode &&
                        "MODE_ROLL-UP" !== this.mode) ||
                        (this.logger.log(ze.TEXT, function () {
                          return (
                            "DISPLAYED: " + e.displayedMemory.getDisplayText(!0)
                          );
                        }),
                        this.outputDataUpdate());
                  }),
                  (e.ccRCL = function () {
                    this.logger.log(ze.INFO, "RCL - Resume Caption Loading"),
                      this.setMode("MODE_POP-ON");
                  }),
                  (e.ccBS = function () {
                    this.logger.log(ze.INFO, "BS - BackSpace"),
                      "MODE_TEXT" !== this.mode &&
                        (this.writeScreen.backSpace(),
                        this.writeScreen === this.displayedMemory &&
                          this.outputDataUpdate());
                  }),
                  (e.ccAOF = function () {}),
                  (e.ccAON = function () {}),
                  (e.ccDER = function () {
                    this.logger.log(ze.INFO, "DER- Delete to End of Row"),
                      this.writeScreen.clearToEndOfRow(),
                      this.outputDataUpdate();
                  }),
                  (e.ccRU = function (t) {
                    this.logger.log(ze.INFO, "RU(" + t + ") - Roll Up"),
                      (this.writeScreen = this.displayedMemory),
                      this.setMode("MODE_ROLL-UP"),
                      this.writeScreen.setRollUpRows(t);
                  }),
                  (e.ccFON = function () {
                    this.logger.log(ze.INFO, "FON - Flash On"),
                      this.writeScreen.setPen({ flash: !0 });
                  }),
                  (e.ccRDC = function () {
                    this.logger.log(ze.INFO, "RDC - Resume Direct Captioning"),
                      this.setMode("MODE_PAINT-ON");
                  }),
                  (e.ccTR = function () {
                    this.logger.log(ze.INFO, "TR"), this.setMode("MODE_TEXT");
                  }),
                  (e.ccRTD = function () {
                    this.logger.log(ze.INFO, "RTD"), this.setMode("MODE_TEXT");
                  }),
                  (e.ccEDM = function () {
                    this.logger.log(ze.INFO, "EDM - Erase Displayed Memory"),
                      this.displayedMemory.reset(),
                      this.outputDataUpdate(!0);
                  }),
                  (e.ccCR = function () {
                    this.logger.log(ze.INFO, "CR - Carriage Return"),
                      this.writeScreen.rollUp(),
                      this.outputDataUpdate(!0);
                  }),
                  (e.ccENM = function () {
                    this.logger.log(
                      ze.INFO,
                      "ENM - Erase Non-displayed Memory"
                    ),
                      this.nonDisplayedMemory.reset();
                  }),
                  (e.ccEOC = function () {
                    var t = this;
                    if (
                      (this.logger.log(ze.INFO, "EOC - End Of Caption"),
                      "MODE_POP-ON" === this.mode)
                    ) {
                      var e = this.displayedMemory;
                      (this.displayedMemory = this.nonDisplayedMemory),
                        (this.nonDisplayedMemory = e),
                        (this.writeScreen = this.nonDisplayedMemory),
                        this.logger.log(ze.TEXT, function () {
                          return "DISP: " + t.displayedMemory.getDisplayText();
                        });
                    }
                    this.outputDataUpdate(!0);
                  }),
                  (e.ccTO = function (t) {
                    this.logger.log(ze.INFO, "TO(" + t + ") - Tab Offset"),
                      this.writeScreen.moveCursor(t);
                  }),
                  (e.ccMIDROW = function (t) {
                    var e = { flash: !1 };
                    if (
                      ((e.underline = t % 2 == 1),
                      (e.italics = t >= 46),
                      e.italics)
                    )
                      e.foreground = "white";
                    else {
                      var r = Math.floor(t / 2) - 16;
                      e.foreground = [
                        "white",
                        "green",
                        "blue",
                        "cyan",
                        "red",
                        "yellow",
                        "magenta",
                      ][r];
                    }
                    this.logger.log(ze.INFO, "MIDROW: " + JSON.stringify(e)),
                      this.writeScreen.setPen(e);
                  }),
                  (e.outputDataUpdate = function (t) {
                    void 0 === t && (t = !1);
                    var e = this.logger.time;
                    null !== e &&
                      this.outputFilter &&
                      (null !== this.cueStartTime ||
                      this.displayedMemory.isEmpty()
                        ? this.displayedMemory.equals(this.lastOutputScreen) ||
                          (this.outputFilter.newCue(
                            this.cueStartTime,
                            e,
                            this.lastOutputScreen
                          ),
                          t &&
                            this.outputFilter.dispatchCue &&
                            this.outputFilter.dispatchCue(),
                          (this.cueStartTime = this.displayedMemory.isEmpty()
                            ? null
                            : e))
                        : (this.cueStartTime = e),
                      this.lastOutputScreen.copy(this.displayedMemory));
                  }),
                  (e.cueSplitAtTime = function (t) {
                    this.outputFilter &&
                      (this.displayedMemory.isEmpty() ||
                        (this.outputFilter.newCue &&
                          this.outputFilter.newCue(
                            this.cueStartTime,
                            t,
                            this.displayedMemory
                          ),
                        (this.cueStartTime = t)));
                  }),
                  t
                );
              })(),
              pr = (function () {
                function t(t, e, r) {
                  (this.channels = void 0),
                    (this.currentChannel = 0),
                    (this.cmdHistory = void 0),
                    (this.logger = void 0);
                  var i = new ur();
                  (this.channels = [
                    null,
                    new vr(t, e, i),
                    new vr(t + 1, r, i),
                  ]),
                    (this.cmdHistory = { a: null, b: null }),
                    (this.logger = i);
                }
                var e = t.prototype;
                return (
                  (e.getHandler = function (t) {
                    return this.channels[t].getHandler();
                  }),
                  (e.setHandler = function (t, e) {
                    this.channels[t].setHandler(e);
                  }),
                  (e.addData = function (t, e) {
                    var r,
                      i,
                      n,
                      a = !1;
                    this.logger.time = t;
                    for (var s = 0; s < e.length; s += 2)
                      if (
                        ((i = 127 & e[s]),
                        (n = 127 & e[s + 1]),
                        0 !== i || 0 !== n)
                      ) {
                        if (
                          (this.logger.log(
                            ze.DATA,
                            "[" +
                              dr([e[s], e[s + 1]]) +
                              "] -> (" +
                              dr([i, n]) +
                              ")"
                          ),
                          (r = this.parseCmd(i, n)) ||
                            (r = this.parseMidrow(i, n)),
                          r || (r = this.parsePAC(i, n)),
                          r || (r = this.parseBackgroundAttributes(i, n)),
                          !r && (a = this.parseChars(i, n)))
                        ) {
                          var o = this.currentChannel;
                          o && o > 0
                            ? this.channels[o].insertChars(a)
                            : this.logger.log(
                                ze.WARNING,
                                "No channel found yet. TEXT-MODE?"
                              );
                        }
                        r ||
                          a ||
                          this.logger.log(
                            ze.WARNING,
                            "Couldn't parse cleaned data " +
                              dr([i, n]) +
                              " orig: " +
                              dr([e[s], e[s + 1]])
                          );
                      }
                  }),
                  (e.parseCmd = function (t, e) {
                    var r = this.cmdHistory;
                    if (
                      !(
                        ((20 === t || 28 === t || 21 === t || 29 === t) &&
                          e >= 32 &&
                          e <= 47) ||
                        ((23 === t || 31 === t) && e >= 33 && e <= 35)
                      )
                    )
                      return !1;
                    if (yr(t, e, r))
                      return (
                        mr(null, null, r),
                        this.logger.log(
                          ze.DEBUG,
                          "Repeated command (" + dr([t, e]) + ") is dropped"
                        ),
                        !0
                      );
                    var i = 20 === t || 21 === t || 23 === t ? 1 : 2,
                      n = this.channels[i];
                    return (
                      20 === t || 21 === t || 28 === t || 29 === t
                        ? 32 === e
                          ? n.ccRCL()
                          : 33 === e
                          ? n.ccBS()
                          : 34 === e
                          ? n.ccAOF()
                          : 35 === e
                          ? n.ccAON()
                          : 36 === e
                          ? n.ccDER()
                          : 37 === e
                          ? n.ccRU(2)
                          : 38 === e
                          ? n.ccRU(3)
                          : 39 === e
                          ? n.ccRU(4)
                          : 40 === e
                          ? n.ccFON()
                          : 41 === e
                          ? n.ccRDC()
                          : 42 === e
                          ? n.ccTR()
                          : 43 === e
                          ? n.ccRTD()
                          : 44 === e
                          ? n.ccEDM()
                          : 45 === e
                          ? n.ccCR()
                          : 46 === e
                          ? n.ccENM()
                          : 47 === e && n.ccEOC()
                        : n.ccTO(e - 32),
                      mr(t, e, r),
                      (this.currentChannel = i),
                      !0
                    );
                  }),
                  (e.parseMidrow = function (t, e) {
                    var r = 0;
                    if ((17 === t || 25 === t) && e >= 32 && e <= 47) {
                      if ((r = 17 === t ? 1 : 2) !== this.currentChannel)
                        return (
                          this.logger.log(
                            ze.ERROR,
                            "Mismatch channel in midrow parsing"
                          ),
                          !1
                        );
                      var i = this.channels[r];
                      return (
                        !!i &&
                        (i.ccMIDROW(e),
                        this.logger.log(
                          ze.DEBUG,
                          "MIDROW (" + dr([t, e]) + ")"
                        ),
                        !0)
                      );
                    }
                    return !1;
                  }),
                  (e.parsePAC = function (t, e) {
                    var r,
                      i = this.cmdHistory;
                    if (
                      !(
                        (((t >= 17 && t <= 23) || (t >= 25 && t <= 31)) &&
                          e >= 64 &&
                          e <= 127) ||
                        ((16 === t || 24 === t) && e >= 64 && e <= 95)
                      )
                    )
                      return !1;
                    if (yr(t, e, i)) return mr(null, null, i), !0;
                    var n = t <= 23 ? 1 : 2;
                    r =
                      e >= 64 && e <= 95
                        ? 1 === n
                          ? nr[t]
                          : sr[t]
                        : 1 === n
                        ? ar[t]
                        : or[t];
                    var a = this.channels[n];
                    return (
                      !!a &&
                      (a.setPAC(this.interpretPAC(r, e)),
                      mr(t, e, i),
                      (this.currentChannel = n),
                      !0)
                    );
                  }),
                  (e.interpretPAC = function (t, e) {
                    var r,
                      i = {
                        color: null,
                        italics: !1,
                        indent: null,
                        underline: !1,
                        row: t,
                      };
                    return (
                      (r = e > 95 ? e - 96 : e - 64),
                      (i.underline = 1 == (1 & r)),
                      r <= 13
                        ? (i.color = [
                            "white",
                            "green",
                            "blue",
                            "cyan",
                            "red",
                            "yellow",
                            "magenta",
                            "white",
                          ][Math.floor(r / 2)])
                        : r <= 15
                        ? ((i.italics = !0), (i.color = "white"))
                        : (i.indent = 4 * Math.floor((r - 16) / 2)),
                      i
                    );
                  }),
                  (e.parseChars = function (t, e) {
                    var r,
                      i,
                      n = null,
                      a = null;
                    if (
                      (t >= 25 ? ((r = 2), (a = t - 8)) : ((r = 1), (a = t)),
                      a >= 17 && a <= 19
                        ? ((i =
                            17 === a ? e + 80 : 18 === a ? e + 112 : e + 144),
                          this.logger.log(
                            ze.INFO,
                            "Special char '" + er(i) + "' in channel " + r
                          ),
                          (n = [i]))
                        : t >= 32 && t <= 127 && (n = 0 === e ? [t] : [t, e]),
                      n)
                    ) {
                      var s = dr(n);
                      this.logger.log(ze.DEBUG, "Char codes =  " + s.join(",")),
                        mr(t, e, this.cmdHistory);
                    }
                    return n;
                  }),
                  (e.parseBackgroundAttributes = function (t, e) {
                    var r;
                    if (
                      !(
                        ((16 === t || 24 === t) && e >= 32 && e <= 47) ||
                        ((23 === t || 31 === t) && e >= 45 && e <= 47)
                      )
                    )
                      return !1;
                    var i = {};
                    16 === t || 24 === t
                      ? ((r = Math.floor((e - 32) / 2)),
                        (i.background = lr[r]),
                        e % 2 == 1 && (i.background = i.background + "_semi"))
                      : 45 === e
                      ? (i.background = "transparent")
                      : ((i.foreground = "black"),
                        47 === e && (i.underline = !0));
                    var n = t <= 23 ? 1 : 2;
                    return (
                      this.channels[n].setBkgData(i),
                      mr(t, e, this.cmdHistory),
                      !0
                    );
                  }),
                  (e.reset = function () {
                    for (
                      var t = 0;
                      t < Object.keys(this.channels).length;
                      t++
                    ) {
                      var e = this.channels[t];
                      e && e.reset();
                    }
                    this.cmdHistory = { a: null, b: null };
                  }),
                  (e.cueSplitAtTime = function (t) {
                    for (var e = 0; e < this.channels.length; e++) {
                      var r = this.channels[e];
                      r && r.cueSplitAtTime(t);
                    }
                  }),
                  t
                );
              })();
            function mr(t, e, r) {
              (r.a = t), (r.b = e);
            }
            function yr(t, e, r) {
              return r.a === t && r.b === e;
            }
            const Er = pr;
            var Tr = (function () {
              function t(t, e) {
                (this.timelineController = void 0),
                  (this.cueRanges = []),
                  (this.trackName = void 0),
                  (this.startTime = null),
                  (this.endTime = null),
                  (this.screen = null),
                  (this.timelineController = t),
                  (this.trackName = e);
              }
              var e = t.prototype;
              return (
                (e.dispatchCue = function () {
                  null !== this.startTime &&
                    (this.timelineController.addCues(
                      this.trackName,
                      this.startTime,
                      this.endTime,
                      this.screen,
                      this.cueRanges
                    ),
                    (this.startTime = null));
                }),
                (e.newCue = function (t, e, r) {
                  (null === this.startTime || this.startTime > t) &&
                    (this.startTime = t),
                    (this.endTime = e),
                    (this.screen = r),
                    this.timelineController.createCaptionsTrack(this.trackName);
                }),
                (e.reset = function () {
                  (this.cueRanges = []), (this.startTime = null);
                }),
                t
              );
            })();
            const Sr = (function () {
              if ("undefined" != typeof self && self.VTTCue) return self.VTTCue;
              var t = ["", "lr", "rl"],
                e = ["start", "middle", "end", "left", "right"];
              function r(t, e) {
                if ("string" != typeof e) return !1;
                if (!Array.isArray(t)) return !1;
                var r = e.toLowerCase();
                return !!~t.indexOf(r) && r;
              }
              function i(t) {
                return r(e, t);
              }
              function n(t) {
                for (
                  var e = arguments.length,
                    r = new Array(e > 1 ? e - 1 : 0),
                    i = 1;
                  i < e;
                  i++
                )
                  r[i - 1] = arguments[i];
                for (var n = 1; n < arguments.length; n++) {
                  var a = arguments[n];
                  for (var s in a) t[s] = a[s];
                }
                return t;
              }
              function a(e, a, s) {
                var o = this,
                  l = { enumerable: !0 };
                o.hasBeenReset = !1;
                var u = "",
                  d = !1,
                  h = e,
                  c = a,
                  f = s,
                  g = null,
                  v = "",
                  p = !0,
                  m = "auto",
                  y = "start",
                  E = 50,
                  T = "middle",
                  S = 50,
                  b = "middle";
                Object.defineProperty(
                  o,
                  "id",
                  n({}, l, {
                    get: function () {
                      return u;
                    },
                    set: function (t) {
                      u = "" + t;
                    },
                  })
                ),
                  Object.defineProperty(
                    o,
                    "pauseOnExit",
                    n({}, l, {
                      get: function () {
                        return d;
                      },
                      set: function (t) {
                        d = !!t;
                      },
                    })
                  ),
                  Object.defineProperty(
                    o,
                    "startTime",
                    n({}, l, {
                      get: function () {
                        return h;
                      },
                      set: function (t) {
                        if ("number" != typeof t)
                          throw new TypeError(
                            "Start time must be set to a number."
                          );
                        (h = t), (this.hasBeenReset = !0);
                      },
                    })
                  ),
                  Object.defineProperty(
                    o,
                    "endTime",
                    n({}, l, {
                      get: function () {
                        return c;
                      },
                      set: function (t) {
                        if ("number" != typeof t)
                          throw new TypeError(
                            "End time must be set to a number."
                          );
                        (c = t), (this.hasBeenReset = !0);
                      },
                    })
                  ),
                  Object.defineProperty(
                    o,
                    "text",
                    n({}, l, {
                      get: function () {
                        return f;
                      },
                      set: function (t) {
                        (f = "" + t), (this.hasBeenReset = !0);
                      },
                    })
                  ),
                  Object.defineProperty(
                    o,
                    "region",
                    n({}, l, {
                      get: function () {
                        return g;
                      },
                      set: function (t) {
                        (g = t), (this.hasBeenReset = !0);
                      },
                    })
                  ),
                  Object.defineProperty(
                    o,
                    "vertical",
                    n({}, l, {
                      get: function () {
                        return v;
                      },
                      set: function (e) {
                        var i = (function (e) {
                          return r(t, e);
                        })(e);
                        if (!1 === i)
                          throw new SyntaxError(
                            "An invalid or illegal string was specified."
                          );
                        (v = i), (this.hasBeenReset = !0);
                      },
                    })
                  ),
                  Object.defineProperty(
                    o,
                    "snapToLines",
                    n({}, l, {
                      get: function () {
                        return p;
                      },
                      set: function (t) {
                        (p = !!t), (this.hasBeenReset = !0);
                      },
                    })
                  ),
                  Object.defineProperty(
                    o,
                    "line",
                    n({}, l, {
                      get: function () {
                        return m;
                      },
                      set: function (t) {
                        if ("number" != typeof t && "auto" !== t)
                          throw new SyntaxError(
                            "An invalid number or illegal string was specified."
                          );
                        (m = t), (this.hasBeenReset = !0);
                      },
                    })
                  ),
                  Object.defineProperty(
                    o,
                    "lineAlign",
                    n({}, l, {
                      get: function () {
                        return y;
                      },
                      set: function (t) {
                        var e = i(t);
                        if (!e)
                          throw new SyntaxError(
                            "An invalid or illegal string was specified."
                          );
                        (y = e), (this.hasBeenReset = !0);
                      },
                    })
                  ),
                  Object.defineProperty(
                    o,
                    "position",
                    n({}, l, {
                      get: function () {
                        return E;
                      },
                      set: function (t) {
                        if (t < 0 || t > 100)
                          throw new Error(
                            "Position must be between 0 and 100."
                          );
                        (E = t), (this.hasBeenReset = !0);
                      },
                    })
                  ),
                  Object.defineProperty(
                    o,
                    "positionAlign",
                    n({}, l, {
                      get: function () {
                        return T;
                      },
                      set: function (t) {
                        var e = i(t);
                        if (!e)
                          throw new SyntaxError(
                            "An invalid or illegal string was specified."
                          );
                        (T = e), (this.hasBeenReset = !0);
                      },
                    })
                  ),
                  Object.defineProperty(
                    o,
                    "size",
                    n({}, l, {
                      get: function () {
                        return S;
                      },
                      set: function (t) {
                        if (t < 0 || t > 100)
                          throw new Error("Size must be between 0 and 100.");
                        (S = t), (this.hasBeenReset = !0);
                      },
                    })
                  ),
                  Object.defineProperty(
                    o,
                    "align",
                    n({}, l, {
                      get: function () {
                        return b;
                      },
                      set: function (t) {
                        var e = i(t);
                        if (!e)
                          throw new SyntaxError(
                            "An invalid or illegal string was specified."
                          );
                        (b = e), (this.hasBeenReset = !0);
                      },
                    })
                  ),
                  (o.displayState = void 0);
              }
              return (
                (a.prototype.getCueAsHTML = function () {
                  return self.WebVTT.convertCueToDOMTree(self, this.text);
                }),
                a
              );
            })();
            var br = (function () {
              function t() {}
              return (
                (t.prototype.decode = function (t, e) {
                  if (!t) return "";
                  if ("string" != typeof t)
                    throw new Error("Error - expected string data.");
                  return decodeURIComponent(encodeURIComponent(t));
                }),
                t
              );
            })();
            function Lr(t) {
              function e(t, e, r, i) {
                return (
                  3600 * (0 | t) + 60 * (0 | e) + (0 | r) + parseFloat(i || 0)
                );
              }
              var r = t.match(/^(?:(\d+):)?(\d{2}):(\d{2})(\.\d+)?/);
              return r
                ? parseFloat(r[2]) > 59
                  ? e(r[2], r[3], 0, r[4])
                  : e(r[1], r[2], r[3], r[4])
                : null;
            }
            var Ar = (function () {
              function t() {
                this.values = Object.create(null);
              }
              var e = t.prototype;
              return (
                (e.set = function (t, e) {
                  this.get(t) || "" === e || (this.values[t] = e);
                }),
                (e.get = function (t, e, r) {
                  return r
                    ? this.has(t)
                      ? this.values[t]
                      : e[r]
                    : this.has(t)
                    ? this.values[t]
                    : e;
                }),
                (e.has = function (t) {
                  return t in this.values;
                }),
                (e.alt = function (t, e, r) {
                  for (var i = 0; i < r.length; ++i)
                    if (e === r[i]) {
                      this.set(t, e);
                      break;
                    }
                }),
                (e.integer = function (t, e) {
                  /^-?\d+$/.test(e) && this.set(t, parseInt(e, 10));
                }),
                (e.percent = function (t, e) {
                  if (/^([\d]{1,3})(\.[\d]*)?%$/.test(e)) {
                    var r = parseFloat(e);
                    if (r >= 0 && r <= 100) return this.set(t, r), !0;
                  }
                  return !1;
                }),
                t
              );
            })();
            function Dr(t, e, r, i) {
              var n = i ? t.split(i) : [t];
              for (var a in n)
                if ("string" == typeof n[a]) {
                  var s = n[a].split(r);
                  2 === s.length && e(s[0], s[1]);
                }
            }
            var kr = new Sr(0, 0, ""),
              Rr = "middle" === kr.align ? "middle" : "center";
            function Ir(t, e, r) {
              var i = t;
              function n() {
                var e = Lr(t);
                if (null === e) throw new Error("Malformed timestamp: " + i);
                return (t = t.replace(/^[^\sa-zA-Z-]+/, "")), e;
              }
              function a() {
                t = t.replace(/^\s+/, "");
              }
              if ((a(), (e.startTime = n()), a(), "--\x3e" !== t.slice(0, 3)))
                throw new Error(
                  "Malformed time stamp (time stamps must be separated by '--\x3e'): " +
                    i
                );
              (t = t.slice(3)),
                a(),
                (e.endTime = n()),
                a(),
                (function (t, e) {
                  var i = new Ar();
                  Dr(
                    t,
                    function (t, e) {
                      var n;
                      switch (t) {
                        case "region":
                          for (var a = r.length - 1; a >= 0; a--)
                            if (r[a].id === e) {
                              i.set(t, r[a].region);
                              break;
                            }
                          break;
                        case "vertical":
                          i.alt(t, e, ["rl", "lr"]);
                          break;
                        case "line":
                          (n = e.split(",")),
                            i.integer(t, n[0]),
                            i.percent(t, n[0]) && i.set("snapToLines", !1),
                            i.alt(t, n[0], ["auto"]),
                            2 === n.length &&
                              i.alt("lineAlign", n[1], ["start", Rr, "end"]);
                          break;
                        case "position":
                          (n = e.split(",")),
                            i.percent(t, n[0]),
                            2 === n.length &&
                              i.alt("positionAlign", n[1], [
                                "start",
                                Rr,
                                "end",
                                "line-left",
                                "line-right",
                                "auto",
                              ]);
                          break;
                        case "size":
                          i.percent(t, e);
                          break;
                        case "align":
                          i.alt(t, e, ["start", Rr, "end", "left", "right"]);
                      }
                    },
                    /:/,
                    /\s/
                  ),
                    (e.region = i.get("region", null)),
                    (e.vertical = i.get("vertical", ""));
                  var n = i.get("line", "auto");
                  "auto" === n && -1 === kr.line && (n = -1),
                    (e.line = n),
                    (e.lineAlign = i.get("lineAlign", "start")),
                    (e.snapToLines = i.get("snapToLines", !0)),
                    (e.size = i.get("size", 100)),
                    (e.align = i.get("align", Rr));
                  var a = i.get("position", "auto");
                  "auto" === a &&
                    50 === kr.position &&
                    (a =
                      "start" === e.align || "left" === e.align
                        ? 0
                        : "end" === e.align || "right" === e.align
                        ? 100
                        : 50),
                    (e.position = a);
                })(t, e);
            }
            function wr(t) {
              return t.replace(/<br(?: \/)?>/gi, "\n");
            }
            var Cr = (function () {
                function t() {
                  (this.state = "INITIAL"),
                    (this.buffer = ""),
                    (this.decoder = new br()),
                    (this.regionList = []),
                    (this.cue = null),
                    (this.oncue = void 0),
                    (this.onparsingerror = void 0),
                    (this.onflush = void 0);
                }
                var e = t.prototype;
                return (
                  (e.parse = function (t) {
                    var e = this;
                    function r() {
                      var t = e.buffer,
                        r = 0;
                      for (
                        t = wr(t);
                        r < t.length && "\r" !== t[r] && "\n" !== t[r];

                      )
                        ++r;
                      var i = t.slice(0, r);
                      return (
                        "\r" === t[r] && ++r,
                        "\n" === t[r] && ++r,
                        (e.buffer = t.slice(r)),
                        i
                      );
                    }
                    t && (e.buffer += e.decoder.decode(t, { stream: !0 }));
                    try {
                      var i = "";
                      if ("INITIAL" === e.state) {
                        if (!/\r\n|\n/.test(e.buffer)) return this;
                        var n = (i = r()).match(/^(Ã¯Â»Â¿)?WEBVTT([ \t].*)?$/);
                        if (!n || !n[0])
                          throw new Error("Malformed WebVTT signature.");
                        e.state = "HEADER";
                      }
                      for (var a = !1; e.buffer; ) {
                        if (!/\r\n|\n/.test(e.buffer)) return this;
                        switch ((a ? (a = !1) : (i = r()), e.state)) {
                          case "HEADER":
                            /:/.test(i)
                              ? Dr(i, function (t, e) {}, /:/)
                              : i || (e.state = "ID");
                            continue;
                          case "NOTE":
                            i || (e.state = "ID");
                            continue;
                          case "ID":
                            if (/^NOTE($|[ \t])/.test(i)) {
                              e.state = "NOTE";
                              break;
                            }
                            if (!i) continue;
                            if (
                              ((e.cue = new Sr(0, 0, "")),
                              (e.state = "CUE"),
                              -1 === i.indexOf("--\x3e"))
                            ) {
                              e.cue.id = i;
                              continue;
                            }
                          case "CUE":
                            if (!e.cue) {
                              e.state = "BADCUE";
                              continue;
                            }
                            try {
                              Ir(i, e.cue, e.regionList);
                            } catch (t) {
                              (e.cue = null), (e.state = "BADCUE");
                              continue;
                            }
                            e.state = "CUETEXT";
                            continue;
                          case "CUETEXT":
                            var s = -1 !== i.indexOf("--\x3e");
                            if (!i || (s && (a = !0))) {
                              e.oncue && e.cue && e.oncue(e.cue),
                                (e.cue = null),
                                (e.state = "ID");
                              continue;
                            }
                            if (null === e.cue) continue;
                            e.cue.text && (e.cue.text += "\n"),
                              (e.cue.text += i);
                            continue;
                          case "BADCUE":
                            i || (e.state = "ID");
                        }
                      }
                    } catch (t) {
                      "CUETEXT" === e.state &&
                        e.cue &&
                        e.oncue &&
                        e.oncue(e.cue),
                        (e.cue = null),
                        (e.state =
                          "INITIAL" === e.state ? "BADWEBVTT" : "BADCUE");
                    }
                    return this;
                  }),
                  (e.flush = function () {
                    var t = this;
                    try {
                      if (
                        ((t.cue || "HEADER" === t.state) &&
                          ((t.buffer += "\n\n"), t.parse()),
                        "INITIAL" === t.state || "BADWEBVTT" === t.state)
                      )
                        throw new Error("Malformed WebVTT signature.");
                    } catch (e) {
                      t.onparsingerror && t.onparsingerror(e);
                    }
                    return t.onflush && t.onflush(), this;
                  }),
                  t
                );
              })(),
              _r = r(673),
              Pr = r(524),
              Or = /\r\n|\n\r|\n|\r/g,
              xr = function (t, e, r) {
                return void 0 === r && (r = 0), t.slice(r, r + e.length) === e;
              },
              Fr = function (t) {
                for (var e = 5381, r = t.length; r; )
                  e = (33 * e) ^ t.charCodeAt(--r);
                return (e >>> 0).toString();
              };
            function Mr(t, e, r) {
              return Fr(t.toString()) + Fr(e.toString()) + Fr(r);
            }
            function Nr() {
              return (
                (Nr = Object.assign
                  ? Object.assign.bind()
                  : function (t) {
                      for (var e = 1; e < arguments.length; e++) {
                        var r = arguments[e];
                        for (var i in r)
                          Object.prototype.hasOwnProperty.call(r, i) &&
                            (t[i] = r[i]);
                      }
                      return t;
                    }),
                Nr.apply(this, arguments)
              );
            }
            var Ur = "stpp.ttml.im1t",
              Br = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/,
              Gr = /^(\d*(?:\.\d*)?)(h|m|s|ms|f|t)$/,
              Kr = {
                left: "start",
                center: "center",
                right: "end",
                start: "start",
                end: "end",
              };
            function Hr(t, e, r, i, n) {
              var a = (0, R.findBox)(new Uint8Array(t), ["mdat"]);
              if (0 !== a.length) {
                var s = a.map(function (t) {
                    return (0, $.utf8ArrayToStr)(t);
                  }),
                  o = (0, _r.toTimescaleFromScale)(e, 1, r);
                try {
                  s.forEach(function (t) {
                    return i(
                      (function (t, e) {
                        var r = new DOMParser()
                          .parseFromString(t, "text/xml")
                          .getElementsByTagName("tt")[0];
                        if (!r) throw new Error("Invalid ttml");
                        var i = {
                            frameRate: 30,
                            subFrameRate: 1,
                            frameRateMultiplier: 0,
                            tickRate: 0,
                          },
                          n = Object.keys(i).reduce(function (t, e) {
                            return (
                              (t[e] = r.getAttribute("ttp:" + e) || i[e]), t
                            );
                          }, {}),
                          a = "preserve" !== r.getAttribute("xml:space"),
                          s = Vr(jr(r, "styling", "style")),
                          o = Vr(jr(r, "layout", "region")),
                          l = jr(r, "body", "[begin]");
                        return [].map
                          .call(l, function (t) {
                            var r = Yr(t, a);
                            if (!r || !t.hasAttribute("begin")) return null;
                            var i = Xr(t.getAttribute("begin"), n),
                              l = Xr(t.getAttribute("dur"), n),
                              u = Xr(t.getAttribute("end"), n);
                            if (null === i) throw qr(t);
                            if (null === u) {
                              if (null === l) throw qr(t);
                              u = i + l;
                            }
                            var d = new Sr(i - e, u - e, r);
                            d.id = Mr(d.startTime, d.endTime, d.text);
                            var h = (function (t, e, r) {
                                var i = "http://www.w3.org/ns/ttml#styling",
                                  n = null,
                                  a =
                                    null != t && t.hasAttribute("style")
                                      ? t.getAttribute("style")
                                      : null;
                                return (
                                  a && r.hasOwnProperty(a) && (n = r[a]),
                                  [
                                    "displayAlign",
                                    "textAlign",
                                    "color",
                                    "backgroundColor",
                                    "fontSize",
                                    "fontFamily",
                                  ].reduce(function (r, a) {
                                    var s =
                                      Wr(e, i, a) || Wr(t, i, a) || Wr(n, i, a);
                                    return s && (r[a] = s), r;
                                  }, {})
                                );
                              })(
                                o[t.getAttribute("region")],
                                s[t.getAttribute("style")],
                                s
                              ),
                              c = h.textAlign;
                            if (c) {
                              var f = Kr[c];
                              f && (d.lineAlign = f), (d.align = c);
                            }
                            return Nr(d, h), d;
                          })
                          .filter(function (t) {
                            return null !== t;
                          });
                      })(t, o)
                    );
                  });
                } catch (t) {
                  n(t);
                }
              } else n(new Error("Could not parse IMSC1 mdat"));
            }
            function jr(t, e, r) {
              var i = t.getElementsByTagName(e)[0];
              return i ? [].slice.call(i.querySelectorAll(r)) : [];
            }
            function Vr(t) {
              return t.reduce(function (t, e) {
                var r = e.getAttribute("xml:id");
                return r && (t[r] = e), t;
              }, {});
            }
            function Yr(t, e) {
              return [].slice.call(t.childNodes).reduce(function (t, r, i) {
                var n;
                return "br" === r.nodeName && i
                  ? t + "\n"
                  : null !== (n = r.childNodes) && void 0 !== n && n.length
                  ? Yr(r, e)
                  : e
                  ? t + r.textContent.trim().replace(/\s+/g, " ")
                  : t + r.textContent;
              }, "");
            }
            function Wr(t, e, r) {
              return t && t.hasAttributeNS(e, r)
                ? t.getAttributeNS(e, r)
                : null;
            }
            function qr(t) {
              return new Error("Could not parse ttml timestamp " + t);
            }
            function Xr(t, e) {
              if (!t) return null;
              var r = Lr(t);
              return (
                null === r &&
                  (Br.test(t)
                    ? (r = (function (t, e) {
                        var r = Br.exec(t),
                          i = (0 | r[4]) + (0 | r[5]) / e.subFrameRate;
                        return (
                          3600 * (0 | r[1]) +
                          60 * (0 | r[2]) +
                          (0 | r[3]) +
                          i / e.frameRate
                        );
                      })(t, e))
                    : Gr.test(t) &&
                      (r = (function (t, e) {
                        var r = Gr.exec(t),
                          i = Number(r[1]);
                        switch (r[2]) {
                          case "h":
                            return 3600 * i;
                          case "m":
                            return 60 * i;
                          case "ms":
                            return 1e3 * i;
                          case "f":
                            return i / e.frameRate;
                          case "t":
                            return i / e.tickRate;
                        }
                        return i;
                      })(t, e))),
                r
              );
            }
            var zr = (function () {
              function t(t) {
                if (
                  ((this.hls = void 0),
                  (this.media = null),
                  (this.config = void 0),
                  (this.enabled = !0),
                  (this.Cues = void 0),
                  (this.textTracks = []),
                  (this.tracks = []),
                  (this.initPTS = []),
                  (this.timescale = []),
                  (this.unparsedVttFrags = []),
                  (this.captionsTracks = {}),
                  (this.nonNativeCaptionsTracks = {}),
                  (this.cea608Parser1 = void 0),
                  (this.cea608Parser2 = void 0),
                  (this.lastSn = -1),
                  (this.lastPartIndex = -1),
                  (this.prevCC = -1),
                  (this.vttCCs = {
                    ccOffset: 0,
                    presentationOffset: 0,
                    0: { start: 0, prevCC: -1, new: !0 },
                  }),
                  (this.captionsProperties = void 0),
                  (this.hls = t),
                  (this.config = t.config),
                  (this.Cues = t.config.cueHandler),
                  (this.captionsProperties = {
                    textTrack1: {
                      label: this.config.captionsTextTrack1Label,
                      languageCode: this.config.captionsTextTrack1LanguageCode,
                    },
                    textTrack2: {
                      label: this.config.captionsTextTrack2Label,
                      languageCode: this.config.captionsTextTrack2LanguageCode,
                    },
                    textTrack3: {
                      label: this.config.captionsTextTrack3Label,
                      languageCode: this.config.captionsTextTrack3LanguageCode,
                    },
                    textTrack4: {
                      label: this.config.captionsTextTrack4Label,
                      languageCode: this.config.captionsTextTrack4LanguageCode,
                    },
                  }),
                  this.config.enableCEA708Captions)
                ) {
                  var e = new Tr(this, "textTrack1"),
                    r = new Tr(this, "textTrack2"),
                    i = new Tr(this, "textTrack3"),
                    n = new Tr(this, "textTrack4");
                  (this.cea608Parser1 = new Er(1, e, r)),
                    (this.cea608Parser2 = new Er(3, i, n));
                }
                t.on(s.Events.MEDIA_ATTACHING, this.onMediaAttaching, this),
                  t.on(s.Events.MEDIA_DETACHING, this.onMediaDetaching, this),
                  t.on(s.Events.MANIFEST_LOADING, this.onManifestLoading, this),
                  t.on(s.Events.MANIFEST_LOADED, this.onManifestLoaded, this),
                  t.on(
                    s.Events.SUBTITLE_TRACKS_UPDATED,
                    this.onSubtitleTracksUpdated,
                    this
                  ),
                  t.on(s.Events.FRAG_LOADING, this.onFragLoading, this),
                  t.on(s.Events.FRAG_LOADED, this.onFragLoaded, this),
                  t.on(
                    s.Events.FRAG_PARSING_USERDATA,
                    this.onFragParsingUserdata,
                    this
                  ),
                  t.on(s.Events.FRAG_DECRYPTED, this.onFragDecrypted, this),
                  t.on(s.Events.INIT_PTS_FOUND, this.onInitPtsFound, this),
                  t.on(
                    s.Events.SUBTITLE_TRACKS_CLEARED,
                    this.onSubtitleTracksCleared,
                    this
                  ),
                  t.on(s.Events.BUFFER_FLUSHING, this.onBufferFlushing, this);
              }
              var e = t.prototype;
              return (
                (e.destroy = function () {
                  var t = this.hls;
                  t.off(s.Events.MEDIA_ATTACHING, this.onMediaAttaching, this),
                    t.off(
                      s.Events.MEDIA_DETACHING,
                      this.onMediaDetaching,
                      this
                    ),
                    t.off(
                      s.Events.MANIFEST_LOADING,
                      this.onManifestLoading,
                      this
                    ),
                    t.off(
                      s.Events.MANIFEST_LOADED,
                      this.onManifestLoaded,
                      this
                    ),
                    t.off(
                      s.Events.SUBTITLE_TRACKS_UPDATED,
                      this.onSubtitleTracksUpdated,
                      this
                    ),
                    t.off(s.Events.FRAG_LOADING, this.onFragLoading, this),
                    t.off(s.Events.FRAG_LOADED, this.onFragLoaded, this),
                    t.off(
                      s.Events.FRAG_PARSING_USERDATA,
                      this.onFragParsingUserdata,
                      this
                    ),
                    t.off(s.Events.FRAG_DECRYPTED, this.onFragDecrypted, this),
                    t.off(s.Events.INIT_PTS_FOUND, this.onInitPtsFound, this),
                    t.off(
                      s.Events.SUBTITLE_TRACKS_CLEARED,
                      this.onSubtitleTracksCleared,
                      this
                    ),
                    t.off(
                      s.Events.BUFFER_FLUSHING,
                      this.onBufferFlushing,
                      this
                    ),
                    (this.hls =
                      this.config =
                      this.cea608Parser1 =
                      this.cea608Parser2 =
                        null);
                }),
                (e.addCues = function (t, e, r, i, n) {
                  for (var a, o, l, u, d = !1, h = n.length; h--; ) {
                    var c = n[h],
                      f =
                        ((a = c[0]),
                        (o = c[1]),
                        (l = e),
                        (u = r),
                        Math.min(o, u) - Math.max(a, l));
                    if (
                      f >= 0 &&
                      ((c[0] = Math.min(c[0], e)),
                      (c[1] = Math.max(c[1], r)),
                      (d = !0),
                      f / (r - e) > 0.5)
                    )
                      return;
                  }
                  if (
                    (d || n.push([e, r]), this.config.renderTextTracksNatively)
                  ) {
                    var g = this.captionsTracks[t];
                    this.Cues.newCue(g, e, r, i);
                  } else {
                    var v = this.Cues.newCue(null, e, r, i);
                    this.hls.trigger(s.Events.CUES_PARSED, {
                      type: "captions",
                      cues: v,
                      track: t,
                    });
                  }
                }),
                (e.onInitPtsFound = function (t, e) {
                  var r = this,
                    i = e.frag,
                    n = e.id,
                    a = e.initPTS,
                    o = e.timescale,
                    l = this.unparsedVttFrags;
                  "main" === n &&
                    ((this.initPTS[i.cc] = a), (this.timescale[i.cc] = o)),
                    l.length &&
                      ((this.unparsedVttFrags = []),
                      l.forEach(function (t) {
                        r.onFragLoaded(s.Events.FRAG_LOADED, t);
                      }));
                }),
                (e.getExistingTrack = function (t) {
                  var e = this.media;
                  if (e)
                    for (var r = 0; r < e.textTracks.length; r++) {
                      var i = e.textTracks[r];
                      if (i[t]) return i;
                    }
                  return null;
                }),
                (e.createCaptionsTrack = function (t) {
                  this.config.renderTextTracksNatively
                    ? this.createNativeTrack(t)
                    : this.createNonNativeTrack(t);
                }),
                (e.createNativeTrack = function (t) {
                  if (!this.captionsTracks[t]) {
                    var e = this.captionsProperties,
                      r = this.captionsTracks,
                      i = this.media,
                      n = e[t],
                      a = n.label,
                      s = n.languageCode,
                      o = this.getExistingTrack(t);
                    if (o) (r[t] = o), z(r[t]), q(r[t], i);
                    else {
                      var l = this.createTextTrack("captions", a, s);
                      l && ((l[t] = !0), (r[t] = l));
                    }
                  }
                }),
                (e.createNonNativeTrack = function (t) {
                  if (!this.nonNativeCaptionsTracks[t]) {
                    var e = this.captionsProperties[t];
                    if (e) {
                      var r = {
                        _id: t,
                        label: e.label,
                        kind: "captions",
                        default: !!e.media && !!e.media.default,
                        closedCaptions: e.media,
                      };
                      (this.nonNativeCaptionsTracks[t] = r),
                        this.hls.trigger(
                          s.Events.NON_NATIVE_TEXT_TRACKS_FOUND,
                          { tracks: [r] }
                        );
                    }
                  }
                }),
                (e.createTextTrack = function (t, e, r) {
                  var i = this.media;
                  if (i) return i.addTextTrack(t, e, r);
                }),
                (e.onMediaAttaching = function (t, e) {
                  (this.media = e.media), this._cleanTracks();
                }),
                (e.onMediaDetaching = function () {
                  var t = this.captionsTracks;
                  Object.keys(t).forEach(function (e) {
                    z(t[e]), delete t[e];
                  }),
                    (this.nonNativeCaptionsTracks = {});
                }),
                (e.onManifestLoading = function () {
                  (this.lastSn = -1),
                    (this.lastPartIndex = -1),
                    (this.prevCC = -1),
                    (this.vttCCs = {
                      ccOffset: 0,
                      presentationOffset: 0,
                      0: { start: 0, prevCC: -1, new: !0 },
                    }),
                    this._cleanTracks(),
                    (this.tracks = []),
                    (this.captionsTracks = {}),
                    (this.nonNativeCaptionsTracks = {}),
                    (this.textTracks = []),
                    (this.unparsedVttFrags = this.unparsedVttFrags || []),
                    (this.initPTS = []),
                    (this.timescale = []),
                    this.cea608Parser1 &&
                      this.cea608Parser2 &&
                      (this.cea608Parser1.reset(), this.cea608Parser2.reset());
                }),
                (e._cleanTracks = function () {
                  var t = this.media;
                  if (t) {
                    var e = t.textTracks;
                    if (e) for (var r = 0; r < e.length; r++) z(e[r]);
                  }
                }),
                (e.onSubtitleTracksUpdated = function (t, e) {
                  var r = this;
                  this.textTracks = [];
                  var i = e.subtitleTracks || [],
                    n = i.some(function (t) {
                      return t.textCodec === Ur;
                    });
                  if (
                    this.config.enableWebVTT ||
                    (n && this.config.enableIMSC1)
                  ) {
                    var a = this.tracks && i && this.tracks.length === i.length;
                    if (
                      ((this.tracks = i || []),
                      this.config.renderTextTracksNatively)
                    ) {
                      var o = this.media ? this.media.textTracks : [];
                      this.tracks.forEach(function (t, e) {
                        var i;
                        if (e < o.length) {
                          for (var n = null, a = 0; a < o.length; a++)
                            if (Qr(o[a], t)) {
                              n = o[a];
                              break;
                            }
                          n && (i = n);
                        }
                        if (i) z(i);
                        else {
                          var s = r._captionsOrSubtitlesFromCharacteristics(t);
                          (i = r.createTextTrack(s, t.name, t.lang)) &&
                            (i.mode = "disabled");
                        }
                        i && ((i.groupId = t.groupId), r.textTracks.push(i));
                      });
                    } else if (!a && this.tracks && this.tracks.length) {
                      var l = this.tracks.map(function (t) {
                        return {
                          label: t.name,
                          kind: t.type.toLowerCase(),
                          default: t.default,
                          subtitleTrack: t,
                        };
                      });
                      this.hls.trigger(s.Events.NON_NATIVE_TEXT_TRACKS_FOUND, {
                        tracks: l,
                      });
                    }
                  }
                }),
                (e._captionsOrSubtitlesFromCharacteristics = function (t) {
                  var e;
                  if (
                    null !== (e = t.attrs) &&
                    void 0 !== e &&
                    e.CHARACTERISTICS
                  ) {
                    var r = /transcribes-spoken-dialog/gi.test(
                        t.attrs.CHARACTERISTICS
                      ),
                      i = /describes-music-and-sound/gi.test(
                        t.attrs.CHARACTERISTICS
                      );
                    if (r && i) return "captions";
                  }
                  return "subtitles";
                }),
                (e.onManifestLoaded = function (t, e) {
                  var r = this;
                  this.config.enableCEA708Captions &&
                    e.captions &&
                    e.captions.forEach(function (t) {
                      var e = /(?:CC|SERVICE)([1-4])/.exec(t.instreamId);
                      if (e) {
                        var i = "textTrack" + e[1],
                          n = r.captionsProperties[i];
                        n &&
                          ((n.label = t.name),
                          t.lang && (n.languageCode = t.lang),
                          (n.media = t));
                      }
                    });
                }),
                (e.closedCaptionsForLevel = function (t) {
                  var e = this.hls.levels[t.level];
                  return null == e ? void 0 : e.attrs["CLOSED-CAPTIONS"];
                }),
                (e.onFragLoading = function (t, e) {
                  var r = this.cea608Parser1,
                    i = this.cea608Parser2,
                    n = this.lastSn,
                    a = this.lastPartIndex;
                  if (
                    this.enabled &&
                    r &&
                    i &&
                    e.frag.type === V.PlaylistLevelType.MAIN
                  ) {
                    var s,
                      o,
                      l = e.frag.sn,
                      u =
                        null !=
                        (s =
                          null == e || null === (o = e.part) || void 0 === o
                            ? void 0
                            : o.index)
                          ? s
                          : -1;
                    l === n + 1 ||
                      (l === n && u === a + 1) ||
                      (r.reset(), i.reset()),
                      (this.lastSn = l),
                      (this.lastPartIndex = u);
                  }
                }),
                (e.onFragLoaded = function (t, e) {
                  var r = e.frag,
                    i = e.payload,
                    n = this.initPTS,
                    o = this.unparsedVttFrags;
                  if (r.type === V.PlaylistLevelType.SUBTITLE)
                    if (i.byteLength) {
                      if (!(0, a.isFiniteNumber)(n[r.cc]))
                        return (
                          o.push(e),
                          void (
                            n.length &&
                            this.hls.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, {
                              success: !1,
                              frag: r,
                              error: new Error("Missing initial subtitle PTS"),
                            })
                          )
                        );
                      var l = r.decryptdata,
                        u = "stats" in e;
                      if (null == l || !l.encrypted || u) {
                        var d = this.tracks[r.level],
                          h = this.vttCCs;
                        h[r.cc] ||
                          ((h[r.cc] = {
                            start: r.start,
                            prevCC: this.prevCC,
                            new: !0,
                          }),
                          (this.prevCC = r.cc)),
                          d && d.textCodec === Ur
                            ? this._parseIMSC1(r, i)
                            : this._parseVTTs(r, i, h);
                      }
                    } else
                      this.hls.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, {
                        success: !1,
                        frag: r,
                        error: new Error("Empty subtitle payload"),
                      });
                }),
                (e._parseIMSC1 = function (t, e) {
                  var r = this,
                    i = this.hls;
                  Hr(
                    e,
                    this.initPTS[t.cc],
                    this.timescale[t.cc],
                    function (e) {
                      r._appendCues(e, t.level),
                        i.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, {
                          success: !0,
                          frag: t,
                        });
                    },
                    function (e) {
                      l.logger.log("Failed to parse IMSC1: " + e),
                        i.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, {
                          success: !1,
                          frag: t,
                          error: e,
                        });
                    }
                  );
                }),
                (e._parseVTTs = function (t, e, r) {
                  var i,
                    n = this,
                    o = this.hls;
                  !(function (t, e, r, i, n, s, o, l) {
                    var u,
                      d = new Cr(),
                      h = (0, $.utf8ArrayToStr)(new Uint8Array(t))
                        .trim()
                        .replace(Or, "\n")
                        .split("\n"),
                      c = [],
                      f = (0, _r.toMpegTsClockFromTimescale)(e, r),
                      g = "00:00.000",
                      v = 0,
                      p = 0,
                      m = !0;
                    (d.oncue = function (t) {
                      var e = i[n],
                        r = i.ccOffset,
                        a = (v - f) / 9e4;
                      null != e &&
                        e.new &&
                        (void 0 !== p
                          ? (r = i.ccOffset = e.start)
                          : (function (t, e, r) {
                              var i = t[e],
                                n = t[i.prevCC];
                              if (!n || (!n.new && i.new))
                                return (
                                  (t.ccOffset = t.presentationOffset = i.start),
                                  void (i.new = !1)
                                );
                              for (
                                ;
                                null !== (a = n) && void 0 !== a && a.new;

                              ) {
                                var a;
                                (t.ccOffset += i.start - n.start),
                                  (i.new = !1),
                                  (n = t[(i = n).prevCC]);
                              }
                              t.presentationOffset = r;
                            })(i, n, a)),
                        a && (r = a - i.presentationOffset);
                      var o = t.endTime - t.startTime,
                        l =
                          (0, Pr.normalizePts)(
                            9e4 * (t.startTime + r - p),
                            9e4 * s
                          ) / 9e4;
                      (t.startTime = Math.max(l, 0)),
                        (t.endTime = Math.max(l + o, 0));
                      var u = t.text.trim();
                      (t.text = decodeURIComponent(encodeURIComponent(u))),
                        t.id || (t.id = Mr(t.startTime, t.endTime, u)),
                        t.endTime > 0 && c.push(t);
                    }),
                      (d.onparsingerror = function (t) {
                        u = t;
                      }),
                      (d.onflush = function () {
                        u ? l(u) : o(c);
                      }),
                      h.forEach(function (t) {
                        if (m) {
                          if (xr(t, "X-TIMESTAMP-MAP=")) {
                            (m = !1),
                              t
                                .slice(16)
                                .split(",")
                                .forEach(function (t) {
                                  xr(t, "LOCAL:")
                                    ? (g = t.slice(6))
                                    : xr(t, "MPEGTS:") &&
                                      (v = parseInt(t.slice(7)));
                                });
                            try {
                              p =
                                (function (t) {
                                  var e = parseInt(t.slice(-3)),
                                    r = parseInt(t.slice(-6, -4)),
                                    i = parseInt(t.slice(-9, -7)),
                                    n =
                                      t.length > 9
                                        ? parseInt(
                                            t.substring(0, t.indexOf(":"))
                                          )
                                        : 0;
                                  if (
                                    !(
                                      (0, a.isFiniteNumber)(e) &&
                                      (0, a.isFiniteNumber)(r) &&
                                      (0, a.isFiniteNumber)(i) &&
                                      (0, a.isFiniteNumber)(n)
                                    )
                                  )
                                    throw Error(
                                      "Malformed X-TIMESTAMP-MAP: Local:" + t
                                    );
                                  return (
                                    (e += 1e3 * r), (e += 6e4 * i) + 36e5 * n
                                  );
                                })(g) / 1e3;
                            } catch (t) {
                              u = t;
                            }
                            return;
                          }
                          "" === t && (m = !1);
                        }
                        d.parse(t + "\n");
                      }),
                      d.flush();
                  })(
                    null !== (i = t.initSegment) && void 0 !== i && i.data
                      ? (0, R.appendUint8Array)(
                          t.initSegment.data,
                          new Uint8Array(e)
                        )
                      : e,
                    this.initPTS[t.cc],
                    this.timescale[t.cc],
                    r,
                    t.cc,
                    t.start,
                    function (e) {
                      n._appendCues(e, t.level),
                        o.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, {
                          success: !0,
                          frag: t,
                        });
                    },
                    function (r) {
                      n._fallbackToIMSC1(t, e),
                        l.logger.log("Failed to parse VTT cue: " + r),
                        o.trigger(s.Events.SUBTITLE_FRAG_PROCESSED, {
                          success: !1,
                          frag: t,
                          error: r,
                        });
                    }
                  );
                }),
                (e._fallbackToIMSC1 = function (t, e) {
                  var r = this,
                    i = this.tracks[t.level];
                  i.textCodec ||
                    Hr(
                      e,
                      this.initPTS[t.cc],
                      this.timescale[t.cc],
                      function () {
                        (i.textCodec = Ur), r._parseIMSC1(t, e);
                      },
                      function () {
                        i.textCodec = "wvtt";
                      }
                    );
                }),
                (e._appendCues = function (t, e) {
                  var r = this.hls;
                  if (this.config.renderTextTracksNatively) {
                    var i = this.textTracks[e];
                    if (!i || "disabled" === i.mode) return;
                    t.forEach(function (t) {
                      return X(i, t);
                    });
                  } else {
                    var n = this.tracks[e];
                    if (!n) return;
                    var a = n.default ? "default" : "subtitles" + e;
                    r.trigger(s.Events.CUES_PARSED, {
                      type: "subtitles",
                      cues: t,
                      track: a,
                    });
                  }
                }),
                (e.onFragDecrypted = function (t, e) {
                  var r = e.frag;
                  if (r.type === V.PlaylistLevelType.SUBTITLE) {
                    if (!(0, a.isFiniteNumber)(this.initPTS[r.cc]))
                      return void this.unparsedVttFrags.push(e);
                    this.onFragLoaded(s.Events.FRAG_LOADED, e);
                  }
                }),
                (e.onSubtitleTracksCleared = function () {
                  (this.tracks = []), (this.captionsTracks = {});
                }),
                (e.onFragParsingUserdata = function (t, e) {
                  var r = this.cea608Parser1,
                    i = this.cea608Parser2;
                  if (this.enabled && r && i) {
                    var n = e.frag,
                      a = e.samples;
                    if (
                      n.type !== V.PlaylistLevelType.MAIN ||
                      "NONE" !== this.closedCaptionsForLevel(n)
                    )
                      for (var s = 0; s < a.length; s++) {
                        var o = a[s].bytes;
                        if (o) {
                          var l = this.extractCea608Data(o);
                          r.addData(a[s].pts, l[0]), i.addData(a[s].pts, l[1]);
                        }
                      }
                  }
                }),
                (e.onBufferFlushing = function (t, e) {
                  var r = e.startOffset,
                    i = e.endOffset,
                    n = e.endOffsetSubtitles,
                    a = e.type,
                    s = this.media;
                  if (s && !(s.currentTime < i)) {
                    if (!a || "video" === a) {
                      var o = this.captionsTracks;
                      Object.keys(o).forEach(function (t) {
                        return Q(o[t], r, i);
                      });
                    }
                    if (
                      this.config.renderTextTracksNatively &&
                      0 === r &&
                      void 0 !== n
                    ) {
                      var l = this.textTracks;
                      Object.keys(l).forEach(function (t) {
                        return Q(l[t], r, n);
                      });
                    }
                  }
                }),
                (e.extractCea608Data = function (t) {
                  for (
                    var e = [[], []], r = 31 & t[0], i = 2, n = 0;
                    n < r;
                    n++
                  ) {
                    var a = t[i++],
                      s = 127 & t[i++],
                      o = 127 & t[i++];
                    if ((0 !== s || 0 !== o) && 0 != (4 & a)) {
                      var l = 3 & a;
                      (0 !== l && 1 !== l) || (e[l].push(s), e[l].push(o));
                    }
                  }
                  return e;
                }),
                t
              );
            })();
            function Qr(t, e) {
              return t && t.label === e.name && !(t.textTrack1 || t.textTrack2);
            }
            function $r(t, e) {
              for (var r = 0; r < e.length; r++) {
                var i = e[r];
                (i.enumerable = i.enumerable || !1),
                  (i.configurable = !0),
                  "value" in i && (i.writable = !0),
                  Object.defineProperty(
                    t,
                    (void 0,
                    "symbol" ==
                    typeof (n = (function (t, e) {
                      if ("object" != typeof t || null === t) return t;
                      var r = t[Symbol.toPrimitive];
                      if (void 0 !== r) {
                        var i = r.call(t, e);
                        if ("object" != typeof i) return i;
                        throw new TypeError(
                          "@@toPrimitive must return a primitive value."
                        );
                      }
                      return String(t);
                    })(i.key, "string"))
                      ? n
                      : String(n)),
                    i
                  );
              }
              var n;
            }
            const Jr = (function () {
                function t(t) {
                  (this.autoLevelCapping = void 0),
                    (this.firstLevel = void 0),
                    (this.media = void 0),
                    (this.restrictedLevels = void 0),
                    (this.timer = void 0),
                    (this.hls = void 0),
                    (this.streamController = void 0),
                    (this.clientRect = void 0),
                    (this.hls = t),
                    (this.autoLevelCapping = Number.POSITIVE_INFINITY),
                    (this.firstLevel = -1),
                    (this.media = null),
                    (this.restrictedLevels = []),
                    (this.timer = void 0),
                    (this.clientRect = null),
                    this.registerListeners();
                }
                var e,
                  r,
                  i = t.prototype;
                return (
                  (i.setStreamController = function (t) {
                    this.streamController = t;
                  }),
                  (i.destroy = function () {
                    this.unregisterListener(),
                      this.hls.config.capLevelToPlayerSize &&
                        this.stopCapping(),
                      (this.media = null),
                      (this.clientRect = null),
                      (this.hls = this.streamController = null);
                  }),
                  (i.registerListeners = function () {
                    var t = this.hls;
                    t.on(
                      s.Events.FPS_DROP_LEVEL_CAPPING,
                      this.onFpsDropLevelCapping,
                      this
                    ),
                      t.on(
                        s.Events.MEDIA_ATTACHING,
                        this.onMediaAttaching,
                        this
                      ),
                      t.on(
                        s.Events.MANIFEST_PARSED,
                        this.onManifestParsed,
                        this
                      ),
                      t.on(s.Events.BUFFER_CODECS, this.onBufferCodecs, this),
                      t.on(
                        s.Events.MEDIA_DETACHING,
                        this.onMediaDetaching,
                        this
                      );
                  }),
                  (i.unregisterListener = function () {
                    var t = this.hls;
                    t.off(
                      s.Events.FPS_DROP_LEVEL_CAPPING,
                      this.onFpsDropLevelCapping,
                      this
                    ),
                      t.off(
                        s.Events.MEDIA_ATTACHING,
                        this.onMediaAttaching,
                        this
                      ),
                      t.off(
                        s.Events.MANIFEST_PARSED,
                        this.onManifestParsed,
                        this
                      ),
                      t.off(s.Events.BUFFER_CODECS, this.onBufferCodecs, this),
                      t.off(
                        s.Events.MEDIA_DETACHING,
                        this.onMediaDetaching,
                        this
                      );
                  }),
                  (i.onFpsDropLevelCapping = function (e, r) {
                    t.isLevelAllowed(r.droppedLevel, this.restrictedLevels) &&
                      this.restrictedLevels.push(r.droppedLevel);
                  }),
                  (i.onMediaAttaching = function (t, e) {
                    (this.media =
                      e.media instanceof HTMLVideoElement ? e.media : null),
                      (this.clientRect = null);
                  }),
                  (i.onManifestParsed = function (t, e) {
                    var r = this.hls;
                    (this.restrictedLevels = []),
                      (this.firstLevel = e.firstLevel),
                      r.config.capLevelToPlayerSize &&
                        e.video &&
                        this.startCapping();
                  }),
                  (i.onBufferCodecs = function (t, e) {
                    this.hls.config.capLevelToPlayerSize &&
                      e.video &&
                      this.startCapping();
                  }),
                  (i.onMediaDetaching = function () {
                    this.stopCapping();
                  }),
                  (i.detectPlayerSize = function () {
                    if (
                      this.media &&
                      this.mediaHeight > 0 &&
                      this.mediaWidth > 0
                    ) {
                      var t = this.hls.levels;
                      if (t.length) {
                        var e = this.hls;
                        (e.autoLevelCapping = this.getMaxLevel(t.length - 1)),
                          e.autoLevelCapping > this.autoLevelCapping &&
                            this.streamController &&
                            this.streamController.nextLevelSwitch(),
                          (this.autoLevelCapping = e.autoLevelCapping);
                      }
                    }
                  }),
                  (i.getMaxLevel = function (e) {
                    var r = this,
                      i = this.hls.levels;
                    if (!i.length) return -1;
                    var n = i.filter(function (i, n) {
                      return t.isLevelAllowed(n, r.restrictedLevels) && n <= e;
                    });
                    return (
                      (this.clientRect = null),
                      t.getMaxLevelByMediaSize(
                        n,
                        this.mediaWidth,
                        this.mediaHeight
                      )
                    );
                  }),
                  (i.startCapping = function () {
                    this.timer ||
                      ((this.autoLevelCapping = Number.POSITIVE_INFINITY),
                      (this.hls.firstLevel = this.getMaxLevel(this.firstLevel)),
                      self.clearInterval(this.timer),
                      (this.timer = self.setInterval(
                        this.detectPlayerSize.bind(this),
                        1e3
                      )),
                      this.detectPlayerSize());
                  }),
                  (i.stopCapping = function () {
                    (this.restrictedLevels = []),
                      (this.firstLevel = -1),
                      (this.autoLevelCapping = Number.POSITIVE_INFINITY),
                      this.timer &&
                        (self.clearInterval(this.timer), (this.timer = void 0));
                  }),
                  (i.getDimensions = function () {
                    if (this.clientRect) return this.clientRect;
                    var t = this.media,
                      e = { width: 0, height: 0 };
                    if (t) {
                      var r = t.getBoundingClientRect();
                      (e.width = r.width),
                        (e.height = r.height),
                        e.width ||
                          e.height ||
                          ((e.width = r.right - r.left || t.width || 0),
                          (e.height = r.bottom - r.top || t.height || 0));
                    }
                    return (this.clientRect = e), e;
                  }),
                  (t.isLevelAllowed = function (t, e) {
                    return void 0 === e && (e = []), -1 === e.indexOf(t);
                  }),
                  (t.getMaxLevelByMediaSize = function (t, e, r) {
                    if (!t || !t.length) return -1;
                    for (
                      var i, n, a = t.length - 1, s = 0;
                      s < t.length;
                      s += 1
                    ) {
                      var o = t[s];
                      if (
                        (o.width >= e || o.height >= r) &&
                        ((i = o),
                        !(n = t[s + 1]) ||
                          i.width !== n.width ||
                          i.height !== n.height)
                      ) {
                        a = s;
                        break;
                      }
                    }
                    return a;
                  }),
                  (e = t),
                  (r = [
                    {
                      key: "mediaWidth",
                      get: function () {
                        return (
                          this.getDimensions().width * this.contentScaleFactor
                        );
                      },
                    },
                    {
                      key: "mediaHeight",
                      get: function () {
                        return (
                          this.getDimensions().height * this.contentScaleFactor
                        );
                      },
                    },
                    {
                      key: "contentScaleFactor",
                      get: function () {
                        var t = 1;
                        if (!this.hls.config.ignoreDevicePixelRatio)
                          try {
                            t = self.devicePixelRatio;
                          } catch (t) {}
                        return t;
                      },
                    },
                  ]) && $r(e.prototype, r),
                  Object.defineProperty(e, "prototype", { writable: !1 }),
                  t
                );
              })(),
              Zr = (function () {
                function t(t) {
                  (this.hls = void 0),
                    (this.isVideoPlaybackQualityAvailable = !1),
                    (this.timer = void 0),
                    (this.media = null),
                    (this.lastTime = void 0),
                    (this.lastDroppedFrames = 0),
                    (this.lastDecodedFrames = 0),
                    (this.streamController = void 0),
                    (this.hls = t),
                    this.registerListeners();
                }
                var e = t.prototype;
                return (
                  (e.setStreamController = function (t) {
                    this.streamController = t;
                  }),
                  (e.registerListeners = function () {
                    this.hls.on(
                      s.Events.MEDIA_ATTACHING,
                      this.onMediaAttaching,
                      this
                    );
                  }),
                  (e.unregisterListeners = function () {
                    this.hls.off(
                      s.Events.MEDIA_ATTACHING,
                      this.onMediaAttaching
                    );
                  }),
                  (e.destroy = function () {
                    this.timer && clearInterval(this.timer),
                      this.unregisterListeners(),
                      (this.isVideoPlaybackQualityAvailable = !1),
                      (this.media = null);
                  }),
                  (e.onMediaAttaching = function (t, e) {
                    var r = this.hls.config;
                    if (r.capLevelOnFPSDrop) {
                      var i =
                        e.media instanceof self.HTMLVideoElement
                          ? e.media
                          : null;
                      (this.media = i),
                        i &&
                          "function" == typeof i.getVideoPlaybackQuality &&
                          (this.isVideoPlaybackQualityAvailable = !0),
                        self.clearInterval(this.timer),
                        (this.timer = self.setInterval(
                          this.checkFPSInterval.bind(this),
                          r.fpsDroppedMonitoringPeriod
                        ));
                    }
                  }),
                  (e.checkFPS = function (t, e, r) {
                    var i = performance.now();
                    if (e) {
                      if (this.lastTime) {
                        var n = i - this.lastTime,
                          a = r - this.lastDroppedFrames,
                          o = e - this.lastDecodedFrames,
                          u = (1e3 * a) / n,
                          d = this.hls;
                        if (
                          (d.trigger(s.Events.FPS_DROP, {
                            currentDropped: a,
                            currentDecoded: o,
                            totalDroppedFrames: r,
                          }),
                          u > 0 &&
                            a > d.config.fpsDroppedMonitoringThreshold * o)
                        ) {
                          var h = d.currentLevel;
                          l.logger.warn(
                            "drop FPS ratio greater than max allowed value for currentLevel: " +
                              h
                          ),
                            h > 0 &&
                              (-1 === d.autoLevelCapping ||
                                d.autoLevelCapping >= h) &&
                              ((h -= 1),
                              d.trigger(s.Events.FPS_DROP_LEVEL_CAPPING, {
                                level: h,
                                droppedLevel: d.currentLevel,
                              }),
                              (d.autoLevelCapping = h),
                              this.streamController.nextLevelSwitch());
                        }
                      }
                      (this.lastTime = i),
                        (this.lastDroppedFrames = r),
                        (this.lastDecodedFrames = e);
                    }
                  }),
                  (e.checkFPSInterval = function () {
                    var t = this.media;
                    if (t)
                      if (this.isVideoPlaybackQualityAvailable) {
                        var e = t.getVideoPlaybackQuality();
                        this.checkFPS(
                          t,
                          e.totalVideoFrames,
                          e.droppedVideoFrames
                        );
                      } else
                        this.checkFPS(
                          t,
                          t.webkitDecodedFrameCount,
                          t.webkitDroppedFrameCount
                        );
                  }),
                  t
                );
              })();
            var ti = r(300);
            function ei(t) {
              var e = "function" == typeof Map ? new Map() : void 0;
              return (
                (ei = function (t) {
                  if (
                    null === t ||
                    ((r = t),
                    -1 === Function.toString.call(r).indexOf("[native code]"))
                  )
                    return t;
                  var r;
                  if ("function" != typeof t)
                    throw new TypeError(
                      "Super expression must either be null or a function"
                    );
                  if (void 0 !== e) {
                    if (e.has(t)) return e.get(t);
                    e.set(t, i);
                  }
                  function i() {
                    return ri(t, arguments, ai(this).constructor);
                  }
                  return (
                    (i.prototype = Object.create(t.prototype, {
                      constructor: {
                        value: i,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                      },
                    })),
                    ni(i, t)
                  );
                }),
                ei(t)
              );
            }
            function ri(t, e, r) {
              return (
                (ri = ii()
                  ? Reflect.construct.bind()
                  : function (t, e, r) {
                      var i = [null];
                      i.push.apply(i, e);
                      var n = new (Function.bind.apply(t, i))();
                      return r && ni(n, r.prototype), n;
                    }),
                ri.apply(null, arguments)
              );
            }
            function ii() {
              if ("undefined" == typeof Reflect || !Reflect.construct)
                return !1;
              if (Reflect.construct.sham) return !1;
              if ("function" == typeof Proxy) return !0;
              try {
                return (
                  Boolean.prototype.valueOf.call(
                    Reflect.construct(Boolean, [], function () {})
                  ),
                  !0
                );
              } catch (t) {
                return !1;
              }
            }
            function ni(t, e) {
              return (
                (ni = Object.setPrototypeOf
                  ? Object.setPrototypeOf.bind()
                  : function (t, e) {
                      return (t.__proto__ = e), t;
                    }),
                ni(t, e)
              );
            }
            function ai(t) {
              return (
                (ai = Object.setPrototypeOf
                  ? Object.getPrototypeOf.bind()
                  : function (t) {
                      return t.__proto__ || Object.getPrototypeOf(t);
                    }),
                ai(t)
              );
            }
            var si = "[eme]",
              oi = (function () {
                function t(e) {
                  (this.hls = void 0),
                    (this.config = void 0),
                    (this.media = null),
                    (this.keyFormatPromise = null),
                    (this.keySystemAccessPromises = {}),
                    (this._requestLicenseFailureCount = 0),
                    (this.mediaKeySessions = []),
                    (this.keyIdToKeySessionPromise = {}),
                    (this.setMediaKeysQueue = t.CDMCleanupPromise
                      ? [t.CDMCleanupPromise]
                      : []),
                    (this.onMediaEncrypted = this._onMediaEncrypted.bind(this)),
                    (this.onWaitingForKey = this._onWaitingForKey.bind(this)),
                    (this.debug = l.logger.debug.bind(l.logger, si)),
                    (this.log = l.logger.log.bind(l.logger, si)),
                    (this.warn = l.logger.warn.bind(l.logger, si)),
                    (this.error = l.logger.error.bind(l.logger, si)),
                    (this.hls = e),
                    (this.config = e.config),
                    this.registerListeners();
                }
                var e = t.prototype;
                return (
                  (e.destroy = function () {
                    this.unregisterListeners(),
                      this.onMediaDetached(),
                      (this.hls =
                        this.onMediaEncrypted =
                        this.onWaitingForKey =
                        this.keyIdToKeySessionPromise =
                          null);
                  }),
                  (e.registerListeners = function () {
                    this.hls.on(
                      s.Events.MEDIA_ATTACHED,
                      this.onMediaAttached,
                      this
                    ),
                      this.hls.on(
                        s.Events.MEDIA_DETACHED,
                        this.onMediaDetached,
                        this
                      ),
                      this.hls.on(
                        s.Events.MANIFEST_LOADED,
                        this.onManifestLoaded,
                        this
                      );
                  }),
                  (e.unregisterListeners = function () {
                    this.hls.off(
                      s.Events.MEDIA_ATTACHED,
                      this.onMediaAttached,
                      this
                    ),
                      this.hls.off(
                        s.Events.MEDIA_DETACHED,
                        this.onMediaDetached,
                        this
                      ),
                      this.hls.off(
                        s.Events.MANIFEST_LOADED,
                        this.onManifestLoaded,
                        this
                      );
                  }),
                  (e.getLicenseServerUrl = function (t) {
                    var e = this.config,
                      r = e.drmSystems,
                      i = e.widevineLicenseUrl,
                      n = r[t];
                    if (n) return n.licenseUrl;
                    if (t === m.WIDEVINE && i) return i;
                    throw new Error(
                      'no license server URL configured for key-system "' +
                        t +
                        '"'
                    );
                  }),
                  (e.getServerCertificateUrl = function (t) {
                    var e = this.config.drmSystems[t];
                    if (e) return e.serverCertificateUrl;
                    this.log(
                      'No Server Certificate in config.drmSystems["' + t + '"]'
                    );
                  }),
                  (e.attemptKeySystemAccess = function (t) {
                    var e = this,
                      r = this.hls.levels,
                      i = function (t, e, r) {
                        return !!t && r.indexOf(t) === e;
                      },
                      n = r
                        .map(function (t) {
                          return t.audioCodec;
                        })
                        .filter(i),
                      a = r
                        .map(function (t) {
                          return t.videoCodec;
                        })
                        .filter(i);
                    return (
                      n.length + a.length === 0 && a.push("avc1.42e01e"),
                      new Promise(function (r, i) {
                        !(function t(s) {
                          var l = s.shift();
                          e.getMediaKeysPromise(l, n, a)
                            .then(function (t) {
                              return r({ keySystem: l, mediaKeys: t });
                            })
                            .catch(function (e) {
                              s.length
                                ? t(s)
                                : i(
                                    e instanceof li
                                      ? e
                                      : new li(
                                          {
                                            type: o.ErrorTypes.KEY_SYSTEM_ERROR,
                                            details:
                                              o.ErrorDetails
                                                .KEY_SYSTEM_NO_ACCESS,
                                            error: e,
                                            fatal: !0,
                                          },
                                          e.message
                                        )
                                  );
                            });
                        })(t);
                      })
                    );
                  }),
                  (e.requestMediaKeySystemAccess = function (t, e) {
                    var r = this.config.requestMediaKeySystemAccessFunc;
                    if ("function" != typeof r) {
                      var i =
                        "Configured requestMediaKeySystemAccess is not a function " +
                        r;
                      return (
                        null === k &&
                          "http:" === self.location.protocol &&
                          (i =
                            "navigator.requestMediaKeySystemAccess is not available over insecure protocol " +
                            location.protocol),
                        Promise.reject(new Error(i))
                      );
                    }
                    return r(t, e);
                  }),
                  (e.getMediaKeysPromise = function (t, e, r) {
                    var i = this,
                      n = (function (t, e, r, i) {
                        var n;
                        switch (t) {
                          case m.FAIRPLAY:
                            n = ["cenc", "sinf"];
                            break;
                          case m.WIDEVINE:
                          case m.PLAYREADY:
                            n = ["cenc"];
                            break;
                          case m.CLEARKEY:
                            n = ["cenc", "keyids"];
                            break;
                          default:
                            throw new Error("Unknown key-system: " + t);
                        }
                        return (function (t, e, r, i) {
                          return [
                            {
                              initDataTypes: t,
                              persistentState:
                                i.persistentState || "not-allowed",
                              distinctiveIdentifier:
                                i.distinctiveIdentifier || "not-allowed",
                              sessionTypes: i.sessionTypes || [
                                i.sessionType || "temporary",
                              ],
                              audioCapabilities: e.map(function (t) {
                                return {
                                  contentType: 'audio/mp4; codecs="' + t + '"',
                                  robustness: i.audioRobustness || "",
                                  encryptionScheme:
                                    i.audioEncryptionScheme || null,
                                };
                              }),
                              videoCapabilities: r.map(function (t) {
                                return {
                                  contentType: 'video/mp4; codecs="' + t + '"',
                                  robustness: i.videoRobustness || "",
                                  encryptionScheme:
                                    i.videoEncryptionScheme || null,
                                };
                              }),
                            },
                          ];
                        })(n, e, r, i);
                      })(t, e, r, this.config.drmSystemOptions),
                      a = this.keySystemAccessPromises[t],
                      s = null == a ? void 0 : a.keySystemAccess;
                    if (!s) {
                      this.log(
                        'Requesting encrypted media "' +
                          t +
                          '" key-system access with config: ' +
                          JSON.stringify(n)
                      ),
                        (s = this.requestMediaKeySystemAccess(t, n));
                      var o = (this.keySystemAccessPromises[t] = {
                        keySystemAccess: s,
                      });
                      return (
                        s.catch(function (e) {
                          i.log(
                            'Failed to obtain access to key-system "' +
                              t +
                              '": ' +
                              e
                          );
                        }),
                        s.then(function (e) {
                          i.log(
                            'Access for key-system "' +
                              e.keySystem +
                              '" obtained'
                          );
                          var r = i.fetchServerCertificate(t);
                          return (
                            i.log('Create media-keys for "' + t + '"'),
                            (o.mediaKeys = e
                              .createMediaKeys()
                              .then(function (e) {
                                return (
                                  i.log('Media-keys created for "' + t + '"'),
                                  r.then(function (r) {
                                    return r
                                      ? i.setMediaKeysServerCertificate(e, t, r)
                                      : e;
                                  })
                                );
                              })),
                            o.mediaKeys.catch(function (e) {
                              i.error(
                                'Failed to create media-keys for "' +
                                  t +
                                  '"}: ' +
                                  e
                              );
                            }),
                            o.mediaKeys
                          );
                        })
                      );
                    }
                    return s.then(function () {
                      return a.mediaKeys;
                    });
                  }),
                  (e.createMediaKeySessionContext = function (t) {
                    var e = t.decryptdata,
                      r = t.keySystem,
                      i = t.mediaKeys;
                    this.log(
                      'Creating key-system session "' +
                        r +
                        '" keyId: ' +
                        ti.default.hexDump(e.keyId || [])
                    );
                    var n = i.createSession(),
                      a = {
                        decryptdata: e,
                        keySystem: r,
                        mediaKeys: i,
                        mediaKeysSession: n,
                        keyStatus: "status-pending",
                      };
                    return this.mediaKeySessions.push(a), a;
                  }),
                  (e.renewKeySession = function (t) {
                    var e = t.decryptdata;
                    if (e.pssh) {
                      var r = this.createMediaKeySessionContext(t),
                        i = this.getKeyIdString(e);
                      this.keyIdToKeySessionPromise[i] =
                        this.generateRequestWithPreferredKeySession(
                          r,
                          "cenc",
                          e.pssh,
                          "expired"
                        );
                    } else
                      this.warn(
                        "Could not renew expired session. Missing pssh initData."
                      );
                    this.removeSession(t);
                  }),
                  (e.getKeyIdString = function (t) {
                    if (!t)
                      throw new Error(
                        "Could not read keyId of undefined decryptdata"
                      );
                    if (null === t.keyId) throw new Error("keyId is null");
                    return ti.default.hexDump(t.keyId);
                  }),
                  (e.updateKeySession = function (t, e) {
                    var r,
                      i = t.mediaKeysSession;
                    return (
                      this.log(
                        'Updating key-session "' +
                          i.sessionId +
                          '" for keyID ' +
                          ti.default.hexDump(
                            (null === (r = t.decryptdata) || void 0 === r
                              ? void 0
                              : r.keyId) || []
                          ) +
                          "\n      } (data length: " +
                          (e ? e.byteLength : e) +
                          ")"
                      ),
                      i.update(e)
                    );
                  }),
                  (e.selectKeySystemFormat = function (t) {
                    var e = Object.keys(t.levelkeys || {});
                    return (
                      this.keyFormatPromise ||
                        (this.log(
                          "Selecting key-system from fragment (sn: " +
                            t.sn +
                            " " +
                            t.type +
                            ": " +
                            t.level +
                            ") key formats " +
                            e.join(", ")
                        ),
                        (this.keyFormatPromise = this.getKeyFormatPromise(e))),
                      this.keyFormatPromise
                    );
                  }),
                  (e.getKeyFormatPromise = function (t) {
                    var e = this;
                    return new Promise(function (r, i) {
                      var n = D(e.config),
                        a = t.map(L).filter(function (t) {
                          return !!t && -1 !== n.indexOf(t);
                        });
                      return e
                        .getKeySystemSelectionPromise(a)
                        .then(function (t) {
                          var e = t.keySystem,
                            n = A(e);
                          n
                            ? r(n)
                            : i(
                                new Error(
                                  'Unable to find format for key-system "' +
                                    e +
                                    '"'
                                )
                              );
                        })
                        .catch(i);
                    });
                  }),
                  (e.loadKey = function (t) {
                    var e = this,
                      r = t.keyInfo.decryptdata,
                      i = this.getKeyIdString(r),
                      n =
                        "(keyId: " +
                        i +
                        ' format: "' +
                        r.keyFormat +
                        '" method: ' +
                        r.method +
                        " uri: " +
                        r.uri +
                        ")";
                    this.log("Starting session for key " + n);
                    var a = this.keyIdToKeySessionPromise[i];
                    return (
                      a ||
                        (a = this.keyIdToKeySessionPromise[i] =
                          this.getKeySystemForKeyPromise(r).then(function (i) {
                            var a = i.keySystem,
                              s = i.mediaKeys;
                            return (
                              e.throwIfDestroyed(),
                              e.log(
                                "Handle encrypted media sn: " +
                                  t.frag.sn +
                                  " " +
                                  t.frag.type +
                                  ": " +
                                  t.frag.level +
                                  " using key " +
                                  n
                              ),
                              e.attemptSetMediaKeys(a, s).then(function () {
                                e.throwIfDestroyed();
                                var t = e.createMediaKeySessionContext({
                                  keySystem: a,
                                  mediaKeys: s,
                                  decryptdata: r,
                                });
                                return e.generateRequestWithPreferredKeySession(
                                  t,
                                  "cenc",
                                  r.pssh,
                                  "playlist-key"
                                );
                              })
                            );
                          })).catch(function (t) {
                          return e.handleError(t);
                        }),
                      a
                    );
                  }),
                  (e.throwIfDestroyed = function (t) {
                    if ((void 0 === t && (t = "Invalid state"), !this.hls))
                      throw new Error("invalid state");
                  }),
                  (e.handleError = function (t) {
                    this.hls &&
                      (this.error(t.message),
                      t instanceof li
                        ? this.hls.trigger(s.Events.ERROR, t.data)
                        : this.hls.trigger(s.Events.ERROR, {
                            type: o.ErrorTypes.KEY_SYSTEM_ERROR,
                            details: o.ErrorDetails.KEY_SYSTEM_NO_KEYS,
                            error: t,
                            fatal: !0,
                          }));
                  }),
                  (e.getKeySystemForKeyPromise = function (t) {
                    var e = this.getKeyIdString(t),
                      r = this.keyIdToKeySessionPromise[e];
                    if (!r) {
                      var i = L(t.keyFormat),
                        n = i ? [i] : D(this.config);
                      return this.attemptKeySystemAccess(n);
                    }
                    return r;
                  }),
                  (e.getKeySystemSelectionPromise = function (t) {
                    if ((t.length || (t = D(this.config)), 0 === t.length))
                      throw new li(
                        {
                          type: o.ErrorTypes.KEY_SYSTEM_ERROR,
                          details:
                            o.ErrorDetails.KEY_SYSTEM_NO_CONFIGURED_LICENSE,
                          fatal: !0,
                        },
                        "Missing key-system license configuration options " +
                          JSON.stringify({ drmSystems: this.config.drmSystems })
                      );
                    return this.attemptKeySystemAccess(t);
                  }),
                  (e._onMediaEncrypted = function (t) {
                    var e = this,
                      r = t.initDataType,
                      i = t.initData;
                    if (
                      (this.debug(
                        '"' + t.type + '" event: init data type: "' + r + '"'
                      ),
                      null !== i)
                    ) {
                      var n, a;
                      if ("sinf" === r && this.config.drmSystems[m.FAIRPLAY]) {
                        var s = (0, R.bin2str)(new Uint8Array(i));
                        try {
                          var o = S(JSON.parse(s).sinf),
                            l = (0, R.parseSinf)(new Uint8Array(o));
                          if (!l) return;
                          (n = l.subarray(8, 24)), (a = m.FAIRPLAY);
                        } catch (t) {
                          return void this.warn(
                            'Failed to parse sinf "encrypted" event message initData'
                          );
                        }
                      } else {
                        var u = (0, R.parsePssh)(i);
                        if (null === u) return;
                        0 === u.version &&
                          u.systemId === E.WIDEVINE &&
                          u.data &&
                          (n = u.data.subarray(8, 24)),
                          (a = (function (t) {
                            if (t === E.WIDEVINE) return m.WIDEVINE;
                          })(u.systemId));
                      }
                      if (a && n) {
                        for (
                          var d = ti.default.hexDump(n),
                            h = this.keyIdToKeySessionPromise,
                            c = this.mediaKeySessions,
                            f = h[d],
                            g = function (t) {
                              var a = c[t],
                                s = a.decryptdata;
                              if (s.pssh || !s.keyId) return "continue";
                              var o = ti.default.hexDump(s.keyId);
                              return d === o ||
                                -1 !== s.uri.replace(/-/g, "").indexOf(d)
                                ? ((f = h[o]),
                                  delete h[o],
                                  (s.pssh = new Uint8Array(i)),
                                  (s.keyId = n),
                                  (f = h[d] =
                                    f.then(function () {
                                      return e.generateRequestWithPreferredKeySession(
                                        a,
                                        r,
                                        i,
                                        "encrypted-event-key-match"
                                      );
                                    })),
                                  "break")
                                : void 0;
                            },
                            v = 0;
                          v < c.length;
                          v++
                        ) {
                          var p = g(v);
                          if ("continue" !== p && "break" === p) break;
                        }
                        f ||
                          (f = h[d] =
                            this.getKeySystemSelectionPromise([a]).then(
                              function (t) {
                                var a,
                                  s = t.keySystem,
                                  o = t.mediaKeys;
                                e.throwIfDestroyed();
                                var l = new w(
                                  "ISO-23001-7",
                                  d,
                                  null != (a = A(s)) ? a : ""
                                );
                                return (
                                  (l.pssh = new Uint8Array(i)),
                                  (l.keyId = n),
                                  e.attemptSetMediaKeys(s, o).then(function () {
                                    e.throwIfDestroyed();
                                    var t = e.createMediaKeySessionContext({
                                      decryptdata: l,
                                      keySystem: s,
                                      mediaKeys: o,
                                    });
                                    return e.generateRequestWithPreferredKeySession(
                                      t,
                                      r,
                                      i,
                                      "encrypted-event-no-match"
                                    );
                                  })
                                );
                              }
                            )),
                          f.catch(function (t) {
                            return e.handleError(t);
                          });
                      }
                    }
                  }),
                  (e._onWaitingForKey = function (t) {
                    this.log('"' + t.type + '" event');
                  }),
                  (e.attemptSetMediaKeys = function (t, e) {
                    var r = this,
                      i = this.setMediaKeysQueue.slice();
                    this.log('Setting media-keys for "' + t + '"');
                    var n = Promise.all(i).then(function () {
                      if (!r.media)
                        throw new Error(
                          "Attempted to set mediaKeys without media element attached"
                        );
                      return r.media.setMediaKeys(e);
                    });
                    return (
                      this.setMediaKeysQueue.push(n),
                      n.then(function () {
                        r.log('Media-keys set for "' + t + '"'),
                          i.push(n),
                          (r.setMediaKeysQueue = r.setMediaKeysQueue.filter(
                            function (t) {
                              return -1 === i.indexOf(t);
                            }
                          ));
                      })
                    );
                  }),
                  (e.generateRequestWithPreferredKeySession = function (
                    t,
                    e,
                    r,
                    i
                  ) {
                    var n,
                      a,
                      s = this,
                      l =
                        null === (n = this.config.drmSystems) ||
                        void 0 === n ||
                        null === (a = n[t.keySystem]) ||
                        void 0 === a
                          ? void 0
                          : a.generateRequest;
                    if (l)
                      try {
                        var u = l.call(this.hls, e, r, t);
                        if (!u)
                          throw new Error(
                            "Invalid response from configured generateRequest filter"
                          );
                        (e = u.initDataType),
                          (r = t.decryptdata.pssh =
                            u.initData ? new Uint8Array(u.initData) : null);
                      } catch (t) {
                        var d;
                        if (
                          (this.warn(t.message),
                          null !== (d = this.hls) &&
                            void 0 !== d &&
                            d.config.debug)
                        )
                          throw t;
                      }
                    if (null === r)
                      return (
                        this.log(
                          'Skipping key-session request for "' +
                            i +
                            '" (no initData)'
                        ),
                        Promise.resolve(t)
                      );
                    var h = this.getKeyIdString(t.decryptdata);
                    this.log(
                      'Generating key-session request for "' +
                        i +
                        '": ' +
                        h +
                        " (init data type: " +
                        e +
                        " length: " +
                        (r ? r.byteLength : null) +
                        ")"
                    );
                    var c = new (be())();
                    (t.mediaKeysSession.onmessage = function (e) {
                      var r = t.mediaKeysSession;
                      if (r) {
                        var i = e.messageType,
                          n = e.message;
                        s.log(
                          '"' +
                            i +
                            '" message event for session "' +
                            r.sessionId +
                            '" message size: ' +
                            n.byteLength
                        ),
                          "license-request" === i || "license-renewal" === i
                            ? s.renewLicense(t, n).catch(function (t) {
                                s.handleError(t), c.emit("error", t);
                              })
                            : "license-release" === i
                            ? t.keySystem === m.FAIRPLAY &&
                              (s.updateKeySession(t, b("acknowledged")),
                              s.removeSession(t))
                            : s.warn(
                                'unhandled media key message type "' + i + '"'
                              );
                      } else c.emit("error", new Error("invalid state"));
                    }),
                      (t.mediaKeysSession.onkeystatuseschange = function (e) {
                        if (t.mediaKeysSession) {
                          s.onKeyStatusChange(t);
                          var r = t.keyStatus;
                          c.emit("keyStatus", r),
                            "expired" === r &&
                              (s.warn(t.keySystem + " expired for key " + h),
                              s.renewKeySession(t));
                        } else c.emit("error", new Error("invalid state"));
                      });
                    var f = new Promise(function (t, e) {
                      c.on("error", e),
                        c.on("keyStatus", function (r) {
                          r.startsWith("usable")
                            ? t()
                            : "output-restricted" === r
                            ? e(
                                new li(
                                  {
                                    type: o.ErrorTypes.KEY_SYSTEM_ERROR,
                                    details:
                                      o.ErrorDetails
                                        .KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED,
                                    fatal: !1,
                                  },
                                  "HDCP level output restricted"
                                )
                              )
                            : "internal-error" === r
                            ? e(
                                new li(
                                  {
                                    type: o.ErrorTypes.KEY_SYSTEM_ERROR,
                                    details:
                                      o.ErrorDetails
                                        .KEY_SYSTEM_STATUS_INTERNAL_ERROR,
                                    fatal: !0,
                                  },
                                  'key status changed to "' + r + '"'
                                )
                              )
                            : "expired" === r
                            ? e(
                                new Error(
                                  "key expired while generating request"
                                )
                              )
                            : s.warn('unhandled key status change "' + r + '"');
                        });
                    });
                    return t.mediaKeysSession
                      .generateRequest(e, r)
                      .then(function () {
                        var e;
                        s.log(
                          'Request generated for key-session "' +
                            (null === (e = t.mediaKeysSession) || void 0 === e
                              ? void 0
                              : e.sessionId) +
                            '" keyId: ' +
                            h
                        );
                      })
                      .catch(function (t) {
                        throw new li(
                          {
                            type: o.ErrorTypes.KEY_SYSTEM_ERROR,
                            details: o.ErrorDetails.KEY_SYSTEM_NO_SESSION,
                            error: t,
                            fatal: !1,
                          },
                          "Error generating key-session request: " + t
                        );
                      })
                      .then(function () {
                        return f;
                      })
                      .catch(function (e) {
                        throw (c.removeAllListeners(), s.removeSession(t), e);
                      })
                      .then(function () {
                        return c.removeAllListeners(), t;
                      });
                  }),
                  (e.onKeyStatusChange = function (t) {
                    var e = this;
                    t.mediaKeysSession.keyStatuses.forEach(function (r, i) {
                      e.log(
                        'key status change "' +
                          r +
                          '" for keyStatuses keyId: ' +
                          ti.default.hexDump(
                            "buffer" in i
                              ? new Uint8Array(
                                  i.buffer,
                                  i.byteOffset,
                                  i.byteLength
                                )
                              : new Uint8Array(i)
                          ) +
                          " session keyId: " +
                          ti.default.hexDump(
                            new Uint8Array(t.decryptdata.keyId || [])
                          ) +
                          " uri: " +
                          t.decryptdata.uri
                      ),
                        (t.keyStatus = r);
                    });
                  }),
                  (e.fetchServerCertificate = function (t) {
                    var e = this;
                    return new Promise(function (r, i) {
                      var n = e.getServerCertificateUrl(t);
                      if (!n) return r();
                      e.log('Fetching serverCertificate for "' + t + '"');
                      var a = new XMLHttpRequest();
                      a.open("GET", n, !0),
                        (a.responseType = "arraybuffer"),
                        (a.onreadystatechange = function () {
                          a.readyState === XMLHttpRequest.DONE &&
                            (200 === a.status
                              ? r(a.response)
                              : i(
                                  new li(
                                    {
                                      type: o.ErrorTypes.KEY_SYSTEM_ERROR,
                                      details:
                                        o.ErrorDetails
                                          .KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED,
                                      fatal: !0,
                                      networkDetails: a,
                                    },
                                    '"' +
                                      t +
                                      '" certificate request XHR failed (' +
                                      n +
                                      "). Status: " +
                                      a.status +
                                      " (" +
                                      a.statusText +
                                      ")"
                                  )
                                ));
                        }),
                        a.send();
                    });
                  }),
                  (e.setMediaKeysServerCertificate = function (t, e, r) {
                    var i = this;
                    return new Promise(function (n, a) {
                      t.setServerCertificate(r)
                        .then(function (a) {
                          i.log(
                            "setServerCertificate " +
                              (a ? "success" : "not supported by CDM") +
                              " (" +
                              (null == r ? void 0 : r.byteLength) +
                              ') on "' +
                              e +
                              '"'
                          ),
                            n(t);
                        })
                        .catch(function (t) {
                          a(
                            new li(
                              {
                                type: o.ErrorTypes.KEY_SYSTEM_ERROR,
                                details:
                                  o.ErrorDetails
                                    .KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED,
                                error: t,
                                fatal: !0,
                              },
                              t.message
                            )
                          );
                        });
                    });
                  }),
                  (e.renewLicense = function (t, e) {
                    var r = this;
                    return this.requestLicense(t, new Uint8Array(e)).then(
                      function (e) {
                        return r
                          .updateKeySession(t, new Uint8Array(e))
                          .catch(function (t) {
                            throw new li(
                              {
                                type: o.ErrorTypes.KEY_SYSTEM_ERROR,
                                details:
                                  o.ErrorDetails
                                    .KEY_SYSTEM_SESSION_UPDATE_FAILED,
                                error: t,
                                fatal: !0,
                              },
                              t.message
                            );
                          });
                      }
                    );
                  }),
                  (e.setupLicenseXHR = function (t, e, r, i) {
                    var n = this,
                      a = this.config.licenseXhrSetup;
                    return a
                      ? Promise.resolve()
                          .then(function () {
                            if (!r.decryptdata) throw new Error("Key removed");
                            return a.call(n.hls, t, e, r, i);
                          })
                          .catch(function (s) {
                            if (!r.decryptdata) throw s;
                            return (
                              t.open("POST", e, !0), a.call(n.hls, t, e, r, i)
                            );
                          })
                          .then(function (r) {
                            return (
                              t.readyState || t.open("POST", e, !0),
                              { xhr: t, licenseChallenge: r || i }
                            );
                          })
                      : (t.open("POST", e, !0),
                        Promise.resolve({ xhr: t, licenseChallenge: i }));
                  }),
                  (e.requestLicense = function (t, e) {
                    var r = this;
                    return new Promise(function (i, n) {
                      var a = r.getLicenseServerUrl(t.keySystem);
                      r.log("Sending license request to URL: " + a);
                      var s = new XMLHttpRequest();
                      (s.responseType = "arraybuffer"),
                        (s.onreadystatechange = function () {
                          if (!r.hls || !t.mediaKeysSession)
                            return n(new Error("invalid state"));
                          if (4 === s.readyState)
                            if (200 === s.status) {
                              r._requestLicenseFailureCount = 0;
                              var l = s.response;
                              r.log(
                                "License received " +
                                  (l instanceof ArrayBuffer ? l.byteLength : l)
                              );
                              var u = r.config.licenseResponseCallback;
                              if (u)
                                try {
                                  l = u.call(r.hls, s, a, t);
                                } catch (t) {
                                  r.error(t);
                                }
                              i(l);
                            } else if (
                              (r._requestLicenseFailureCount++,
                              r._requestLicenseFailureCount > 3 ||
                                (s.status >= 400 && s.status < 500))
                            )
                              n(
                                new li(
                                  {
                                    type: o.ErrorTypes.KEY_SYSTEM_ERROR,
                                    details:
                                      o.ErrorDetails
                                        .KEY_SYSTEM_LICENSE_REQUEST_FAILED,
                                    fatal: !0,
                                    networkDetails: s,
                                  },
                                  "License Request XHR failed (" +
                                    a +
                                    "). Status: " +
                                    s.status +
                                    " (" +
                                    s.statusText +
                                    ")"
                                )
                              );
                            else {
                              var d = 3 - r._requestLicenseFailureCount + 1;
                              r.warn(
                                "Retrying license request, " +
                                  d +
                                  " attempts left"
                              ),
                                r.requestLicense(t, e).then(i, n);
                            }
                        }),
                        t.licenseXhr &&
                          t.licenseXhr.readyState !== XMLHttpRequest.DONE &&
                          t.licenseXhr.abort(),
                        (t.licenseXhr = s),
                        r.setupLicenseXHR(s, a, t, e).then(function (t) {
                          var e = t.xhr,
                            r = t.licenseChallenge;
                          e.send(r);
                        });
                    });
                  }),
                  (e.onMediaAttached = function (t, e) {
                    if (this.config.emeEnabled) {
                      var r = e.media;
                      (this.media = r),
                        r.addEventListener("encrypted", this.onMediaEncrypted),
                        r.addEventListener(
                          "waitingforkey",
                          this.onWaitingForKey
                        );
                    }
                  }),
                  (e.onMediaDetached = function () {
                    var e = this,
                      r = this.media,
                      i = this.mediaKeySessions;
                    r &&
                      (r.removeEventListener(
                        "encrypted",
                        this.onMediaEncrypted
                      ),
                      r.removeEventListener(
                        "waitingforkey",
                        this.onWaitingForKey
                      ),
                      (this.media = null)),
                      (this._requestLicenseFailureCount = 0),
                      (this.setMediaKeysQueue = []),
                      (this.mediaKeySessions = []),
                      (this.keyIdToKeySessionPromise = {}),
                      w.clearKeyUriToKeyIdMap();
                    var n = i.length;
                    t.CDMCleanupPromise = Promise.all(
                      i
                        .map(function (t) {
                          return e.removeSession(t);
                        })
                        .concat(
                          null == r
                            ? void 0
                            : r.setMediaKeys(null).catch(function (t) {
                                e.log(
                                  "Could not clear media keys: " +
                                    t +
                                    ". media.src: " +
                                    (null == r ? void 0 : r.src)
                                );
                              })
                        )
                    )
                      .then(function () {
                        n &&
                          (e.log(
                            "finished closing key sessions and clearing media keys"
                          ),
                          (i.length = 0));
                      })
                      .catch(function (t) {
                        e.log(
                          "Could not close sessions and clear media keys: " +
                            t +
                            ". media.src: " +
                            (null == r ? void 0 : r.src)
                        );
                      });
                  }),
                  (e.onManifestLoaded = function (t, e) {
                    var r = e.sessionKeys;
                    if (r && this.config.emeEnabled && !this.keyFormatPromise) {
                      var i = r.reduce(function (t, e) {
                        return (
                          -1 === t.indexOf(e.keyFormat) && t.push(e.keyFormat),
                          t
                        );
                      }, []);
                      this.log(
                        "Selecting key-system from session-keys " + i.join(", ")
                      ),
                        (this.keyFormatPromise = this.getKeyFormatPromise(i));
                    }
                  }),
                  (e.removeSession = function (t) {
                    var e = this,
                      r = t.mediaKeysSession,
                      i = t.licenseXhr;
                    if (r) {
                      this.log(
                        "Remove licenses and keys and close session " +
                          r.sessionId
                      ),
                        (r.onmessage = null),
                        (r.onkeystatuseschange = null),
                        i && i.readyState !== XMLHttpRequest.DONE && i.abort(),
                        (t.mediaKeysSession =
                          t.decryptdata =
                          t.licenseXhr =
                            void 0);
                      var n = this.mediaKeySessions.indexOf(t);
                      return (
                        n > -1 && this.mediaKeySessions.splice(n, 1),
                        r
                          .remove()
                          .catch(function (t) {
                            e.log("Could not remove session: " + t);
                          })
                          .then(function () {
                            return r.close();
                          })
                          .catch(function (t) {
                            e.log("Could not close session: " + t);
                          })
                      );
                    }
                  }),
                  t
                );
              })();
            oi.CDMCleanupPromise = void 0;
            var li = (function (t) {
              var e, r;
              function i(e, r) {
                var i;
                return (
                  ((i = t.call(this, r) || this).data = void 0),
                  (i.data = e),
                  (e.err = e.error),
                  i
                );
              }
              return (
                (r = t),
                ((e = i).prototype = Object.create(r.prototype)),
                (e.prototype.constructor = e),
                ni(e, r),
                i
              );
            })(ei(Error));
            const ui = oi;
            var di, hi, ci;
            function fi(t, e) {
              for (var r = 0; r < e.length; r++) {
                var i = e[r];
                (i.enumerable = i.enumerable || !1),
                  (i.configurable = !0),
                  "value" in i && (i.writable = !0),
                  Object.defineProperty(
                    t,
                    (void 0,
                    "symbol" ==
                    typeof (n = (function (t, e) {
                      if ("object" != typeof t || null === t) return t;
                      var r = t[Symbol.toPrimitive];
                      if (void 0 !== r) {
                        var i = r.call(t, e);
                        if ("object" != typeof i) return i;
                        throw new TypeError(
                          "@@toPrimitive must return a primitive value."
                        );
                      }
                      return String(t);
                    })(i.key, "string"))
                      ? n
                      : String(n)),
                    i
                  );
              }
              var n;
            }
            function gi(t, e, r) {
              return (
                e && fi(t.prototype, e),
                r && fi(t, r),
                Object.defineProperty(t, "prototype", { writable: !1 }),
                t
              );
            }
            function vi(t, e) {
              var r =
                ("undefined" != typeof Symbol && t[Symbol.iterator]) ||
                t["@@iterator"];
              if (r) return (r = r.call(t)).next.bind(r);
              if (
                Array.isArray(t) ||
                (r = (function (t, e) {
                  if (t) {
                    if ("string" == typeof t) return pi(t, e);
                    var r = Object.prototype.toString.call(t).slice(8, -1);
                    return (
                      "Object" === r &&
                        t.constructor &&
                        (r = t.constructor.name),
                      "Map" === r || "Set" === r
                        ? Array.from(t)
                        : "Arguments" === r ||
                          /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                        ? pi(t, e)
                        : void 0
                    );
                  }
                })(t)) ||
                (e && t && "number" == typeof t.length)
              ) {
                r && (t = r);
                var i = 0;
                return function () {
                  return i >= t.length
                    ? { done: !0 }
                    : { done: !1, value: t[i++] };
                };
              }
              throw new TypeError(
                "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }
            function pi(t, e) {
              (null == e || e > t.length) && (e = t.length);
              for (var r = 0, i = new Array(e); r < e; r++) i[r] = t[r];
              return i;
            }
            function mi() {
              return (
                (mi = Object.assign
                  ? Object.assign.bind()
                  : function (t) {
                      for (var e = 1; e < arguments.length; e++) {
                        var r = arguments[e];
                        for (var i in r)
                          Object.prototype.hasOwnProperty.call(r, i) &&
                            (t[i] = r[i]);
                      }
                      return t;
                    }),
                mi.apply(this, arguments)
              );
            }
            !(function (t) {
              (t.MANIFEST = "m"),
                (t.AUDIO = "a"),
                (t.VIDEO = "v"),
                (t.MUXED = "av"),
                (t.INIT = "i"),
                (t.CAPTION = "c"),
                (t.TIMED_TEXT = "tt"),
                (t.KEY = "k"),
                (t.OTHER = "o");
            })(di || (di = {})),
              (function (t) {
                (t.DASH = "d"),
                  (t.HLS = "h"),
                  (t.SMOOTH = "s"),
                  (t.OTHER = "o");
              })(hi || (hi = {})),
              (function (t) {
                (t.VOD = "v"), (t.LIVE = "l");
              })(ci || (ci = {}));
            var yi = (function () {
                function t(e) {
                  var r = this;
                  (this.hls = void 0),
                    (this.config = void 0),
                    (this.media = void 0),
                    (this.sid = void 0),
                    (this.cid = void 0),
                    (this.useHeaders = !1),
                    (this.initialized = !1),
                    (this.starved = !1),
                    (this.buffering = !0),
                    (this.audioBuffer = void 0),
                    (this.videoBuffer = void 0),
                    (this.onWaiting = function () {
                      r.initialized && (r.starved = !0), (r.buffering = !0);
                    }),
                    (this.onPlaying = function () {
                      r.initialized || (r.initialized = !0), (r.buffering = !1);
                    }),
                    (this.applyPlaylistData = function (t) {
                      try {
                        r.apply(t, { ot: di.MANIFEST, su: !r.initialized });
                      } catch (t) {
                        l.logger.warn(
                          "Could not generate manifest CMCD data.",
                          t
                        );
                      }
                    }),
                    (this.applyFragmentData = function (t) {
                      try {
                        var e = t.frag,
                          i = r.hls.levels[e.level],
                          n = r.getObjectType(e),
                          a = { d: 1e3 * e.duration, ot: n };
                        (n !== di.VIDEO && n !== di.AUDIO && n != di.MUXED) ||
                          ((a.br = i.bitrate / 1e3),
                          (a.tb = r.getTopBandwidth(n) / 1e3),
                          (a.bl = r.getBufferLength(n))),
                          r.apply(t, a);
                      } catch (t) {
                        l.logger.warn(
                          "Could not generate segment CMCD data.",
                          t
                        );
                      }
                    }),
                    (this.hls = e);
                  var i = (this.config = e.config),
                    n = i.cmcd;
                  null != n &&
                    ((i.pLoader = this.createPlaylistLoader()),
                    (i.fLoader = this.createFragmentLoader()),
                    (this.sid = n.sessionId || t.uuid()),
                    (this.cid = n.contentId),
                    (this.useHeaders = !0 === n.useHeaders),
                    this.registerListeners());
                }
                var e = t.prototype;
                return (
                  (e.registerListeners = function () {
                    var t = this.hls;
                    t.on(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                      t.on(s.Events.MEDIA_DETACHED, this.onMediaDetached, this),
                      t.on(s.Events.BUFFER_CREATED, this.onBufferCreated, this);
                  }),
                  (e.unregisterListeners = function () {
                    var t = this.hls;
                    t.off(s.Events.MEDIA_ATTACHED, this.onMediaAttached, this),
                      t.off(
                        s.Events.MEDIA_DETACHED,
                        this.onMediaDetached,
                        this
                      ),
                      t.off(
                        s.Events.BUFFER_CREATED,
                        this.onBufferCreated,
                        this
                      ),
                      this.onMediaDetached();
                  }),
                  (e.destroy = function () {
                    this.unregisterListeners(),
                      (this.hls =
                        this.config =
                        this.audioBuffer =
                        this.videoBuffer =
                          null);
                  }),
                  (e.onMediaAttached = function (t, e) {
                    (this.media = e.media),
                      this.media.addEventListener("waiting", this.onWaiting),
                      this.media.addEventListener("playing", this.onPlaying);
                  }),
                  (e.onMediaDetached = function () {
                    this.media &&
                      (this.media.removeEventListener(
                        "waiting",
                        this.onWaiting
                      ),
                      this.media.removeEventListener("playing", this.onPlaying),
                      (this.media = null));
                  }),
                  (e.onBufferCreated = function (t, e) {
                    var r, i;
                    (this.audioBuffer =
                      null === (r = e.tracks.audio) || void 0 === r
                        ? void 0
                        : r.buffer),
                      (this.videoBuffer =
                        null === (i = e.tracks.video) || void 0 === i
                          ? void 0
                          : i.buffer);
                  }),
                  (e.createData = function () {
                    var t;
                    return {
                      v: 1,
                      sf: hi.HLS,
                      sid: this.sid,
                      cid: this.cid,
                      pr:
                        null === (t = this.media) || void 0 === t
                          ? void 0
                          : t.playbackRate,
                      mtp: this.hls.bandwidthEstimate / 1e3,
                    };
                  }),
                  (e.apply = function (e, r) {
                    void 0 === r && (r = {}), mi(r, this.createData());
                    var i =
                      r.ot === di.INIT ||
                      r.ot === di.VIDEO ||
                      r.ot === di.MUXED;
                    if (
                      (this.starved &&
                        i &&
                        ((r.bs = !0), (r.su = !0), (this.starved = !1)),
                      null == r.su && (r.su = this.buffering),
                      this.useHeaders)
                    ) {
                      var n = t.toHeaders(r);
                      if (!Object.keys(n).length) return;
                      e.headers || (e.headers = {}), mi(e.headers, n);
                    } else {
                      var a = t.toQuery(r);
                      if (!a) return;
                      e.url = t.appendQueryToUri(e.url, a);
                    }
                  }),
                  (e.getObjectType = function (t) {
                    var e = t.type;
                    return "subtitle" === e
                      ? di.TIMED_TEXT
                      : "initSegment" === t.sn
                      ? di.INIT
                      : "audio" === e
                      ? di.AUDIO
                      : "main" === e
                      ? this.hls.audioTracks.length
                        ? di.VIDEO
                        : di.MUXED
                      : void 0;
                  }),
                  (e.getTopBandwidth = function (t) {
                    var e,
                      r = 0,
                      i = this.hls;
                    if (t === di.AUDIO) e = i.audioTracks;
                    else {
                      var n = i.maxAutoLevel,
                        a = n > -1 ? n + 1 : i.levels.length;
                      e = i.levels.slice(0, a);
                    }
                    for (var s, o = vi(e); !(s = o()).done; ) {
                      var l = s.value;
                      l.bitrate > r && (r = l.bitrate);
                    }
                    return r > 0 ? r : NaN;
                  }),
                  (e.getBufferLength = function (t) {
                    var e = this.hls.media,
                      r = t === di.AUDIO ? this.audioBuffer : this.videoBuffer;
                    return r && e
                      ? 1e3 *
                          Bt.bufferInfo(
                            r,
                            e.currentTime,
                            this.config.maxBufferHole
                          ).len
                      : NaN;
                  }),
                  (e.createPlaylistLoader = function () {
                    var t = this.config.pLoader,
                      e = this.applyPlaylistData,
                      r = t || this.config.loader;
                    return (function () {
                      function t(t) {
                        (this.loader = void 0), (this.loader = new r(t));
                      }
                      var i = t.prototype;
                      return (
                        (i.destroy = function () {
                          this.loader.destroy();
                        }),
                        (i.abort = function () {
                          this.loader.abort();
                        }),
                        (i.load = function (t, r, i) {
                          e(t), this.loader.load(t, r, i);
                        }),
                        gi(t, [
                          {
                            key: "stats",
                            get: function () {
                              return this.loader.stats;
                            },
                          },
                          {
                            key: "context",
                            get: function () {
                              return this.loader.context;
                            },
                          },
                        ]),
                        t
                      );
                    })();
                  }),
                  (e.createFragmentLoader = function () {
                    var t = this.config.fLoader,
                      e = this.applyFragmentData,
                      r = t || this.config.loader;
                    return (function () {
                      function t(t) {
                        (this.loader = void 0), (this.loader = new r(t));
                      }
                      var i = t.prototype;
                      return (
                        (i.destroy = function () {
                          this.loader.destroy();
                        }),
                        (i.abort = function () {
                          this.loader.abort();
                        }),
                        (i.load = function (t, r, i) {
                          e(t), this.loader.load(t, r, i);
                        }),
                        gi(t, [
                          {
                            key: "stats",
                            get: function () {
                              return this.loader.stats;
                            },
                          },
                          {
                            key: "context",
                            get: function () {
                              return this.loader.context;
                            },
                          },
                        ]),
                        t
                      );
                    })();
                  }),
                  (t.uuid = function () {
                    var t = URL.createObjectURL(new Blob()),
                      e = t.toString();
                    return (
                      URL.revokeObjectURL(t), e.slice(e.lastIndexOf("/") + 1)
                    );
                  }),
                  (t.serialize = function (t) {
                    for (
                      var e,
                        r = [],
                        i = function (t) {
                          return (
                            !Number.isNaN(t) &&
                            null != t &&
                            "" !== t &&
                            !1 !== t
                          );
                        },
                        n = function (t) {
                          return Math.round(t);
                        },
                        a = function (t) {
                          return 100 * n(t / 100);
                        },
                        s = {
                          br: n,
                          d: n,
                          bl: a,
                          dl: a,
                          mtp: a,
                          nor: function (t) {
                            return encodeURIComponent(t);
                          },
                          rtp: a,
                          tb: n,
                        },
                        o = vi(Object.keys(t || {}).sort());
                      !(e = o()).done;

                    ) {
                      var l = e.value,
                        u = t[l];
                      if (
                        i(u) &&
                        !(("v" === l && 1 === u) || ("pr" == l && 1 === u))
                      ) {
                        var d = s[l];
                        d && (u = d(u));
                        var h,
                          c = typeof u;
                        (h =
                          "ot" === l || "sf" === l || "st" === l
                            ? l + "=" + u
                            : "boolean" === c
                            ? l
                            : "number" === c
                            ? l + "=" + u
                            : l + "=" + JSON.stringify(u)),
                          r.push(h);
                      }
                    }
                    return r.join(",");
                  }),
                  (t.toHeaders = function (e) {
                    for (
                      var r = {},
                        i = ["Object", "Request", "Session", "Status"],
                        n = [{}, {}, {}, {}],
                        a = {
                          br: 0,
                          d: 0,
                          ot: 0,
                          tb: 0,
                          bl: 1,
                          dl: 1,
                          mtp: 1,
                          nor: 1,
                          nrr: 1,
                          su: 1,
                          cid: 2,
                          pr: 2,
                          sf: 2,
                          sid: 2,
                          st: 2,
                          v: 2,
                          bs: 3,
                          rtp: 3,
                        },
                        s = 0,
                        o = Object.keys(e);
                      s < o.length;
                      s++
                    ) {
                      var l = o[s];
                      n[null != a[l] ? a[l] : 1][l] = e[l];
                    }
                    for (var u = 0; u < n.length; u++) {
                      var d = t.serialize(n[u]);
                      d && (r["CMCD-" + i[u]] = d);
                    }
                    return r;
                  }),
                  (t.toQuery = function (e) {
                    return "CMCD=" + encodeURIComponent(t.serialize(e));
                  }),
                  (t.appendQueryToUri = function (t, e) {
                    if (!e) return t;
                    var r = t.includes("?") ? "&" : "?";
                    return "" + t + r + e;
                  }),
                  t
                );
              })(),
              Ei = r(408),
              Ti = /^age:\s*[\d.]+\s*$/m;
            const Si = (function () {
              function t(t) {
                (this.xhrSetup = void 0),
                  (this.requestTimeout = void 0),
                  (this.retryTimeout = void 0),
                  (this.retryDelay = void 0),
                  (this.config = null),
                  (this.callbacks = null),
                  (this.context = void 0),
                  (this.loader = null),
                  (this.stats = void 0),
                  (this.xhrSetup = t ? t.xhrSetup : null),
                  (this.stats = new Ei.LoadStats()),
                  (this.retryDelay = 0);
              }
              var e = t.prototype;
              return (
                (e.destroy = function () {
                  (this.callbacks = null),
                    this.abortInternal(),
                    (this.loader = null),
                    (this.config = null);
                }),
                (e.abortInternal = function () {
                  var t = this.loader;
                  self.clearTimeout(this.requestTimeout),
                    self.clearTimeout(this.retryTimeout),
                    t &&
                      ((t.onreadystatechange = null),
                      (t.onprogress = null),
                      4 !== t.readyState &&
                        ((this.stats.aborted = !0), t.abort()));
                }),
                (e.abort = function () {
                  var t;
                  this.abortInternal(),
                    null !== (t = this.callbacks) &&
                      void 0 !== t &&
                      t.onAbort &&
                      this.callbacks.onAbort(
                        this.stats,
                        this.context,
                        this.loader
                      );
                }),
                (e.load = function (t, e, r) {
                  if (this.stats.loading.start)
                    throw new Error("Loader can only be used once.");
                  (this.stats.loading.start = self.performance.now()),
                    (this.context = t),
                    (this.config = e),
                    (this.callbacks = r),
                    (this.retryDelay = e.retryDelay),
                    this.loadInternal();
                }),
                (e.loadInternal = function () {
                  var t = this.config,
                    e = this.context;
                  if (t) {
                    var r = (this.loader = new self.XMLHttpRequest()),
                      i = this.stats;
                    (i.loading.first = 0), (i.loaded = 0);
                    var n = this.xhrSetup;
                    try {
                      if (n)
                        try {
                          n(r, e.url);
                        } catch (t) {
                          r.open("GET", e.url, !0), n(r, e.url);
                        }
                      r.readyState || r.open("GET", e.url, !0);
                      var a = this.context.headers;
                      if (a) for (var s in a) r.setRequestHeader(s, a[s]);
                    } catch (t) {
                      return void this.callbacks.onError(
                        { code: r.status, text: t.message },
                        e,
                        r
                      );
                    }
                    e.rangeEnd &&
                      r.setRequestHeader(
                        "Range",
                        "bytes=" + e.rangeStart + "-" + (e.rangeEnd - 1)
                      ),
                      (r.onreadystatechange = this.readystatechange.bind(this)),
                      (r.onprogress = this.loadprogress.bind(this)),
                      (r.responseType = e.responseType),
                      self.clearTimeout(this.requestTimeout),
                      (this.requestTimeout = self.setTimeout(
                        this.loadtimeout.bind(this),
                        t.timeout
                      )),
                      r.send();
                  }
                }),
                (e.readystatechange = function () {
                  var t = this.context,
                    e = this.loader,
                    r = this.stats;
                  if (t && e) {
                    var i = e.readyState,
                      n = this.config;
                    if (!r.aborted && i >= 2)
                      if (
                        (self.clearTimeout(this.requestTimeout),
                        0 === r.loading.first &&
                          (r.loading.first = Math.max(
                            self.performance.now(),
                            r.loading.start
                          )),
                        4 === i)
                      ) {
                        (e.onreadystatechange = null), (e.onprogress = null);
                        var a = e.status,
                          s = "arraybuffer" === e.responseType;
                        if (
                          a >= 200 &&
                          a < 300 &&
                          ((s && e.response) || null !== e.responseText)
                        ) {
                          var o, u;
                          if (
                            ((r.loading.end = Math.max(
                              self.performance.now(),
                              r.loading.first
                            )),
                            (u = s
                              ? (o = e.response).byteLength
                              : (o = e.responseText).length),
                            (r.loaded = r.total = u),
                            !this.callbacks)
                          )
                            return;
                          var d = this.callbacks.onProgress;
                          if ((d && d(r, t, o, e), !this.callbacks)) return;
                          var h = { url: e.responseURL, data: o };
                          this.callbacks.onSuccess(h, r, t, e);
                        } else
                          r.retry >= n.maxRetry || (a >= 400 && a < 499)
                            ? (l.logger.error(a + " while loading " + t.url),
                              this.callbacks.onError(
                                { code: a, text: e.statusText },
                                t,
                                e
                              ))
                            : (l.logger.warn(
                                a +
                                  " while loading " +
                                  t.url +
                                  ", retrying in " +
                                  this.retryDelay +
                                  "..."
                              ),
                              this.abortInternal(),
                              (this.loader = null),
                              self.clearTimeout(this.retryTimeout),
                              (this.retryTimeout = self.setTimeout(
                                this.loadInternal.bind(this),
                                this.retryDelay
                              )),
                              (this.retryDelay = Math.min(
                                2 * this.retryDelay,
                                n.maxRetryDelay
                              )),
                              r.retry++);
                      } else
                        self.clearTimeout(this.requestTimeout),
                          (this.requestTimeout = self.setTimeout(
                            this.loadtimeout.bind(this),
                            n.timeout
                          ));
                  }
                }),
                (e.loadtimeout = function () {
                  l.logger.warn("timeout while loading " + this.context.url);
                  var t = this.callbacks;
                  t &&
                    (this.abortInternal(),
                    t.onTimeout(this.stats, this.context, this.loader));
                }),
                (e.loadprogress = function (t) {
                  var e = this.stats;
                  (e.loaded = t.loaded),
                    t.lengthComputable && (e.total = t.total);
                }),
                (e.getCacheAge = function () {
                  var t = null;
                  if (
                    this.loader &&
                    Ti.test(this.loader.getAllResponseHeaders())
                  ) {
                    var e = this.loader.getResponseHeader("age");
                    t = e ? parseFloat(e) : null;
                  }
                  return t;
                }),
                t
              );
            })();
            function bi(t) {
              var e = "function" == typeof Map ? new Map() : void 0;
              return (
                (bi = function (t) {
                  if (
                    null === t ||
                    ((r = t),
                    -1 === Function.toString.call(r).indexOf("[native code]"))
                  )
                    return t;
                  var r;
                  if ("function" != typeof t)
                    throw new TypeError(
                      "Super expression must either be null or a function"
                    );
                  if (void 0 !== e) {
                    if (e.has(t)) return e.get(t);
                    e.set(t, i);
                  }
                  function i() {
                    return Li(t, arguments, ki(this).constructor);
                  }
                  return (
                    (i.prototype = Object.create(t.prototype, {
                      constructor: {
                        value: i,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                      },
                    })),
                    Di(i, t)
                  );
                }),
                bi(t)
              );
            }
            function Li(t, e, r) {
              return (
                (Li = Ai()
                  ? Reflect.construct.bind()
                  : function (t, e, r) {
                      var i = [null];
                      i.push.apply(i, e);
                      var n = new (Function.bind.apply(t, i))();
                      return r && Di(n, r.prototype), n;
                    }),
                Li.apply(null, arguments)
              );
            }
            function Ai() {
              if ("undefined" == typeof Reflect || !Reflect.construct)
                return !1;
              if (Reflect.construct.sham) return !1;
              if ("function" == typeof Proxy) return !0;
              try {
                return (
                  Boolean.prototype.valueOf.call(
                    Reflect.construct(Boolean, [], function () {})
                  ),
                  !0
                );
              } catch (t) {
                return !1;
              }
            }
            function Di(t, e) {
              return (
                (Di = Object.setPrototypeOf
                  ? Object.setPrototypeOf.bind()
                  : function (t, e) {
                      return (t.__proto__ = e), t;
                    }),
                Di(t, e)
              );
            }
            function ki(t) {
              return (
                (ki = Object.setPrototypeOf
                  ? Object.getPrototypeOf.bind()
                  : function (t) {
                      return t.__proto__ || Object.getPrototypeOf(t);
                    }),
                ki(t)
              );
            }
            function Ri() {
              return (
                (Ri = Object.assign
                  ? Object.assign.bind()
                  : function (t) {
                      for (var e = 1; e < arguments.length; e++) {
                        var r = arguments[e];
                        for (var i in r)
                          Object.prototype.hasOwnProperty.call(r, i) &&
                            (t[i] = r[i]);
                      }
                      return t;
                    }),
                Ri.apply(this, arguments)
              );
            }
            var Ii = (function () {
              function t(t) {
                (this.fetchSetup = void 0),
                  (this.requestTimeout = void 0),
                  (this.request = void 0),
                  (this.response = void 0),
                  (this.controller = void 0),
                  (this.context = void 0),
                  (this.config = null),
                  (this.callbacks = null),
                  (this.stats = void 0),
                  (this.loader = null),
                  (this.fetchSetup = t.fetchSetup || wi),
                  (this.controller = new self.AbortController()),
                  (this.stats = new Ei.LoadStats());
              }
              var e = t.prototype;
              return (
                (e.destroy = function () {
                  (this.loader = this.callbacks = null), this.abortInternal();
                }),
                (e.abortInternal = function () {
                  var t = this.response;
                  (t && t.ok) ||
                    ((this.stats.aborted = !0), this.controller.abort());
                }),
                (e.abort = function () {
                  var t;
                  this.abortInternal(),
                    null !== (t = this.callbacks) &&
                      void 0 !== t &&
                      t.onAbort &&
                      this.callbacks.onAbort(
                        this.stats,
                        this.context,
                        this.response
                      );
                }),
                (e.load = function (t, e, r) {
                  var i = this,
                    n = this.stats;
                  if (n.loading.start)
                    throw new Error("Loader can only be used once.");
                  n.loading.start = self.performance.now();
                  var s = (function (t, e) {
                      var r = {
                        method: "GET",
                        mode: "cors",
                        credentials: "same-origin",
                        signal: e,
                        headers: new self.Headers(Ri({}, t.headers)),
                      };
                      return (
                        t.rangeEnd &&
                          r.headers.set(
                            "Range",
                            "bytes=" +
                              t.rangeStart +
                              "-" +
                              String(t.rangeEnd - 1)
                          ),
                        r
                      );
                    })(t, this.controller.signal),
                    o = r.onProgress,
                    l = "arraybuffer" === t.responseType,
                    u = l ? "byteLength" : "length";
                  (this.context = t),
                    (this.config = e),
                    (this.callbacks = r),
                    (this.request = this.fetchSetup(t, s)),
                    self.clearTimeout(this.requestTimeout),
                    (this.requestTimeout = self.setTimeout(function () {
                      i.abortInternal(), r.onTimeout(n, t, i.response);
                    }, e.timeout)),
                    self
                      .fetch(this.request)
                      .then(function (r) {
                        if (((i.response = i.loader = r), !r.ok)) {
                          var s = r.status,
                            u = r.statusText;
                          throw new Ci(
                            u || "fetch, bad network response",
                            s,
                            r
                          );
                        }
                        return (
                          (n.loading.first = Math.max(
                            self.performance.now(),
                            n.loading.start
                          )),
                          (n.total = parseInt(
                            r.headers.get("Content-Length") || "0"
                          )),
                          o && (0, a.isFiniteNumber)(e.highWaterMark)
                            ? i.loadProgressively(r, n, t, e.highWaterMark, o)
                            : l
                            ? r.arrayBuffer()
                            : r.text()
                        );
                      })
                      .then(function (s) {
                        var l = i.response;
                        self.clearTimeout(i.requestTimeout),
                          (n.loading.end = Math.max(
                            self.performance.now(),
                            n.loading.first
                          ));
                        var d = s[u];
                        d && (n.loaded = n.total = d);
                        var h = { url: l.url, data: s };
                        o &&
                          !(0, a.isFiniteNumber)(e.highWaterMark) &&
                          o(n, t, s, l),
                          r.onSuccess(h, n, t, l);
                      })
                      .catch(function (e) {
                        if ((self.clearTimeout(i.requestTimeout), !n.aborted)) {
                          var a = (e && e.code) || 0,
                            s = e ? e.message : null;
                          r.onError(
                            { code: a, text: s },
                            t,
                            e ? e.details : null
                          );
                        }
                      });
                }),
                (e.getCacheAge = function () {
                  var t = null;
                  if (this.response) {
                    var e = this.response.headers.get("age");
                    t = e ? parseFloat(e) : null;
                  }
                  return t;
                }),
                (e.loadProgressively = function (t, e, r, i, n) {
                  void 0 === i && (i = 0);
                  var a = new Oe(),
                    s = t.body.getReader();
                  return (function o() {
                    return s
                      .read()
                      .then(function (s) {
                        if (s.done)
                          return (
                            a.dataLength && n(e, r, a.flush(), t),
                            Promise.resolve(new ArrayBuffer(0))
                          );
                        var l = s.value,
                          u = l.length;
                        return (
                          (e.loaded += u),
                          u < i || a.dataLength
                            ? (a.push(l),
                              a.dataLength >= i && n(e, r, a.flush(), t))
                            : n(e, r, l, t),
                          o()
                        );
                      })
                      .catch(function () {
                        return Promise.reject();
                      });
                  })();
                }),
                t
              );
            })();
            function wi(t, e) {
              return new self.Request(t.url, e);
            }
            var Ci = (function (t) {
              var e, r;
              function i(e, r, i) {
                var n;
                return (
                  ((n = t.call(this, e) || this).code = void 0),
                  (n.details = void 0),
                  (n.code = r),
                  (n.details = i),
                  n
                );
              }
              return (
                (r = t),
                ((e = i).prototype = Object.create(r.prototype)),
                (e.prototype.constructor = e),
                Di(e, r),
                i
              );
            })(bi(Error));
            const _i = Ii;
            var Pi = /\s/;
            function Oi() {
              return (
                (Oi = Object.assign
                  ? Object.assign.bind()
                  : function (t) {
                      for (var e = 1; e < arguments.length; e++) {
                        var r = arguments[e];
                        for (var i in r)
                          Object.prototype.hasOwnProperty.call(r, i) &&
                            (t[i] = r[i]);
                      }
                      return t;
                    }),
                Oi.apply(this, arguments)
              );
            }
            function xi(t, e) {
              var r = Object.keys(t);
              if (Object.getOwnPropertySymbols) {
                var i = Object.getOwnPropertySymbols(t);
                e &&
                  (i = i.filter(function (e) {
                    return Object.getOwnPropertyDescriptor(t, e).enumerable;
                  })),
                  r.push.apply(r, i);
              }
              return r;
            }
            function Fi(t) {
              for (var e = 1; e < arguments.length; e++) {
                var r = null != arguments[e] ? arguments[e] : {};
                e % 2
                  ? xi(Object(r), !0).forEach(function (e) {
                      Mi(t, e, r[e]);
                    })
                  : Object.getOwnPropertyDescriptors
                  ? Object.defineProperties(
                      t,
                      Object.getOwnPropertyDescriptors(r)
                    )
                  : xi(Object(r)).forEach(function (e) {
                      Object.defineProperty(
                        t,
                        e,
                        Object.getOwnPropertyDescriptor(r, e)
                      );
                    });
              }
              return t;
            }
            function Mi(t, e, r) {
              return (
                (e = (function (t) {
                  var e = (function (t, e) {
                    if ("object" != typeof t || null === t) return t;
                    var r = t[Symbol.toPrimitive];
                    if (void 0 !== r) {
                      var i = r.call(t, e);
                      if ("object" != typeof i) return i;
                      throw new TypeError(
                        "@@toPrimitive must return a primitive value."
                      );
                    }
                    return String(t);
                  })(t, "string");
                  return "symbol" == typeof e ? e : String(e);
                })(e)) in t
                  ? Object.defineProperty(t, e, {
                      value: r,
                      enumerable: !0,
                      configurable: !0,
                      writable: !0,
                    })
                  : (t[e] = r),
                t
              );
            }
            var Ni = Fi(
              Fi(
                {
                  autoStartLoad: !0,
                  startPosition: -1,
                  defaultAudioCodec: void 0,
                  debug: !1,
                  capLevelOnFPSDrop: !1,
                  capLevelToPlayerSize: !1,
                  ignoreDevicePixelRatio: !1,
                  initialLiveManifestSize: 1,
                  maxBufferLength: 30,
                  backBufferLength: 1 / 0,
                  maxBufferSize: 6e7,
                  maxBufferHole: 0.1,
                  highBufferWatchdogPeriod: 2,
                  nudgeOffset: 0.1,
                  nudgeMaxRetry: 3,
                  maxFragLookUpTolerance: 0.25,
                  liveSyncDurationCount: 3,
                  liveMaxLatencyDurationCount: 1 / 0,
                  liveSyncDuration: void 0,
                  liveMaxLatencyDuration: void 0,
                  maxLiveSyncPlaybackRate: 1,
                  liveDurationInfinity: !1,
                  liveBackBufferLength: null,
                  maxMaxBufferLength: 600,
                  enableWorker: !0,
                  enableSoftwareAES: !0,
                  manifestLoadingTimeOut: 1e4,
                  manifestLoadingMaxRetry: 1,
                  manifestLoadingRetryDelay: 1e3,
                  manifestLoadingMaxRetryTimeout: 64e3,
                  startLevel: void 0,
                  levelLoadingTimeOut: 1e4,
                  levelLoadingMaxRetry: 4,
                  levelLoadingRetryDelay: 1e3,
                  levelLoadingMaxRetryTimeout: 64e3,
                  fragLoadingTimeOut: 2e4,
                  fragLoadingMaxRetry: 6,
                  fragLoadingRetryDelay: 1e3,
                  fragLoadingMaxRetryTimeout: 64e3,
                  startFragPrefetch: !1,
                  fpsDroppedMonitoringPeriod: 5e3,
                  fpsDroppedMonitoringThreshold: 0.2,
                  appendErrorMaxRetry: 3,
                  loader: Si,
                  fLoader: void 0,
                  pLoader: void 0,
                  xhrSetup: void 0,
                  licenseXhrSetup: void 0,
                  licenseResponseCallback: void 0,
                  abrController: Pe,
                  bufferController: Ze,
                  capLevelController: Jr,
                  fpsController: Zr,
                  stretchShortVideoTrack: !1,
                  maxAudioFramesDrift: 1,
                  forceKeyFrameOnDiscontinuity: !0,
                  abrEwmaFastLive: 3,
                  abrEwmaSlowLive: 9,
                  abrEwmaFastVoD: 3,
                  abrEwmaSlowVoD: 9,
                  abrEwmaDefaultEstimate: 5e5,
                  abrBandWidthFactor: 0.95,
                  abrBandWidthUpFactor: 0.7,
                  abrMaxWithRealBitrate: !1,
                  maxStarvationDelay: 4,
                  maxLoadingDelay: 4,
                  minAutoBitrate: 0,
                  emeEnabled: !1,
                  widevineLicenseUrl: void 0,
                  drmSystems: {},
                  drmSystemOptions: {},
                  requestMediaKeySystemAccessFunc: k,
                  testBandwidth: !0,
                  progressive: !1,
                  lowLatencyMode: !0,
                  cmcd: void 0,
                  enableDateRangeMetadataCues: !0,
                  enableEmsgMetadataCues: !0,
                  enableID3MetadataCues: !0,
                },
                {
                  cueHandler: {
                    newCue: function (t, e, r, i) {
                      for (
                        var n,
                          a,
                          s,
                          o,
                          l,
                          u = [],
                          d = self.VTTCue || self.TextTrackCue,
                          h = 0;
                        h < i.rows.length;
                        h++
                      )
                        if (
                          ((s = !0),
                          (o = 0),
                          (l = ""),
                          !(n = i.rows[h]).isEmpty())
                        ) {
                          for (var c = 0; c < n.chars.length; c++)
                            Pi.test(n.chars[c].uchar) && s
                              ? o++
                              : ((l += n.chars[c].uchar), (s = !1));
                          (n.cueStartTime = e),
                            e === r && (r += 1e-4),
                            o >= 16 ? o-- : o++;
                          var f = wr(l.trim()),
                            g = Mr(e, r, f);
                          (t && t.cues && t.cues.getCueById(g)) ||
                            (((a = new d(e, r, f)).id = g),
                            (a.line = h + 1),
                            (a.align = "left"),
                            (a.position =
                              10 + Math.min(80, 10 * Math.floor((8 * o) / 32))),
                            u.push(a));
                        }
                      return (
                        t &&
                          u.length &&
                          (u.sort(function (t, e) {
                            return "auto" === t.line || "auto" === e.line
                              ? 0
                              : t.line > 8 && e.line > 8
                              ? e.line - t.line
                              : t.line - e.line;
                          }),
                          u.forEach(function (e) {
                            return X(t, e);
                          })),
                        u
                      );
                    },
                  },
                  enableWebVTT: !0,
                  enableIMSC1: !0,
                  enableCEA708Captions: !0,
                  captionsTextTrack1Label: "English",
                  captionsTextTrack1LanguageCode: "en",
                  captionsTextTrack2Label: "Spanish",
                  captionsTextTrack2LanguageCode: "es",
                  captionsTextTrack3Label: "Unknown CC",
                  captionsTextTrack3LanguageCode: "",
                  captionsTextTrack4Label: "Unknown CC",
                  captionsTextTrack4LanguageCode: "",
                  renderTextTracksNatively: !0,
                }
              ),
              {},
              {
                subtitleStreamController: je,
                subtitleTrackController: Xe,
                timelineController: zr,
                audioStreamController: Ne,
                audioTrackController: Ge,
                emeController: ui,
                cmcdController: yi,
              }
            );
            function Ui(t, e) {
              for (var r = 0; r < e.length; r++) {
                var i = e[r];
                (i.enumerable = i.enumerable || !1),
                  (i.configurable = !0),
                  "value" in i && (i.writable = !0),
                  Object.defineProperty(
                    t,
                    (void 0,
                    "symbol" ==
                    typeof (n = (function (t, e) {
                      if ("object" != typeof t || null === t) return t;
                      var r = t[Symbol.toPrimitive];
                      if (void 0 !== r) {
                        var i = r.call(t, e);
                        if ("object" != typeof i) return i;
                        throw new TypeError(
                          "@@toPrimitive must return a primitive value."
                        );
                      }
                      return String(t);
                    })(i.key, "string"))
                      ? n
                      : String(n)),
                    i
                  );
              }
              var n;
            }
            var Bi = (function () {
              function t(e) {
                void 0 === e && (e = {}),
                  (this.config = void 0),
                  (this.userConfig = void 0),
                  (this.coreComponents = void 0),
                  (this.networkControllers = void 0),
                  (this._emitter = new Se.EventEmitter()),
                  (this._autoLevelCapping = void 0),
                  (this._maxHdcpLevel = null),
                  (this.abrController = void 0),
                  (this.bufferController = void 0),
                  (this.capLevelController = void 0),
                  (this.latencyController = void 0),
                  (this.levelController = void 0),
                  (this.streamController = void 0),
                  (this.audioTrackController = void 0),
                  (this.subtitleTrackController = void 0),
                  (this.emeController = void 0),
                  (this.cmcdController = void 0),
                  (this._media = null),
                  (this.url = null);
                var r = (this.config = (function (t, e) {
                  if (
                    (e.liveSyncDurationCount ||
                      e.liveMaxLatencyDurationCount) &&
                    (e.liveSyncDuration || e.liveMaxLatencyDuration)
                  )
                    throw new Error(
                      "Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration"
                    );
                  if (
                    void 0 !== e.liveMaxLatencyDurationCount &&
                    (void 0 === e.liveSyncDurationCount ||
                      e.liveMaxLatencyDurationCount <= e.liveSyncDurationCount)
                  )
                    throw new Error(
                      'Illegal hls.js config: "liveMaxLatencyDurationCount" must be greater than "liveSyncDurationCount"'
                    );
                  if (
                    void 0 !== e.liveMaxLatencyDuration &&
                    (void 0 === e.liveSyncDuration ||
                      e.liveMaxLatencyDuration <= e.liveSyncDuration)
                  )
                    throw new Error(
                      'Illegal hls.js config: "liveMaxLatencyDuration" must be greater than "liveSyncDuration"'
                    );
                  return Oi({}, t, e);
                })(t.DefaultConfig, e));
                (this.userConfig = e),
                  (0, l.enableLogs)(r.debug, "Hls instance"),
                  (this._autoLevelCapping = -1),
                  r.progressive &&
                    (function (t) {
                      var e = t.loader;
                      e !== _i && e !== Si
                        ? (l.logger.log(
                            "[config]: Custom loader detected, cannot enable progressive streaming"
                          ),
                          (t.progressive = !1))
                        : (function () {
                            if (
                              self.fetch &&
                              self.AbortController &&
                              self.ReadableStream &&
                              self.Request
                            )
                              try {
                                return new self.ReadableStream({}), !0;
                              } catch (t) {}
                            return !1;
                          })() &&
                          ((t.loader = _i),
                          (t.progressive = !0),
                          (t.enableSoftwareAES = !0),
                          l.logger.log(
                            "[config]: Progressive streaming enabled, using FetchLoader"
                          ));
                    })(r);
                var i = r.abrController,
                  n = r.bufferController,
                  a = r.capLevelController,
                  s = r.fpsController,
                  o = (this.abrController = new i(this)),
                  u = (this.bufferController = new n(this)),
                  d = (this.capLevelController = new a(this)),
                  h = new s(this),
                  c = new W(this),
                  f = new rt(this),
                  g = (this.levelController = new Lt(this)),
                  v = new At(this),
                  p = new Mt(this.config),
                  m = (this.streamController = new Ie(this, v, p));
                d.setStreamController(m), h.setStreamController(m);
                var y = [c, g, m];
                this.networkControllers = y;
                var E = [o, u, d, h, f, v];
                this.audioTrackController = this.createController(
                  r.audioTrackController,
                  y
                );
                var T = r.audioStreamController;
                T && y.push(new T(this, v, p)),
                  (this.subtitleTrackController = this.createController(
                    r.subtitleTrackController,
                    y
                  ));
                var S = r.subtitleStreamController;
                S && y.push(new S(this, v, p)),
                  this.createController(r.timelineController, E),
                  (p.emeController = this.emeController =
                    this.createController(r.emeController, E)),
                  (this.cmcdController = this.createController(
                    r.cmcdController,
                    E
                  )),
                  (this.latencyController = this.createController(nt, E)),
                  (this.coreComponents = E);
              }
              t.isSupported = function () {
                return (function () {
                  var t = ce();
                  if (!t) return !1;
                  var e = fe(),
                    r =
                      t &&
                      "function" == typeof t.isTypeSupported &&
                      t.isTypeSupported(
                        'video/mp4; codecs="avc1.42E01E,mp4a.40.2"'
                      ),
                    i =
                      !e ||
                      (e.prototype &&
                        "function" == typeof e.prototype.appendBuffer &&
                        "function" == typeof e.prototype.remove);
                  return !!r && !!i;
                })();
              };
              var e,
                r,
                i,
                a = t.prototype;
              return (
                (a.createController = function (t, e) {
                  if (t) {
                    var r = new t(this);
                    return e && e.push(r), r;
                  }
                  return null;
                }),
                (a.on = function (t, e, r) {
                  void 0 === r && (r = this), this._emitter.on(t, e, r);
                }),
                (a.once = function (t, e, r) {
                  void 0 === r && (r = this), this._emitter.once(t, e, r);
                }),
                (a.removeAllListeners = function (t) {
                  this._emitter.removeAllListeners(t);
                }),
                (a.off = function (t, e, r, i) {
                  void 0 === r && (r = this), this._emitter.off(t, e, r, i);
                }),
                (a.listeners = function (t) {
                  return this._emitter.listeners(t);
                }),
                (a.emit = function (t, e, r) {
                  return this._emitter.emit(t, e, r);
                }),
                (a.trigger = function (t, e) {
                  if (this.config.debug) return this.emit(t, t, e);
                  try {
                    return this.emit(t, t, e);
                  } catch (e) {
                    l.logger.error(
                      "An internal error happened while handling event " +
                        t +
                        '. Error message: "' +
                        e.message +
                        '". Here is a stacktrace:',
                      e
                    ),
                      this.trigger(s.Events.ERROR, {
                        type: o.ErrorTypes.OTHER_ERROR,
                        details: o.ErrorDetails.INTERNAL_EXCEPTION,
                        fatal: !1,
                        event: t,
                        error: e,
                      });
                  }
                  return !1;
                }),
                (a.listenerCount = function (t) {
                  return this._emitter.listenerCount(t);
                }),
                (a.destroy = function () {
                  l.logger.log("destroy"),
                    this.trigger(s.Events.DESTROYING, void 0),
                    this.detachMedia(),
                    this.removeAllListeners(),
                    (this._autoLevelCapping = -1),
                    (this.url = null),
                    this.networkControllers.forEach(function (t) {
                      return t.destroy();
                    }),
                    (this.networkControllers.length = 0),
                    this.coreComponents.forEach(function (t) {
                      return t.destroy();
                    }),
                    (this.coreComponents.length = 0);
                }),
                (a.attachMedia = function (t) {
                  l.logger.log("attachMedia"),
                    (this._media = t),
                    this.trigger(s.Events.MEDIA_ATTACHING, { media: t });
                }),
                (a.detachMedia = function () {
                  l.logger.log("detachMedia"),
                    this.trigger(s.Events.MEDIA_DETACHING, void 0),
                    (this._media = null);
                }),
                (a.loadSource = function (t) {
                  this.stopLoad();
                  var e = this.media,
                    r = this.url,
                    i = (this.url = n.buildAbsoluteURL(self.location.href, t, {
                      alwaysNormalize: !0,
                    }));
                  l.logger.log("loadSource:" + i),
                    e &&
                      r &&
                      r !== i &&
                      this.bufferController.hasSourceTypes() &&
                      (this.detachMedia(), this.attachMedia(e)),
                    this.trigger(s.Events.MANIFEST_LOADING, { url: t });
                }),
                (a.startLoad = function (t) {
                  void 0 === t && (t = -1),
                    l.logger.log("startLoad(" + t + ")"),
                    this.networkControllers.forEach(function (e) {
                      e.startLoad(t);
                    });
                }),
                (a.stopLoad = function () {
                  l.logger.log("stopLoad"),
                    this.networkControllers.forEach(function (t) {
                      t.stopLoad();
                    });
                }),
                (a.swapAudioCodec = function () {
                  l.logger.log("swapAudioCodec"),
                    this.streamController.swapAudioCodec();
                }),
                (a.recoverMediaError = function () {
                  l.logger.log("recoverMediaError");
                  var t = this._media;
                  this.detachMedia(), t && this.attachMedia(t);
                }),
                (a.removeLevel = function (t, e) {
                  void 0 === e && (e = 0),
                    this.levelController.removeLevel(t, e);
                }),
                (e = t),
                (i = [
                  {
                    key: "version",
                    get: function () {
                      return "1.3.5";
                    },
                  },
                  {
                    key: "Events",
                    get: function () {
                      return s.Events;
                    },
                  },
                  {
                    key: "ErrorTypes",
                    get: function () {
                      return o.ErrorTypes;
                    },
                  },
                  {
                    key: "ErrorDetails",
                    get: function () {
                      return o.ErrorDetails;
                    },
                  },
                  {
                    key: "DefaultConfig",
                    get: function () {
                      return t.defaultConfig ? t.defaultConfig : Ni;
                    },
                    set: function (e) {
                      t.defaultConfig = e;
                    },
                  },
                ]),
                (r = [
                  {
                    key: "levels",
                    get: function () {
                      return this.levelController.levels || [];
                    },
                  },
                  {
                    key: "currentLevel",
                    get: function () {
                      return this.streamController.currentLevel;
                    },
                    set: function (t) {
                      l.logger.log("set currentLevel:" + t),
                        (this.loadLevel = t),
                        this.abrController.clearTimer(),
                        this.streamController.immediateLevelSwitch();
                    },
                  },
                  {
                    key: "nextLevel",
                    get: function () {
                      return this.streamController.nextLevel;
                    },
                    set: function (t) {
                      l.logger.log("set nextLevel:" + t),
                        (this.levelController.manualLevel = t),
                        this.streamController.nextLevelSwitch();
                    },
                  },
                  {
                    key: "loadLevel",
                    get: function () {
                      return this.levelController.level;
                    },
                    set: function (t) {
                      l.logger.log("set loadLevel:" + t),
                        (this.levelController.manualLevel = t);
                    },
                  },
                  {
                    key: "nextLoadLevel",
                    get: function () {
                      return this.levelController.nextLoadLevel;
                    },
                    set: function (t) {
                      this.levelController.nextLoadLevel = t;
                    },
                  },
                  {
                    key: "firstLevel",
                    get: function () {
                      return Math.max(
                        this.levelController.firstLevel,
                        this.minAutoLevel
                      );
                    },
                    set: function (t) {
                      l.logger.log("set firstLevel:" + t),
                        (this.levelController.firstLevel = t);
                    },
                  },
                  {
                    key: "startLevel",
                    get: function () {
                      return this.levelController.startLevel;
                    },
                    set: function (t) {
                      l.logger.log("set startLevel:" + t),
                        -1 !== t && (t = Math.max(t, this.minAutoLevel)),
                        (this.levelController.startLevel = t);
                    },
                  },
                  {
                    key: "capLevelToPlayerSize",
                    get: function () {
                      return this.config.capLevelToPlayerSize;
                    },
                    set: function (t) {
                      var e = !!t;
                      e !== this.config.capLevelToPlayerSize &&
                        (e
                          ? this.capLevelController.startCapping()
                          : (this.capLevelController.stopCapping(),
                            (this.autoLevelCapping = -1),
                            this.streamController.nextLevelSwitch()),
                        (this.config.capLevelToPlayerSize = e));
                    },
                  },
                  {
                    key: "autoLevelCapping",
                    get: function () {
                      return this._autoLevelCapping;
                    },
                    set: function (t) {
                      this._autoLevelCapping !== t &&
                        (l.logger.log("set autoLevelCapping:" + t),
                        (this._autoLevelCapping = t));
                    },
                  },
                  {
                    key: "bandwidthEstimate",
                    get: function () {
                      var t = this.abrController.bwEstimator;
                      return t ? t.getEstimate() : NaN;
                    },
                  },
                  {
                    key: "maxHdcpLevel",
                    get: function () {
                      return this._maxHdcpLevel;
                    },
                    set: function (t) {
                      ot.indexOf(t) > -1 && (this._maxHdcpLevel = t);
                    },
                  },
                  {
                    key: "autoLevelEnabled",
                    get: function () {
                      return -1 === this.levelController.manualLevel;
                    },
                  },
                  {
                    key: "manualLevel",
                    get: function () {
                      return this.levelController.manualLevel;
                    },
                  },
                  {
                    key: "minAutoLevel",
                    get: function () {
                      var t = this.levels,
                        e = this.config.minAutoBitrate;
                      if (!t) return 0;
                      for (var r = t.length, i = 0; i < r; i++)
                        if (t[i].maxBitrate >= e) return i;
                      return 0;
                    },
                  },
                  {
                    key: "maxAutoLevel",
                    get: function () {
                      var t,
                        e = this.levels,
                        r = this.autoLevelCapping,
                        i = this.maxHdcpLevel;
                      if (
                        ((t = -1 === r && e && e.length ? e.length - 1 : r), i)
                      )
                        for (var n = t; n--; ) {
                          var a = e[n].attrs["HDCP-LEVEL"];
                          if (a && a <= i) return n;
                        }
                      return t;
                    },
                  },
                  {
                    key: "nextAutoLevel",
                    get: function () {
                      return Math.min(
                        Math.max(
                          this.abrController.nextAutoLevel,
                          this.minAutoLevel
                        ),
                        this.maxAutoLevel
                      );
                    },
                    set: function (t) {
                      this.abrController.nextAutoLevel = Math.max(
                        this.minAutoLevel,
                        t
                      );
                    },
                  },
                  {
                    key: "playingDate",
                    get: function () {
                      return this.streamController.currentProgramDateTime;
                    },
                  },
                  {
                    key: "mainForwardBufferInfo",
                    get: function () {
                      return this.streamController.getMainFwdBufferInfo();
                    },
                  },
                  {
                    key: "audioTracks",
                    get: function () {
                      var t = this.audioTrackController;
                      return t ? t.audioTracks : [];
                    },
                  },
                  {
                    key: "audioTrack",
                    get: function () {
                      var t = this.audioTrackController;
                      return t ? t.audioTrack : -1;
                    },
                    set: function (t) {
                      var e = this.audioTrackController;
                      e && (e.audioTrack = t);
                    },
                  },
                  {
                    key: "subtitleTracks",
                    get: function () {
                      var t = this.subtitleTrackController;
                      return t ? t.subtitleTracks : [];
                    },
                  },
                  {
                    key: "subtitleTrack",
                    get: function () {
                      var t = this.subtitleTrackController;
                      return t ? t.subtitleTrack : -1;
                    },
                    set: function (t) {
                      var e = this.subtitleTrackController;
                      e && (e.subtitleTrack = t);
                    },
                  },
                  {
                    key: "media",
                    get: function () {
                      return this._media;
                    },
                  },
                  {
                    key: "subtitleDisplay",
                    get: function () {
                      var t = this.subtitleTrackController;
                      return !!t && t.subtitleDisplay;
                    },
                    set: function (t) {
                      var e = this.subtitleTrackController;
                      e && (e.subtitleDisplay = t);
                    },
                  },
                  {
                    key: "lowLatencyMode",
                    get: function () {
                      return this.config.lowLatencyMode;
                    },
                    set: function (t) {
                      this.config.lowLatencyMode = t;
                    },
                  },
                  {
                    key: "liveSyncPosition",
                    get: function () {
                      return this.latencyController.liveSyncPosition;
                    },
                  },
                  {
                    key: "latency",
                    get: function () {
                      return this.latencyController.latency;
                    },
                  },
                  {
                    key: "maxLatency",
                    get: function () {
                      return this.latencyController.maxLatency;
                    },
                  },
                  {
                    key: "targetLatency",
                    get: function () {
                      return this.latencyController.targetLatency;
                    },
                  },
                  {
                    key: "drift",
                    get: function () {
                      return this.latencyController.drift;
                    },
                  },
                  {
                    key: "forceStartLoad",
                    get: function () {
                      return this.streamController.forceStartLoad;
                    },
                  },
                ]) && Ui(e.prototype, r),
                i && Ui(e, i),
                Object.defineProperty(e, "prototype", { writable: !1 }),
                t
              );
            })();
            Bi.defaultConfig = void 0;
          },
          923: (t, e, r) => {
            "use strict";
            r.r(e),
              r.d(e, {
                BaseSegment: () => h,
                ElementaryStreamTypes: () => i,
                Fragment: () => c,
                Part: () => f,
              });
            var i,
              n = r(965),
              a = r(945),
              s = r(408);
            function o(t, e) {
              (t.prototype = Object.create(e.prototype)),
                (t.prototype.constructor = t),
                l(t, e);
            }
            function l(t, e) {
              return (
                (l = Object.setPrototypeOf
                  ? Object.setPrototypeOf.bind()
                  : function (t, e) {
                      return (t.__proto__ = e), t;
                    }),
                l(t, e)
              );
            }
            function u(t, e) {
              for (var r = 0; r < e.length; r++) {
                var i = e[r];
                (i.enumerable = i.enumerable || !1),
                  (i.configurable = !0),
                  "value" in i && (i.writable = !0),
                  Object.defineProperty(
                    t,
                    (void 0,
                    "symbol" ==
                    typeof (n = (function (t, e) {
                      if ("object" != typeof t || null === t) return t;
                      var r = t[Symbol.toPrimitive];
                      if (void 0 !== r) {
                        var i = r.call(t, e);
                        if ("object" != typeof i) return i;
                        throw new TypeError(
                          "@@toPrimitive must return a primitive value."
                        );
                      }
                      return String(t);
                    })(i.key, "string"))
                      ? n
                      : String(n)),
                    i
                  );
              }
              var n;
            }
            function d(t, e, r) {
              return (
                e && u(t.prototype, e),
                r && u(t, r),
                Object.defineProperty(t, "prototype", { writable: !1 }),
                t
              );
            }
            !(function (t) {
              (t.AUDIO = "audio"),
                (t.VIDEO = "video"),
                (t.AUDIOVIDEO = "audiovideo");
            })(i || (i = {}));
            var h = (function () {
                function t(t) {
                  var e;
                  (this._byteRange = null),
                    (this._url = null),
                    (this.baseurl = void 0),
                    (this.relurl = void 0),
                    (this.elementaryStreams =
                      (((e = {})[i.AUDIO] = null),
                      (e[i.VIDEO] = null),
                      (e[i.AUDIOVIDEO] = null),
                      e)),
                    (this.baseurl = t);
                }
                return (
                  (t.prototype.setByteRange = function (t, e) {
                    var r = t.split("@", 2),
                      i = [];
                    1 === r.length
                      ? (i[0] = e ? e.byteRangeEndOffset : 0)
                      : (i[0] = parseInt(r[1])),
                      (i[1] = parseInt(r[0]) + i[0]),
                      (this._byteRange = i);
                  }),
                  d(t, [
                    {
                      key: "byteRange",
                      get: function () {
                        return this._byteRange ? this._byteRange : [];
                      },
                    },
                    {
                      key: "byteRangeStartOffset",
                      get: function () {
                        return this.byteRange[0];
                      },
                    },
                    {
                      key: "byteRangeEndOffset",
                      get: function () {
                        return this.byteRange[1];
                      },
                    },
                    {
                      key: "url",
                      get: function () {
                        return (
                          !this._url &&
                            this.baseurl &&
                            this.relurl &&
                            (this._url = (0, a.buildAbsoluteURL)(
                              this.baseurl,
                              this.relurl,
                              { alwaysNormalize: !0 }
                            )),
                          this._url || ""
                        );
                      },
                      set: function (t) {
                        this._url = t;
                      },
                    },
                  ]),
                  t
                );
              })(),
              c = (function (t) {
                function e(e, r) {
                  var i;
                  return (
                    ((i = t.call(this, r) || this)._decryptdata = null),
                    (i.rawProgramDateTime = null),
                    (i.programDateTime = null),
                    (i.tagList = []),
                    (i.duration = 0),
                    (i.sn = 0),
                    (i.levelkeys = void 0),
                    (i.type = void 0),
                    (i.loader = null),
                    (i.keyLoader = null),
                    (i.level = -1),
                    (i.cc = 0),
                    (i.startPTS = void 0),
                    (i.endPTS = void 0),
                    (i.appendedPTS = void 0),
                    (i.startDTS = void 0),
                    (i.endDTS = void 0),
                    (i.start = 0),
                    (i.deltaPTS = void 0),
                    (i.maxStartPTS = void 0),
                    (i.minEndPTS = void 0),
                    (i.stats = new s.LoadStats()),
                    (i.urlId = 0),
                    (i.data = void 0),
                    (i.bitrateTest = !1),
                    (i.title = null),
                    (i.initSegment = null),
                    (i.endList = void 0),
                    (i.type = e),
                    i
                  );
                }
                o(e, t);
                var r = e.prototype;
                return (
                  (r.setKeyFormat = function (t) {
                    if (this.levelkeys) {
                      var e = this.levelkeys[t];
                      e &&
                        !this._decryptdata &&
                        (this._decryptdata = e.getDecryptData(this.sn));
                    }
                  }),
                  (r.abortRequests = function () {
                    var t, e;
                    null === (t = this.loader) || void 0 === t || t.abort(),
                      null === (e = this.keyLoader) ||
                        void 0 === e ||
                        e.abort();
                  }),
                  (r.setElementaryStreamInfo = function (t, e, r, i, n, a) {
                    void 0 === a && (a = !1);
                    var s = this.elementaryStreams,
                      o = s[t];
                    o
                      ? ((o.startPTS = Math.min(o.startPTS, e)),
                        (o.endPTS = Math.max(o.endPTS, r)),
                        (o.startDTS = Math.min(o.startDTS, i)),
                        (o.endDTS = Math.max(o.endDTS, n)))
                      : (s[t] = {
                          startPTS: e,
                          endPTS: r,
                          startDTS: i,
                          endDTS: n,
                          partial: a,
                        });
                  }),
                  (r.clearElementaryStreamInfo = function () {
                    var t = this.elementaryStreams;
                    (t[i.AUDIO] = null),
                      (t[i.VIDEO] = null),
                      (t[i.AUDIOVIDEO] = null);
                  }),
                  d(e, [
                    {
                      key: "decryptdata",
                      get: function () {
                        if (!this.levelkeys && !this._decryptdata) return null;
                        if (
                          !this._decryptdata &&
                          this.levelkeys &&
                          !this.levelkeys.NONE
                        ) {
                          var t = this.levelkeys.identity;
                          if (t) this._decryptdata = t.getDecryptData(this.sn);
                          else {
                            var e = Object.keys(this.levelkeys);
                            if (1 === e.length)
                              return (this._decryptdata = this.levelkeys[
                                e[0]
                              ].getDecryptData(this.sn));
                          }
                        }
                        return this._decryptdata;
                      },
                    },
                    {
                      key: "end",
                      get: function () {
                        return this.start + this.duration;
                      },
                    },
                    {
                      key: "endProgramDateTime",
                      get: function () {
                        if (null === this.programDateTime) return null;
                        if (!(0, n.isFiniteNumber)(this.programDateTime))
                          return null;
                        var t = (0, n.isFiniteNumber)(this.duration)
                          ? this.duration
                          : 0;
                        return this.programDateTime + 1e3 * t;
                      },
                    },
                    {
                      key: "encrypted",
                      get: function () {
                        var t;
                        if (
                          null !== (t = this._decryptdata) &&
                          void 0 !== t &&
                          t.encrypted
                        )
                          return !0;
                        if (this.levelkeys) {
                          var e = Object.keys(this.levelkeys),
                            r = e.length;
                          if (
                            r > 1 ||
                            (1 === r && this.levelkeys[e[0]].encrypted)
                          )
                            return !0;
                        }
                        return !1;
                      },
                    },
                  ]),
                  e
                );
              })(h),
              f = (function (t) {
                function e(e, r, i, n, a) {
                  var o;
                  ((o = t.call(this, i) || this).fragOffset = 0),
                    (o.duration = 0),
                    (o.gap = !1),
                    (o.independent = !1),
                    (o.relurl = void 0),
                    (o.fragment = void 0),
                    (o.index = void 0),
                    (o.stats = new s.LoadStats()),
                    (o.duration = e.decimalFloatingPoint("DURATION")),
                    (o.gap = e.bool("GAP")),
                    (o.independent = e.bool("INDEPENDENT")),
                    (o.relurl = e.enumeratedString("URI")),
                    (o.fragment = r),
                    (o.index = n);
                  var l = e.enumeratedString("BYTERANGE");
                  return (
                    l && o.setByteRange(l, a),
                    a && (o.fragOffset = a.fragOffset + a.duration),
                    o
                  );
                }
                return (
                  o(e, t),
                  d(e, [
                    {
                      key: "start",
                      get: function () {
                        return this.fragment.start + this.fragOffset;
                      },
                    },
                    {
                      key: "end",
                      get: function () {
                        return this.start + this.duration;
                      },
                    },
                    {
                      key: "loaded",
                      get: function () {
                        var t = this.elementaryStreams;
                        return !!(t.audio || t.video || t.audiovideo);
                      },
                    },
                  ]),
                  e
                );
              })(h);
          },
          408: (t, e, r) => {
            "use strict";
            r.r(e), r.d(e, { LoadStats: () => i });
            var i = function () {
              (this.aborted = !1),
                (this.loaded = 0),
                (this.retry = 0),
                (this.total = 0),
                (this.chunkCount = 0),
                (this.bwEstimate = 0),
                (this.loading = { start: 0, first: 0, end: 0 }),
                (this.parsing = { start: 0, end: 0 }),
                (this.buffering = { start: 0, first: 0, end: 0 });
            };
          },
          965: (t, e, r) => {
            "use strict";
            r.r(e),
              r.d(e, { MAX_SAFE_INTEGER: () => n, isFiniteNumber: () => i });
            var i =
                Number.isFinite ||
                function (t) {
                  return "number" == typeof t && isFinite(t);
                },
              n = Number.MAX_SAFE_INTEGER || 9007199254740991;
          },
          524: (t, e, r) => {
            "use strict";
            r.r(e),
              r.d(e, {
                default: () => p,
                flushTextTrackMetadataCueSamples: () => y,
                flushTextTrackUserdataCueSamples: () => E,
                normalizePts: () => m,
              });
            var i = r(965);
            const n = (function () {
              function t() {}
              return (
                (t.getSilentFrame = function (t, e) {
                  if ("mp4a.40.2" === t) {
                    if (1 === e)
                      return new Uint8Array([0, 200, 0, 128, 35, 128]);
                    if (2 === e)
                      return new Uint8Array([
                        33, 0, 73, 144, 2, 25, 0, 35, 128,
                      ]);
                    if (3 === e)
                      return new Uint8Array([
                        0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142,
                      ]);
                    if (4 === e)
                      return new Uint8Array([
                        0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44,
                        128, 8, 2, 56,
                      ]);
                    if (5 === e)
                      return new Uint8Array([
                        0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48,
                        4, 153, 0, 33, 144, 2, 56,
                      ]);
                    if (6 === e)
                      return new Uint8Array([
                        0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48,
                        4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224,
                      ]);
                  } else {
                    if (1 === e)
                      return new Uint8Array([
                        1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28,
                        6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                        90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                        90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                        90, 90, 94,
                      ]);
                    if (2 === e)
                      return new Uint8Array([
                        1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0,
                        149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90,
                        90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                        90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                        90, 90, 94,
                      ]);
                    if (3 === e)
                      return new Uint8Array([
                        1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0,
                        149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90,
                        90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                        90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                        90, 90, 94,
                      ]);
                  }
                }),
                t
              );
            })();
            var a = Math.pow(2, 32) - 1,
              s = (function () {
                function t() {}
                return (
                  (t.init = function () {
                    var e;
                    for (e in ((t.types = {
                      avc1: [],
                      avcC: [],
                      btrt: [],
                      dinf: [],
                      dref: [],
                      esds: [],
                      ftyp: [],
                      hdlr: [],
                      mdat: [],
                      mdhd: [],
                      mdia: [],
                      mfhd: [],
                      minf: [],
                      moof: [],
                      moov: [],
                      mp4a: [],
                      ".mp3": [],
                      mvex: [],
                      mvhd: [],
                      pasp: [],
                      sdtp: [],
                      stbl: [],
                      stco: [],
                      stsc: [],
                      stsd: [],
                      stsz: [],
                      stts: [],
                      tfdt: [],
                      tfhd: [],
                      traf: [],
                      trak: [],
                      trun: [],
                      trex: [],
                      tkhd: [],
                      vmhd: [],
                      smhd: [],
                    }),
                    t.types))
                      t.types.hasOwnProperty(e) &&
                        (t.types[e] = [
                          e.charCodeAt(0),
                          e.charCodeAt(1),
                          e.charCodeAt(2),
                          e.charCodeAt(3),
                        ]);
                    var r = new Uint8Array([
                        0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97,
                        110, 100, 108, 101, 114, 0,
                      ]),
                      i = new Uint8Array([
                        0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97,
                        110, 100, 108, 101, 114, 0,
                      ]);
                    t.HDLR_TYPES = { video: r, audio: i };
                    var n = new Uint8Array([
                        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32,
                        0, 0, 0, 1,
                      ]),
                      a = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
                    (t.STTS = t.STSC = t.STCO = a),
                      (t.STSZ = new Uint8Array([
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                      ])),
                      (t.VMHD = new Uint8Array([
                        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                      ])),
                      (t.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])),
                      (t.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]));
                    var s = new Uint8Array([105, 115, 111, 109]),
                      o = new Uint8Array([97, 118, 99, 49]),
                      l = new Uint8Array([0, 0, 0, 1]);
                    (t.FTYP = t.box(t.types.ftyp, s, l, s, o)),
                      (t.DINF = t.box(t.types.dinf, t.box(t.types.dref, n)));
                  }),
                  (t.box = function (t) {
                    for (
                      var e = 8,
                        r = arguments.length,
                        i = new Array(r > 1 ? r - 1 : 0),
                        n = 1;
                      n < r;
                      n++
                    )
                      i[n - 1] = arguments[n];
                    for (var a = i.length, s = a; a--; ) e += i[a].byteLength;
                    var o = new Uint8Array(e);
                    for (
                      o[0] = (e >> 24) & 255,
                        o[1] = (e >> 16) & 255,
                        o[2] = (e >> 8) & 255,
                        o[3] = 255 & e,
                        o.set(t, 4),
                        a = 0,
                        e = 8;
                      a < s;
                      a++
                    )
                      o.set(i[a], e), (e += i[a].byteLength);
                    return o;
                  }),
                  (t.hdlr = function (e) {
                    return t.box(t.types.hdlr, t.HDLR_TYPES[e]);
                  }),
                  (t.mdat = function (e) {
                    return t.box(t.types.mdat, e);
                  }),
                  (t.mdhd = function (e, r) {
                    r *= e;
                    var i = Math.floor(r / (a + 1)),
                      n = Math.floor(r % (a + 1));
                    return t.box(
                      t.types.mdhd,
                      new Uint8Array([
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        2,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        3,
                        (e >> 24) & 255,
                        (e >> 16) & 255,
                        (e >> 8) & 255,
                        255 & e,
                        i >> 24,
                        (i >> 16) & 255,
                        (i >> 8) & 255,
                        255 & i,
                        n >> 24,
                        (n >> 16) & 255,
                        (n >> 8) & 255,
                        255 & n,
                        85,
                        196,
                        0,
                        0,
                      ])
                    );
                  }),
                  (t.mdia = function (e) {
                    return t.box(
                      t.types.mdia,
                      t.mdhd(e.timescale, e.duration),
                      t.hdlr(e.type),
                      t.minf(e)
                    );
                  }),
                  (t.mfhd = function (e) {
                    return t.box(
                      t.types.mfhd,
                      new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        e >> 24,
                        (e >> 16) & 255,
                        (e >> 8) & 255,
                        255 & e,
                      ])
                    );
                  }),
                  (t.minf = function (e) {
                    return "audio" === e.type
                      ? t.box(
                          t.types.minf,
                          t.box(t.types.smhd, t.SMHD),
                          t.DINF,
                          t.stbl(e)
                        )
                      : t.box(
                          t.types.minf,
                          t.box(t.types.vmhd, t.VMHD),
                          t.DINF,
                          t.stbl(e)
                        );
                  }),
                  (t.moof = function (e, r, i) {
                    return t.box(t.types.moof, t.mfhd(e), t.traf(i, r));
                  }),
                  (t.moov = function (e) {
                    for (var r = e.length, i = []; r--; ) i[r] = t.trak(e[r]);
                    return t.box.apply(
                      null,
                      [t.types.moov, t.mvhd(e[0].timescale, e[0].duration)]
                        .concat(i)
                        .concat(t.mvex(e))
                    );
                  }),
                  (t.mvex = function (e) {
                    for (var r = e.length, i = []; r--; ) i[r] = t.trex(e[r]);
                    return t.box.apply(null, [t.types.mvex].concat(i));
                  }),
                  (t.mvhd = function (e, r) {
                    r *= e;
                    var i = Math.floor(r / (a + 1)),
                      n = Math.floor(r % (a + 1)),
                      s = new Uint8Array([
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        2,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        3,
                        (e >> 24) & 255,
                        (e >> 16) & 255,
                        (e >> 8) & 255,
                        255 & e,
                        i >> 24,
                        (i >> 16) & 255,
                        (i >> 8) & 255,
                        255 & i,
                        n >> 24,
                        (n >> 16) & 255,
                        (n >> 8) & 255,
                        255 & n,
                        0,
                        1,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        64,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        255,
                        255,
                        255,
                        255,
                      ]);
                    return t.box(t.types.mvhd, s);
                  }),
                  (t.sdtp = function (e) {
                    var r,
                      i,
                      n = e.samples || [],
                      a = new Uint8Array(4 + n.length);
                    for (r = 0; r < n.length; r++)
                      (i = n[r].flags),
                        (a[r + 4] =
                          (i.dependsOn << 4) |
                          (i.isDependedOn << 2) |
                          i.hasRedundancy);
                    return t.box(t.types.sdtp, a);
                  }),
                  (t.stbl = function (e) {
                    return t.box(
                      t.types.stbl,
                      t.stsd(e),
                      t.box(t.types.stts, t.STTS),
                      t.box(t.types.stsc, t.STSC),
                      t.box(t.types.stsz, t.STSZ),
                      t.box(t.types.stco, t.STCO)
                    );
                  }),
                  (t.avc1 = function (e) {
                    var r,
                      i,
                      n,
                      a = [],
                      s = [];
                    for (r = 0; r < e.sps.length; r++)
                      (n = (i = e.sps[r]).byteLength),
                        a.push((n >>> 8) & 255),
                        a.push(255 & n),
                        (a = a.concat(Array.prototype.slice.call(i)));
                    for (r = 0; r < e.pps.length; r++)
                      (n = (i = e.pps[r]).byteLength),
                        s.push((n >>> 8) & 255),
                        s.push(255 & n),
                        (s = s.concat(Array.prototype.slice.call(i)));
                    var o = t.box(
                        t.types.avcC,
                        new Uint8Array(
                          [1, a[3], a[4], a[5], 255, 224 | e.sps.length]
                            .concat(a)
                            .concat([e.pps.length])
                            .concat(s)
                        )
                      ),
                      l = e.width,
                      u = e.height,
                      d = e.pixelRatio[0],
                      h = e.pixelRatio[1];
                    return t.box(
                      t.types.avc1,
                      new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        (l >> 8) & 255,
                        255 & l,
                        (u >> 8) & 255,
                        255 & u,
                        0,
                        72,
                        0,
                        0,
                        0,
                        72,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        18,
                        100,
                        97,
                        105,
                        108,
                        121,
                        109,
                        111,
                        116,
                        105,
                        111,
                        110,
                        47,
                        104,
                        108,
                        115,
                        46,
                        106,
                        115,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        24,
                        17,
                        17,
                      ]),
                      o,
                      t.box(
                        t.types.btrt,
                        new Uint8Array([
                          0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192,
                        ])
                      ),
                      t.box(
                        t.types.pasp,
                        new Uint8Array([
                          d >> 24,
                          (d >> 16) & 255,
                          (d >> 8) & 255,
                          255 & d,
                          h >> 24,
                          (h >> 16) & 255,
                          (h >> 8) & 255,
                          255 & h,
                        ])
                      )
                    );
                  }),
                  (t.esds = function (t) {
                    var e = t.config.length;
                    return new Uint8Array(
                      [
                        0,
                        0,
                        0,
                        0,
                        3,
                        23 + e,
                        0,
                        1,
                        0,
                        4,
                        15 + e,
                        64,
                        21,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        5,
                      ]
                        .concat([e])
                        .concat(t.config)
                        .concat([6, 1, 2])
                    );
                  }),
                  (t.mp4a = function (e) {
                    var r = e.samplerate;
                    return t.box(
                      t.types.mp4a,
                      new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        e.channelCount,
                        0,
                        16,
                        0,
                        0,
                        0,
                        0,
                        (r >> 8) & 255,
                        255 & r,
                        0,
                        0,
                      ]),
                      t.box(t.types.esds, t.esds(e))
                    );
                  }),
                  (t.mp3 = function (e) {
                    var r = e.samplerate;
                    return t.box(
                      t.types[".mp3"],
                      new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        e.channelCount,
                        0,
                        16,
                        0,
                        0,
                        0,
                        0,
                        (r >> 8) & 255,
                        255 & r,
                        0,
                        0,
                      ])
                    );
                  }),
                  (t.stsd = function (e) {
                    return "audio" === e.type
                      ? "mp3" === e.segmentCodec && "mp3" === e.codec
                        ? t.box(t.types.stsd, t.STSD, t.mp3(e))
                        : t.box(t.types.stsd, t.STSD, t.mp4a(e))
                      : t.box(t.types.stsd, t.STSD, t.avc1(e));
                  }),
                  (t.tkhd = function (e) {
                    var r = e.id,
                      i = e.duration * e.timescale,
                      n = e.width,
                      s = e.height,
                      o = Math.floor(i / (a + 1)),
                      l = Math.floor(i % (a + 1));
                    return t.box(
                      t.types.tkhd,
                      new Uint8Array([
                        1,
                        0,
                        0,
                        7,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        2,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        3,
                        (r >> 24) & 255,
                        (r >> 16) & 255,
                        (r >> 8) & 255,
                        255 & r,
                        0,
                        0,
                        0,
                        0,
                        o >> 24,
                        (o >> 16) & 255,
                        (o >> 8) & 255,
                        255 & o,
                        l >> 24,
                        (l >> 16) & 255,
                        (l >> 8) & 255,
                        255 & l,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        64,
                        0,
                        0,
                        0,
                        (n >> 8) & 255,
                        255 & n,
                        0,
                        0,
                        (s >> 8) & 255,
                        255 & s,
                        0,
                        0,
                      ])
                    );
                  }),
                  (t.traf = function (e, r) {
                    var i = t.sdtp(e),
                      n = e.id,
                      s = Math.floor(r / (a + 1)),
                      o = Math.floor(r % (a + 1));
                    return t.box(
                      t.types.traf,
                      t.box(
                        t.types.tfhd,
                        new Uint8Array([
                          0,
                          0,
                          0,
                          0,
                          n >> 24,
                          (n >> 16) & 255,
                          (n >> 8) & 255,
                          255 & n,
                        ])
                      ),
                      t.box(
                        t.types.tfdt,
                        new Uint8Array([
                          1,
                          0,
                          0,
                          0,
                          s >> 24,
                          (s >> 16) & 255,
                          (s >> 8) & 255,
                          255 & s,
                          o >> 24,
                          (o >> 16) & 255,
                          (o >> 8) & 255,
                          255 & o,
                        ])
                      ),
                      t.trun(e, i.length + 16 + 20 + 8 + 16 + 8 + 8),
                      i
                    );
                  }),
                  (t.trak = function (e) {
                    return (
                      (e.duration = e.duration || 4294967295),
                      t.box(t.types.trak, t.tkhd(e), t.mdia(e))
                    );
                  }),
                  (t.trex = function (e) {
                    var r = e.id;
                    return t.box(
                      t.types.trex,
                      new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        r >> 24,
                        (r >> 16) & 255,
                        (r >> 8) & 255,
                        255 & r,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        1,
                      ])
                    );
                  }),
                  (t.trun = function (e, r) {
                    var i,
                      n,
                      a,
                      s,
                      o,
                      l,
                      u = e.samples || [],
                      d = u.length,
                      h = 12 + 16 * d,
                      c = new Uint8Array(h);
                    for (
                      r += 8 + h,
                        c.set(
                          [
                            "video" === e.type ? 1 : 0,
                            0,
                            15,
                            1,
                            (d >>> 24) & 255,
                            (d >>> 16) & 255,
                            (d >>> 8) & 255,
                            255 & d,
                            (r >>> 24) & 255,
                            (r >>> 16) & 255,
                            (r >>> 8) & 255,
                            255 & r,
                          ],
                          0
                        ),
                        i = 0;
                      i < d;
                      i++
                    )
                      (a = (n = u[i]).duration),
                        (s = n.size),
                        (o = n.flags),
                        (l = n.cts),
                        c.set(
                          [
                            (a >>> 24) & 255,
                            (a >>> 16) & 255,
                            (a >>> 8) & 255,
                            255 & a,
                            (s >>> 24) & 255,
                            (s >>> 16) & 255,
                            (s >>> 8) & 255,
                            255 & s,
                            (o.isLeading << 2) | o.dependsOn,
                            (o.isDependedOn << 6) |
                              (o.hasRedundancy << 4) |
                              (o.paddingValue << 1) |
                              o.isNonSync,
                            61440 & o.degradPrio,
                            15 & o.degradPrio,
                            (l >>> 24) & 255,
                            (l >>> 16) & 255,
                            (l >>> 8) & 255,
                            255 & l,
                          ],
                          12 + 16 * i
                        );
                    return t.box(t.types.trun, c);
                  }),
                  (t.initSegment = function (e) {
                    t.types || t.init();
                    var r = t.moov(e),
                      i = new Uint8Array(t.FTYP.byteLength + r.byteLength);
                    return i.set(t.FTYP), i.set(r, t.FTYP.byteLength), i;
                  }),
                  t
                );
              })();
            (s.types = void 0),
              (s.HDLR_TYPES = void 0),
              (s.STTS = void 0),
              (s.STSC = void 0),
              (s.STCO = void 0),
              (s.STSZ = void 0),
              (s.VMHD = void 0),
              (s.SMHD = void 0),
              (s.STSD = void 0),
              (s.FTYP = void 0),
              (s.DINF = void 0);
            const o = s;
            var l = r(851),
              u = r(973),
              d = r(93),
              h = r(308),
              c = r(673);
            function f() {
              return (
                (f = Object.assign
                  ? Object.assign.bind()
                  : function (t) {
                      for (var e = 1; e < arguments.length; e++) {
                        var r = arguments[e];
                        for (var i in r)
                          Object.prototype.hasOwnProperty.call(r, i) &&
                            (t[i] = r[i]);
                      }
                      return t;
                    }),
                f.apply(this, arguments)
              );
            }
            var g = null,
              v = null,
              p = (function () {
                function t(t, e, r, i) {
                  if (
                    (void 0 === i && (i = ""),
                    (this.observer = void 0),
                    (this.config = void 0),
                    (this.typeSupported = void 0),
                    (this.ISGenerated = !1),
                    (this._initPTS = void 0),
                    (this._initDTS = void 0),
                    (this.nextAvcDts = null),
                    (this.nextAudioPts = null),
                    (this.videoSampleDuration = null),
                    (this.isAudioContiguous = !1),
                    (this.isVideoContiguous = !1),
                    (this.observer = t),
                    (this.config = e),
                    (this.typeSupported = r),
                    (this.ISGenerated = !1),
                    null === g)
                  ) {
                    var n = (navigator.userAgent || "").match(/Chrome\/(\d+)/i);
                    g = n ? parseInt(n[1]) : 0;
                  }
                  if (null === v) {
                    var a = navigator.userAgent.match(/Safari\/(\d+)/i);
                    v = a ? parseInt(a[1]) : 0;
                  }
                }
                var e = t.prototype;
                return (
                  (e.destroy = function () {}),
                  (e.resetTimeStamp = function (t) {
                    d.logger.log("[mp4-remuxer]: initPTS & initDTS reset"),
                      (this._initPTS = this._initDTS = t);
                  }),
                  (e.resetNextTimestamp = function () {
                    d.logger.log("[mp4-remuxer]: reset next timestamp"),
                      (this.isVideoContiguous = !1),
                      (this.isAudioContiguous = !1);
                  }),
                  (e.resetInitSegment = function () {
                    d.logger.log("[mp4-remuxer]: ISGenerated flag reset"),
                      (this.ISGenerated = !1);
                  }),
                  (e.getVideoStartPts = function (t) {
                    var e = !1,
                      r = t.reduce(function (t, r) {
                        var i = r.pts - t;
                        return i < -4294967296
                          ? ((e = !0), m(t, r.pts))
                          : i > 0
                          ? t
                          : r.pts;
                      }, t[0].pts);
                    return e && d.logger.debug("PTS rollover detected"), r;
                  }),
                  (e.remux = function (t, e, r, i, n, a, s, o) {
                    var l,
                      u,
                      c,
                      f,
                      g,
                      v,
                      p = n,
                      T = n,
                      S = t.pid > -1,
                      b = e.pid > -1,
                      L = e.samples.length,
                      A = t.samples.length > 0,
                      D = (s && L > 0) || L > 1;
                    if (((!S || A) && (!b || D)) || this.ISGenerated || s) {
                      this.ISGenerated || (c = this.generateIS(t, e, n));
                      var k,
                        R = this.isVideoContiguous,
                        I = -1;
                      if (
                        D &&
                        ((I = (function (t) {
                          for (var e = 0; e < t.length; e++)
                            if (t[e].key) return e;
                          return -1;
                        })(e.samples)),
                        !R && this.config.forceKeyFrameOnDiscontinuity)
                      )
                        if (((v = !0), I > 0)) {
                          d.logger.warn(
                            "[mp4-remuxer]: Dropped " +
                              I +
                              " out of " +
                              L +
                              " video samples due to a missing keyframe"
                          );
                          var w = this.getVideoStartPts(e.samples);
                          (e.samples = e.samples.slice(I)),
                            (e.dropped += I),
                            (k = T +=
                              (e.samples[0].pts - w) / e.inputTimeScale);
                        } else
                          -1 === I &&
                            (d.logger.warn(
                              "[mp4-remuxer]: No keyframe found out of " +
                                L +
                                " video samples"
                            ),
                            (v = !1));
                      if (this.ISGenerated) {
                        if (A && D) {
                          var C = this.getVideoStartPts(e.samples),
                            _ = (m(t.samples[0].pts, C) - C) / e.inputTimeScale;
                          (p += Math.max(0, _)), (T += Math.max(0, -_));
                        }
                        if (A) {
                          if (
                            (t.samplerate ||
                              (d.logger.warn(
                                "[mp4-remuxer]: regenerate InitSegment as audio detected"
                              ),
                              (c = this.generateIS(t, e, n))),
                            (u = this.remuxAudio(
                              t,
                              p,
                              this.isAudioContiguous,
                              a,
                              b || D || o === h.PlaylistLevelType.AUDIO
                                ? T
                                : void 0
                            )),
                            D)
                          ) {
                            var P = u ? u.endPTS - u.startPTS : 0;
                            e.inputTimeScale ||
                              (d.logger.warn(
                                "[mp4-remuxer]: regenerate InitSegment as video detected"
                              ),
                              (c = this.generateIS(t, e, n))),
                              (l = this.remuxVideo(e, T, R, P));
                          }
                        } else D && (l = this.remuxVideo(e, T, R, 0));
                        l &&
                          ((l.firstKeyFrame = I),
                          (l.independent = -1 !== I),
                          (l.firstKeyFramePTS = k));
                      }
                    }
                    return (
                      this.ISGenerated &&
                        (r.samples.length &&
                          (g = y(r, n, this._initPTS, this._initDTS)),
                        i.samples.length && (f = E(i, n, this._initPTS))),
                      {
                        audio: u,
                        video: l,
                        initSegment: c,
                        independent: v,
                        text: f,
                        id3: g,
                      }
                    );
                  }),
                  (e.generateIS = function (t, e, r) {
                    var n,
                      a,
                      s,
                      l = t.samples,
                      u = e.samples,
                      d = this.typeSupported,
                      h = {},
                      c = !(0, i.isFiniteNumber)(this._initPTS),
                      f = "audio/mp4";
                    if (
                      (c && (n = a = 1 / 0),
                      t.config &&
                        l.length &&
                        ((t.timescale = t.samplerate),
                        "mp3" === t.segmentCodec &&
                          (d.mpeg
                            ? ((f = "audio/mpeg"), (t.codec = ""))
                            : d.mp3 && (t.codec = "mp3")),
                        (h.audio = {
                          id: "audio",
                          container: f,
                          codec: t.codec,
                          initSegment:
                            "mp3" === t.segmentCodec && d.mpeg
                              ? new Uint8Array(0)
                              : o.initSegment([t]),
                          metadata: { channelCount: t.channelCount },
                        }),
                        c &&
                          ((s = t.inputTimeScale),
                          (n = a = l[0].pts - Math.round(s * r)))),
                      e.sps &&
                        e.pps &&
                        u.length &&
                        ((e.timescale = e.inputTimeScale),
                        (h.video = {
                          id: "main",
                          container: "video/mp4",
                          codec: e.codec,
                          initSegment: o.initSegment([e]),
                          metadata: { width: e.width, height: e.height },
                        }),
                        c))
                    ) {
                      s = e.inputTimeScale;
                      var g = this.getVideoStartPts(u),
                        v = Math.round(s * r);
                      (a = Math.min(a, m(u[0].dts, g) - v)),
                        (n = Math.min(n, g - v));
                    }
                    if (Object.keys(h).length)
                      return (
                        (this.ISGenerated = !0),
                        c && ((this._initPTS = n), (this._initDTS = a)),
                        { tracks: h, initPTS: n, timescale: s }
                      );
                  }),
                  (e.remuxVideo = function (t, e, r, i) {
                    var n,
                      a,
                      s = t.inputTimeScale,
                      h = t.samples,
                      p = [],
                      y = h.length,
                      E = this._initPTS,
                      S = this.nextAvcDts,
                      b = 8,
                      L = this.videoSampleDuration,
                      A = Number.POSITIVE_INFINITY,
                      D = Number.NEGATIVE_INFINITY,
                      k = !1;
                    (r && null !== S) ||
                      (S = e * s - (h[0].pts - m(h[0].dts, h[0].pts)));
                    for (var R = 0; R < y; R++) {
                      var I = h[R];
                      (I.pts = m(I.pts - E, S)),
                        (I.dts = m(I.dts - E, S)),
                        I.dts < h[R > 0 ? R - 1 : R].dts && (k = !0);
                    }
                    k &&
                      h.sort(function (t, e) {
                        var r = t.dts - e.dts,
                          i = t.pts - e.pts;
                        return r || i;
                      }),
                      (n = h[0].dts);
                    var w = h[h.length - 1].dts - n,
                      C = w
                        ? Math.round(w / (y - 1))
                        : L || t.inputTimeScale / 30;
                    if (r) {
                      var _ = n - S,
                        P = _ > C,
                        O = _ < -1;
                      if (
                        (P || O) &&
                        (P
                          ? d.logger.warn(
                              "AVC: " +
                                (0, c.toMsFromMpegTsClock)(_, !0) +
                                " ms (" +
                                _ +
                                "dts) hole between fragments detected, filling it"
                            )
                          : d.logger.warn(
                              "AVC: " +
                                (0, c.toMsFromMpegTsClock)(-_, !0) +
                                " ms (" +
                                _ +
                                "dts) overlapping between fragments detected"
                            ),
                        !O || S > h[0].pts)
                      ) {
                        n = S;
                        var x = h[0].pts - _;
                        (h[0].dts = n),
                          (h[0].pts = x),
                          d.logger.log(
                            "Video: First PTS/DTS adjusted: " +
                              (0, c.toMsFromMpegTsClock)(x, !0) +
                              "/" +
                              (0, c.toMsFromMpegTsClock)(n, !0) +
                              ", delta: " +
                              (0, c.toMsFromMpegTsClock)(_, !0) +
                              " ms"
                          );
                      }
                    }
                    n = Math.max(0, n);
                    for (var F = 0, M = 0, N = 0; N < y; N++) {
                      for (
                        var U = h[N], B = U.units, G = B.length, K = 0, H = 0;
                        H < G;
                        H++
                      )
                        K += B[H].data.length;
                      (M += K),
                        (F += G),
                        (U.length = K),
                        (U.dts = Math.max(U.dts, n)),
                        (A = Math.min(U.pts, A)),
                        (D = Math.max(U.pts, D));
                    }
                    a = h[y - 1].dts;
                    var j,
                      V = M + 4 * F + 8;
                    try {
                      j = new Uint8Array(V);
                    } catch (t) {
                      return void this.observer.emit(
                        l.Events.ERROR,
                        l.Events.ERROR,
                        {
                          type: u.ErrorTypes.MUX_ERROR,
                          details: u.ErrorDetails.REMUX_ALLOC_ERROR,
                          fatal: !1,
                          bytes: V,
                          reason: "fail allocating video mdat " + V,
                        }
                      );
                    }
                    var Y = new DataView(j.buffer);
                    Y.setUint32(0, V), j.set(o.types.mdat, 4);
                    for (
                      var W = !1,
                        q = Number.POSITIVE_INFINITY,
                        X = Number.POSITIVE_INFINITY,
                        z = Number.NEGATIVE_INFINITY,
                        Q = Number.NEGATIVE_INFINITY,
                        $ = 0;
                      $ < y;
                      $++
                    ) {
                      for (
                        var J = h[$],
                          Z = J.units,
                          tt = 0,
                          et = 0,
                          rt = Z.length;
                        et < rt;
                        et++
                      ) {
                        var it = Z[et],
                          nt = it.data,
                          at = it.data.byteLength;
                        Y.setUint32(b, at),
                          (b += 4),
                          j.set(nt, b),
                          (b += at),
                          (tt += 4 + at);
                      }
                      var st = void 0;
                      if ($ < y - 1)
                        (L = h[$ + 1].dts - J.dts), (st = h[$ + 1].pts - J.pts);
                      else {
                        var ot = this.config,
                          lt = $ > 0 ? J.dts - h[$ - 1].dts : C;
                        if (
                          ((st = $ > 0 ? J.pts - h[$ - 1].pts : C),
                          ot.stretchShortVideoTrack &&
                            null !== this.nextAudioPts)
                        ) {
                          var ut = Math.floor(ot.maxBufferHole * s),
                            dt = (i ? A + i * s : this.nextAudioPts) - J.pts;
                          dt > ut
                            ? ((L = dt - lt) < 0 ? (L = lt) : (W = !0),
                              d.logger.log(
                                "[mp4-remuxer]: It is approximately " +
                                  dt / 90 +
                                  " ms to the next segment; using duration " +
                                  L / 90 +
                                  " ms for the last video frame."
                              ))
                            : (L = lt);
                        } else L = lt;
                      }
                      var ht = Math.round(J.pts - J.dts);
                      (q = Math.min(q, L)),
                        (z = Math.max(z, L)),
                        (X = Math.min(X, st)),
                        (Q = Math.max(Q, st)),
                        p.push(new T(J.key, L, tt, ht));
                    }
                    if (p.length)
                      if (g) {
                        if (g < 70) {
                          var ct = p[0].flags;
                          (ct.dependsOn = 2), (ct.isNonSync = 0);
                        }
                      } else if (
                        v &&
                        Q - X < z - q &&
                        C / z < 0.025 &&
                        0 === p[0].cts
                      ) {
                        d.logger.warn(
                          "Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration."
                        );
                        for (var ft = n, gt = 0, vt = p.length; gt < vt; gt++) {
                          var pt = ft + p[gt].duration,
                            mt = ft + p[gt].cts;
                          if (gt < vt - 1) {
                            var yt = pt + p[gt + 1].cts;
                            p[gt].duration = yt - mt;
                          } else p[gt].duration = gt ? p[gt - 1].duration : C;
                          (p[gt].cts = 0), (ft = pt);
                        }
                      }
                    (L = W || !L ? C : L),
                      (this.nextAvcDts = S = a + L),
                      (this.videoSampleDuration = L),
                      (this.isVideoContiguous = !0);
                    var Et = {
                      data1: o.moof(
                        t.sequenceNumber++,
                        n,
                        f({}, t, { samples: p })
                      ),
                      data2: j,
                      startPTS: A / s,
                      endPTS: (D + L) / s,
                      startDTS: n / s,
                      endDTS: S / s,
                      type: "video",
                      hasAudio: !1,
                      hasVideo: !0,
                      nb: p.length,
                      dropped: t.dropped,
                    };
                    return (t.samples = []), (t.dropped = 0), Et;
                  }),
                  (e.remuxAudio = function (t, e, r, i, a) {
                    var s = t.inputTimeScale,
                      h = s / (t.samplerate ? t.samplerate : s),
                      c = "aac" === t.segmentCodec ? 1024 : 1152,
                      g = c * h,
                      v = this._initPTS,
                      p = "mp3" === t.segmentCodec && this.typeSupported.mpeg,
                      y = [],
                      E = void 0 !== a,
                      S = t.samples,
                      b = p ? 0 : 8,
                      L = this.nextAudioPts || -1,
                      A = e * s;
                    if (
                      ((this.isAudioContiguous = r =
                        r ||
                        (S.length &&
                          L > 0 &&
                          ((i && Math.abs(A - L) < 9e3) ||
                            Math.abs(m(S[0].pts - v, A) - L) < 20 * g))),
                      S.forEach(function (t) {
                        t.pts = m(t.pts - v, A);
                      }),
                      !r || L < 0)
                    ) {
                      if (
                        ((S = S.filter(function (t) {
                          return t.pts >= 0;
                        })),
                        !S.length)
                      )
                        return;
                      L = 0 === a ? 0 : i && !E ? Math.max(0, A) : S[0].pts;
                    }
                    if ("aac" === t.segmentCodec)
                      for (
                        var D = this.config.maxAudioFramesDrift, k = 0, R = L;
                        k < S.length;
                        k++
                      ) {
                        var I = S[k],
                          w = I.pts,
                          C = w - R,
                          _ = Math.abs((1e3 * C) / s);
                        if (C <= -D * g && E)
                          0 === k &&
                            (d.logger.warn(
                              "Audio frame @ " +
                                (w / s).toFixed(3) +
                                "s overlaps nextAudioPts by " +
                                Math.round((1e3 * C) / s) +
                                " ms."
                            ),
                            (this.nextAudioPts = L = R = w));
                        else if (C >= D * g && _ < 1e4 && E) {
                          var P = Math.round(C / g);
                          (R = w - P * g) < 0 && (P--, (R += g)),
                            0 === k && (this.nextAudioPts = L = R),
                            d.logger.warn(
                              "[mp4-remuxer]: Injecting " +
                                P +
                                " audio frame @ " +
                                (R / s).toFixed(3) +
                                "s due to " +
                                Math.round((1e3 * C) / s) +
                                " ms gap."
                            );
                          for (var O = 0; O < P; O++) {
                            var x = Math.max(R, 0),
                              F = n.getSilentFrame(
                                t.manifestCodec || t.codec,
                                t.channelCount
                              );
                            F ||
                              (d.logger.log(
                                "[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead."
                              ),
                              (F = I.unit.subarray())),
                              S.splice(k, 0, { unit: F, pts: x }),
                              (R += g),
                              k++;
                          }
                        }
                        (I.pts = R), (R += g);
                      }
                    for (var M, N = null, U = null, B = 0, G = S.length; G--; )
                      B += S[G].unit.byteLength;
                    for (var K = 0, H = S.length; K < H; K++) {
                      var j = S[K],
                        V = j.unit,
                        Y = j.pts;
                      if (null !== U)
                        y[K - 1].duration = Math.round((Y - U) / h);
                      else {
                        if (
                          (r && "aac" === t.segmentCodec && (Y = L),
                          (N = Y),
                          !(B > 0))
                        )
                          return;
                        B += b;
                        try {
                          M = new Uint8Array(B);
                        } catch (t) {
                          return void this.observer.emit(
                            l.Events.ERROR,
                            l.Events.ERROR,
                            {
                              type: u.ErrorTypes.MUX_ERROR,
                              details: u.ErrorDetails.REMUX_ALLOC_ERROR,
                              fatal: !1,
                              bytes: B,
                              reason: "fail allocating audio mdat " + B,
                            }
                          );
                        }
                        p ||
                          (new DataView(M.buffer).setUint32(0, B),
                          M.set(o.types.mdat, 4));
                      }
                      M.set(V, b);
                      var W = V.byteLength;
                      (b += W), y.push(new T(!0, c, W, 0)), (U = Y);
                    }
                    var q = y.length;
                    if (q) {
                      var X = y[y.length - 1];
                      this.nextAudioPts = L = U + h * X.duration;
                      var z = p
                        ? new Uint8Array(0)
                        : o.moof(
                            t.sequenceNumber++,
                            N / h,
                            f({}, t, { samples: y })
                          );
                      t.samples = [];
                      var Q = N / s,
                        $ = L / s,
                        J = {
                          data1: z,
                          data2: M,
                          startPTS: Q,
                          endPTS: $,
                          startDTS: Q,
                          endDTS: $,
                          type: "audio",
                          hasAudio: !0,
                          hasVideo: !1,
                          nb: q,
                        };
                      return (this.isAudioContiguous = !0), J;
                    }
                  }),
                  (e.remuxEmptyAudio = function (t, e, r, i) {
                    var a = t.inputTimeScale,
                      s = a / (t.samplerate ? t.samplerate : a),
                      o = this.nextAudioPts,
                      l = (null !== o ? o : i.startDTS * a) + this._initDTS,
                      u = i.endDTS * a + this._initDTS,
                      h = 1024 * s,
                      c = Math.ceil((u - l) / h),
                      f = n.getSilentFrame(
                        t.manifestCodec || t.codec,
                        t.channelCount
                      );
                    if (
                      (d.logger.warn("[mp4-remuxer]: remux empty Audio"), f)
                    ) {
                      for (var g = [], v = 0; v < c; v++) {
                        var p = l + v * h;
                        g.push({ unit: f, pts: p, dts: p });
                      }
                      return (t.samples = g), this.remuxAudio(t, e, r, !1);
                    }
                    d.logger.trace(
                      "[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec"
                    );
                  }),
                  t
                );
              })();
            function m(t, e) {
              var r;
              if (null === e) return t;
              for (
                r = e < t ? -8589934592 : 8589934592;
                Math.abs(t - e) > 4294967296;

              )
                t += r;
              return t;
            }
            function y(t, e, r, i) {
              var n = t.samples.length;
              if (n) {
                for (var a = t.inputTimeScale, s = 0; s < n; s++) {
                  var o = t.samples[s];
                  (o.pts = m(o.pts - r, e * a) / a),
                    (o.dts = m(o.dts - i, e * a) / a);
                }
                var l = t.samples;
                return (t.samples = []), { samples: l };
              }
            }
            function E(t, e, r) {
              var i = t.samples.length;
              if (i) {
                for (var n = t.inputTimeScale, a = 0; a < i; a++) {
                  var s = t.samples[a];
                  s.pts = m(s.pts - r, e * n) / n;
                }
                t.samples.sort(function (t, e) {
                  return t.pts - e.pts;
                });
                var o = t.samples;
                return (t.samples = []), { samples: o };
              }
            }
            var T = function (t, e, r, i) {
                (this.size = void 0),
                  (this.duration = void 0),
                  (this.cts = void 0),
                  (this.flags = void 0),
                  (this.duration = e),
                  (this.size = r),
                  (this.cts = i),
                  (this.flags = new S(t));
              },
              S = function (t) {
                (this.isLeading = 0),
                  (this.isDependedOn = 0),
                  (this.hasRedundancy = 0),
                  (this.degradPrio = 0),
                  (this.dependsOn = 1),
                  (this.isNonSync = 1),
                  (this.dependsOn = t ? 2 : 1),
                  (this.isNonSync = t ? 0 : 1);
              };
          },
          856: (t, e, r) => {
            "use strict";
            var i;
            r.r(e),
              r.d(e, { MetadataSchema: () => i }),
              (function (t) {
                (t.audioId3 = "org.id3"),
                  (t.dateRange = "com.apple.quicktime.HLS"),
                  (t.emsg = "https://aomedia.org/emsg/ID3");
              })(i || (i = {}));
          },
          308: (t, e, r) => {
            "use strict";
            var i, n;
            r.r(e),
              r.d(e, {
                PlaylistContextType: () => i,
                PlaylistLevelType: () => n,
              }),
              (function (t) {
                (t.MANIFEST = "manifest"),
                  (t.LEVEL = "level"),
                  (t.AUDIO_TRACK = "audioTrack"),
                  (t.SUBTITLE_TRACK = "subtitleTrack");
              })(i || (i = {})),
              (function (t) {
                (t.MAIN = "main"),
                  (t.AUDIO = "audio"),
                  (t.SUBTITLE = "subtitle");
              })(n || (n = {}));
          },
          300: (t, e, r) => {
            "use strict";
            r.r(e), r.d(e, { default: () => i });
            const i = {
              hexDump: function (t) {
                for (var e = "", r = 0; r < t.length; r++) {
                  var i = t[r].toString(16);
                  i.length < 2 && (i = "0" + i), (e += i);
                }
                return e;
              },
            };
          },
          93: (t, e, r) => {
            "use strict";
            r.r(e), r.d(e, { enableLogs: () => o, logger: () => l });
            var i = function () {},
              n = { trace: i, debug: i, log: i, warn: i, info: i, error: i },
              a = n;
            function s(t) {
              var e = self.console[t];
              return e ? e.bind(self.console, "[" + t + "] >") : i;
            }
            function o(t, e) {
              if ((self.console && !0 === t) || "object" == typeof t) {
                !(function (t) {
                  for (
                    var e = arguments.length,
                      r = new Array(e > 1 ? e - 1 : 0),
                      i = 1;
                    i < e;
                    i++
                  )
                    r[i - 1] = arguments[i];
                  r.forEach(function (e) {
                    a[e] = t[e] ? t[e].bind(t) : s(e);
                  });
                })(t, "debug", "log", "info", "warn", "error");
                try {
                  a.log('Debug logs enabled for "' + e + '"');
                } catch (t) {
                  a = n;
                }
              } else a = n;
            }
            var l = n;
          },
          63: (t, e, r) => {
            "use strict";
            r.r(e),
              r.d(e, {
                RemuxerTrackIdConfig: () => d,
                appendUint8Array: () => k,
                bin2str: () => h,
                computeRawDurationFromSamples: () => L,
                discardEPB: () => C,
                findBox: () => p,
                getDuration: () => b,
                getStartDTS: () => S,
                mp4Box: () => P,
                mp4pssh: () => O,
                offsetStartDTS: () => A,
                parseEmsg: () => _,
                parseInitSegment: () => y,
                parsePssh: () => x,
                parseSEIMessageFromNALu: () => w,
                parseSamples: () => R,
                parseSegmentIndex: () => m,
                parseSinf: () => T,
                patchEncyptionData: () => E,
                readSint32: () => g,
                readUint16: () => c,
                readUint32: () => f,
                segmentValidRange: () => D,
                writeUint32: () => v,
              });
            var i = r(923),
              n = r(145),
              a = r(181),
              s = r(93),
              o = r(300),
              l = Math.pow(2, 32) - 1,
              u = [].push,
              d = { video: 1, audio: 2, id3: 3, text: 4 };
            function h(t) {
              return String.fromCharCode.apply(null, t);
            }
            function c(t, e) {
              var r = (t[e] << 8) | t[e + 1];
              return r < 0 ? 65536 + r : r;
            }
            function f(t, e) {
              var r = g(t, e);
              return r < 0 ? 4294967296 + r : r;
            }
            function g(t, e) {
              return (
                (t[e] << 24) | (t[e + 1] << 16) | (t[e + 2] << 8) | t[e + 3]
              );
            }
            function v(t, e, r) {
              (t[e] = r >> 24),
                (t[e + 1] = (r >> 16) & 255),
                (t[e + 2] = (r >> 8) & 255),
                (t[e + 3] = 255 & r);
            }
            function p(t, e) {
              var r = [];
              if (!e.length) return r;
              for (var i = t.byteLength, n = 0; n < i; ) {
                var a = f(t, n),
                  s = a > 1 ? n + a : i;
                if (h(t.subarray(n + 4, n + 8)) === e[0])
                  if (1 === e.length) r.push(t.subarray(n + 8, s));
                  else {
                    var o = p(t.subarray(n + 8, s), e.slice(1));
                    o.length && u.apply(r, o);
                  }
                n = s;
              }
              return r;
            }
            function m(t) {
              var e = [],
                r = t[0],
                i = 8,
                n = f(t, i);
              (i += 4), (i += 0 === r ? 8 : 16), (i += 2);
              var a = t.length + 0,
                s = c(t, i);
              i += 2;
              for (var o = 0; o < s; o++) {
                var l = i,
                  u = f(t, l);
                l += 4;
                var d = 2147483647 & u;
                if (1 == (2147483648 & u) >>> 31)
                  return (
                    console.warn(
                      "SIDX has hierarchical references (not supported)"
                    ),
                    null
                  );
                var h = f(t, l);
                (l += 4),
                  e.push({
                    referenceSize: d,
                    subsegmentDuration: h,
                    info: { duration: h / n, start: a, end: a + d - 1 },
                  }),
                  (a += d),
                  (i = l += 4);
              }
              return {
                earliestPresentationTime: 0,
                timescale: n,
                version: r,
                referencesCount: s,
                references: e,
              };
            }
            function y(t) {
              for (
                var e = [], r = p(t, ["moov", "trak"]), n = 0;
                n < r.length;
                n++
              ) {
                var a = r[n],
                  s = p(a, ["tkhd"])[0];
                if (s) {
                  var o = s[0],
                    l = 0 === o ? 12 : 20,
                    u = f(s, l),
                    d = p(a, ["mdia", "mdhd"])[0];
                  if (d) {
                    var c = f(d, (l = 0 === (o = d[0]) ? 12 : 20)),
                      g = p(a, ["mdia", "hdlr"])[0];
                    if (g) {
                      var v = h(g.subarray(8, 12)),
                        m = {
                          soun: i.ElementaryStreamTypes.AUDIO,
                          vide: i.ElementaryStreamTypes.VIDEO,
                        }[v];
                      if (m) {
                        var y = p(a, ["mdia", "minf", "stbl", "stsd"])[0],
                          E = void 0;
                        y && (E = h(y.subarray(12, 16))),
                          (e[u] = { timescale: c, type: m }),
                          (e[m] = { timescale: c, id: u, codec: E });
                      }
                    }
                  }
                }
              }
              return (
                p(t, ["moov", "mvex", "trex"]).forEach(function (t) {
                  var r = f(t, 4),
                    i = e[r];
                  i && (i.default = { duration: f(t, 12), flags: f(t, 20) });
                }),
                e
              );
            }
            function E(t, e) {
              if (!t || !e) return t;
              var r = e.keyId;
              return (
                r &&
                  e.isCommonEncryption &&
                  p(t, ["moov", "trak"]).forEach(function (t) {
                    var e = p(t, ["mdia", "minf", "stbl", "stsd"])[0].subarray(
                        8
                      ),
                      i = p(e, ["enca"]),
                      n = i.length > 0;
                    n || (i = p(e, ["encv"])),
                      i.forEach(function (t) {
                        p(n ? t.subarray(28) : t.subarray(78), [
                          "sinf",
                        ]).forEach(function (t) {
                          var e = T(t);
                          if (e) {
                            var i = e.subarray(8, 24);
                            i.some(function (t) {
                              return 0 !== t;
                            }) ||
                              (s.logger.log(
                                "[eme] Patching keyId in 'enc" +
                                  (n ? "a" : "v") +
                                  ">sinf>>tenc' box: " +
                                  o.default.hexDump(i) +
                                  " -> " +
                                  o.default.hexDump(r)
                              ),
                              e.set(r, 8));
                          }
                        });
                      });
                  }),
                t
              );
            }
            function T(t) {
              var e = p(t, ["schm"])[0];
              if (e) {
                var r = h(e.subarray(4, 8));
                if ("cbcs" === r || "cenc" === r)
                  return p(t, ["schi", "tenc"])[0];
              }
              return s.logger.error("[eme] missing 'schm' box"), null;
            }
            function S(t, e) {
              return (
                p(e, ["moof", "traf"]).reduce(function (e, r) {
                  var i = p(r, ["tfdt"])[0],
                    n = i[0],
                    a = p(r, ["tfhd"]).reduce(function (e, r) {
                      var a = f(r, 4),
                        s = t[a];
                      if (s) {
                        var o = f(i, 4);
                        1 === n && ((o *= Math.pow(2, 32)), (o += f(i, 8)));
                        var l = o / (s.timescale || 9e4);
                        if (isFinite(l) && (null === e || l < e)) return l;
                      }
                      return e;
                    }, null);
                  return null !== a && isFinite(a) && (null === e || a < e)
                    ? a
                    : e;
                }, null) || 0
              );
            }
            function b(t, e) {
              for (
                var r = 0, n = 0, a = 0, s = p(t, ["moof", "traf"]), o = 0;
                o < s.length;
                o++
              ) {
                var l = s[o],
                  u = p(l, ["tfhd"])[0],
                  d = e[f(u, 4)];
                if (d) {
                  var h = d.default,
                    c = f(u, 0) | (null == h ? void 0 : h.flags),
                    g = null == h ? void 0 : h.duration;
                  8 & c && (g = f(u, 2 & c ? 12 : 8));
                  for (
                    var v = d.timescale || 9e4, y = p(l, ["trun"]), E = 0;
                    E < y.length;
                    E++
                  )
                    !(r = L(y[E])) && g && (r = g * f(y[E], 4)),
                      d.type === i.ElementaryStreamTypes.VIDEO
                        ? (n += r / v)
                        : d.type === i.ElementaryStreamTypes.AUDIO &&
                          (a += r / v);
                }
              }
              if (0 === n && 0 === a) {
                for (var T = 0, S = p(t, ["sidx"]), b = 0; b < S.length; b++) {
                  var A = m(S[b]);
                  null != A &&
                    A.references &&
                    (T += A.references.reduce(function (t, e) {
                      return t + e.info.duration || 0;
                    }, 0));
                }
                return T;
              }
              return n || a;
            }
            function L(t) {
              var e = f(t, 0),
                r = 8;
              1 & e && (r += 4), 4 & e && (r += 4);
              for (var i = 0, n = f(t, 4), a = 0; a < n; a++)
                256 & e && ((i += f(t, r)), (r += 4)),
                  512 & e && (r += 4),
                  1024 & e && (r += 4),
                  2048 & e && (r += 4);
              return i;
            }
            function A(t, e, r) {
              p(e, ["moof", "traf"]).forEach(function (e) {
                p(e, ["tfhd"]).forEach(function (i) {
                  var n = f(i, 4),
                    a = t[n];
                  if (a) {
                    var s = a.timescale || 9e4;
                    p(e, ["tfdt"]).forEach(function (t) {
                      var e = t[0],
                        i = f(t, 4);
                      if (0 === e) (i -= r * s), v(t, 4, (i = Math.max(i, 0)));
                      else {
                        (i *= Math.pow(2, 32)),
                          (i += f(t, 8)),
                          (i -= r * s),
                          (i = Math.max(i, 0));
                        var n = Math.floor(i / (l + 1)),
                          a = Math.floor(i % (l + 1));
                        v(t, 4, n), v(t, 8, a);
                      }
                    });
                  }
                });
              });
            }
            function D(t) {
              var e = { valid: null, remainder: null },
                r = p(t, ["moof"]);
              if (!r) return e;
              if (r.length < 2) return (e.remainder = t), e;
              var i = r[r.length - 1];
              return (
                (e.valid = (0, n.sliceUint8)(t, 0, i.byteOffset - 8)),
                (e.remainder = (0, n.sliceUint8)(t, i.byteOffset - 8)),
                e
              );
            }
            function k(t, e) {
              var r = new Uint8Array(t.length + e.length);
              return r.set(t), r.set(e, t.length), r;
            }
            function R(t, e) {
              var r = [],
                n = e.samples,
                a = e.timescale,
                s = e.id,
                o = !1;
              return (
                p(n, ["moof"]).map(function (l) {
                  var u = l.byteOffset - 8;
                  p(l, ["traf"]).map(function (l) {
                    var d = p(l, ["tfdt"]).map(function (t) {
                      var e = t[0],
                        r = f(t, 4);
                      return (
                        1 === e && ((r *= Math.pow(2, 32)), (r += f(t, 8))),
                        r / a
                      );
                    })[0];
                    return (
                      void 0 !== d && (t = d),
                      p(l, ["tfhd"]).map(function (d) {
                        var h = f(d, 4),
                          c = 16777215 & f(d, 0),
                          v = 0,
                          m = 0 != (16 & c),
                          y = 0,
                          E = 0 != (32 & c),
                          T = 8;
                        h === s &&
                          (0 != (1 & c) && (T += 8),
                          0 != (2 & c) && (T += 4),
                          0 != (8 & c) && ((v = f(d, T)), (T += 4)),
                          m && ((y = f(d, T)), (T += 4)),
                          E && (T += 4),
                          "video" === e.type &&
                            (o = (function (t) {
                              if (!t) return !1;
                              var e = t.indexOf("."),
                                r = e < 0 ? t : t.substring(0, e);
                              return (
                                "hvc1" === r ||
                                "hev1" === r ||
                                "dvh1" === r ||
                                "dvhe" === r
                              );
                            })(e.codec)),
                          p(l, ["trun"]).map(function (s) {
                            var l = s[0],
                              d = 16777215 & f(s, 0),
                              h = 0 != (1 & d),
                              c = 0,
                              p = 0 != (4 & d),
                              m = 0 != (256 & d),
                              E = 0,
                              T = 0 != (512 & d),
                              S = 0,
                              b = 0 != (1024 & d),
                              L = 0 != (2048 & d),
                              A = 0,
                              D = f(s, 4),
                              k = 8;
                            h && ((c = f(s, k)), (k += 4)), p && (k += 4);
                            for (var R = c + u, C = 0; C < D; C++) {
                              if (
                                (m ? ((E = f(s, k)), (k += 4)) : (E = v),
                                T ? ((S = f(s, k)), (k += 4)) : (S = y),
                                b && (k += 4),
                                L &&
                                  ((A = 0 === l ? f(s, k) : g(s, k)), (k += 4)),
                                e.type === i.ElementaryStreamTypes.VIDEO)
                              )
                                for (var _ = 0; _ < S; ) {
                                  var P = f(n, R);
                                  I(o, n[(R += 4)]) &&
                                    w(
                                      n.subarray(R, R + P),
                                      o ? 2 : 1,
                                      t + A / a,
                                      r
                                    ),
                                    (R += P),
                                    (_ += P + 4);
                                }
                              t += E / a;
                            }
                          }));
                      })
                    );
                  });
                }),
                r
              );
            }
            function I(t, e) {
              if (t) {
                var r = (e >> 1) & 63;
                return 39 === r || 40 === r;
              }
              return 6 == (31 & e);
            }
            function w(t, e, r, i) {
              var n = C(t),
                s = 0;
              s += e;
              for (var o = 0, l = 0, u = !1, d = 0; s < n.length; ) {
                o = 0;
                do {
                  if (s >= n.length) break;
                  o += d = n[s++];
                } while (255 === d);
                l = 0;
                do {
                  if (s >= n.length) break;
                  l += d = n[s++];
                } while (255 === d);
                var h = n.length - s;
                if (!u && 4 === o && s < n.length) {
                  if (((u = !0), 181 === n[s++])) {
                    var g = c(n, s);
                    if (((s += 2), 49 === g)) {
                      var v = f(n, s);
                      if (((s += 4), 1195456820 === v)) {
                        var p = n[s++];
                        if (3 === p) {
                          var m = n[s++],
                            y = 64 & m,
                            E = y ? 2 + 3 * (31 & m) : 0,
                            T = new Uint8Array(E);
                          if (y) {
                            T[0] = m;
                            for (var S = 1; S < E; S++) T[S] = n[s++];
                          }
                          i.push({ type: p, payloadType: o, pts: r, bytes: T });
                        }
                      }
                    }
                  }
                } else if (5 === o && l < h) {
                  if (((u = !0), l > 16)) {
                    for (var b = [], L = 0; L < 16; L++) {
                      var A = n[s++].toString(16);
                      b.push(1 == A.length ? "0" + A : A),
                        (3 !== L && 5 !== L && 7 !== L && 9 !== L) ||
                          b.push("-");
                    }
                    for (
                      var D = l - 16, k = new Uint8Array(D), R = 0;
                      R < D;
                      R++
                    )
                      k[R] = n[s++];
                    i.push({
                      payloadType: o,
                      pts: r,
                      uuid: b.join(""),
                      userData: (0, a.utf8ArrayToStr)(k),
                      userDataBytes: k,
                    });
                  }
                } else if (l < h) s += l;
                else if (l > h) break;
              }
            }
            function C(t) {
              for (var e = t.byteLength, r = [], i = 1; i < e - 2; )
                0 === t[i] && 0 === t[i + 1] && 3 === t[i + 2]
                  ? (r.push(i + 2), (i += 2))
                  : i++;
              if (0 === r.length) return t;
              var n = e - r.length,
                a = new Uint8Array(n),
                s = 0;
              for (i = 0; i < n; s++, i++)
                s === r[0] && (s++, r.shift()), (a[i] = t[s]);
              return a;
            }
            function _(t) {
              var e = t[0],
                r = "",
                i = "",
                n = 0,
                a = 0,
                s = 0,
                o = 0,
                l = 0,
                u = 0;
              if (0 === e) {
                for (; "\0" !== h(t.subarray(u, u + 1)); )
                  (r += h(t.subarray(u, u + 1))), (u += 1);
                for (
                  r += h(t.subarray(u, u + 1)), u += 1;
                  "\0" !== h(t.subarray(u, u + 1));

                )
                  (i += h(t.subarray(u, u + 1))), (u += 1);
                (i += h(t.subarray(u, u + 1))),
                  (u += 1),
                  (n = f(t, 12)),
                  (a = f(t, 16)),
                  (o = f(t, 20)),
                  (l = f(t, 24)),
                  (u = 28);
              } else if (1 === e) {
                n = f(t, (u += 4));
                var d = f(t, (u += 4)),
                  c = f(t, (u += 4));
                for (
                  u += 4,
                    s = Math.pow(2, 32) * d + c,
                    Number.isSafeInteger(s) ||
                      ((s = Number.MAX_SAFE_INTEGER),
                      console.warn(
                        "Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box"
                      )),
                    o = f(t, u),
                    l = f(t, (u += 4)),
                    u += 4;
                  "\0" !== h(t.subarray(u, u + 1));

                )
                  (r += h(t.subarray(u, u + 1))), (u += 1);
                for (
                  r += h(t.subarray(u, u + 1)), u += 1;
                  "\0" !== h(t.subarray(u, u + 1));

                )
                  (i += h(t.subarray(u, u + 1))), (u += 1);
                (i += h(t.subarray(u, u + 1))), (u += 1);
              }
              return {
                schemeIdUri: r,
                value: i,
                timeScale: n,
                presentationTime: s,
                presentationTimeDelta: a,
                eventDuration: o,
                id: l,
                payload: t.subarray(u, t.byteLength),
              };
            }
            function P(t) {
              for (
                var e = arguments.length,
                  r = new Array(e > 1 ? e - 1 : 0),
                  i = 1;
                i < e;
                i++
              )
                r[i - 1] = arguments[i];
              for (var n = r.length, a = 8, s = n; s--; ) a += r[s].byteLength;
              var o = new Uint8Array(a);
              for (
                o[0] = (a >> 24) & 255,
                  o[1] = (a >> 16) & 255,
                  o[2] = (a >> 8) & 255,
                  o[3] = 255 & a,
                  o.set(t, 4),
                  s = 0,
                  a = 8;
                s < n;
                s++
              )
                o.set(r[s], a), (a += r[s].byteLength);
              return o;
            }
            function O(t, e, r) {
              if (16 !== t.byteLength)
                throw new RangeError("Invalid system id");
              var i, n, a;
              if (e) {
                (i = 1), (n = new Uint8Array(16 * e.length));
                for (var s = 0; s < e.length; s++) {
                  var o = e[s];
                  if (16 !== o.byteLength) throw new RangeError("Invalid key");
                  n.set(o, 16 * s);
                }
              } else (i = 0), (n = new Uint8Array());
              i > 0
                ? ((a = new Uint8Array(4)),
                  e.length > 0 &&
                    new DataView(a.buffer).setUint32(0, e.length, !1))
                : (a = new Uint8Array());
              var l = new Uint8Array(4);
              return (
                r &&
                  r.byteLength > 0 &&
                  new DataView(l.buffer).setUint32(0, r.byteLength, !1),
                P(
                  [112, 115, 115, 104],
                  new Uint8Array([i, 0, 0, 0]),
                  t,
                  a,
                  n,
                  l,
                  r || new Uint8Array()
                )
              );
            }
            function x(t) {
              if (!(t instanceof ArrayBuffer) || t.byteLength < 32) return null;
              var e = { version: 0, systemId: "", kids: null, data: null },
                r = new DataView(t),
                i = r.getUint32(0);
              if (t.byteLength !== i && i > 44) return null;
              if (1886614376 !== r.getUint32(4)) return null;
              if (((e.version = r.getUint32(8) >>> 24), e.version > 1))
                return null;
              e.systemId = o.default.hexDump(new Uint8Array(t, 12, 16));
              var n = r.getUint32(28);
              if (0 === e.version) {
                if (i - 32 < n) return null;
                e.data = new Uint8Array(t, 32, n);
              } else if (1 === e.version) {
                e.kids = [];
                for (var a = 0; a < n; a++)
                  e.kids.push(new Uint8Array(t, 32 + 16 * a, 16));
              }
              return e;
            }
          },
          673: (t, e, r) => {
            "use strict";
            function i(t, e, r, i) {
              void 0 === r && (r = 1), void 0 === i && (i = !1);
              var n = t * e * r;
              return i ? Math.round(n) : n;
            }
            function n(t, e, r, n) {
              return (
                void 0 === r && (r = 1),
                void 0 === n && (n = !1),
                i(t, e, 1 / r, n)
              );
            }
            function a(t, e) {
              return void 0 === e && (e = !1), i(t, 1e3, 1 / 9e4, e);
            }
            function s(t, e) {
              return void 0 === e && (e = 1), i(t, 9e4, 1 / e);
            }
            r.r(e),
              r.d(e, {
                toMpegTsClockFromTimescale: () => s,
                toMsFromMpegTsClock: () => a,
                toTimescaleFromBase: () => i,
                toTimescaleFromScale: () => n,
              });
          },
          145: (t, e, r) => {
            "use strict";
            function i(t, e, r) {
              return Uint8Array.prototype.slice
                ? t.slice(e, r)
                : new Uint8Array(Array.prototype.slice.call(t, e, r));
            }
            r.r(e), r.d(e, { sliceUint8: () => i });
          },
          729: (t) => {
            "use strict";
            var e = Object.prototype.hasOwnProperty,
              r = "~";
            function i() {}
            function n(t, e, r) {
              (this.fn = t), (this.context = e), (this.once = r || !1);
            }
            function a(t, e, i, a, s) {
              if ("function" != typeof i)
                throw new TypeError("The listener must be a function");
              var o = new n(i, a || t, s),
                l = r ? r + e : e;
              return (
                t._events[l]
                  ? t._events[l].fn
                    ? (t._events[l] = [t._events[l], o])
                    : t._events[l].push(o)
                  : ((t._events[l] = o), t._eventsCount++),
                t
              );
            }
            function s(t, e) {
              0 == --t._eventsCount
                ? (t._events = new i())
                : delete t._events[e];
            }
            function o() {
              (this._events = new i()), (this._eventsCount = 0);
            }
            Object.create &&
              ((i.prototype = Object.create(null)),
              new i().__proto__ || (r = !1)),
              (o.prototype.eventNames = function () {
                var t,
                  i,
                  n = [];
                if (0 === this._eventsCount) return n;
                for (i in (t = this._events))
                  e.call(t, i) && n.push(r ? i.slice(1) : i);
                return Object.getOwnPropertySymbols
                  ? n.concat(Object.getOwnPropertySymbols(t))
                  : n;
              }),
              (o.prototype.listeners = function (t) {
                var e = r ? r + t : t,
                  i = this._events[e];
                if (!i) return [];
                if (i.fn) return [i.fn];
                for (var n = 0, a = i.length, s = new Array(a); n < a; n++)
                  s[n] = i[n].fn;
                return s;
              }),
              (o.prototype.listenerCount = function (t) {
                var e = r ? r + t : t,
                  i = this._events[e];
                return i ? (i.fn ? 1 : i.length) : 0;
              }),
              (o.prototype.emit = function (t, e, i, n, a, s) {
                var o = r ? r + t : t;
                if (!this._events[o]) return !1;
                var l,
                  u,
                  d = this._events[o],
                  h = arguments.length;
                if (d.fn) {
                  switch (
                    (d.once && this.removeListener(t, d.fn, void 0, !0), h)
                  ) {
                    case 1:
                      return d.fn.call(d.context), !0;
                    case 2:
                      return d.fn.call(d.context, e), !0;
                    case 3:
                      return d.fn.call(d.context, e, i), !0;
                    case 4:
                      return d.fn.call(d.context, e, i, n), !0;
                    case 5:
                      return d.fn.call(d.context, e, i, n, a), !0;
                    case 6:
                      return d.fn.call(d.context, e, i, n, a, s), !0;
                  }
                  for (u = 1, l = new Array(h - 1); u < h; u++)
                    l[u - 1] = arguments[u];
                  d.fn.apply(d.context, l);
                } else {
                  var c,
                    f = d.length;
                  for (u = 0; u < f; u++)
                    switch (
                      (d[u].once && this.removeListener(t, d[u].fn, void 0, !0),
                      h)
                    ) {
                      case 1:
                        d[u].fn.call(d[u].context);
                        break;
                      case 2:
                        d[u].fn.call(d[u].context, e);
                        break;
                      case 3:
                        d[u].fn.call(d[u].context, e, i);
                        break;
                      case 4:
                        d[u].fn.call(d[u].context, e, i, n);
                        break;
                      default:
                        if (!l)
                          for (c = 1, l = new Array(h - 1); c < h; c++)
                            l[c - 1] = arguments[c];
                        d[u].fn.apply(d[u].context, l);
                    }
                }
                return !0;
              }),
              (o.prototype.on = function (t, e, r) {
                return a(this, t, e, r, !1);
              }),
              (o.prototype.once = function (t, e, r) {
                return a(this, t, e, r, !0);
              }),
              (o.prototype.removeListener = function (t, e, i, n) {
                var a = r ? r + t : t;
                if (!this._events[a]) return this;
                if (!e) return s(this, a), this;
                var o = this._events[a];
                if (o.fn)
                  o.fn !== e ||
                    (n && !o.once) ||
                    (i && o.context !== i) ||
                    s(this, a);
                else {
                  for (var l = 0, u = [], d = o.length; l < d; l++)
                    (o[l].fn !== e ||
                      (n && !o[l].once) ||
                      (i && o[l].context !== i)) &&
                      u.push(o[l]);
                  u.length
                    ? (this._events[a] = 1 === u.length ? u[0] : u)
                    : s(this, a);
                }
                return this;
              }),
              (o.prototype.removeAllListeners = function (t) {
                var e;
                return (
                  t
                    ? ((e = r ? r + t : t), this._events[e] && s(this, e))
                    : ((this._events = new i()), (this._eventsCount = 0)),
                  this
                );
              }),
              (o.prototype.off = o.prototype.removeListener),
              (o.prototype.addListener = o.prototype.on),
              (o.prefixed = r),
              (o.EventEmitter = o),
              (t.exports = o);
          },
          945: function (t) {
            var e, r, i, n, a;
            (e =
              /^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/),
              (r = /^(?=([^\/?#]*))\1([^]*)$/),
              (i = /(?:\/|^)\.(?=\/)/g),
              (n = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g),
              (a = {
                buildAbsoluteURL: function (t, e, i) {
                  if (((i = i || {}), (t = t.trim()), !(e = e.trim()))) {
                    if (!i.alwaysNormalize) return t;
                    var n = a.parseURL(t);
                    if (!n) throw new Error("Error trying to parse base URL.");
                    return (
                      (n.path = a.normalizePath(n.path)), a.buildURLFromParts(n)
                    );
                  }
                  var s = a.parseURL(e);
                  if (!s)
                    throw new Error("Error trying to parse relative URL.");
                  if (s.scheme)
                    return i.alwaysNormalize
                      ? ((s.path = a.normalizePath(s.path)),
                        a.buildURLFromParts(s))
                      : e;
                  var o = a.parseURL(t);
                  if (!o) throw new Error("Error trying to parse base URL.");
                  if (!o.netLoc && o.path && "/" !== o.path[0]) {
                    var l = r.exec(o.path);
                    (o.netLoc = l[1]), (o.path = l[2]);
                  }
                  o.netLoc && !o.path && (o.path = "/");
                  var u = {
                    scheme: o.scheme,
                    netLoc: s.netLoc,
                    path: null,
                    params: s.params,
                    query: s.query,
                    fragment: s.fragment,
                  };
                  if (!s.netLoc && ((u.netLoc = o.netLoc), "/" !== s.path[0]))
                    if (s.path) {
                      var d = o.path,
                        h = d.substring(0, d.lastIndexOf("/") + 1) + s.path;
                      u.path = a.normalizePath(h);
                    } else
                      (u.path = o.path),
                        s.params ||
                          ((u.params = o.params),
                          s.query || (u.query = o.query));
                  return (
                    null === u.path &&
                      (u.path = i.alwaysNormalize
                        ? a.normalizePath(s.path)
                        : s.path),
                    a.buildURLFromParts(u)
                  );
                },
                parseURL: function (t) {
                  var r = e.exec(t);
                  return r
                    ? {
                        scheme: r[1] || "",
                        netLoc: r[2] || "",
                        path: r[3] || "",
                        params: r[4] || "",
                        query: r[5] || "",
                        fragment: r[6] || "",
                      }
                    : null;
                },
                normalizePath: function (t) {
                  for (
                    t = t.split("").reverse().join("").replace(i, "");
                    t.length !== (t = t.replace(n, "")).length;

                  );
                  return t.split("").reverse().join("");
                },
                buildURLFromParts: function (t) {
                  return (
                    t.scheme +
                    t.netLoc +
                    t.path +
                    t.params +
                    t.query +
                    t.fragment
                  );
                },
              }),
              (t.exports = a);
          },
        },
        e = {};
      function r(i) {
        var n = e[i];
        if (void 0 !== n) return n.exports;
        var a = (e[i] = { exports: {} });
        return t[i].call(a.exports, a, a.exports, r), a.exports;
      }
      (r.m = t),
        (r.n = (t) => {
          var e = t && t.__esModule ? () => t.default : () => t;
          return r.d(e, { a: e }), e;
        }),
        (r.d = (t, e) => {
          for (var i in e)
            r.o(e, i) &&
              !r.o(t, i) &&
              Object.defineProperty(t, i, { enumerable: !0, get: e[i] });
        }),
        (r.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e)),
        (r.r = (t) => {
          "undefined" != typeof Symbol &&
            Symbol.toStringTag &&
            Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }),
            Object.defineProperty(t, "__esModule", { value: !0 });
        });
      var i = r(76);
      return i.default;
    })()
  );
var user_volume =
  $.cookie("a_volume") != null ? parseFloat($.cookie("a_volume")) : 1;
var player_bid = "",
  page_bid = "",
  player = {},
  hls = {},
  bo = {},
  user_rates = {},
  bookData = {},
  timerDuration = 0,
  timer = "",
  icon_play =
    '<svg class="icon icon-play" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><defs></defs><g><rect class="eq__bar eq1" x="1" y="8" width="4" height="8"></rect><rect class="eq__bar eq2" x="6" y="1" width="4" height="15"></rect><rect class="eq__bar eq3" x="11" y="4" width="4" height="12"></rect></g></svg>',
  icon_pause =
    '<svg class="icon icon-pause" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><defs></defs><g><rect class="eq__bar eq1" x="1" y="12" width="4" height="4"></rect><rect class="eq__bar eq2" x="6" y="12" width="4" height="4"></rect><rect class="eq__bar eq3" x="11" y="12" width="4" height="4"></rect></g></svg>';
function iOS() {
  return (
    [
      "iPad Simulator",
      "iPhone Simulator",
      "iPod Simulator",
      "iPad",
      "iPhone",
      "iPod",
    ].includes(navigator.platform) ||
    (navigator.userAgent.includes("Mac") && "ontouchend" in document)
  );
}
var icon_progress = function (icon) {
  return (
    '<svg class="icon icon-percent" xmlns="http://www.w3.org/2000/svg"><use xlink:href="#' +
    icon +
    '"></use></svg>'
  );
};
function setTimer(callback, delay) {
  var timerId,
    intervalId,
    start,
    remaining = delay,
    running;
  this.cancel = function () {
    running = false;
    window.clearTimeout(timerId);
    window.clearInterval(intervalId);
  };
  this.pause = function () {
    running = false;
    window.clearTimeout(timerId);
    window.clearInterval(intervalId);
    remaining -= Date.now() - start;
  };
  this.resume = function () {
    running = true;
    start = Date.now();
    window.clearTimeout(timerId);
    timerId = window.setTimeout(callback, remaining);
    intervalId = window.setInterval(function () {
      var value_seconds = timer.timeLeft();
      var value_hours = Math.floor(value_seconds / 3600);
      value_seconds -= value_hours * 3600;
      var value_minutes = Math.floor(value_seconds / 60);
      $(".timer__hours .timer__text").html(
        value_hours +
          "<span>" +
          ls.i18n
            .pluralize(value_hours, "time.hours_declension")
            .replace(/\d+/g, "") +
          "</span>"
      );
      $(".timer__minutes .timer__text").html(
        value_minutes +
          "<span>" +
          ls.i18n
            .pluralize(value_minutes, "time.minutes_declension")
            .replace(/\d+/g, "") +
          "</span>"
      );
    }, 60 * 1000);
  };
  this.timeLeft = function () {
    if (running) {
      this.pause();
      this.resume();
    }
    return remaining / 1000;
  };
  this.resume();
}
function removeTimer(book_bid) {
  timerDuration = 0;
  if (typeof timer === "object") {
    timer.cancel();
  }
  timer = "";
  if (book_bid && player[book_bid]) {
    setPercent(book_bid);
    setBookPosition(book_bid);
  }
  if (book_bid && bo[book_bid]) {
    b_setPercent(book_bid);
  }
  $(".timer__hours").attr("data-val", 0);
  $(".timer__hours .timer__text").html(0 + "<span>Ñ‡Ð°ÑÐ¾Ð²</span>");
  $(".timer__minutes").attr("data-val", 20);
  $(".timer__minutes .timer__text").html(20 + "<span>Ð¼Ð¸Ð½ÑƒÑ‚</span>");
  $(".mobile__popup--timer,.player__timer").removeClass("run");
  $(".mobile__popup--timer .mobile__popup--content--button")
    .removeClass("button-stop")
    .addClass("button-start")
    .html("Ð’ÐºÐ»ÑŽÑ‡Ð¸Ñ‚ÑŒ Ñ‚Ð°Ð¹Ð¼ÐµÑ€");
}
var buildMediaSessionTitle = function (title) {
  if (/^\d+$/.test(title) && title.length < 5) {
    return "Ð§Ð°ÑÑ‚ÑŒ " + title;
  }
  return title;
};
var mediaSessionData = async function (book_bid) {
  var audio = $(".jpl[data-bid=" + book_bid + "] audio")[0];
  if ("mediaSession" in navigator) {
    var artwork = [
      { src: bookData[book_bid].preview, sizes: "96x96", type: "image/jpeg" },
      {
        src: bookData[book_bid].preview.replace("_100x100crop", "_400x"),
        sizes: "256x256",
        type: "image/jpeg",
      },
      {
        src: bookData[book_bid].preview.replace("_100x100crop", "_400x"),
        sizes: "512x512",
        type: "image/jpeg",
      },
    ];
    if (iOS()) {
      var version =
        /iP(hone|ad|od) OS ([1-9]*)/i.exec(window.navigator.userAgent)?.[2] ||
        NaN;
      if (version > 16) {
        artwork.unshift(artwork.pop());
      }
    }
    var artist = bookData[book_bid].author;
    var title = bookData[book_bid].titleonly;
    if (bookData[book_bid].items.length > 1) {
      artist = buildMediaSessionTitle(
        bookData[book_bid].items[bookData[book_bid].chapterId].title
      );
      title = bookData[book_bid].titleonly;
    }
    navigator.mediaSession.metadata = new MediaMetadata({
      title: title,
      artist: artist,
      artwork: artwork,
    });
  }
  const skipTime = 15;
  const actionHandlers = [
    [
      "play",
      () => {
        audio.play();
        updatePositionState();
      },
    ],
    [
      "pause",
      () => {
        audio.pause();
        updatePositionState();
      },
    ],
    [
      "seekbackward",
      (details) => {
        audio.currentTime = Math.max(audio.currentTime - skipTime, 0);
        updatePositionState();
      },
    ],
    [
      "seekforward",
      (details) => {
        audio.currentTime = Math.min(
          audio.currentTime + skipTime,
          audio.duration
        );
        updatePositionState();
      },
    ],
    [
      "seekto",
      (details) => {
        if (details.fastSeek && "fastSeek" in audio) {
          audio.fastSeek(details.seekTime);
          return;
        }
        audio.currentTime = details.seekTime;
        updatePositionState();
      },
    ],
  ];
  for (const [action, handler] of actionHandlers) {
    try {
      navigator.mediaSession.setActionHandler(action, handler);
    } catch (error) {
      console.log(`The media session action "${action}" is not supported yet.`);
    }
  }
  function updatePositionState() {
    if ("setPositionState" in navigator.mediaSession) {
      navigator.mediaSession.setPositionState({
        duration: audio.duration,
        playbackRate: audio.playbackRate,
        position: audio.currentTime,
      });
    }
  }
};
function scrollToCurrentChapter(book_bid) {
  var chapter_list = $(".bookpage--chapters[data-bid=" + book_bid + "]");
  var previous = $(".chapter__current", chapter_list).prev();
  if (chapter_list.children().size() > 3) {
    chapter_list.scrollTo(
      previous.hasClass("folder_separator") ? previous : ".chapter__current",
      300
    );
  }
}
function loadPlayerData(book_bid) {
  var book_data = bookData[book_bid],
    items = bookData[book_bid].items;
  $(
    ".menu__player--wrapper,.player__wrapper--bar,.book-id-" + book_bid
  ).removeClass("unloaded");
  $(".player__title--main .wrapper, .player__wrapper--bar--caption").text(
    book_data.titleonly
  );
  $(".player__wrapper--bar--author").text(book_data.author);
  $(".player__picture").css(
    "background-image",
    "url(" + book_data.preview + ")"
  );
  $(".menu__player--content .cover__wrapper--image").css(
    "background-image",
    "url(" + book_data.preview + ")"
  );
  $(".book-id-" + book_bid + " .book--chapter-current").text(
    "Ð§Ð°ÑÑ‚ÑŒ " + (bookData[book_bid].chapterId + 1) + " Ð¸Ð· " + items.length
  );
  $(".menu__player--wrapper .tooltips, .js-book-data").empty();
  if (book_data.sTextAuthor) {
    $(".menu__player--wrapper .tooltips").append(book_data.sTextAuthor);
  }
  if (book_data.sTextPerformer) {
    $(".menu__player--wrapper .tooltips").append(book_data.sTextPerformer);
  }
  $(".menu__player--wrapper .js-vote-author").lsVote({
    urls: { vote: aRouter["ajax"] + "vote/author/" },
  });
  $(".menu__player--wrapper .js-vote-performer").lsVote({
    urls: { vote: aRouter["ajax"] + "vote/performer/" },
  });
  $(".js-book-data").append(book_data.sTextFav);
  $(".js-book-data .ls-favourite").lsFavourite({
    urls: { toggle: aRouter["ajax"] + "favourite/topic/" },
  });
  $(".js-book-data .ls-vote").lsVote({
    urls: { vote: aRouter["ajax"] + "vote/topic/" },
  });
  $(".menu__player--wrapper .link__backtobook").attr(
    "href",
    bookData[book_bid].bookurl
  );
  pjax.refresh();
  init_buttons(book_bid);
  init_sliders(book_bid);
  init_chapters(book_bid);
  adoptButtons(book_bid);
  setCurrentChapter(book_bid, bookData[book_bid].chapterId, items);
}
function load_player(book_bid, playerLocation) {
  setChapters(book_bid, playerLocation);
  if (playerLocation == "book") {
    init_sliders_bookpage(book_bid);
    getBookPosition(book_bid);
    scrollToCurrentChapter(book_bid);
  } else {
    if (!$(".jpl[data-bid=" + book_bid + "]")[0]) {
      init_sliders(book_bid);
      getBookPosition(book_bid);
    }
    player_bid = book_bid;
    mediaSessionData(book_bid);
    loadPlayerData(book_bid);
  }
}
async function loadBookData(book_bid, playerLocation) {
  if (bookData[book_bid] !== undefined) {
    adoptButtons(book_bid);
    $(".book--player.book-id-" + page_bid).removeClass("unloaded");
    load_player(book_bid, playerLocation);
    return;
  }
  return new Promise((resolve) => {
    const hh = plh.startTransition();
    ls.ajax.load(
      aRouter["ajax"] + "b/" + book_bid,
      { bid: book_bid, hash: hh },
      function (result) {
        if (!result.error) {
          bookData[book_bid] = result;
          bookData[book_bid].current_mfileId = "";
          bookData[book_bid].items = JSON.parse(bookData[book_bid].items);
          if ($("article[data-bid=" + book_bid + "] .preconnect link")[0])
            bookData[book_bid].srv = $(".preconnect link").attr("href");
          adoptButtons(book_bid);
          $(".book--player.book-id-" + page_bid).removeClass("unloaded");
          load_player(book_bid, playerLocation);
          resolve(1);
        } else {
          console.log("loading error");
          loadPlayerError(book_bid);
          resolve(0);
        }
      },
      { showProgress: false }
    );
  });
}
function loadPlayerError(book_bid) {
  $(".book-id-" + book_bid).addClass("book--item--closed");
  $(".book-id-" + book_bid + " .js-block-chapters").hide;
  $(".book-id-" + book_bid + " .cover__wrapper--image-text").hide();
  var errText = "ÐÑƒÐ´Ð¸Ð¾ÐºÐ½Ð¸Ð³Ð° Ð²Ñ€ÐµÐ¼ÐµÐ½Ð½Ð¾ Ð½ÐµÐ´Ð¾ÑÑ‚ÑƒÐ¿Ð½Ð°.";
  $(".book-id-" + book_bid + " .content__main__book--item--chapter").html(
    errText
  );
  if (isMobile) $(".button__player--play-" + book_bid).remove();
}
function secondsToHMS(s) {
  var h = Math.floor(s / 3600);
  s -= h * 3600;
  var m = Math.floor(s / 60);
  s -= m * 60;
  return (
    (h > 0 ? h + ":" : "") +
    (m < 10 ? "0" + m : m) +
    ":" +
    (s < 10 ? "0" + s : s)
  );
}
var animationLoader = function (book_bid) {
  $(".book-id-" + book_bid + " .button__player--play").addClass(
    "player-loading"
  );
};
var animationUnloader = function (book_bid) {
  $(".book-id-" + book_bid + " .button__player--play").removeClass(
    "player-loading"
  );
};
var fileLoader = function (book_bid) {
  $(".book-id-" + book_bid + ':not(".mobile__popup")').addClass("file-loading");
};
var fileUnloader = function (book_bid) {
  $(".book-id-" + book_bid).removeClass("file-loading");
};
var isPaused = function (book_bid) {
  if (typeof player[book_bid] !== "undefined" && !player[book_bid].paused)
    return false;
  return true;
};
var playerRewind = function (book_bid) {
  if (player[book_bid].currentTime > 15) {
    if (
      player[book_bid].currentTime - 15 <
      bookData[book_bid].items[bookData[book_bid].chapterId].time_from_start
    ) {
      bookData[book_bid].chapterId--;
      setCurrentChapter(
        book_bid,
        bookData[book_bid].chapterId,
        bookData[book_bid].items
      );
    }
    player[book_bid].currentTime = player[book_bid].currentTime - 15;
  } else {
    player[book_bid].currentTime = 0;
  }
};
var playerForward = function (book_bid) {
  if (
    bookData[book_bid].items.length - 1 != bookData[book_bid].chapterId &&
    player[book_bid].duration - player[book_bid].currentTime < 15
  ) {
    var position = bookData[book_bid].items[bookData[book_bid].chapterId].time;
    loadPlayer(book_bid, position, "", isPaused(book_bid) ? "pause" : "play");
  } else {
    player[book_bid].currentTime = player[book_bid].currentTime + 15;
  }
};
async function restoreBook() {
  var last_bookid =
    $.cookie("a_lastbid") != null ? parseInt($.cookie("a_lastbid")) : null;
  if ($(".jpl.player")[0] || last_bookid == null) return;
  await setPlayer(last_bookid);
}
var setPercent = function (book_bid, percent) {
  if (bookData[book_bid].preview_url) return;
  if (!$.isNumeric(percent)) {
    var length =
      bookData[book_bid].items[bookData[book_bid].items.length - 1].time;
    if (length == 0) return;
    var currTime = Math.floor(player[book_bid].currentTime);
    var position =
      bookData[book_bid].chapterId == 0
        ? currTime
        : currTime +
          bookData[book_bid].items[bookData[book_bid].chapterId - 1].time -
          bookData[book_bid].items[bookData[book_bid].chapterId]
            .time_from_start;
    var percent = Math.ceil((position / length) * 100);
    if (percent > 100) percent = 100;
  }
  $(".book-id-" + book_bid + " .percent-number span").text(percent + "%");
  $(
    "article[data-bid=" +
      book_bid +
      "] .caption__article-duration .percent-number"
  ).text(percent + "% Ð¿Ñ€Ð¾ÑÐ»ÑƒÑˆÐ°Ð½Ð¾");
  $(
    "article[data-bid=" + book_bid + "] .wrapper--history-menu .icon-percent"
  ).remove();
  $("article[data-bid=" + book_bid + "] .wrapper--history-menu").prepend(
    icon_progress(percent == 100 ? "check" : "percent")
  );
  if (percent == 0) {
    $(".book-id-" + book_bid + " .circular-chart").addClass("hidden");
  } else {
    $(".book-id-" + book_bid + " .circular-chart").removeClass("hidden");
    $(".book-id-" + book_bid + " .circle-path").attr({
      "stroke-dasharray": percent + ",100",
    });
  }
};
var getBookPosition = function (book_bid) {
  var browserPos =
    $.cookie("a_pos_" + book_bid) != null
      ? parseInt($.cookie("a_pos_" + book_bid))
      : 0;
  var pos = browserPos;
  if ($(".layout--user-role-user")[0]) {
    if ($("article").attr("data-his") !== undefined) {
      var user_pos = parseInt($("article").attr("data-his"));
      if (user_pos > browserPos) {
        pos = user_pos;
      }
    } else {
      ls.ajax.load(
        aRouter["history"] + "ajax_getpos",
        { gid: book_bid },
        function (result) {
          user_pos = parseInt(result.pos);
          if (result.hstate && user_pos && user_pos > browserPos) {
            pos = user_pos;
          } else {
          }
          pos = pos > 15 ? pos : 0;
          loadPlayer(book_bid, pos);
          $(".jpl[data-bid=" + book_bid + "]").addClass("player");
          setPercent(book_bid);
        },
        { showProgress: false }
      );
      return;
    }
  }
  pos = pos > 15 ? pos : 0;
  loadPlayer(book_bid, pos);
};
var setBookPosition = function (book_bid, type) {
  if (bookData[book_bid].preview_url) return;
  var currTime = Math.floor(player[book_bid].currentTime);
  var position =
    bookData[book_bid].chapterId == 0
      ? currTime
      : currTime +
        bookData[book_bid].items[bookData[book_bid].chapterId - 1].time -
        bookData[book_bid].items[bookData[book_bid].chapterId].time_from_start;
  if (type != "cookie") {
    var percent = Math.ceil(
      (parseInt(position) /
        parseInt(
          bookData[book_bid].items[bookData[book_bid].items.length - 1].time
        )) *
        100
    );
    var posParams = {
      gid: book_bid,
      topic_id: bookData[book_bid].topic_id,
      pos: position,
      percent: percent,
    };
    ls.ajax.load(
      aRouter["history"] + "ajax_setpos",
      posParams,
      function () {},
      { showProgress: false }
    );
    $(
      ".book-id-" + book_bid + " .cover__wrapper--history-buttons span"
    ).removeClass("hidden");
  }
  $.cookie("a_pos_" + book_bid, position, { expires: 30, path: "/" });
};
var changeDurationData = function (book_bid, rate) {
  var duration =
    bookData[book_bid].items[bookData[book_bid].items.length - 1].time;
  var durationNew = rate > 1 ? duration / rate : duration * (2 - rate);
  var hours = Math.floor(durationNew / 3600);
  var minutes = Math.floor((durationNew % 3600) / 60);
  var rate_value = ((rate - 1) * 100).toFixed();
  var durationItem = $(".book-duration-" + book_bid);
  $(".hours", durationItem).text(
    hours > 0 ? ls.i18n.pluralize(hours, "time.hours_declension") : ""
  );
  $(".minutes", durationItem).text(
    minutes > 0 ? ls.i18n.pluralize(minutes, "time.minutes_declension") : ""
  );
  rate != 1
    ? $(".rate", durationItem).text(
        "(" +
          (rate_value > 1
            ? "-" + rate_value + "%"
            : "+" + Math.abs(rate_value) + "%") +
          ")"
      )
    : $(".rate", durationItem).text("");
};
var adoptButtons = function (book_bid) {
  var buttons = $(
    ".menu__player--wrapper.book-id-" + book_bid + " .player--buttons"
  );
  buttons.removeClass("player--buttons-onefile");
  if (bookData[book_bid].items.length == 1) {
    buttons.addClass("player--buttons-onefile");
    $(".book-id-" + book_bid + " .js-block-chapters").hide();
  }
};
var chapterSetIcon = function (book_bid, icon) {
  $(
    ".player--chapters[data-bid=" +
      book_bid +
      "] .chapter__default[data-id=" +
      bookData[book_bid].chapterId +
      "] .chapter__default--button"
  ).html(icon);
};
var loadPlayer = function (book_bid, position, mfileId, state) {
  var chapterId = 0,
    realTrackPosition = 0,
    mfileId = mfileId || "",
    state = state || "pause",
    preload = !player_bid || player_bid == book_bid ? "none" : "none",
    fileLoaded = false;
  var items = bookData[book_bid].items;
  if (position >= items[items.length - 1].time)
    position = items[items.length - 1].time - 1;
  if (mfileId == "" && position <= items[items.length - 1].time) {
    for (var i = 0; i < items.length; i++) {
      if (position < items[i].time) {
        bookData[book_bid].chapterId = i;
        mfileId = items[i].file;
        break;
      }
    }
    if (mfileId == 1) {
      realTrackPosition = position;
    } else {
      realTrackPosition =
        position -
        items[bookData[book_bid].chapterId - 1].time +
        items[bookData[book_bid].chapterId].time_from_start;
    }
    console.log(
      mfileId +
        " " +
        bookData[book_bid].chapterId +
        " " +
        position +
        " " +
        realTrackPosition
    );
  } else if ($.isNumeric(mfileId)) {
    realTrackPosition = 0;
    console.log(
      mfileId +
        " " +
        bookData[book_bid].chapterId +
        " " +
        position +
        " " +
        realTrackPosition
    );
  } else {
    bookData[book_bid].chapterId = 0;
    mfileId = 1;
    realTrackPosition = 0;
  }
  if (state == "play") {
    $(".book-id-" + book_bid + " .button__player--play").addClass("playing");
    chapterSetIcon(book_bid, icon_play);
  }
  setCurrentChapter(book_bid, bookData[book_bid].chapterId, items);
  var mfileIdConv = mfileId < 10 ? "0" + mfileId : mfileId;
  var user_rate =
    $.cookie("a_rate_" + book_bid) != null
      ? parseFloat($.cookie("a_rate_" + book_bid))
      : 1;
  user_rates[book_bid] = user_rate;
  var options = {
    controls: false,
    keyboard: { focused: false, global: false },
  };
  var playerEvents = function (player) {
    player.playbackRate = user_rates[book_bid];
    player.volume = user_volume;
    player.initdone = false;
    init_buttons(book_bid);
    changeDurationData(book_bid, player.playbackRate);
    animationUnloader(book_bid);
    if (realTrackPosition) {
      var seek = parseInt(
        realTrackPosition - items[bookData[book_bid].chapterId].time_from_start
      );
      var pos =
        (seek / items[bookData[book_bid].chapterId].duration) * 100 || 0;
      $(".book-id-" + book_bid + " .player-time-current").html(
        secondsToHMS(seek)
      );
      $(".book-id-" + book_bid + " .progress__bar--player").slider(
        "value",
        pos
      );
      $(
        ".book-id-" +
          book_bid +
          " .chapter__current .chapter__default--progress"
      ).css("width", pos + "%");
      var length =
        bookData[book_bid].items[bookData[book_bid].items.length - 1].time;
      var position =
        bookData[book_bid].chapterId == 0
          ? realTrackPosition
          : realTrackPosition +
            bookData[book_bid].items[bookData[book_bid].chapterId - 1].time -
            bookData[book_bid].items[bookData[book_bid].chapterId]
              .time_from_start;
      var percent = Math.ceil((position / length) * 100);
      setPercent(book_bid, percent);
    }
    player.addEventListener("loadeddata", function () {
      if (realTrackPosition > 0 && realTrackPosition <= player.duration) {
        player.currentTime = realTrackPosition;
      }
      if (bookData[book_bid].preview_url) {
        var preview_duration = Math.floor(player.duration);
        items[bookData[book_bid].chapterId].time = preview_duration;
        items[bookData[book_bid].chapterId].time_finish = preview_duration;
        items[bookData[book_bid].chapterId].duration = preview_duration;
        setCurrentChapter(book_bid, bookData[book_bid].chapterId, items);
        $(
          ".player--chapters[data-bid=" +
            book_bid +
            "] .chapter__default .chapter__default--time"
        ).append(secondsToHMS(preview_duration));
      }
    });
    player.addEventListener("canplaythrough", function () {
      fileUnloader(book_bid);
      fileLoaded = true;
    });
    player.addEventListener("play", function () {
      scrollToCurrentChapter(book_bid);
      navigator.mediaSession.playbackState = "playing";
      if (
        realTrackPosition > 0 &&
        player.currentTime == 0 &&
        player.duration == 0
      ) {
        var attempts = 0;
        var refreshId = setInterval(function () {
          attempts++;
          if (player.duration > 0 || attempts > 15) {
            player.currentTime = realTrackPosition;
            realTrackPosition = 0;
            clearInterval(refreshId);
          }
        }, 1000);
      }
      $(".book-id-" + book_bid + " .button__player--play").addClass("playing");
      chapterSetIcon(book_bid, icon_play);
      animationUnloader(book_bid);
      if (!bookData[book_bid].preview_url) {
        $.cookie("a_lastbid", book_bid, { expires: 3, path: "/" });
      }
      setPercent(book_bid);
      setBookPosition(book_bid);
      if (!fileLoaded) {
        fileLoader(book_bid);
      } else {
        fileUnloader(book_bid);
        fileLoaded = true;
      }
      if (timerDuration) {
        if (typeof timer !== "object") {
          window.timer = new setTimer(function () {
            player.pause();
            removeTimer(book_bid);
          }, timerDuration);
        } else {
          timer.resume();
        }
      }
    });
    player.addEventListener("playing", function () {
      if (!fileLoaded) {
        setTimeout(function () {
          if (player.currentTime > realTrackPosition) {
            fileUnloader(book_bid);
            fileLoaded = true;
          }
        }, 2000);
      }
    });
    player.addEventListener("seeking", function () {
      if (fileLoaded) fileLoader(book_bid);
    });
    player.addEventListener("seeked", function () {
      scrollToCurrentChapter(book_bid);
      if (fileLoaded) fileUnloader(book_bid);
      var seek =
        player.currentTime -
        items[bookData[book_bid].chapterId].time_from_start;
      if (seek < 0) {
        return;
      }
      $(".book-id-" + book_bid + " .player-time-current").html(
        secondsToHMS(parseInt(seek))
      );
      setPercent(book_bid);
    });
    player.addEventListener("pause", function () {
      scrollToCurrentChapter(book_bid);
      navigator.mediaSession.playbackState = "paused";
      animationUnloader(book_bid);
      $(".book-id-" + book_bid + " .button__player--play").removeClass(
        "playing"
      );
      chapterSetIcon(book_bid, icon_pause);
      setPercent(book_bid);
      setBookPosition(book_bid);
      if (typeof timer === "object") {
        timer.pause();
      }
    });
    player.addEventListener("timeupdate", function () {
      var time = player.currentTime;
      if (time <= 0) {
        return;
      }
      var seek = time - items[bookData[book_bid].chapterId].time_from_start;
      if (
        time >= items[bookData[book_bid].chapterId].time_finish ||
        seek < -1
      ) {
        if (
          bookData[book_bid].chapterId != items.length - 1 &&
          items[bookData[book_bid].chapterId].file ==
            items[bookData[book_bid].chapterId + 1].file
        ) {
          for (var i = 0; i < items.length; i++) {
            if (
              items[i].file == items[bookData[book_bid].chapterId].file &&
              time < items[i].time_finish
            ) {
              bookData[book_bid].chapterId = i;
              setCurrentChapter(book_bid, bookData[book_bid].chapterId, items);
              scrollToCurrentChapter(book_bid);
              setPercent(book_bid);
              break;
            }
          }
        }
        return;
      }
      seek = parseInt(seek);
      var pos =
        (seek / items[bookData[book_bid].chapterId].duration) * 100 || 0;
      setBookPosition(book_bid, "cookie");
      $(".book-id-" + book_bid + " .player-time-current").html(
        secondsToHMS(seek)
      );
      $(".book-id-" + book_bid + " .progress__bar--player").slider(
        "value",
        pos
      );
      $(
        ".book-id-" +
          book_bid +
          " .chapter__current .chapter__default--progress"
      ).css("width", pos + "%");
    });
    player.addEventListener("ended", function () {
      if (bookData[book_bid].chapterId != items.length - 1) {
        bookData[book_bid].chapterId++;
        mfileId++;
        loadPlayer(book_bid, position, mfileId, "play");
        scrollToCurrentChapter(book_bid);
      } else {
        setPercent(book_bid, 100);
        $(".book-id-" + book_bid + " .player-time-duration").html(
          $(".book-id-" + book_bid + " .player-time-current").html()
        );
        removeTimer(book_bid);
        $.removeCookie("a_lastbid", { path: "/" });
      }
      setBookPosition(book_bid);
    });
    player.addEventListener("volumechange", function () {
      user_volume = player.volume.toFixed(2);
      $.cookie("a_volume", player.volume.toFixed(2), {
        expires: 365,
        path: "/",
      });
      var volume_value = (player.volume * 100).toFixed();
      $(".volume_value").html(volume_value + "%");
      $(".volume-size").removeClass("active");
      if (volume_value > 10 && volume_value < 40) {
        $(".volume-s1").addClass("active");
      } else if (volume_value >= 40 && volume_value < 80) {
        $(".volume-s1,.volume-s2").addClass("active");
      } else if (volume_value >= 80) {
        $(".volume-s1,.volume-s2,.volume-s3").addClass("active");
      }
    });
    player.addEventListener("ratechange", function () {
      user_rate = player.playbackRate.toFixed(2);
      user_rates[book_bid] = user_rate;
      if (user_rate == 1) {
        $.removeCookie("a_rate_" + book_bid, { path: "/" });
      } else {
        $.cookie("a_rate_" + book_bid, user_rate, { expires: 30, path: "/" });
      }
      var rate_value = ((player.playbackRate - 1) * 100).toFixed();
      if (rate_value == 0) {
        $(
          ".book-id-" +
            book_bid +
            " .speed_value, .mobile__popup--speed[data-bid=" +
            book_bid +
            "] .speed_value"
        ).html("1x");
        $(".js-topic .book-id-" + book_bid + " .speed__hor .speed_value").html(
          "Ð¡ÐºÐ¾Ñ€Ð¾ÑÑ‚ÑŒ"
        );
      } else {
        $(
          ".book-id-" +
            book_bid +
            " .speed_value, .mobile__popup--speed[data-bid=" +
            book_bid +
            "] .speed_value"
        ).html(rate_value > 1 ? "+" + rate_value + "%" : rate_value + "%");
      }
      changeDurationData(book_bid, user_rate);
    });
  };
  if (!player[book_bid] || bookData[book_bid].current_mfileId != mfileId) {
    if (player[book_bid]) {
      player[book_bid].pause();
      player[book_bid].src = "";
      player[book_bid].load();
      $(".jpl[data-bid=" + book_bid + "]").remove();
      delete player[book_bid];
    }
    $(".jpl.empty")
      .clone()
      .attr("data-bid", book_bid)
      .insertAfter($(".jpl").last());
    $(".jpl[data-bid=" + book_bid + "]").removeClass("empty");
    if (book_bid == player_bid)
      $(".jpl[data-bid=" + book_bid + "]").addClass("player");
    animationLoader();
    bookData[book_bid].current_mfileId = mfileId;
    if (preload == "none" && realTrackPosition > 0) preload = "auto";
    player[book_bid] = $(".jpl[data-bid=" + book_bid + "] audio")[0];
    var file_ver =
      bookData[book_bid].version > 1 ? "&v=" + bookData[book_bid].version : "";
    var audioPlayer = $(".jpl[data-bid=" + book_bid + "] audio");
    audioPlayer.attr("title", bookData[book_bid].titleonly);
    if (bookData[book_bid].hres) {
      var file_url = `${plh.getHres(bookData[book_bid].hres)}${file_ver}`;
    }
    if (bookData[book_bid].hres && !iOS() && Hls.isSupported()) {
      var configHls = { maxBufferLength: 300 };
      hls[book_bid] = new Hls(configHls);
      hls[book_bid].loadSource(file_url);
      hls[book_bid].attachMedia(player[book_bid]);
      hls[book_bid].on(Hls.Events.ERROR, function (event, data) {
        if (data.fatal && data.type === Hls.ErrorTypes.NETWORK_ERROR) {
          console.log("network error");
          setTimeout(function () {
            hls[book_bid].startLoad();
          }, 5000);
        }
      });
    } else if (
      bookData[book_bid].hres &&
      iOS() &&
      player[book_bid].canPlayType("application/vnd.apple.mpegurl")
    ) {
      player[book_bid].src = file_url;
      player[book_bid].load();
    } else {
      if (bookData[book_bid].res) {
        var file_url = `${plh.getHres(bookData[book_bid].res)}${file_ver}`;
        audioPlayer.attr("preload", preload).attr("src", file_url);
      } else if (bookData[book_bid].preview_url) {
        audioPlayer.attr("type", "audio/mpeg");
        var file_url = bookData[book_bid].preview_url;
        audioPlayer.attr("preload", "metadata").attr("src", file_url);
      } else {
        audioPlayer.attr("type", "audio/mpeg");
        var file_slug = bookData[book_bid].slug
          ? bookData[book_bid].slug
          : mfileIdConv + ". " + bookData[book_bid].title;
        var file_url =
          bookData[book_bid].srv + "b/" + book_bid + "/" + file_slug + ".mp3";
        audioPlayer.attr("preload", preload).attr("src", file_url);
      }
    }
    playerEvents(player[book_bid]);
  } else {
    player[book_bid].currentTime = realTrackPosition;
  }
  state == "play" ? player[book_bid].play() : player[book_bid].pause();
};
var unloadPlayer = function () {
  removeTimer(player_bid);
  if (typeof bo[player_bid] !== "undefined") {
    bo[player_bid].pause();
    bo[player_bid].destroy();
    delete bo[player_bid];
  }
  player_bid = "";
  navigator.mediaSession.metadata = null;
  navigator.mediaSession.setPositionState(null);
  var prevBook = $(".menu__player--wrapper").attr("data-bid");
  $(".menu__player--wrapper,.player__wrapper--bar").removeClass(
    "book-id-" + prevBook
  );
  $(
    ".menu__player--wrapper .player--buttons button,.player__wrapper--bar .button__player--play"
  ).unbind("click");
  $(".menu__player--wrapper").attr("class", "menu__player--wrapper");
  $(
    ".menu__player--content-chapters,.menu__player--wrapper .player__speed"
  ).removeAttr("data-bid");
  $(".player__wrapper--bar").removeClass("buttons-open open");
  $(
    ".player__title--main .wrapper, .player__wrapper--bar--caption, .player__wrapper--bar--author"
  ).empty();
  $(".player__picture").css("background-image", "url()");
  $(".menu__player--content .cover__wrapper--image").css(
    "background-image",
    ""
  );
  $(".menu__player--content--chapter,.player__title--small").empty();
  $(".menu__player--wrapper .tooltips, .js-book-data").empty();
  $(".menu__player--wrapper,.player__wrapper--bar").addClass("unloaded");
  $(".menu__player--wrapper").removeClass("open");
  $("body").removeClass("player-open no-overflow");
  if ($(".jpl.player")[0] == undefined) return;
  var old_bid = $(".jpl.player").attr("data-bid");
  player[old_bid].pause();
  player[old_bid].src = "";
  player[old_bid].load();
  $(".jpl.player").remove();
  delete player[old_bid];
};
async function setPlayer(book_bid) {
  if (player_bid) unloadPlayer();
  $(".menu__player--wrapper,.player__wrapper--bar").addClass(
    "book-id-" + book_bid
  );
  $(
    ".menu__player--wrapper,.player__wrapper--bar,.menu__player--wrapper .player__speed,.menu__player--content-chapters"
  ).attr("data-bid", book_bid);
  $(".player__wrapper--bar").addClass("open");
  await loadBookData(book_bid, "player");
  $(".jpl[data-bid=" + book_bid + "]").addClass("player");
  if (book_bid == page_bid) $(".menu__player--wrapper").addClass("samepage");
}
var init_player_bookpage = async function () {
  page_bid = parseInt($("article").attr("data-bid"));
  var biblio_id = $("article").attr("data-shopid");
  if (typeof biblio_id == "undefined") await restoreBook();
  if (player_bid == page_bid) {
    $(".menu__player--wrapper").addClass("samepage");
  } else {
    $(".menu__player--wrapper").removeClass("samepage");
  }
  if (
    $(".js-topic").length == 0 ||
    !page_bid ||
    $(".js-topic").hasClass("book--item--closed")
  ) {
    return;
  }
  if ($(".content__main__book--item.playlist--hidden")[0]) {
    enquire.register("screen and (max-width:768px)", {
      match: function () {
        $(".wrapper--history-menu").insertAfter($(".mobile__button--play"));
      },
      unmatch: function () {
        $(".wrapper--history-menu").insertAfter(
          $(".caption__article-main-mobile--container")
        );
      },
    });
  }
  $(".js-playlist-show").on("click", function (e) {
    $(".content__main__book--item").toggleClass(
      "playlist--hidden playlist--show"
    );
    if ($(this).attr("data-mode") == 0) {
      $(this).attr("data-mode", 1);
      $.removeCookie("a_playlist_hide", { path: "/" });
      $("span", this).html("Ð¡ÐºÑ€Ñ‹Ñ‚ÑŒ Ð³Ð»Ð°Ð²Ñ‹");
      $(".wrapper--history-menu").insertAfter(
        $(".caption__article-main-mobile--container")
      );
      scrollToCurrentChapter(page_bid);
    } else {
      $(this).attr("data-mode", 0);
      $.cookie("a_playlist_hide", 1, { expires: 365, path: "/" });
      $("span", this).html("ÐŸÐ¾ÐºÐ°Ð·Ð°Ñ‚ÑŒ Ð¾Ð³Ð»Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ");
      $(".wrapper--history-menu").insertAfter($(".mobile__button--play"));
    }
  });
  $(".bookpage--chapters.player--chapters").attr("data-bid", page_bid);
  if (typeof biblio_id != "undefined") {
    var biblio_user_key = $("article").attr("data-shopkey") || null;
    if (typeof Biblio == "undefined") {
      if (window.location.search == "?biblio_test") {
        $.when(
          $.getScript("https://pub-cdn.bibliovk.ru/referals/wgt.js"),
          $.getScript(
            "/application/frontend/skin/acl/assets/js/player_biblio.js"
          ),
          $.Deferred(function (deferred) {
            $(deferred.resolve);
          })
        ).done(function () {
          init_player_biblio(page_bid, biblio_id, biblio_user_key);
        });
      } else {
        $.getScript("https://akniga.org/wgt1.js?v=20", function () {
          init_player_biblio(page_bid, biblio_id, biblio_user_key);
          if (
            biblio_user_key &&
            typeof $("article").attr("data-shopuserid") === "undefined" &&
            bo[page_bid]._bl != null
          ) {
            ls.ajax.load(
              aRouter["ajax"] + "setshopuserdata",
              { data: bo[page_bid]._bl.user_id },
              function () {},
              { showProgress: false }
            );
          }
        });
      }
    } else {
      init_player_biblio(page_bid, biblio_id, biblio_user_key);
    }
    return;
  }
  if ($(".jpl[data-bid=" + page_bid + "]")[0]) {
    animationUnloader(page_bid);
    init_buttons(page_bid);
    init_sliders_bookpage(page_bid);
    setChapters(page_bid, "book");
    $(".book-id-" + page_bid).removeClass("unloaded");
    if (isPaused(page_bid)) {
    } else {
      $(".book-id-" + page_bid + " .button__player--play").addClass("playing");
    }
    setCurrentChapter(
      page_bid,
      bookData[page_bid].chapterId,
      bookData[page_bid].items
    );
    changeDurationData(page_bid, player[page_bid].playbackRate);
    adoptButtons(page_bid);
    scrollToCurrentChapter(page_bid);
    setPercent(page_bid);
  } else if (page_bid != player_bid) {
    console.log("player init");
    loadBookData(page_bid, "book");
    init_sliders_bookpage(page_bid);
  }
  $(".jpl:not(.player,.empty)").each(function () {
    if ($(this).attr("data-bid") != page_bid) {
      var old_bid = $(this).attr("data-bid");
      player[old_bid].src = "";
      player[old_bid].load();
      $(this).remove();
      delete player[old_bid];
    }
  });
  if (isMobile) {
    $(".player__volume,.volume__hor").remove();
    $(".speed__hor").css("width", "80%");
    $(".player--buttons-book .player__timer").css("width", "16%");
    $(".menu__player--wrap .player__speed").css("width", "80px");
    $(".player--buttons-book").css("width", "62%");
  }
};
var init_sliders_bookpage = function (book_bid) {
  $(".content__main__book--item .volume__hor").slider({
    range: "min",
    value: user_volume * 100,
    classes: { "ui-slider-range": "volume__hor--track" },
    animate: "fast",
    slide: function (event, ui) {
      if (!player[book_bid]) {
        return;
      }
      var volume_value = ui.value.toFixed();
      player[book_bid].volume = volume_value / 100;
      if (player_bid) {
        if (player_bid != book_bid)
          player[player_bid].volume = volume_value / 100;
        $(".player__volume .player__slider").slider("value", volume_value);
      }
    },
  });
  $(".volume__hor .volume_value").html((user_volume * 100).toFixed() + "%");
  $(".content__main__book--item .volume__hor--value").html(
    (user_volume * 100).toFixed() + "%"
  );
  var user_rate =
    $.cookie("a_rate_" + book_bid) != null
      ? parseFloat($.cookie("a_rate_" + book_bid))
      : 1;
  $(".content__main__book--item .speed__hor").slider({
    range: "min",
    max: 2,
    min: 0,
    value: user_rate,
    step: 0.05,
    classes: { "ui-slider-range": "speed__hor--track" },
    animate: "fast",
    slide: function (event, ui) {
      if (!player[book_bid]) {
        return;
      }
      player[book_bid].playbackRate = ui.value;
      if (player_bid)
        $(".player__speed .player__slider").slider("value", ui.value);
    },
  });
  speed_init("article");
  $("article .player__timer").on("click", function (e) {
    e.stopPropagation();
    $(".mobile__popup--timer").addClass("open");
  });
  if ($(".book-id-" + book_bid + " .player__wrapper .player__timer.run")[0])
    $("article .player__timer").addClass("run");
  var rate_value = ((user_rate - 1) * 100).toFixed();
  if (rate_value == 0) {
  } else {
    $(".book-id-" + book_bid + " .speed_value").html(
      rate_value > 1 ? "+" + rate_value + "%" : rate_value + "%"
    );
  }
};
var setChapters = function (book_bid, insertPosition) {
  if (insertPosition == "player") {
    var parentClass = ".menu__player--content-chapters .global__popup--content";
    var bookPlaylist = $(
      ".bookpage--chapters.player--chapters[data-bid=" + book_bid + "]"
    );
    if ($(".chapter__default", bookPlaylist).attr("data-pos")) {
      console.log("bookPlaylist already loaded, copying");
      $(parentClass).html($(bookPlaylist).html());
      init_chapters(book_bid);
      return;
    } else {
      var chapterItems = $(parentClass + " .chapter__default");
      chapterItems.eq(0).removeClass("chapter__current");
      var chapterItem = chapterItems[0].outerHTML;
      chapterItems.remove();
      $.each(bookData[book_bid].items, function (index, value) {
        if (value.cat)
          $(parentClass).append(
            '<div class="folder_separator">' + value.cat + "</div>"
          );
        $(parentClass).append(chapterItem).html();
        var currentItem = $(parentClass + " .chapter__default").eq(index);
        currentItem.attr("data-pos", value.time - value.duration);
        currentItem.attr("data-id", index);
        $(
          ".chapter__default--title",
          $(parentClass + " .chapter__default").eq(index)
        ).html(value.title);
        $(
          ".chapter__default--time",
          $(parentClass + " .chapter__default").eq(index)
        ).html(secondsToHMS(value.duration));
      });
    }
  }
  init_chapters(book_bid);
};
var setCurrentChapter = function (book_bid, chapterIdNew, items) {
  var chapter_old = parseInt(
    $(".player--chapters[data-bid=" + book_bid + "] .chapter__current").attr(
      "data-id"
    )
  );
  var duration = items[chapterIdNew].duration;
  if (chapter_old != chapterIdNew) {
    $(".book-id-" + book_bid + " .player-time-current").text("00:00");
    $(".book-id-" + book_bid + " .progress__bar--player").slider("value", 0);
  }
  $(".book-id-" + book_bid + " .player-time-duration").text(
    secondsToHMS(duration)
  );
  var progress_bar = $(".book-id-" + book_bid + " .progress__bar--player");
  progress_bar.attr("data-pos-start", items[chapterIdNew].time_from_start);
  progress_bar.attr("data-pos-end", items[chapterIdNew].time_finish);
  var chaptersList = $(".player--chapters[data-bid=" + book_bid + "]");
  var chapter = $(
    ".player--chapters[data-bid=" +
      book_bid +
      "] .chapter__default[data-id=" +
      chapterIdNew +
      "]"
  );
  $(
    ".chapter__default--button, .chapter__default--progress, .chapter__default--time span",
    chaptersList
  ).remove();
  $(".chapter__current", chaptersList).removeClass("chapter__current");
  $(chapter).addClass("chapter__current");
  $(chapter).prepend(
    '<div class="chapter__default--button">' +
      (!isPaused(book_bid) ? icon_play : "") +
      "</div>"
  );
  $(chapter).append('<div class="chapter__default--progress"></div>');
  $(".chapter__default--time", chapter).prepend(
    '<span><span class="player-time-current">00:00</span> / </span>'
  );
  $(".book-id-" + book_bid + " .book--chapter-current-title").text(
    $(".chapter__default--title", chapter).first().text()
  );
  $(".book-id-" + book_bid + " .book--chapter-current").text(
    "Ð§Ð°ÑÑ‚ÑŒ " + (chapterIdNew + 1) + " Ð¸Ð· " + items.length
  );
  $(".book-id-" + book_bid + " .content__main__book--item--chapter span").text(
    chapterIdNew + 1
  );
  var playerSliders = $(
    ".book-id-" +
      book_bid +
      " .progress__bar--progress, .book-id-" +
      book_bid +
      " .progress__bar--player .progress__bar--pin"
  );
  if (items[chapterIdNew].duration < 100) {
    playerSliders.addClass("smooth-transition");
  } else {
    $(
      ".book-id-" +
        book_bid +
        " .progress__bar--progress, .book-id-" +
        book_bid +
        " .progress__bar--player .progress__bar--pin"
    ).removeClass("smooth-transition");
  }
  if (
    "mediaSession" in navigator &&
    navigator.mediaSession.metadata &&
    player_bid == book_bid &&
    bookData[book_bid].items.length > 1
  ) {
    navigator.mediaSession.metadata.artist = buildMediaSessionTitle(
      bookData[book_bid].items[chapterIdNew].title
    );
  }
};
var init_buttons = function (book_bid) {
  var items = bookData[book_bid].items;
  $(".book-id-" + book_bid + " .button__player--play")
    .off("click")
    .on("click", function (event) {
      event.preventDefault();
      event.stopPropagation();
      event.stopImmediatePropagation();
      if (book_bid == player_bid) {
        player[book_bid].paused
          ? player[book_bid].play()
          : player[book_bid].pause();
      } else {
        setPlayer(book_bid);
        player[book_bid].play();
      }
    });
  $(".book-id-" + book_bid + " .button__player--back")
    .off("click")
    .on("click", function (event) {
      event.preventDefault();
      event.stopPropagation();
      if (bookData[book_bid].chapterId == 0) {
        player[book_bid].currentTime = 0;
        return;
      }
      if (
        player[book_bid].currentTime >
          items[bookData[book_bid].chapterId].time_from_start + 5 &&
        items[bookData[book_bid].chapterId].file ==
          items[bookData[book_bid].chapterId - 1].file
      ) {
        var position = parseInt(
          $(
            $(".player--chapters[data-bid=" + book_bid + "] .chapter__default")[
              bookData[book_bid].chapterId
            ]
          ).attr("data-pos")
        );
      } else {
        var chapterIdNew = parseInt(bookData[book_bid].chapterId) - 1;
        var position = parseInt(
          $(
            $(".player--chapters[data-bid=" + book_bid + "] .chapter__default")[
              chapterIdNew
            ]
          ).attr("data-pos")
        );
      }
      loadPlayer(book_bid, position, "", isPaused(book_bid) ? "pause" : "play");
    });
  $(".book-id-" + book_bid + " .button__player--forward")
    .off("click")
    .on("click", function (event) {
      event.preventDefault();
      event.stopPropagation();
      if (bookData[book_bid].chapterId != items.length - 1) {
        var chapterIdNew = parseInt(bookData[book_bid].chapterId) + 1;
        var position = parseInt(
          $(
            $(".player--chapters[data-bid=" + book_bid + "] .chapter__default")[
              chapterIdNew
            ]
          ).attr("data-pos")
        );
        loadPlayer(
          book_bid,
          position,
          "",
          isPaused(book_bid) ? "pause" : "play"
        );
      }
    });
  $(".book-id-" + book_bid + " .button__player--back-text")
    .off("click")
    .on("click", function (event) {
      event.preventDefault();
      event.stopPropagation();
      playerRewind(book_bid);
    });
  $(".book-id-" + book_bid + " .button__player--forward-text")
    .off("click")
    .on("click", function (event) {
      event.preventDefault();
      event.stopPropagation();
      playerForward(book_bid);
    });
};
var init_sliders = function (book_bid) {
  $(".menu__player--block .progress__bar--player").slider({
    range: "min",
    value: 0,
    step: 0.001,
    classes: {
      "ui-slider": "",
      "ui-slider-handle": "progress__bar--pin",
      "ui-slider-range": "progress__bar--progress",
    },
    animate: false,
    slide: function (event, ui) {
      var pos_start = parseInt(
        $(".book-id-" + book_bid + " .progress__bar--player").attr(
          "data-pos-start"
        )
      );
      var pos_end = parseInt(
        $(".book-id-" + book_bid + " .progress__bar--player").attr(
          "data-pos-end"
        )
      );
      var pos_seek = pos_start + ((pos_end - pos_start) / 100) * ui.value;
      player[book_bid].currentTime = pos_seek;
      var seek =
        pos_seek -
        bookData[book_bid].items[bookData[book_bid].chapterId].time_from_start;
      $(".book-id-" + book_bid + " .player-time-current").html(
        secondsToHMS(parseInt(seek))
      );
    },
  });
  $(".player__volume .player__slider").slider({
    range: "min",
    orientation: "vertical",
    value: user_volume * 100,
    classes: { "ui-slider-range": "player__slider--value" },
    animate: "fast",
    slide: function (event, ui) {
      if (!player[book_bid]) {
        return;
      }
      var volume_value = ui.value.toFixed();
      player[book_bid].volume = volume_value / 100;
      if (page_bid) player[page_bid].volume = volume_value / 100;
      $(".volume__hor").slider("value", volume_value);
    },
  });
  $(".volume_value").html((user_volume * 100).toFixed() + "%");
  var user_rate =
    $.cookie("a_rate_" + book_bid) != null
      ? parseFloat($.cookie("a_rate_" + book_bid))
      : 1;
  $(".player__speed .player__slider").slider({
    range: "min",
    max: 2,
    min: 0,
    orientation: "vertical",
    value: user_rate,
    step: 0.05,
    classes: { "ui-slider-range": "player__slider--value" },
    animate: "fast",
    slide: function (event, ui) {
      if (!player[book_bid]) {
        return;
      }
      player[book_bid].playbackRate = ui.value;
      $(".book-id-" + book_bid + " .speed__hor").slider("value", ui.value);
    },
  });
  var rate_value = ((user_rate - 1) * 100).toFixed();
  if (rate_value == 0) {
    $(".book-id-" + book_bid + " .speed_value").html("1x");
    $(".js-topic .book-id-" + book_bid + " .speed__hor .speed_value").html(
      "Ð¡ÐºÐ¾Ñ€Ð¾ÑÑ‚ÑŒ"
    );
  } else {
    $(".book-id-" + book_bid + " .speed_value").html(
      rate_value > 1 ? "+" + rate_value + "%" : rate_value + "%"
    );
  }
};
var init_chapters = function (book_bid) {
  $(".player--chapters[data-bid=" + book_bid + "] .chapter__default")
    .off("click")
    .on("click", function (event) {
      event.stopPropagation();
      event.stopImmediatePropagation();
      var position = parseInt($(this).attr("data-pos"));
      var chapterIdNew = parseInt($(this).attr("data-id"));
      if (book_bid == player_bid) {
        if (bookData[book_bid].chapterId == chapterIdNew) {
          event.preventDefault();
          var pos_start =
            bookData[book_bid].items[chapterIdNew].time_from_start;
          var pos_end = bookData[book_bid].items[chapterIdNew].time_finish;
          var xPos =
            ((event.pageX - $(this).offset().left) / $(this).outerWidth()) *
            100;
          var seek = parseInt(pos_start + ((pos_end - pos_start) / 100) * xPos);
          player[book_bid].currentTime = seek;
          $(".book-id-" + book_bid + " .player-time-current").html(
            secondsToHMS(seek - pos_start)
          );
          $(".chapter__default--progress", this).css("width", xPos + "%");
        } else {
          loadPlayer(book_bid, position, "", "play");
        }
      } else {
        if (bookData[book_bid].chapterId != chapterIdNew) {
          loadPlayer(book_bid, position, "", "play");
        }
        setPlayer(book_bid);
        player[book_bid].play();
      }
    });
};
var pjax = "",
  window_width = 0,
  isPlayerInitDesktop = false,
  isPlayerInitMobile = false;
var themeSwitcher_init = function () {
  $(".button--night").on("click", function (e) {
    e.preventDefault();
    $("body").toggleClass("theme-night");
    var checkbox_onoff = $("#onoffnight");
    checkbox_onoff.prop("checked", !checkbox_onoff.prop("checked"));
    if ($("body").hasClass("theme-night")) {
      $(".mce-tinymce iframe,#chat")
        .contents()
        .find("body")
        .addClass("theme-night");
    } else {
      $(".mce-tinymce iframe,#chat")
        .contents()
        .find("body")
        .removeClass("theme-night");
    }
    $('meta[name="theme-color"]').attr(
      "content",
      $("body").hasClass("theme-night") ? "#1f2327" : "#426380"
    );
    $.cookie("a_nightmode", $("body").hasClass("theme-night"), {
      expires: 365,
      path: "/",
    });
  });
};
var switchUserColorScheme = function (type) {
  if (type == "dark") {
    $("body").addClass("theme-night");
    $("#onoffnight").prop("checked", true);
    $('meta[name="theme-color"]').attr("content", "#1f2327");
  } else {
    $("body").removeClass("theme-night");
    $("#onoffnight").prop("checked", false);
    $('meta[name="theme-color"]').attr("content", "#426380");
  }
};
var setupUserColorScheme = function () {
  const nightmode = $.cookie("a_nightmode");
  const media = window.matchMedia("(prefers-color-scheme: dark)");
  if (nightmode !== undefined) {
    switchUserColorScheme(nightmode == "true" ? "dark" : "light");
    return;
  }
  if (!window.matchMedia) return;
  if (media.matches) switchUserColorScheme("dark");
  media.addListener(function () {
    switchUserColorScheme(media.matches ? "dark" : "light");
  });
};
var showPopupWindow = function (e, classname) {
  e.stopPropagation();
  e.stopImmediatePropagation();
  e.preventDefault();
  $("body").addClass("no-overflow");
  $("." + classname).addClass("open");
  $("." + classname)
    .parent()
    .find(".global__popup")
    .addClass("open");
};
var desktop_player_init = function () {
  if (isPlayerInitDesktop == true) return;
  isPlayerInitDesktop = true;
  ls.auth.init();
  searchform_init();
  themeSwitcher_init();
  $(".player__volume, .player__speed").on("click", function (e) {
    e.stopPropagation();
    $(".user--name,.menu__user").removeClass("open");
    $(this).toggleClass("active");
  });
  $(".mobile__popup--timer").on("click", function (e) {
    e.stopPropagation();
    $(".mobile__popup--timer").removeClass("open");
  });
  $(".menu__player--block,.mobile__popup--content").on("click", function (e) {
    e.stopPropagation();
    e.stopImmediatePropagation();
  });
  $(".player__desktop").on("click", function (e) {
    e.stopPropagation();
    $(".player__volume,.player__speed").removeClass("active");
    $(".menu__player--block").toggleClass("open");
    $(".search__content").removeClass("open");
  });
  $(".menu__player--content .button__open").on("click", function (e) {
    e.stopPropagation();
    $(this).toggleClass("open");
    $(".menu__player--content-chapters")
      .toggleClass("open")
      .scrollTo(
        $(".menu__player--content-chapters .chapter__current").get(0).offsetTop,
        100
      );
  });
  $(".js-button-login").on("click", function (event) {
    showPopupWindow(event, "global__popup--auth");
  });
  $(document).on("click", function () {
    close_elements();
  });
  playerShortcuts();
  timer_init();
  setupUserColorScheme();
  $(".js-side-hide").on("click", function (e) {
    $("body").toggleClass("layout--side-folded");
    $.cookie("a_sidehide", $("body").hasClass("layout--side-folded") ? 1 : 0, {
      expires: 365,
      path: "/",
    });
  });
};
var mobile_player_init = function () {
  if (isPlayerInitMobile == true) return;
  isPlayerInitMobile = true;
  ls.auth.init();
  $(".player__wrapper--fade").on("click touchmove", function (e) {
    if ($("body").hasClass("player-open")) {
      close_popups();
    }
  });
  $(document).on("click", function () {
    $(".wrapper--history-menu,.ls-comment-more").removeClass("open");
  });
  themeSwitcher_init();
  $(".menu__mobile").on("click", function () {
    $("#menu__mobile,.menu__mobile").toggleClass("open");
    $(".container__side").removeClass("open");
    $("body").toggleClass("no-overflow");
  });
  $("#menu__mobile").on("click", function (e) {
    if ($(e.target).is("#menu__mobile")) {
      $("#menu__mobile,.menu__mobile").removeClass("open");
      $("body").removeClass("no-overflow");
    }
  });
  $(".button-comments").on("click", function () {
    $(".container__side").toggleClass("open");
    $("#menu__mobile,.menu__mobile").removeClass("open");
    $(".container__side--wrapper").scrollTop(0);
    $("body").toggleClass("no-overflow");
  });
  $(".container__side--button--close").on("click", function () {
    close_popups();
  });
  $(".menu__player--content-chapters,.mobile__popup--speed").on(
    "touchmove",
    function (e) {
      e.stopPropagation();
    }
  );
  $(".mobile__button--close--chapters").on("click", function (e) {
    e.stopPropagation();
    $(".player__wrapper--bar").removeClass("hidden");
    $("body").removeClass("no-overflow");
    $(".menu__player--content-chapters").removeClass("open");
  });
  $(
    ".mobile__popup--button--save,.mobile__button--close, .mobile__popup--speed,.mobile__popup--timer"
  ).on("click", function (e) {
    e.stopPropagation();
    $(".mobile__popup--speed,.mobile__popup--timer").removeClass("open");
  });
  $(".mobile__popup--content").on("click", function (e) {
    e.stopPropagation();
  });
  $(".menu__player--wrapper").on("click touchmove", function (e) {
    if ($(this).hasClass("open")) {
      e.preventDefault();
      e.stopPropagation();
    }
  });
  $(".js-close-player").on("click", function (e) {
    e.stopPropagation();
    if (
      confirm(
        "Ð—Ð°ÐºÑ€Ñ‹Ñ‚ÑŒ Ð¿Ð»ÐµÐµÑ€ Ð¸ Ð¾ÑÑ‚Ð°Ð½Ð¾Ð²Ð¸Ñ‚ÑŒ Ð¿Ñ€Ð¾ÑÐ»ÑƒÑˆÐ¸Ð²Ð°Ð½Ð¸Ðµ?"
      )
    ) {
      unloadPlayer();
      $.removeCookie("a_lastbid", { path: "/" });
    }
  });
  $(
    ".player__wrapper--bar .button__player--play,.player__wrapper--bar .button__player"
  ).on("touchstart", function (e) {
    e.stopPropagation();
  });
  $(".player__wrapper--bar").on("click", function (e) {
    e.preventDefault();
    $("#menu__mobile,.menu__mobile,.container__side").removeClass("open");
    $(".player__wrapper--bar").toggleClass("buttons-open");
    $(".menu__player--wrapper").toggleClass("open");
    $("body").toggleClass("player-open");
    $("body").toggleClass("no-overflow");
  });
  searchform_init();
  $(".js-button-login").on("click", function (event) {
    showPopupWindow(event, "global__popup--auth");
  });
  if (document.body.classList.contains("layout--user-role-user")) {
    $(document).on("touchmove", function () {
      $(".wrapper--history-menu").removeClass("open");
    });
  }
  timer_init();
  speed_init(".menu__player--wrapper");
  setupUserColorScheme();
  document.addEventListener("visibilitychange", handleVisibilityChange, false);
};
var timer_init = function () {
  $(".menu__player--wrapper .player__timer").on("click", function (e) {
    e.stopPropagation();
    $(".mobile__popup--timer").addClass("open");
  });
  $(".timer__control").on("click", function (e) {
    e.stopPropagation();
    e.stopImmediatePropagation();
    var value_hours = parseInt($(".timer__hours").attr("data-val")),
      value_minutes = parseInt($(".timer__minutes").attr("data-val")),
      total_minutes = value_minutes + value_hours * 60;
    if ($(this).parent().hasClass("timer__minutes")) {
      total_minutes =
        $(this).attr("val") == "plus" ? total_minutes + 5 : total_minutes - 5;
    } else {
      total_minutes =
        $(this).attr("val") == "plus" ? total_minutes + 60 : total_minutes - 60;
    }
    if (total_minutes <= 0) return;
    value_hours = Math.floor(total_minutes / 60);
    value_minutes = total_minutes % 60;
    $(".timer__hours").attr("data-val", value_hours);
    $(".timer__hours .timer__text").html(
      value_hours +
        "<span>" +
        ls.i18n
          .pluralize(value_hours, "time.hours_declension")
          .replace(/\d+/g, "") +
        "</span>"
    );
    $(".timer__minutes").attr("data-val", value_minutes);
    $(".timer__minutes .timer__text").html(
      value_minutes +
        "<span>" +
        ls.i18n
          .pluralize(value_minutes, "time.minutes_declension")
          .replace(/\d+/g, "") +
        "</span>"
    );
  });
  $(".mobile__popup--timer .mobile__popup--content--button").on(
    "click",
    function (e) {
      if ($(this).hasClass("button-start")) {
        var total_minutes =
          parseInt($(".timer__minutes").attr("data-val")) +
          parseInt($(".timer__hours").attr("data-val")) * 60;
        timerDuration = total_minutes * 60 * 1000;
        $(".mobile__popup--timer,.player__timer").addClass("run");
        if (player_bid && player[player_bid] && !player[player_bid].paused) {
          window.timer = new setTimer(function () {
            player[player_bid].pause();
            removeTimer(player_bid);
          }, timerDuration);
        }
        if (
          player_bid &&
          bo[player_bid] &&
          bo[player_bid].getPlayerState() == "playing"
        ) {
          window.timer = new setTimer(function () {
            bo[player_bid].pause();
            removeTimer(player_bid);
          }, timerDuration);
        }
        $(this)
          .removeClass("button-start")
          .addClass("button-stop")
          .html("Ð¡Ð±Ñ€Ð¾ÑÐ¸Ñ‚ÑŒ Ñ‚Ð°Ð¹Ð¼ÐµÑ€");
      } else {
        removeTimer(player_bid);
      }
    }
  );
};
var speed_init = function (element) {
  $(element + " .player__speed")
    .off("click")
    .on("click", function (e) {
      e.stopPropagation();
      var book_bid = $(this).attr("data-bid");
      var popup = $(".mobile__popup--speed");
      if (
        typeof popup.slider() !== "undefined" ||
        popup.attr("data-bid") != book_bid
      )
        popup.slider("destroy");
      popup.attr("data-bid", book_bid);
      var book_bid = $(this).attr("data-bid");
      var book_rate = user_rates[book_bid] || 1;
      var rate_value = ((book_rate - 1) * 100).toFixed();
      if (rate_value == 0) {
        $(".speed_value", popup).html("1x");
      } else {
        $(".speed_value", popup).html(
          rate_value > 1 ? "+" + rate_value + "%" : rate_value + "%"
        );
      }
      $(".mobile__popup--speed--slider").slider({
        range: "min",
        max: 2,
        min: 0.1,
        value: book_rate,
        step: 0.05,
        classes: { "ui-slider-handle": "progress__bar--pin" },
        animate: "fast",
        slide: function (event, ui) {
          if (player[book_bid]) {
            player[book_bid].playbackRate = ui.value;
          } else if (bo[book_bid]) {
            bo[book_bid].setPlaybackRate(ui.value);
          } else {
            return;
          }
          $(".book-id-" + book_bid + " .speed__hor").slider("value", ui.value);
        },
      });
      $(".speed__control")
        .off("click")
        .on("click", function () {
          var speed = $(this).attr("val") == "plus" ? 0.05 : -0.05;
          user_rates[book_bid] = parseFloat(user_rates[book_bid]) + speed;
          $(".speed__control").removeClass("speed-max");
          if (user_rates[book_bid] <= 0.5) {
            user_rates[book_bid] = 0.5;
            $(this).addClass("speed-max");
          }
          if (user_rates[book_bid] >= 2) {
            user_rates[book_bid] = 2;
            $(this).addClass("speed-max");
          }
          if (player[book_bid]) {
            player[book_bid].playbackRate = user_rates[book_bid];
          } else if (bo[book_bid]) {
            bo[book_bid].setPlaybackRate(user_rates[book_bid]);
          } else {
            return;
          }
          $(".mobile__popup--speed--slider").slider(
            "value",
            user_rates[book_bid]
          );
        });
      $(".mobile__popup--speed").addClass("open");
    });
};
function searchform_init() {
  $(".menu__search input").on("click", function (e) {
    e.stopPropagation();
    e.stopImmediatePropagation();
    if (!$(this).parent().hasClass("active")) {
      $(this).parent().toggleClass("active");
      $(this).parent().find("input").focus();
    }
    if ($(this).val().length > 0) {
      $(".search__content").addClass("open");
    }
    $(".menu__player--block").removeClass("open");
  });
  $(".menu__search .button-search").on("click", function (e) {
    e.stopPropagation();
    e.stopImmediatePropagation();
    if (!$(this).parent().hasClass("active")) {
      $(this).parent().addClass("active");
      $(this).parent().find("input").focus();
      e.preventDefault();
    }
  });
  $(".js-menu-search input").on("keyup", function () {
    if ($(this).val().length > 0) {
      ls.ajax.load(
        aRouter["ajax"] + "search_content",
        { sText: $(this).val() },
        function (result) {
          if (result.html) {
            $(".search__content").addClass("open");
            $(".search__content").empty().append(result.html);
            pjax.refresh(document.querySelector(".search__content"));
          }
        },
        { showProgress: false }
      );
    } else {
      $(".search__content").empty().removeClass("open");
    }
  });
  $(".menu__search .button-close").on("click", function () {
    $(".search__content").removeClass("open");
    $(this).parent().removeClass("active");
  });
  $(".search__content").on("click", function (e) {
    e.stopPropagation();
    if ($(e.target).hasClass("search__content")) {
      $(this).removeClass("open");
    }
  });
  $(".js-menu-search").on("submit", function (e) {
    $(this).removeClass("open");
  });
}
function close_elements() {
  if ($(".menu__player--block").hasClass("open")) {
    $(
      ".menu__player--block,.menu__player--content .button__open,.menu__player--content-chapters"
    ).removeClass("open");
  }
  $(
    ".user--name,.menu__user,.wrapper--history-menu,.ls-comment-more,.global__popup,.global__popup--chapter,.global__popup--window,.search__content"
  ).removeClass("open");
  $(".menu__search,.player__volume,.player__speed").removeClass("active");
  $("body").removeClass("no-overflow");
  $("main").removeClass("onfront");
}
var close_popups = function () {
  $("body").removeClass("no-overflow player-open");
  $("main").removeClass("onfront");
  $(".player__wrapper--bar").removeClass("buttons-open hidden");
  $(
    "#menu__mobile,.menu__mobile,.container__side,.popup .open,.menu__player--wrapper,.menu__player--block,.menu__player--content-chapters,.mobile__popup--speed,.mobile__popup--timer,.search__content"
  ).removeClass("open");
};
function handleVisibilityChange() {
  if (document.hidden) {
    close_popups();
  } else {
    if ($.isNumeric(player_bid) && typeof setPercent !== "undefined")
      setPercent(player_bid);
    if (player[player_bid] !== undefined) {
      scrollToCurrentChapter(player_bid);
    } else if (typeof bo !== "undefined" && bo[player_bid] !== undefined) {
      b_setCurrentChapter(
        player_bid,
        bo[player_bid].getCurrentTrack(),
        bo[player_bid].getTracksMeta()
      );
      scrollToCurrentChapter(player_bid);
    }
  }
}
var initialize = function () {
  ls.hook.run("ls_template_init_start", [], window);
  ls.init({ production: true });
  ls.dev.init();
  $(".js-form-validate").parsley();
  $(".js-search-hideable").lsSearchHideable();
  $(".ls-nav--root.ls-nav--pills > .ls-nav-item--has-children").lsDropdown({
    selectors: {
      toggle: "> .ls-nav-item-link",
      text: "> .ls-nav-item-link > .ls-nav-item-text",
      menu: "> .ls-nav--sub",
    },
    selectable: true,
  });
  $(".js-confirm-remove-default").livequery(function () {
    $(this).lsConfirm({ message: ls.lang.get("common.remove_confirm") });
  });
  ls.notification.init();
  $(".js-modal-default").lsModal();
  $(".js-modal-toggle-default").lsModalToggle();
  $(".js-details-default").lsDetails();
  $(".js-dropdown-default").livequery(function () {
    $(this).lsDropdown();
  });
  $(".js-toggle-abc").on("click", function () {
    $(".icon-arrow", this).toggleClass("icon-arrow-up");
    $(this).next(".list-inline").toggle();
  });
  $(".js-field-geo-default").lsFieldGeo({
    urls: {
      regions: aRouter.ajax + "geo/get/regions/",
      cities: aRouter.ajax + "geo/get/cities/",
    },
  });
  $(".js-field-date-default").livequery(function () {
    $(this).lsDate({ language: LANGUAGE });
  });
  $(".js-field-time-default").livequery(function () {
    $(this).lsTime();
  });
  $(".js-alert").lsAlert();
  if (!isMobile) {
    $(".ls-tooltip").remove();
    $(".js-title-topic").lsTooltip({
      position: { my: "right-15 center", at: "left center" },
      show: { delay: 1500 },
    });
  }
  $(".autocomplete-tags").lsAutocomplete({
    multiple: false,
    urls: { load: aRouter.ajax + "autocompleter/tag/" },
  });
  $(".autocomplete-tags-sep").lsAutocomplete({
    multiple: true,
    urls: { load: aRouter.ajax + "autocompleter/tag/" },
  });
  $(".autocomplete-authors-sep").lsAutocomplete({
    multiple: true,
    urls: { load: aRouter.ajax + "autocompleter/author/" },
  });
  $(".autocomplete-performers-sep").lsAutocomplete({
    multiple: true,
    urls: {
      load:
        aRouter.ajax +
        "autocompleter/performer" +
        ($(".js-reader-ai input").is(":checked") ? "-ai/" : "/"),
    },
  });
  $(".autocomplete-users").lsAutocomplete({
    multiple: false,
    urls: { load: aRouter.ajax + "autocompleter/user/" },
  });
  $(".autocomplete-users-sep").lsAutocomplete({
    multiple: true,
    urls: { load: aRouter.ajax + "autocompleter/user/" },
  });
  $(".autocomplete-booktitle-sep").lsAutocomplete({
    multiple: true,
    urls: { load: aRouter.ajax + "autocompleter/book_title/" },
  });
  $(".autocomplete-bookseries-sep").lsAutocomplete({
    multiple: true,
    urls: { load: aRouter.ajax + "autocompleter/book_series/" },
  });
  $(".autocomplete-property-tags").each(function (k, v) {
    $(v).lsAutocomplete({
      multiple: false,
      urls: { load: aRouter.ajax + "property/tags/autocompleter/" },
      params: { property_id: $(v).data("propertyId") },
    });
  });
  $(".autocomplete-property-tags-sep").each(function (k, v) {
    $(v).lsAutocomplete({
      multiple: true,
      urls: { load: aRouter.ajax + "property/tags/autocompleter/" },
      params: { property_id: $(v).data("propertyId") },
    });
  });
  $(".js-block-default").lsBlock();
  $(".js-activity--all").lsActivity({
    urls: { more: aRouter.stream + "get_more_all" },
  });
  $(".js-activity--user").lsActivity({
    urls: { more: aRouter.stream + "get_more_user" },
  });
  $(".js-activity--personal").lsActivity({
    urls: { more: aRouter.stream + "get_more_personal" },
    create: function () {
      $(".js-activity-settings").lsActivitySettings({
        urls: { toggle_type: aRouter.stream + "switchEventType" },
      });
      $(".js-activity-users").lsUserListAdd({
        urls: {
          add: aRouter.stream + "ajaxadduser",
          remove: aRouter.stream + "ajaxremoveuser",
          list: aRouter.ajax + "modal-friend-list",
        },
      });
    },
  });
  $(".js-feed-blogs").lsFeedBlogs({
    urls: {
      subscribe: aRouter.feed + "subscribe",
      unsubscribe: aRouter.feed + "unsubscribe",
    },
  });
  $(".js-feed-users").lsUserListAdd({
    urls: {
      add: aRouter.feed + "ajaxadduser",
      remove: aRouter.feed + "unsubscribe",
      list: aRouter.ajax + "modal-friend-list",
    },
  });
  $(".js-search-ajax-users").lsSearchAjax({
    urls: { search: aRouter.people + "ajax-search/" },
    i18n: { title: ls.lang.get("user.search.result_title") },
    selectors: {
      list: ".js-more-users-container",
      more: ".js-more-search",
      title: "@.js-user-list-search-title",
    },
    filters: [
      { type: "text", name: "sText", selector: ".js-search-text-main" },
      { type: "radio", name: "sex", selector: ".js-search-ajax-user-sex" },
      {
        type: "checkbox",
        name: "is_online",
        selector: ".js-search-ajax-user-online",
      },
      { type: "sort", name: "sort_by", selector: ".js-search-sort-menu li" },
      { type: "select", name: "country", selector: ".js-field-geo-country" },
      { type: "select", name: "region", selector: ".js-field-geo-region" },
      { type: "select", name: "city", selector: ".js-field-geo-city" },
    ],
    afterupdate: function (event, data) {
      data.context.getElement("more").lsMore("option", "params.next_page", 2);
    },
  });
  $(".js-user-follow").lsUserFollow({
    urls: {
      follow: aRouter["stream"] + "ajaxadduser/",
      unfollow: aRouter["stream"] + "ajaxremoveuser/",
    },
  });
  $(".js-user-friend").lsUserFriend({
    urls: {
      add: aRouter.profile + "ajaxfriendadd/",
      remove: aRouter.profile + "ajaxfrienddelete/",
      accept: aRouter.profile + "ajaxfriendaccept/",
      modal: aRouter.profile + "ajax-modal-add-friend",
    },
  });
  $(".js-biblio-subscribe").on("click", function (e) {
    e.preventDefault();
    e.stopPropagation();
    showPopupWindow(e, "global__popup--subscribe");
  });
  $(".js-biblio-subscribe-go").on("click", function (e) {
    var type = $(
      ".global__popup--subscribe .subscription--list input:checked"
    ).val();
    ls.ajax.load(
      aRouter["paid"] + "subscribe",
      { type: type, url: window.location.href },
      function () {}
    );
  });
  $(".js-user-fields").lsUserFields();
  $(".js-photo-actions-upload-input").on("change", function (e) {
    if (!e.target.files.length) {
      return;
    }
    if (e.target.files[0].size > 5 * 1024 * 1024) {
      ls.notification.show(
        "Ð¤Ð°Ð¹Ð» ÑÐ»Ð¸ÑˆÐºÐ¾Ð¼ Ð±Ð¾Ð»ÑŒÑˆÐ¾Ð¹",
        "Ð¤Ð°Ð¹Ð» ÑÐ»Ð¸ÑˆÐºÐ¾Ð¼ Ð±Ð¾Ð»ÑŒÑˆÐ¾Ð¹"
      );
      $(".js-photo-actions-upload-input").val("");
      return;
    }
    if (!e.target.files[0].type.match("image.*")) {
      ls.notification.show(
        "Ð¤Ð¾Ñ€Ð¼Ð°Ñ‚ Ñ„Ð°Ð¹Ð»Ð° Ð½Ðµ Ð¿Ð¾Ð´Ð´ÐµÑ€Ð¶Ð¸Ð²Ð°ÐµÑ‚ÑÑ",
        "Ð¤Ð¾Ñ€Ð¼Ð°Ñ‚ Ñ„Ð°Ð¹Ð»Ð° Ð½Ðµ Ð¿Ð¾Ð´Ð´ÐµÑ€Ð¶Ð¸Ð²Ð°ÐµÑ‚ÑÑ"
      );
      $(".js-photo-actions-upload-input").val("");
      return;
    }
    var formData = new FormData();
    formData.append("file", e.target.files[0]);
    formData.append("security_ls_key", LIVESTREET_SECURITY_KEY);
    formData.append("target_id", $(".user-info-avatar").data("target-id"));
    $.ajax({
      url: aRouter["settings"] + "ajax-add-photo",
      type: "POST",
      data: formData,
      contentType: false,
      processData: false,
      success: function (data) {
        if (data.photo) $(".js-photo-image").attr("src", data.photo);
        if (data.sMsg) ls.notification.show(data.sMsg, data.sMsg);
        $(".js-photo-actions-upload-input").val("");
      },
      error: function () {
        $(".js-photo-actions-upload-input").val("");
      },
    });
  });
  $(".js-photo-actions-remove").on("click", function (e) {
    e.preventDefault();
    var target_id = $(".js-user-photo").data("target-id");
    if (confirm("Ð£Ð´Ð°Ð»Ð¸Ñ‚ÑŒ Ð°Ð²Ð°Ñ‚Ð°Ñ€?")) {
      ls.ajax.load(
        aRouter["settings"] + "ajax-remove-photo",
        { target_id: target_id },
        function (data) {
          if (data.photo) {
            $(".js-photo-image").attr("src", data.photo);
          }
        },
        { showProgress: false }
      );
    }
  });
  $(".js-talk-list").lsTalkList();
  $(".js-talk-add-user-choose").lsUserFieldChoose({
    urls: { modal: aRouter.ajax + "modal-friend-list" },
  });
  $(".js-talk-search-form").lsDetails();
  $(".js-favourite-talk").lsFavourite({
    urls: { toggle: aRouter["ajax"] + "favourite/talk/" },
  });
  $(".js-favourite-topic").lsFavourite({
    urls: { toggle: aRouter["ajax"] + "favourite/topic/" },
  });
  $(".js-favourite-author").lsFavourite({
    urls: { toggle: aRouter["ajax"] + "favourite/author/" },
  });
  $(".js-favourite-performer").lsFavourite({
    urls: { toggle: aRouter["ajax"] + "favourite/performer/" },
  });
  $(".js-vote-topic").lsVote({
    urls: { vote: aRouter["ajax"] + "vote/topic/" },
  });
  $(".js-vote-author").lsVote({
    urls: { vote: aRouter["ajax"] + "vote/author/" },
  });
  $(".js-vote-performer").lsVote({
    urls: { vote: aRouter["ajax"] + "vote/performer/" },
  });
  $(".table-authors").on("click", "tbody tr", function (e) {
    e.preventDefault();
    var url = $(this).find(".cell-name a").attr("href");
    if (url) {
      pjax.loadUrl(url);
    }
  });
  commentsInit();
  if ($(".js-topic-comments")[0]) {
    if ($(".js-topic-comments").hasClass("comments-loaded")) {
      sortComments();
      setTimeout(function () {
        scrollToComment(window.location.search);
      }, 2000);
    } else {
      ls.ajax.load(
        aRouter["ajax"] + "comment/load_list",
        { target_id: parseInt($("#comments").attr("data-target-id")) },
        function (result) {
          if (result.sText) {
            $(".js-comment-list").append(result.sText);
            $("#comments").addClass("comments-loaded");
            $("#comments").attr("data-comment-last-id", result.lastCommentId);
            sortComments();
            setTimeout(function () {
              scrollToComment(window.location.search);
            }, 1000);
            commentsInit(location.hash);
            var newLazyLoadComments = new LazyLoad({
              elements_selector: "#comments .lazy",
            });
            pjax.refresh();
            newCommentsFadeInit();
          }
        },
        { showProgress: false }
      );
    }
  }
  $(".js-sort-comments").on("click", function (e) {
    e.preventDefault();
    var type = $(this).data("type");
    sortComments(type);
    $.cookie("a_commentsort", type, { expires: 365, path: "/" });
  });
  $(".js-talk-message-root-favourite").on("click", function (event) {
    if (event.target == event.currentTarget) {
      $(this).find(".js-favourite-talk").lsFavourite("toggle");
    }
  });
  $(".js-message-users").lsTalkUsers();
  $(".js-user-list-add-blacklist").lsUserListAdd({
    urls: {
      add: aRouter["talk"] + "ajaxaddtoblacklist/",
      remove: aRouter["talk"] + "ajaxdeletefromblacklist/",
      list: aRouter.ajax + "modal-friend-list",
    },
  });
  $(".js-activate-talk-button").on("click", function (e) {
    e.preventDefault();
    var checkbox = $(this).find('input[type="checkbox"]');
    var isActive = checkbox.prop("checked");
    ls.ajax.load(
      aRouter["talk"] + "ajax_talkactivate",
      { isActive: isActive ? 0 : 1 },
      function (result) {
        checkbox.prop("checked", result.isActive == 1 ? true : false);
      },
      { showProgress: true }
    );
  });
  if ($(".js-activity-feed-settings")[0]) {
    $(".js-activity-feed-settings").lsFeedSettings({
      urls: { toggle_type: aRouter.stream + "switchEventType" },
    });
  }
  $(".js-reader-ai input").on("change", function () {
    var infoDiv = $(".js-reader-ai-info");
    var readerInput = $(".autocomplete-performers-sep");
    if (this.checked == true) {
      infoDiv.removeClass("hidden");
      readerInput.attr("placeholder", "Ð’Ð²ÐµÐ´Ð¸Ñ‚Ðµ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ðµ Ð˜Ð˜");
      readerInput.lsAutocomplete("destroy");
      readerInput.lsAutocomplete({
        multiple: true,
        urls: { load: aRouter.ajax + "autocompleter/performer-ai/" },
      });
    } else {
      infoDiv.addClass("hidden");
      readerInput.attr("placeholder", "Ð’Ð²ÐµÐ´Ð¸Ñ‚Ðµ Ñ„Ð°Ð¼Ð¸Ð»Ð¸ÑŽ Ð¸ Ð¸Ð¼Ñ");
      readerInput.lsAutocomplete("destroy");
      readerInput.lsAutocomplete({
        multiple: true,
        urls: { load: aRouter.ajax + "autocompleter/performer/" },
      });
    }
  });
  $.livestreet.lsEditorVisual.prototype.options.sets.common.content_css =
    PATH_SKIN + "/components/editor/css/tinymce-content.css";
  $(".js-editor-default").lsEditor();
  $(".js-blog-join").livequery(function () {
    $(this).lsBlogJoin({
      urls: { toggle: aRouter.blog + "ajaxblogjoin" },
      classes: { loading: ls.options.classes.states.loading },
    });
  });
  $(".js-blog-profile-join").lsBlogJoin({
    urls: { toggle: aRouter.blog + "ajaxblogjoin" },
    selectors: { text: "a" },
    classes: { active: "active" },
  });
  $(".js-search-ajax-blog").lsSearchAjax({
    urls: { search: aRouter.blogs + "ajax-search/" },
    i18n: { title: ls.lang.get("blog.search.result_title") },
    selectors: {
      list: ".js-more-blogs-container",
      more: ".js-more-search",
      title: "@.js-blog-list-search-title",
    },
    filters: [
      { type: "text", name: "sText", selector: ".js-search-text-main" },
      { type: "radio", name: "type", selector: ".js-search-ajax-blog-type" },
      {
        type: "radio",
        name: "relation",
        selector: ".js-search-ajax-blog-relation",
      },
      {
        type: "list",
        name: "category",
        selector: "#js-search-ajax-blog-category li",
      },
      { type: "sort", name: "sort_by", selector: ".js-search-sort-menu li" },
    ],
    afterupdate: function (event, data) {
      data.context.getElement("more").lsMore("option", "params.next_page", 2);
    },
  });
  $(".js-search-ajax-author").lsSearchAjax({
    urls: { search: aRouter.authors + "ajax-search/" },
    i18n: { title: ls.lang.get("author.search.result_title") },
    selectors: {
      list: ".js-more-author-container",
      more: ".js-more-search",
      title: "@.js-author-list-search-title",
    },
    filters: [
      { type: "text", name: "sText", selector: ".js-search-text-main" },
      { type: "sort", name: "sort_by", selector: ".js-search-sort-menu li" },
    ],
    afterupdate: function (event, data) {
      data.context.getElement("more").lsMore("option", "params.next_page", 2);
      $(".paging").hide();
    },
  });
  $(".js-search-ajax-performer").lsSearchAjax({
    urls: { search: aRouter.performers + "ajax-search/" },
    i18n: { title: ls.lang.get("performer.search.result_title") },
    selectors: {
      list: ".js-more-performer-container",
      more: ".js-more-search",
      title: "@.js-performer-list-search-title",
    },
    filters: [
      { type: "text", name: "sText", selector: ".js-search-text-main" },
      { type: "sort", name: "sort_by", selector: ".js-search-sort-menu li" },
    ],
    afterupdate: function (event, data) {
      data.context.getElement("more").lsMore("option", "params.next_page", 2);
      $(".paging").hide();
    },
  });
  $(".js-topic").lsTopic();
  $("#topic-add-form").lsTopicAdd({
    max_blog_count: ls.registry.get("topic_max_blog_count"),
  });
  $(".js-pagination-topics").lsPagination({
    hash: { next: "goTopic=first", prev: "goTopic=last" },
  });
  $(".js-comments-talk").lsComments({
    urls: {
      add: aRouter["talk"] + "ajaxaddcomment/",
      load: aRouter["talk"] + "ajaxresponsecomment/",
    },
  });
  $(".js-random-settings").lsRandomSettings();
  var mobile_controls_init = false;
  var desktop_controls_init = false;
  window_width = window.innerWidth;
  var resizing = function (width, old_width) {
    if (
      old_width !== undefined &&
      ((old_width < 769 && width < 769) || (old_width > 768 && width > 768))
    )
      return;
    cover_adjust(width);
    $(".mobile__popup--speed,.mobile__popup--timer").removeClass("open");
    if (desktop_controls_init == false && width > 768) {
      desktop_controls_init = true;
      desktop_player_init();
      if (!$(".updown").data("defined")) {
        $(".updown .icon").addClass("icon-arrow-up");
        var scrollDirection = "up",
          isScrolling = false;
        (scrollPos = 0),
          (backToTop = function () {
            var scrollTop = $(window).scrollTop();
            if (scrollDirection == "down") {
              if (!isScrolling && scrollTop > 100) {
                scrollDirection = "up";
                $(".updown .icon").addClass("icon-arrow-up");
                scrollPos = 0;
              }
              return;
            }
            if (scrollTop > 100) {
              $(".updown").addClass("updown--shown");
            } else {
              $(".updown").removeClass("updown--shown");
            }
          });
        backToTop();
        window.addEventListener(
          "scroll",
          function () {
            backToTop();
          },
          { passive: true }
        );
        $(".updown").on("click", function (e) {
          e.preventDefault();
          e.stopPropagation();
          isScrolling = true;
          $(".updown .icon").toggleClass("icon-arrow-up");
          scrollDirection = $(".updown .icon").hasClass("icon-arrow-up")
            ? "up"
            : "down";
          $("html,body").animate({ scrollTop: scrollPos }, 500, function () {
            isScrolling = false;
          });
          if (scrollDirection == "down") {
            scrollPos = $(document).scrollTop();
          } else {
            scrollPos = 0;
          }
        });
        $(".updown").data("defined", true);
      }
      if (!$(".carousel-comments").hasClass("slick-initialized")) {
        $(".carousel-comments").slick({
          arrows: true,
          prevArrow: $(".slick-prev"),
          nextArrow: $(".slick-next"),
        });
      }
    }
    if (mobile_controls_init == false && width < 769) {
      mobile_controls_init = true;
      mobile_player_init();
      window.addEventListener(
        "scroll",
        function () {
          $(".scroll-to-top").css({
            opacity: $(window).scrollTop() > 200 ? 1 : 0,
          });
        },
        { passive: true }
      );
      $(".scroll-to-top").on("click", function (e) {
        close_popups();
        $("html,body").animate({ scrollTop: 0 }, 150, function () {
          $(".scroll-to-top").css({ opacity: 0 });
        });
      });
      $(".user-profile-friends")
        .insertAfter($(".user-profile-subscriptions"))
        .addClass("content__main__articles--item")
        .show();
    }
    enquire.register("screen and (min-width:769px)", {
      match: function () {
        $("#menu__mobile,.container__side").removeClass("open");
        $(".menu__player--wrapper").insertAfter($("header .menu__nav"));
      },
      unmatch: function () {
        $(".menu__player--wrapper").insertAfter($(".player__wrapper--bar"));
      },
    });
    enquire.register("screen and (max-width:769px)", {
      match: function () {
        $(".player__title--small").on("click", function (e) {
          e.preventDefault();
          e.stopPropagation();
          $(".menu__player--content-chapters").addClass("open");
          $("body").addClass("no-overflow");
          $(".global__popup--content").scrollTo(
            $(".chapter__current").get(0).offsetTop - 95,
            100
          );
          $(".player__wrapper--bar").addClass("hidden");
        });
      },
      unmatch: function () {
        $(".player__title--small").off("click");
      },
    });
  };
  var cover_adjust = function (window_width) {
    if (window_width < 769) {
      $(".content__main__articles--item").each(function (i, item) {
        $(".article--cover", item).prependTo(
          $(".description__article-main", item)
        );
      });
    } else {
      $(".content__main__articles--item").each(function (i, item) {
        $(".description__article-main .article--cover", item).prependTo(item);
      });
    }
  };
  resizing(window_width);
  $(window).on("resize", function () {
    new_width = window.innerWidth;
    resizing(new_width, window_width);
    window_width = new_width;
  });
  $(".articles__selector > a").on("click", function () {
    $(".articles__selector .article--active").removeClass("article--active");
    $(this).toggleClass("article--active");
  });
  $(".show--hide").on("click", function () {
    var block = $(this).closest(".content__main__side--item"),
      type = $(this).attr("data-type");
    $("span", this).text(
      block.hasClass("open") ? "Ð¿Ð¾ÐºÐ°Ð·Ð°Ñ‚ÑŒ" : "ÑÐºÑ€Ñ‹Ñ‚ÑŒ"
    );
    if (type)
      $.cookie("a_hide" + type, block.hasClass("open") ? 1 : 0, {
        expires: 365,
        path: "/",
      });
    block.toggleClass("open");
  });
  $(".content__main__side--item .show--more").on("click", function () {
    $(this).parent().find(".wrapper__hidden").slideDown("fast");
    $(this).hide();
  });
  $(".content__main__book--item .show--more").on("click", function () {
    $(this).parent().parent().find(".wrapper__hidden").slideDown("fast");
    $(this).parent().hide();
  });
  $(".content__main__book--item--series-list .link__action--showall").on(
    "click",
    function () {
      $(this).parent().find(".s-hidden,.dots").slideToggle("fast");
      var text_item = $(
        ".content__main__book--item--series-list .link__action--showall span"
      );
      text_item.parent().find(".icon").toggleClass("icon-arrow-up");
      text_item.text(
        text_item.text() == "ÐŸÐ¾ÐºÐ°Ð·Ð°Ñ‚ÑŒ Ð²ÐµÑÑŒ ÑÐ¿Ð¸ÑÐ¾Ðº"
          ? "Ð¡Ð²ÐµÑ€Ð½ÑƒÑ‚ÑŒ ÑÐ¿Ð¸ÑÐ¾Ðº"
          : "ÐŸÐ¾ÐºÐ°Ð·Ð°Ñ‚ÑŒ Ð²ÐµÑÑŒ ÑÐ¿Ð¸ÑÐ¾Ðº"
      );
    }
  );
  $(".wrapper--history-menu").on("click", function (event) {
    event.stopPropagation();
    event.stopImmediatePropagation();
    event.preventDefault();
    $(this).toggleClass("open");
  });
  $(".link__action--chapter").on("click", function (event) {
    event.stopPropagation();
    event.stopImmediatePropagation();
    $(".global__popup--chapter").addClass("open");
    $(".global__popup--chapter")
      .parent()
      .find(".global__popup")
      .addClass("open");
    var offset = window_width < 769 ? 95 : 0;
    $(".global__popup--chapter .global__popup--content").scrollTo(
      $(".global__popup--chapter .chapter__current").get(0).offsetTop - offset,
      100
    );
    $("body").addClass("no-overflow");
    $("main").addClass("onfront");
  });
  $(".global__button--close,.auth-extra").on("click", function (event) {
    event.stopPropagation();
    event.stopImmediatePropagation();
    $("body").removeClass("no-overflow");
    $("main").removeClass("onfront");
    $(this).closest(".popup").find(".open").removeClass("open");
  });
  $(".global__popup--chapter,.global__popup--window").on(
    "click",
    function (event) {
      event.stopPropagation();
      event.stopImmediatePropagation();
    }
  );
  $(
    ".js-comment-form-locked,.layout--user-role-guest .ls-vote-item,.layout--user-role-guest .ls-favourite"
  ).on("click", function (e) {
    showPopupWindow(e, "global__popup--auth");
  });
  $(".content__main__articles--item-delete").on("click", function (e) {
    e.stopPropagation();
    e.stopImmediatePropagation();
    e.preventDefault();
    var item = $(this).closest(".content__main__articles--item");
    var gid = parseInt(item.attr("data-bid"));
    if (confirm("Ð£Ð´Ð°Ð»Ð¸Ñ‚ÑŒ ÐºÐ½Ð¸Ð³Ñƒ Ð¸Ð· Ð¸ÑÑ‚Ð¾Ñ€Ð¸Ð¸?")) {
      ls.ajax.load(
        aRouter["history"] + "ajax_setdelete",
        { gid: gid },
        function (result) {
          if (result.fstate) {
            item.addClass("hidden");
          }
        },
        { showProgress: true }
      );
    }
  });
  $(".ls-comment-form textarea").on("focus", function (e) {
    this.style.height = "auto";
    this.style.height = this.scrollHeight + "px";
    $(this).closest("form").addClass("focused");
    $(this)
      .closest("form")
      .find($(".js-comment-form-preview,.js-comment-form-spoiler"))
      .show();
  });
  $("textarea:not(.autocomplete)").on("input", function (e) {
    this.style.height = "auto";
    this.style.height = this.scrollHeight + "px";
  });
  $("form").on("submit", function () {
    $("input", $(this)).blur();
  });
  $(".menu__search input").val("");
  $(".menu__search").removeClass("active");
  $(".menu__nav .button-user").removeClass("hidden");
  $(".uSpoilerClosed").on("click", function () {
    $(this).children(".uSpoilerText").toggle();
  });
  $(".spoiler-title").on("click", function () {
    $(this).nextAll(".spoiler-body").toggle();
  });
  $(".js-history-complete").on("click touchstart", function (event) {
    event.stopPropagation();
    event.preventDefault();
    var book_bid = $(this).closest(".wrapper--history-menu").attr("data-bid");
    if (!book_bid) return false;
    ls.ajax.load(
      aRouter["history"] + "ajax_setcomplete",
      { gid: book_bid },
      function (result) {
        if (result.fstate) {
          setPercent(book_bid, 100);
          $(
            ".wrapper--history-menu[data-bid=" +
              book_bid +
              "] .js-history-complete"
          ).addClass("hidden");
          $(
            ".wrapper--history-menu[data-bid=" +
              book_bid +
              "] .js-history-delete"
          ).removeClass("hidden");
        }
      },
      { showProgress: false }
    );
  });
  $(".js-history-delete").on("click touchstart", function (event) {
    event.stopPropagation();
    event.preventDefault();
    var book_bid = $(this).closest(".wrapper--history-menu").attr("data-bid");
    if (!book_bid) return false;
    ls.ajax.load(
      aRouter["history"] + "ajax_setdelete",
      { gid: book_bid },
      function (result) {
        if (result.fstate) {
          setPercent(book_bid, 0);
          $(
            ".wrapper--history-menu[data-bid=" +
              book_bid +
              "] .js-history-complete"
          ).removeClass("hidden");
          $(
            ".wrapper--history-menu[data-bid=" +
              book_bid +
              "] .js-history-delete"
          ).addClass("hidden");
          $.removeCookie("a_pos_" + book_bid, { path: "/" });
        }
      },
      { showProgress: false }
    );
  });
  newCommentsFadeInit();
  $("#customPageForm").on("submit", function () {
    if (this.customPageId.value)
      pjax.loadUrl(this.action.replace("__page__", this.customPageId.value));
    return false;
  });
  ls.hook.run("ls_template_init_end", [], window);
};
var commentsInit = function () {
  var initOptions = {
    urls: {
      add: aRouter["blog"] + "ajaxaddcomment/",
      load: aRouter["blog"] + "ajaxresponsecomment/",
    },
    show_form: ls.registry.get("comment_show_form"),
    use_paging: ls.registry.get("comment_use_paging"),
  };
  $(".js-topic-comments-list").lsComments(initOptions);
  if ($("#comments").hasClass("comments-loaded"))
    $(".js-topic-comments").lsComments(initOptions);
  $(".js-scroll-to-comment").on("click", function (e) {
    e.preventDefault();
    window.history.replaceState(null, null, $(this).attr("href"));
    scrollToComment(
      "#comment" + $(this).closest(".js-comment").attr("data-id")
    );
  });
  $(".js-comment-reply-guest").on("click", function (event) {
    showPopupWindow(event, "global__popup--auth");
  });
};
var scrollToComment = function (commentId) {
  if (commentId.indexOf("comment") != -1) {
    var commentId = commentId.replace("?", "#");
    $("html,body").animate({ scrollTop: $(commentId).offset().top - 60 }, 400);
  }
};
var newCommentsFadeInit = function () {
  $(".ls-comment--new").on("click touchstart", function (event) {
    $(this).removeClass("ls-comment--new");
  });
};
var sortComments = function (type) {
  if (typeof type === "undefined" && $.cookie("a_commentsort") == null) return;
  var type = type || $.cookie("a_commentsort");
  $(".js-sort-comments").removeClass("comment--active");
  $(".js-comment-list,.js-comment-list .js-comment-wrapper").each(function () {
    $(this)
      .children(".js-comment-wrapper")
      .sort(function (a, b) {
        var pinA = $(a).attr("data-pin") == 1 ? 0 : 1;
        var pinB = $(b).attr("data-pin") == 1 ? 0 : 1;
        if (pinA != pinB) {
          return pinA - pinB;
        }
        if (type == 1) {
          return +a.dataset.id - +b.dataset.id;
        } else if (type == 2) {
          var ratingDifference = +b.dataset.rating - +a.dataset.rating;
          if (ratingDifference == 0) {
            return +a.dataset.id - +b.dataset.id;
          }
          return ratingDifference;
        } else if (type == 3) {
          return +b.dataset.id - +a.dataset.id;
        }
      })
      .appendTo($(this));
  });
  $(".js-sort-comments[data-type=" + type + "]").addClass("comment--active");
};
var isMobile = navigator.userAgent.match(
  /(iPad)|(iPhone)|(iPod)|(android)|(webOS)/i
);
var startTime = 0;
var moreSelectors = [
  "main",
  "title",
  ".ls-block-live-wrapper",
  ".header-title-text",
];
if (document.body.classList.contains("layout--user-role-admin"))
  moreSelectors.push(".ls-performance");
if (document.body.classList.contains("layout--user-role-user"))
  moreSelectors.push(".pj-update");
var pjax = new Pjax({
  elements: "a[href]:not(.no-pjax), form[action]:not(.no-pjax)",
  cacheBust: false,
  scrollRestoration: window.location.hash ? false : true,
  selectors: moreSelectors,
  switches: { main: Pjax.switches.innerHTML },
});
var playerShortcuts = function () {
  $("body").keydown(function (e) {
    if (
      $(e.target).is(":not(input, textarea)") &&
      (player[player_bid] || bo[player_bid])
    ) {
      switch (e.which) {
        case 32:
          e.preventDefault();
          if (player[player_bid]) {
            player[player_bid].paused
              ? player[player_bid].play()
              : player[player_bid].pause();
          } else if (bo[player_bid]) {
            bo[player_bid].getPlayerState() == "playing"
              ? bo[player_bid].pause()
              : bo[player_bid].play();
          }
          break;
        case 37:
          e.preventDefault();
          if (player[player_bid]) {
            playerRewind(player_bid);
          } else if (bo[player_bid]) {
            bo[player_bid].rw();
          }
          break;
        case 39:
          e.preventDefault();
          if (player[player_bid]) {
            playerForward(player_bid);
          } else if (bo[player_bid]) {
            bo[player_bid].ff();
          }
          break;
        default:
          return;
      }
    }
  });
};
var isInViewport = function (element) {
  let elementTop = element.offset().top;
  let elementBottom = elementTop + element.outerHeight();
  let viewportTop = $(window).scrollTop();
  let viewportBottom = viewportTop + $(window).height();
  return elementBottom > viewportTop && elementTop < viewportBottom;
};
jQuery(document).ready(function ($) {
  var whenContainerReady = function () {
    init_player_bookpage();
    initialize();
    var newLazyLoad = new LazyLoad({ elements_selector: ".lazy" });
  };
  whenContainerReady();
  if (document.body.classList.contains("layout--user-role-user"))
    $.cookie("a_is_auth", 1, { expires: 365, path: "/" });
  document.addEventListener("pjax:send", function () {
    NProgress.start();
    close_popups();
  });
  document.addEventListener("pjax:complete", function () {
    NProgress.done();
    if (window.ym)
      ym(22013362, "hit", window.location.href, { title: document.title });
    gtag("config", "G-77BK1YJVXT", { page_path: window.location.pathname });
  });
  document.addEventListener("pjax:success", whenContainerReady);
});
